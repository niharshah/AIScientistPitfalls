{
    "Name": "neural_symbolic_zero_shot_spr",
    "Title": "Zero-Shot Synthetic PolyRule Reasoning with Neural Symbolic Integration",
    "Short Hypothesis": "Integrating neural networks with symbolic reasoning frameworks enables zero-shot learning in Synthetic PolyRule Reasoning (SPR), allowing models to generalize to unseen rules without additional training.",
    "Related Work": "1. 'Large Language Models are Zero-Shot Reasoners' by Kojima et al. highlights the zero-shot reasoning capabilities of LLMs using Chain-of-Thought (CoT) prompting. 2. 'Knowledge-driven Data Construction for Zero-shot Evaluation in Commonsense Question Answering' by Ma et al. discusses a neuro-symbolic framework for zero-shot QA. 3. 'Relational reasoning and generalization using non-symbolic neural networks' by Geiger et al. shows that neural networks can learn abstract relational reasoning.",
    "Abstract": "This proposal aims to develop a novel algorithm that integrates neural networks with symbolic reasoning frameworks to achieve zero-shot learning in Synthetic PolyRule Reasoning (SPR). The key innovation is the use of a neural-symbolic model that can infer and apply new rules without additional training, allowing it to generalize to unseen tasks. We will evaluate the approach using the SPR_BENCH benchmark, focusing on its ability to surpass state-of-the-art performance in Shape-Weighted Accuracy (SWA) and Color-Weighted Accuracy (CWA) metrics. If successful, this approach could revolutionize automated reasoning systems by enabling them to adapt to new, complex rules without the need for retraining.",
    "Experiments": [
        "1. Model Design: Develop a neural-symbolic model that combines a neural network for feature extraction with a symbolic reasoning component for rule inference.",
        "2. Training: Train the model on a subset of SPR_BENCH with known rules and evaluate its performance on this training set.",
        "3. Zero-Shot Evaluation: Test the model on sequences governed by entirely new rules not seen during training. Choose only **one** evaluation metric either Shape-Weighted Accuracy (SWA) or Color-Weighted Accuracy (CWA) for performance comparison.",
        "4. Ablation Study: Conduct an ablation study to assess the contribution of the neural and symbolic components individually."
    ],
    "Risk Factors and Limitations": "1. Model Complexity: Integrating neural networks with symbolic reasoning frameworks could lead to increased model complexity, making training and inference more computationally intensive. 2. Rule Generalization: The model's ability to generalize to unseen rules is uncertain and may require careful design of the symbolic reasoning component. 3. Benchmark Limitations: The SPR_BENCH benchmark's predefined rules may not fully capture the diversity of real-world symbolic reasoning tasks, potentially limiting the generalizability of the results.",
    "Code": "\"\"\"\nSPR.py\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nUtility to load the SPR_BENCH benchmark datasets\nUsing HuggingFace\u2019s `datasets` library.\n\nDirectory layout expected\nSPR_BENCH/\n \u251c\u2500 train.csv   (20000 rows)\n \u251c\u2500 dev.csv     (5000 rows)\n \u2514\u2500 test.csv    (10000 rows)\n\nEach CSV has header:  id,sequence,label\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n$ pip install datasets   # once\n\"\"\"\nimport pathlib\nfrom typing import Dict\n\nfrom datasets import load_dataset, DatasetDict                                         # <- no pandas import\n\n\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    \"\"\"\n    Return a DatasetDict {'train':\u2026, 'dev':\u2026, 'test':\u2026} for one SPR ID folder.\n    \"\"\"\n    def _load(split_csv: str):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",           # treat csv as a single split\n            cache_dir=\".cache_dsets\" # optional; keeps HF cache tidy\n        )\n\n    dset = DatasetDict()\n    dset[\"train\"] = _load(\"train.csv\")\n    dset[\"dev\"]   = _load(\"dev.csv\")\n    dset[\"test\"]  = _load(\"test.csv\")\n    return dset\n\n\ndef count_shape_variety(sequence: str) -> int:\n    \"\"\"Count the number of unique shape types in the sequence\"\"\"\n    return len(set(token[0] for token in sequence.strip().split() if token))\n\ndef count_color_variety(sequence: str) -> int:\n    \"\"\"Count the number of unique color types in the sequence\"\"\"\n    return len(set(token[1] for token in sequence.strip().split() if len(token) > 1))\n\ndef shape_weighted_accuracy(sequences, y_true, y_pred):\n    \"\"\"Shape-Weighted Accuracy (SWA)\"\"\"\n    weights = [count_shape_variety(seq) for seq in sequences]\n    correct = [w if yt == yp else 0 for w, yt, yp in zip(weights, y_true, y_pred)]\n    return sum(correct) / sum(weights) if sum(weights) > 0 else 0.0\n\ndef color_weighted_accuracy(sequences, y_true, y_pred):\n    \"\"\"Color-Weighted Accuracy (CWA)\"\"\"\n    weights = [count_color_variety(seq) for seq in sequences]\n    correct = [w if yt == yp else 0 for w, yt, yp in zip(weights, y_true, y_pred)]\n    return sum(correct) / sum(weights) if sum(weights) > 0 else 0.0\n\n\ndef main():\n\n    ## Absolute path of the datasets\n    DATA_PATH = pathlib.Path('/home/zxl240011/AI-Scientist-v2/SPR_BENCH/')\n    spr_bench = load_spr_bench(DATA_PATH)\n\n    print(\"Benchmarks split:\", spr_bench.keys())\n\n    # Demo: show first example from SPR_BENCH\u2011train\n    ex = spr_bench[\"train\"][0]\n    print(\"\\nExample row:\")\n    print(ex)          \n\n\nif __name__ == \"__main__\":\n    main()\n"
}