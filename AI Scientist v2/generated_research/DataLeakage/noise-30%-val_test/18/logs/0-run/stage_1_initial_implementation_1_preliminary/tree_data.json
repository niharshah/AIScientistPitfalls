{"edges": [[2, 7], [2, 4], [2, 6], [2, 5]], "layout": [[0.0, 0.0], [0.2857142857142857, 0.0], [0.5714285714285714, 0.0], [0.8571428571428571, 0.0], [0.14285714285714285, 1.0], [0.42857142857142855, 1.0], [0.7142857142857143, 1.0], [1.0, 1.0]], "plan": ["We will treat each symbol sequence as a short \u201csentence\u201d, turn the characters\ninto integer tokens, pad them and feed them to a lightweight neural baseline.\nAfter loading the three splits with the provided utility (or auto-generating\nsynthetic data when the files are missing) we build a character vocabulary,\ntokenize every sequence and keep the maximum length for padding.  A small\nPyTorch Dataset / DataLoader pair handles batching and a custom collate function\nmoves everything to the chosen device.  The model is intentionally simple: an\nEmbedding layer followed by a bidirectional GRU; the final hidden state is mean-\npooled and passed through a linear layer for binary logits.  We train for a few\nepochs with Adam and cross-entropy, monitoring validation loss and Macro-F1\nafter every epoch.  All losses, metrics, predictions, and ground-truth labels\nare stored in the prescribed experiment_data dict and saved to\n\u201c./working/experiment_data.npy\u201d; the loss curve is plotted and saved as well.\nThe code follows all device-handling rules, prints the validation loss and\nMacro-F1 each epoch, and should finish well within 30 minutes on CPU or GPU.\nThis gives us a clean, reproducible baseline before experimenting with more\nadvanced architectures.", "We propose a straightforward character-level baseline: map every unique symbol\nin the SPR sequences to an integer, pad/truncate sequences to a fixed length,\nand train a small bidirectional GRU classifier (embedding\u2192BiGRU\u2192mean-\npool\u2192linear) using cross-entropy. We load the benchmark with the provided\nhelper, build the vocabulary from the training split only, and encode labels to\n0/1. Training proceeds for a handful of epochs with Adam, tracking validation\nloss and macro-F1 after each epoch; the best weights (by dev F1) are retained\nfor a final evaluation on the held-out test set. All metrics, losses,\npredictions, and ground-truth labels are stored in the required experiment_data\ndict and saved as a NumPy file, and we also plot and save a loss/F1 curve. This\nsimple neural baseline establishes a solid starting point onto which more\nsophisticated reasoning models can later be layered.", "Our first baseline treats each symbol sequence as a string of characters, builds\na simple vocabulary, and feeds the resulting integer sequence into a lightweight\nRNN classifier (Embedding \u2192 single-layer Bi-LSTM \u2192 max-pool \u2192 Linear).  Padding\nis handled batch-wise so the network can be trained efficiently on GPU when\navailable.  We load the benchmark splits with the helper in SPR.py; if the\ndirectory is missing, we synthesise a tiny random dataset so the script always\nruns.  Training proceeds for a handful of epochs while tracking cross-entropy\nloss and the required Macro-F1 on the dev set after every epoch.  Both metrics,\ntogether with per-epoch predictions and ground truth, are stored in a structured\nexperiment_data dictionary and saved as a NumPy file in ./working.  The model,\ndata, and every batch tensor are consistently moved to the correct device.  At\nthe end, the script prints the best dev Macro-F1 and evaluates once on the\nhidden test split, giving us a clean, reproducible baseline to improve later.", "We start with a straightforward character-level baseline: every symbol is mapped\nto an index and fed to a single-layer GRU whose last hidden state is passed\nthrough a linear layer for binary classification.  Sequences are padded\ndynamically per batch, and the vocabulary is built only from the training split\nto avoid leakage.  We train the network for a handful of epochs with Adam and\ncross-entropy, evaluating after each epoch on the dev set and reporting\nvalidation loss together with the Macro-F1 metric (our target score).  All\ntensors and the model are moved to GPU when available, and a small batch size\nkeeps memory usage modest.  Throughout training we log losses and scores into an\nexperiment_data dictionary and finally save it as a NumPy file in the working\ndirectory.  This gives a solid, easily-extendable baseline whose code follows\nthe required structure, uses the provided loader, and runs in well under the\ntime budget.  Future work can explore deeper encoders, attention, data\naugmentation, or rule-aware architectures, but this script establishes an\nessential reference point.", "Seed node", "Seed node", "Seed node", "Aggregate results from multiple seeds"], "code": ["import os, random, string, pathlib, math, time, json, numpy as np, torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.metrics import f1_score\nfrom typing import List, Dict\nfrom datasets import load_dataset, DatasetDict\nimport matplotlib.pyplot as plt\n\n# mandatory working directory\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# mandatory device printout\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# ---------------------------------------------------------------------------\n# 1. DATA LOADING  (use provided helper, else fallback to synthetic)\n# ---------------------------------------------------------------------------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(split_csv: str):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    dset = DatasetDict()\n    dset[\"train\"] = _load(\"train.csv\")\n    dset[\"dev\"] = _load(\"dev.csv\")\n    dset[\"test\"] = _load(\"test.csv\")\n    return dset\n\n\ndef generate_synthetic(num: int) -> Dict[str, List]:\n    alphabet = list(\"ABCDEFGH\")\n    data = {\"sequence\": [], \"label\": []}\n    for _ in range(num):\n        length = random.randint(5, 20)\n        seq = \"\".join(random.choices(alphabet, k=length))\n        # simple rule: acceptable if count('A') is even\n        label = 1 if seq.count(\"A\") % 2 == 0 else 0\n        data[\"sequence\"].append(seq)\n        data[\"label\"].append(label)\n    return data\n\n\ndef get_dataset() -> DatasetDict:\n    default_path = pathlib.Path(\"./SPR_BENCH\")\n    try:\n        if (default_path / \"train.csv\").exists():\n            print(\"Loading local SPR_BENCH dataset \u2026\")\n            return load_spr_bench(default_path)\n        else:\n            raise FileNotFoundError\n    except Exception as e:\n        print(\"SPR_BENCH not found, falling back to synthetic data.\")\n        synth = DatasetDict()\n        synth[\"train\"] = load_dataset(\n            \"json\", data_files={\"train\": [generate_synthetic(20000)]}, split=\"train\"\n        )\n        synth[\"dev\"] = load_dataset(\n            \"json\", data_files={\"dev\": [generate_synthetic(5000)]}, split=\"train\"\n        )\n        synth[\"test\"] = load_dataset(\n            \"json\", data_files={\"test\": [generate_synthetic(10000)]}, split=\"train\"\n        )\n        return synth\n\n\ndsets = get_dataset()\nprint({k: len(v) for k, v in dsets.items()})\n\n# ---------------------------------------------------------------------------\n# 2. TOKENISATION\n# ---------------------------------------------------------------------------\n# build vocabulary from training sequences\nvocab_chars = set()\nfor seq in dsets[\"train\"][\"sequence\"]:\n    vocab_chars.update(seq)\nvocab = {c: i + 1 for i, c in enumerate(sorted(vocab_chars))}  # 0 reserved for PAD\nvocab[\"<PAD>\"] = 0\nvocab_size = len(vocab)\nprint(f\"Vocab size: {vocab_size}\")\n\n\ndef encode(seq: str) -> List[int]:\n    return [vocab[c] for c in seq]\n\n\nmax_len = max(len(seq) for seq in dsets[\"train\"][\"sequence\"])\nprint(f\"Max sequence length: {max_len}\")\n\n\n# ---------------------------------------------------------------------------\n# 3. DATASET & DATALOADER\n# ---------------------------------------------------------------------------\nclass SPRTorchDataset(Dataset):\n    def __init__(self, hf_split):\n        self.seq = hf_split[\"sequence\"]\n        self.lab = hf_split[\"label\"]\n\n    def __len__(self):\n        return len(self.seq)\n\n    def __getitem__(self, idx):\n        return {\n            \"input_ids\": torch.tensor(encode(self.seq[idx]), dtype=torch.long),\n            \"label\": torch.tensor(self.lab[idx], dtype=torch.long),\n        }\n\n\ndef collate(batch):\n    # pad sequences\n    lengths = [len(item[\"input_ids\"]) for item in batch]\n    max_l = max(lengths)\n    padded = torch.zeros(len(batch), max_l, dtype=torch.long)\n    for i, item in enumerate(batch):\n        padded[i, : lengths[i]] = item[\"input_ids\"]\n    labels = torch.stack([item[\"label\"] for item in batch])\n    out = {\"input_ids\": padded.to(device), \"label\": labels.to(device)}\n    return out\n\n\nbatch_size = 256\ntrain_loader = DataLoader(\n    SPRTorchDataset(dsets[\"train\"]),\n    batch_size=batch_size,\n    shuffle=True,\n    collate_fn=collate,\n)\ndev_loader = DataLoader(\n    SPRTorchDataset(dsets[\"dev\"]),\n    batch_size=batch_size,\n    shuffle=False,\n    collate_fn=collate,\n)\ntest_loader = DataLoader(\n    SPRTorchDataset(dsets[\"test\"]),\n    batch_size=batch_size,\n    shuffle=False,\n    collate_fn=collate,\n)\n\n\n# ---------------------------------------------------------------------------\n# 4. MODEL\n# ---------------------------------------------------------------------------\nclass CharGRUClassifier(nn.Module):\n    def __init__(self, vocab_size, emb_dim=32, hidden_dim=64, num_classes=2):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_size, emb_dim, padding_idx=0)\n        self.gru = nn.GRU(emb_dim, hidden_dim, batch_first=True, bidirectional=True)\n        self.fc = nn.Linear(hidden_dim * 2, num_classes)\n\n    def forward(self, ids):\n        emb = self.emb(ids)  # (B,L,E)\n        _, h = self.gru(emb)  # h: (2,B,H)\n        h = torch.cat([h[0], h[1]], dim=-1)  # (B,2H)\n        logits = self.fc(h)\n        return logits\n\n\nmodel = CharGRUClassifier(vocab_size=vocab_size).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n\n\n# ---------------------------------------------------------------------------\n# 5. TRAIN / EVAL UTILITIES\n# ---------------------------------------------------------------------------\ndef run_epoch(data_loader, train: bool):\n    if train:\n        model.train()\n    else:\n        model.eval()\n    all_preds, all_labels, losses = [], [], []\n    for batch in data_loader:\n        logits = model(batch[\"input_ids\"])\n        loss = criterion(logits, batch[\"label\"])\n        if train:\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n        losses.append(loss.item())\n        preds = logits.argmax(dim=1).detach().cpu().numpy()\n        labs = batch[\"label\"].detach().cpu().numpy()\n        all_preds.extend(preds)\n        all_labels.extend(labs)\n    avg_loss = np.mean(losses)\n    macro_f1 = f1_score(all_labels, all_preds, average=\"macro\")\n    return avg_loss, macro_f1, all_preds, all_labels\n\n\n# ---------------------------------------------------------------------------\n# 6. EXPERIMENT LOOP\n# ---------------------------------------------------------------------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train_f1\": [], \"val_f1\": []},\n        \"losses\": {\"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n        \"epochs\": [],\n    }\n}\n\nnum_epochs = 5\nfor epoch in range(1, num_epochs + 1):\n    train_loss, train_f1, _, _ = run_epoch(train_loader, train=True)\n    val_loss, val_f1, val_preds, val_gts = run_epoch(dev_loader, train=False)\n\n    experiment_data[\"SPR_BENCH\"][\"epochs\"].append(epoch)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(train_loss)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(val_loss)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train_f1\"].append(train_f1)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val_f1\"].append(val_f1)\n    experiment_data[\"SPR_BENCH\"][\"predictions\"].append(val_preds)\n    experiment_data[\"SPR_BENCH\"][\"ground_truth\"].append(val_gts)\n\n    print(f\"Epoch {epoch}: validation_loss = {val_loss:.4f}, Macro_F1 = {val_f1:.4f}\")\n\n# ---------------------------------------------------------------------------\n# 7. TEST EVALUATION\n# ---------------------------------------------------------------------------\ntest_loss, test_f1, test_preds, test_gts = run_epoch(test_loader, train=False)\nprint(f\"\\nTest Macro F1: {test_f1:.4f}\")\nexperiment_data[\"SPR_BENCH\"][\"test_f1\"] = test_f1\nexperiment_data[\"SPR_BENCH\"][\"test_predictions\"] = test_preds\nexperiment_data[\"SPR_BENCH\"][\"test_ground_truth\"] = test_gts\n\n# ---------------------------------------------------------------------------\n# 8. SAVE METRICS & PLOT\n# ---------------------------------------------------------------------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\n\n# Plot training and validation loss\nplt.figure()\nplt.plot(\n    experiment_data[\"SPR_BENCH\"][\"epochs\"],\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"],\n    label=\"train_loss\",\n)\nplt.plot(\n    experiment_data[\"SPR_BENCH\"][\"epochs\"],\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"],\n    label=\"val_loss\",\n)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.title(\"Loss Curve SPR_BENCH\")\nplt.savefig(os.path.join(working_dir, \"loss_curve_spr.png\"))\nplt.close()\n", "import os, pathlib, time, json, math, random, numpy as np, torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom datasets import load_dataset, DatasetDict\nfrom sklearn.metrics import f1_score\nimport matplotlib.pyplot as plt\n\n# ------------------------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# ------------------------------------------------------------------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(split_csv: str):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    d[\"train\"] = _load(\"train.csv\")\n    d[\"dev\"] = _load(\"dev.csv\")\n    d[\"test\"] = _load(\"test.csv\")\n    return d\n\n\nDATA_PATH = pathlib.Path(\"./SPR_BENCH\")  # adjust if necessary\nspr = load_spr_bench(DATA_PATH)\nprint({k: len(v) for k, v in spr.items()})\n\n\n# --------------------- Vocabulary & label mapping -----------------\ndef build_vocab(dataset):\n    chars = set()\n    for s in dataset[\"sequence\"]:\n        chars.update(list(s))\n    vocab = {c: i + 1 for i, c in enumerate(sorted(chars))}  # 0 is PAD\n    return vocab\n\n\nvocab = build_vocab(spr[\"train\"])\npad_idx = 0\nprint(f\"Vocab size: {len(vocab)}\")\n\nlabel_set = sorted(set(spr[\"train\"][\"label\"]))\nlabel2idx = {lbl: i for i, lbl in enumerate(label_set)}\nprint(f\"Label mapping: {label2idx}\")\n\nMAX_LEN = 120  # truncate/pad length\n\n\ndef encode_seq(seq: str):\n    ids = [vocab.get(c, 0) for c in list(seq)][:MAX_LEN]\n    if len(ids) < MAX_LEN:\n        ids.extend([pad_idx] * (MAX_LEN - len(ids)))\n    return ids\n\n\nfor split in [\"train\", \"dev\", \"test\"]:\n    spr[split] = spr[split].map(\n        lambda ex: {\n            \"input_ids\": encode_seq(ex[\"sequence\"]),\n            \"label_idx\": label2idx[ex[\"label\"]],\n        }\n    )\n\n\n# --------------------------- PyTorch data --------------------------\nclass SPRDataset(Dataset):\n    def __init__(self, dset):\n        self.ids = dset[\"input_ids\"]\n        self.labels = dset[\"label_idx\"]\n\n    def __len__(self):\n        return len(self.ids)\n\n    def __getitem__(self, idx):\n        return torch.tensor(self.ids[idx], dtype=torch.long), torch.tensor(\n            self.labels[idx], dtype=torch.long\n        )\n\n\ntrain_ds, dev_ds, test_ds = (\n    SPRDataset(spr[\"train\"]),\n    SPRDataset(spr[\"dev\"]),\n    SPRDataset(spr[\"test\"]),\n)\n\nBATCH_SIZE = 256\n\n\ndef collate(batch):\n    x, y = zip(*batch)\n    return torch.stack(x).to(device), torch.stack(y).to(device)\n\n\ntrain_loader = DataLoader(\n    train_ds, batch_size=BATCH_SIZE, shuffle=True, collate_fn=collate\n)\ndev_loader = DataLoader(\n    dev_ds, batch_size=BATCH_SIZE, shuffle=False, collate_fn=collate\n)\ntest_loader = DataLoader(\n    test_ds, batch_size=BATCH_SIZE, shuffle=False, collate_fn=collate\n)\n\n\n# --------------------------- Model --------------------------------\nclass BiGRUClassifier(nn.Module):\n    def __init__(self, vocab_size, emb_dim=64, hid_dim=128, n_classes=2, pad_idx=0):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_size + 1, emb_dim, padding_idx=pad_idx)\n        self.gru = nn.GRU(emb_dim, hid_dim, batch_first=True, bidirectional=True)\n        self.fc = nn.Linear(hid_dim * 2, n_classes)\n\n    def forward(self, x):\n        emb = self.emb(x)\n        out, _ = self.gru(emb)\n        pooled = out.mean(dim=1)\n        return self.fc(pooled)\n\n\nmodel = BiGRUClassifier(len(vocab), n_classes=len(label_set), pad_idx=pad_idx).to(\n    device\n)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n\n# ----------------------- Training loop ----------------------------\nNUM_EPOCHS = 5\nexperiment_data = {\n    \"spr_bench\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n}\nbest_f1, best_state = 0, None\n\n\ndef evaluate(loader):\n    model.eval()\n    total_loss, preds, gts = 0, [], []\n    with torch.no_grad():\n        for xb, yb in loader:\n            logits = model(xb)\n            loss = criterion(logits, yb)\n            total_loss += loss.item() * len(xb)\n            preds.extend(logits.argmax(-1).cpu().tolist())\n            gts.extend(yb.cpu().tolist())\n    avg_loss = total_loss / len(loader.dataset)\n    macro_f1 = f1_score(gts, preds, average=\"macro\")\n    return avg_loss, macro_f1, preds, gts\n\n\nfor epoch in range(1, NUM_EPOCHS + 1):\n    model.train()\n    epoch_loss = 0\n    for xb, yb in train_loader:\n        optimizer.zero_grad()\n        logits = model(xb)\n        loss = criterion(logits, yb)\n        loss.backward()\n        optimizer.step()\n        epoch_loss += loss.item() * len(xb)\n    train_loss = epoch_loss / len(train_loader.dataset)\n    _, train_f1, _, _ = evaluate(train_loader)\n    val_loss, val_f1, _, _ = evaluate(dev_loader)\n\n    experiment_data[\"spr_bench\"][\"losses\"][\"train\"].append(train_loss)\n    experiment_data[\"spr_bench\"][\"losses\"][\"val\"].append(val_loss)\n    experiment_data[\"spr_bench\"][\"metrics\"][\"train\"].append(train_f1)\n    experiment_data[\"spr_bench\"][\"metrics\"][\"val\"].append(val_f1)\n\n    print(\n        f\"Epoch {epoch}: train_loss={train_loss:.4f}, val_loss={val_loss:.4f}, val_macroF1={val_f1:.4f}\"\n    )\n    if val_f1 > best_f1:\n        best_f1 = val_f1\n        best_state = model.state_dict()\n\n# ------------------- Test evaluation with best --------------------\nmodel.load_state_dict(best_state)\ntest_loss, test_f1, test_preds, test_gts = evaluate(test_loader)\nprint(f\"Test   : loss={test_loss:.4f}, macroF1={test_f1:.4f}\")\n\nexperiment_data[\"spr_bench\"][\"predictions\"] = test_preds\nexperiment_data[\"spr_bench\"][\"ground_truth\"] = test_gts\n\n# ---------------------- Save artifacts ----------------------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\n\n# plot loss/f1 curves\nepochs = list(range(1, NUM_EPOCHS + 1))\nplt.figure()\nplt.plot(epochs, experiment_data[\"spr_bench\"][\"losses\"][\"train\"], label=\"train_loss\")\nplt.plot(epochs, experiment_data[\"spr_bench\"][\"losses\"][\"val\"], label=\"val_loss\")\nplt.legend()\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Loss Curves\")\nplt.savefig(os.path.join(working_dir, \"loss_curve.png\"))\n\nplt.figure()\nplt.plot(\n    epochs, experiment_data[\"spr_bench\"][\"metrics\"][\"train\"], label=\"train_macroF1\"\n)\nplt.plot(epochs, experiment_data[\"spr_bench\"][\"metrics\"][\"val\"], label=\"val_macroF1\")\nplt.legend()\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Macro F1\")\nplt.title(\"F1 Curves\")\nplt.savefig(os.path.join(working_dir, \"f1_curve.png\"))\n", "import os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\nimport pathlib, random, string, time, numpy as np, torch, torch.nn as nn\nfrom torch.utils.data import DataLoader\nfrom sklearn.metrics import f1_score\n\n# --------------- device handling ------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# --------------- load SPR_BENCH -------------------\ndef load_spr_bench(root: pathlib.Path):\n    from datasets import load_dataset, DatasetDict\n\n    def _load(csv_name):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / csv_name),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    d[\"train\"] = _load(\"train.csv\")\n    d[\"dev\"] = _load(\"dev.csv\")\n    d[\"test\"] = _load(\"test.csv\")\n    return d\n\n\ndata_path = pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH/\")\nif data_path.exists():\n    dsets = load_spr_bench(data_path)\nelse:\n    # fallback synthetic data (very small, just to guarantee runnable script)\n    from datasets import Dataset, DatasetDict\n\n    def synth_split(n):\n        seqs, labels = [], []\n        for _ in range(n):\n            L = random.randint(5, 15)\n            seq = \"\".join(\n                random.choices(list(string.ascii_lowercase) + [\"#\", \"@\", \"&\"], k=L)\n            )\n            lbl = int(seq.count(\"#\") % 2 == 0)  # arbitrary rule\n            seqs.append(seq)\n            labels.append(lbl)\n        return Dataset.from_dict(\n            {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n        )\n\n    dsets = DatasetDict()\n    dsets[\"train\"] = synth_split(512)\n    dsets[\"dev\"] = synth_split(128)\n    dsets[\"test\"] = synth_split(128)\nprint({k: len(v) for k, v in dsets.items()})\n\n# --------------- vocab & encoding -----------------\nPAD, UNK = \"<pad>\", \"<unk>\"\nvocab = {PAD: 0, UNK: 1}\nfor seq in dsets[\"train\"][\"sequence\"]:\n    for ch in seq:\n        if ch not in vocab:\n            vocab[ch] = len(vocab)\nvocab_size = len(vocab)\n\n\ndef encode(seq):\n    return [vocab.get(ch, vocab[UNK]) for ch in seq]\n\n\nfor split in dsets:\n    dsets[split] = dsets[split].map(\n        lambda ex: {\"input_ids\": encode(ex[\"sequence\"])}, remove_columns=[\"sequence\"]\n    )\n\n\n# --------------- Dataset / Dataloader -------------\ndef collate(batch):\n    ids = [b[\"input_ids\"] for b in batch]\n    labels = torch.tensor([b[\"label\"] for b in batch], dtype=torch.long)\n    max_len = max(len(x) for x in ids)\n    padded = torch.full((len(ids), max_len), vocab[PAD], dtype=torch.long)\n    for i, seq in enumerate(ids):\n        padded[i, : len(seq)] = torch.tensor(seq, dtype=torch.long)\n    return {\"input_ids\": padded, \"labels\": labels}\n\n\nbatch_size = 128\ntrain_loader = DataLoader(\n    dsets[\"train\"], batch_size=batch_size, shuffle=True, collate_fn=collate\n)\ndev_loader = DataLoader(\n    dsets[\"dev\"], batch_size=batch_size, shuffle=False, collate_fn=collate\n)\ntest_loader = DataLoader(\n    dsets[\"test\"], batch_size=batch_size, shuffle=False, collate_fn=collate\n)\n\n\n# --------------- Model ----------------------------\nclass SPRClassifier(nn.Module):\n    def __init__(self, vocab_size, embed_dim=64, hidden=128):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_size, embed_dim, padding_idx=0)\n        self.lstm = nn.LSTM(embed_dim, hidden, batch_first=True, bidirectional=True)\n        self.fc = nn.Linear(hidden * 2, 2)\n\n    def forward(self, x):\n        em = self.emb(x)\n        packed_out, _ = self.lstm(em)\n        # simple max-pool over time\n        pooled, _ = torch.max(packed_out, dim=1)\n        return self.fc(pooled)\n\n\nmodel = SPRClassifier(vocab_size).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n\n# --------------- experiment_data dict -------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n        \"epochs\": [],\n    }\n}\n\n# --------------- training loop --------------------\nepochs = 5\nbest_f1 = 0.0\nfor epoch in range(1, epochs + 1):\n    model.train()\n    train_losses, train_preds, train_gts = [], [], []\n    for batch in train_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        optimizer.zero_grad()\n        logits = model(batch[\"input_ids\"])\n        loss = criterion(logits, batch[\"labels\"])\n        loss.backward()\n        optimizer.step()\n        train_losses.append(loss.item())\n        train_preds.extend(logits.argmax(1).cpu().numpy())\n        train_gts.extend(batch[\"labels\"].cpu().numpy())\n    train_f1 = f1_score(train_gts, train_preds, average=\"macro\")\n    # ---- eval on dev ----\n    model.eval()\n    dev_losses, dev_preds, dev_gts = [], [], []\n    with torch.no_grad():\n        for batch in dev_loader:\n            batch = {\n                k: v.to(device) if isinstance(v, torch.Tensor) else v\n                for k, v in batch.items()\n            }\n            logits = model(batch[\"input_ids\"])\n            loss = criterion(logits, batch[\"labels\"])\n            dev_losses.append(loss.item())\n            dev_preds.extend(logits.argmax(1).cpu().numpy())\n            dev_gts.extend(batch[\"labels\"].cpu().numpy())\n    dev_f1 = f1_score(dev_gts, dev_preds, average=\"macro\")\n    print(\n        f\"Epoch {epoch}: train_loss={np.mean(train_losses):.4f}, val_loss={np.mean(dev_losses):.4f}, val_macroF1={dev_f1:.4f}\"\n    )\n    # store experiment data\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train\"].append(train_f1)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append(dev_f1)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(np.mean(train_losses))\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(np.mean(dev_losses))\n    experiment_data[\"SPR_BENCH\"][\"epochs\"].append(epoch)\n    # save best preds\n    if dev_f1 > best_f1:\n        best_f1 = dev_f1\n        experiment_data[\"SPR_BENCH\"][\"predictions\"] = dev_preds\n        experiment_data[\"SPR_BENCH\"][\"ground_truth\"] = dev_gts\n\n# --------------- final test evaluation ------------\nmodel.eval()\ntest_preds, test_gts = [], []\nwith torch.no_grad():\n    for batch in test_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        logits = model(batch[\"input_ids\"])\n        test_preds.extend(logits.argmax(1).cpu().numpy())\n        test_gts.extend(batch[\"labels\"].cpu().numpy())\ntest_f1 = f1_score(test_gts, test_preds, average=\"macro\")\nprint(f\"Best Dev Macro-F1 = {best_f1:.4f} | Test Macro-F1 = {test_f1:.4f}\")\n\n# --------------- save experiment data -------------\nnp.save(\n    os.path.join(working_dir, \"experiment_data.npy\"), experiment_data, allow_pickle=True\n)\n", "import os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\nimport pathlib\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.metrics import f1_score\nfrom datasets import load_dataset, DatasetDict\n\n# --------------------------------------------------------------------------------\n# Device handling (mandatory)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# --------------------------------------------------------------------------------\n# ----------------------- Dataset loading utility (from prompt) -------------------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(split_csv: str):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    dset = DatasetDict()\n    dset[\"train\"] = _load(\"train.csv\")\n    dset[\"dev\"] = _load(\"dev.csv\")\n    dset[\"test\"] = _load(\"test.csv\")\n    return dset\n\n\n# --------------------------------------------------------------------------------\n# Locate data\ndata_root = pathlib.Path(os.getenv(\"SPR_DATA_PATH\", \"./SPR_BENCH\"))\nspr = load_spr_bench(data_root)\nprint({k: len(v) for k, v in spr.items()})\n\n# --------------------------- Vocabulary & Encoding ------------------------------\nPAD = \"<pad>\"\n\n\ndef build_vocab(dataset):\n    chars = set()\n    for s in dataset[\"sequence\"]:\n        chars.update(list(s))\n    idx2tok = [PAD] + sorted(chars)\n    tok2idx = {t: i for i, t in enumerate(idx2tok)}\n    return tok2idx, idx2tok\n\n\ntok2idx, idx2tok = build_vocab(spr[\"train\"])\npad_idx = tok2idx[PAD]\nvocab_size = len(idx2tok)\nprint(f\"Vocab size: {vocab_size}\")\n\n\ndef encode(seq):\n    return [tok2idx[c] for c in seq]\n\n\ndef label_to_int(lbl):\n    # works for {0,1} or {acceptable,unacceptable}\n    if isinstance(lbl, (int, np.integer)):\n        return int(lbl)\n    if lbl in (\"acceptable\", \"1\", \"True\", \"true\"):\n        return 1\n    return 0\n\n\n# ---------------------------- Dataset & Loader ----------------------------------\nclass SPRTorchDataset(Dataset):\n    def __init__(self, hf_split):\n        self.seq = hf_split[\"sequence\"]\n        self.labels = hf_split[\"label\"]\n\n    def __len__(self):\n        return len(self.seq)\n\n    def __getitem__(self, idx):\n        return {\n            \"input\": torch.tensor(encode(self.seq[idx]), dtype=torch.long),\n            \"label\": torch.tensor(label_to_int(self.labels[idx]), dtype=torch.long),\n        }\n\n\ndef collate(batch):\n    seqs = [b[\"input\"] for b in batch]\n    labels = torch.stack([b[\"label\"] for b in batch])\n    lengths = torch.tensor([len(s) for s in seqs])\n    max_len = lengths.max()\n    padded = torch.full((len(batch), max_len), pad_idx, dtype=torch.long)\n    for i, s in enumerate(seqs):\n        padded[i, : len(s)] = s\n    return {\"input\": padded, \"lengths\": lengths, \"label\": labels}\n\n\nbatch_size = 128\ntrain_loader = DataLoader(\n    SPRTorchDataset(spr[\"train\"]),\n    batch_size=batch_size,\n    shuffle=True,\n    collate_fn=collate,\n)\ndev_loader = DataLoader(\n    SPRTorchDataset(spr[\"dev\"]),\n    batch_size=batch_size,\n    shuffle=False,\n    collate_fn=collate,\n)\ntest_loader = DataLoader(\n    SPRTorchDataset(spr[\"test\"]),\n    batch_size=batch_size,\n    shuffle=False,\n    collate_fn=collate,\n)\n\n\n# ------------------------------- Model ------------------------------------------\nclass CharGRU(nn.Module):\n    def __init__(self, vocab, emb_dim=32, hidden=64):\n        super().__init__()\n        self.emb = nn.Embedding(vocab, emb_dim, padding_idx=pad_idx)\n        self.gru = nn.GRU(emb_dim, hidden, batch_first=True)\n        self.fc = nn.Linear(hidden, 2)\n\n    def forward(self, x, lengths):\n        emb = self.emb(x)\n        packed = nn.utils.rnn.pack_padded_sequence(\n            emb, lengths.cpu(), batch_first=True, enforce_sorted=False\n        )\n        _, h = self.gru(packed)\n        logits = self.fc(h[-1])\n        return logits\n\n\nmodel = CharGRU(vocab_size).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n\n\n# ---------------------------- Training utils ------------------------------------\ndef run_epoch(loader, train=True):\n    if train:\n        model.train()\n    else:\n        model.eval()\n    total_loss, all_preds, all_labels = 0.0, [], []\n    for batch in loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        logits = model(batch[\"input\"], batch[\"lengths\"])\n        loss = criterion(logits, batch[\"label\"])\n        if train:\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n        total_loss += loss.item() * batch[\"label\"].size(0)\n        preds = torch.argmax(logits, dim=-1).cpu().numpy()\n        all_preds.extend(preds)\n        all_labels.extend(batch[\"label\"].cpu().numpy())\n    avg_loss = total_loss / len(loader.dataset)\n    f1 = f1_score(all_labels, all_preds, average=\"macro\")\n    return avg_loss, f1, np.array(all_preds), np.array(all_labels)\n\n\n# ------------------------ Experiment data dict ----------------------------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train_f1\": [], \"dev_f1\": []},\n        \"losses\": {\"train\": [], \"dev\": []},\n        \"predictions\": {\"dev\": [], \"test\": []},\n        \"ground_truth\": {\"dev\": [], \"test\": []},\n    }\n}\n# -------------------------------- Training loop ---------------------------------\nepochs = 5\nfor epoch in range(1, epochs + 1):\n    tr_loss, tr_f1, _, _ = run_epoch(train_loader, train=True)\n    dv_loss, dv_f1, dv_pred, dv_gt = run_epoch(dev_loader, train=False)\n\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train_f1\"].append((epoch, tr_f1))\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"dev_f1\"].append((epoch, dv_f1))\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append((epoch, tr_loss))\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"dev\"].append((epoch, dv_loss))\n    experiment_data[\"SPR_BENCH\"][\"predictions\"][\"dev\"] = dv_pred\n    experiment_data[\"SPR_BENCH\"][\"ground_truth\"][\"dev\"] = dv_gt\n\n    print(\n        f\"Epoch {epoch}: train_loss={tr_loss:.4f}  dev_loss={dv_loss:.4f}  dev_macroF1={dv_f1:.4f}\"\n    )\n\n# -------------------------------- Test evaluation -------------------------------\ntest_loss, _, ts_pred, ts_gt = run_epoch(test_loader, train=False)\nexperiment_data[\"SPR_BENCH\"][\"predictions\"][\"test\"] = ts_pred\nexperiment_data[\"SPR_BENCH\"][\"ground_truth\"][\"test\"] = ts_gt\nprint(f\"Test loss: {test_loss:.4f}\")\n\n# ------------------------------- Save metrics -----------------------------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\n", "# Set random seed\nimport random\nimport numpy as np\nimport torch\n\nseed = 0\nrandom.seed(seed)\nnp.random.seed(seed)\ntorch.manual_seed(seed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed(seed)\n\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\nimport pathlib, random, string, time, numpy as np, torch, torch.nn as nn\nfrom torch.utils.data import DataLoader\nfrom sklearn.metrics import f1_score\n\n# --------------- device handling ------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# --------------- load SPR_BENCH -------------------\ndef load_spr_bench(root: pathlib.Path):\n    from datasets import load_dataset, DatasetDict\n\n    def _load(csv_name):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / csv_name),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    d[\"train\"] = _load(\"train.csv\")\n    d[\"dev\"] = _load(\"dev.csv\")\n    d[\"test\"] = _load(\"test.csv\")\n    return d\n\n\ndata_path = pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH/\")\nif data_path.exists():\n    dsets = load_spr_bench(data_path)\nelse:\n    # fallback synthetic data (very small, just to guarantee runnable script)\n    from datasets import Dataset, DatasetDict\n\n    def synth_split(n):\n        seqs, labels = [], []\n        for _ in range(n):\n            L = random.randint(5, 15)\n            seq = \"\".join(\n                random.choices(list(string.ascii_lowercase) + [\"#\", \"@\", \"&\"], k=L)\n            )\n            lbl = int(seq.count(\"#\") % 2 == 0)  # arbitrary rule\n            seqs.append(seq)\n            labels.append(lbl)\n        return Dataset.from_dict(\n            {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n        )\n\n    dsets = DatasetDict()\n    dsets[\"train\"] = synth_split(512)\n    dsets[\"dev\"] = synth_split(128)\n    dsets[\"test\"] = synth_split(128)\nprint({k: len(v) for k, v in dsets.items()})\n\n# --------------- vocab & encoding -----------------\nPAD, UNK = \"<pad>\", \"<unk>\"\nvocab = {PAD: 0, UNK: 1}\nfor seq in dsets[\"train\"][\"sequence\"]:\n    for ch in seq:\n        if ch not in vocab:\n            vocab[ch] = len(vocab)\nvocab_size = len(vocab)\n\n\ndef encode(seq):\n    return [vocab.get(ch, vocab[UNK]) for ch in seq]\n\n\nfor split in dsets:\n    dsets[split] = dsets[split].map(\n        lambda ex: {\"input_ids\": encode(ex[\"sequence\"])}, remove_columns=[\"sequence\"]\n    )\n\n\n# --------------- Dataset / Dataloader -------------\ndef collate(batch):\n    ids = [b[\"input_ids\"] for b in batch]\n    labels = torch.tensor([b[\"label\"] for b in batch], dtype=torch.long)\n    max_len = max(len(x) for x in ids)\n    padded = torch.full((len(ids), max_len), vocab[PAD], dtype=torch.long)\n    for i, seq in enumerate(ids):\n        padded[i, : len(seq)] = torch.tensor(seq, dtype=torch.long)\n    return {\"input_ids\": padded, \"labels\": labels}\n\n\nbatch_size = 128\ntrain_loader = DataLoader(\n    dsets[\"train\"], batch_size=batch_size, shuffle=True, collate_fn=collate\n)\ndev_loader = DataLoader(\n    dsets[\"dev\"], batch_size=batch_size, shuffle=False, collate_fn=collate\n)\ntest_loader = DataLoader(\n    dsets[\"test\"], batch_size=batch_size, shuffle=False, collate_fn=collate\n)\n\n\n# --------------- Model ----------------------------\nclass SPRClassifier(nn.Module):\n    def __init__(self, vocab_size, embed_dim=64, hidden=128):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_size, embed_dim, padding_idx=0)\n        self.lstm = nn.LSTM(embed_dim, hidden, batch_first=True, bidirectional=True)\n        self.fc = nn.Linear(hidden * 2, 2)\n\n    def forward(self, x):\n        em = self.emb(x)\n        packed_out, _ = self.lstm(em)\n        # simple max-pool over time\n        pooled, _ = torch.max(packed_out, dim=1)\n        return self.fc(pooled)\n\n\nmodel = SPRClassifier(vocab_size).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n\n# --------------- experiment_data dict -------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n        \"epochs\": [],\n    }\n}\n\n# --------------- training loop --------------------\nepochs = 5\nbest_f1 = 0.0\nfor epoch in range(1, epochs + 1):\n    model.train()\n    train_losses, train_preds, train_gts = [], [], []\n    for batch in train_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        optimizer.zero_grad()\n        logits = model(batch[\"input_ids\"])\n        loss = criterion(logits, batch[\"labels\"])\n        loss.backward()\n        optimizer.step()\n        train_losses.append(loss.item())\n        train_preds.extend(logits.argmax(1).cpu().numpy())\n        train_gts.extend(batch[\"labels\"].cpu().numpy())\n    train_f1 = f1_score(train_gts, train_preds, average=\"macro\")\n    # ---- eval on dev ----\n    model.eval()\n    dev_losses, dev_preds, dev_gts = [], [], []\n    with torch.no_grad():\n        for batch in dev_loader:\n            batch = {\n                k: v.to(device) if isinstance(v, torch.Tensor) else v\n                for k, v in batch.items()\n            }\n            logits = model(batch[\"input_ids\"])\n            loss = criterion(logits, batch[\"labels\"])\n            dev_losses.append(loss.item())\n            dev_preds.extend(logits.argmax(1).cpu().numpy())\n            dev_gts.extend(batch[\"labels\"].cpu().numpy())\n    dev_f1 = f1_score(dev_gts, dev_preds, average=\"macro\")\n    print(\n        f\"Epoch {epoch}: train_loss={np.mean(train_losses):.4f}, val_loss={np.mean(dev_losses):.4f}, val_macroF1={dev_f1:.4f}\"\n    )\n    # store experiment data\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train\"].append(train_f1)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append(dev_f1)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(np.mean(train_losses))\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(np.mean(dev_losses))\n    experiment_data[\"SPR_BENCH\"][\"epochs\"].append(epoch)\n    # save best preds\n    if dev_f1 > best_f1:\n        best_f1 = dev_f1\n        experiment_data[\"SPR_BENCH\"][\"predictions\"] = dev_preds\n        experiment_data[\"SPR_BENCH\"][\"ground_truth\"] = dev_gts\n\n# --------------- final test evaluation ------------\nmodel.eval()\ntest_preds, test_gts = [], []\nwith torch.no_grad():\n    for batch in test_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        logits = model(batch[\"input_ids\"])\n        test_preds.extend(logits.argmax(1).cpu().numpy())\n        test_gts.extend(batch[\"labels\"].cpu().numpy())\ntest_f1 = f1_score(test_gts, test_preds, average=\"macro\")\nprint(f\"Best Dev Macro-F1 = {best_f1:.4f} | Test Macro-F1 = {test_f1:.4f}\")\n\n# --------------- save experiment data -------------\nnp.save(\n    os.path.join(working_dir, \"experiment_data.npy\"), experiment_data, allow_pickle=True\n)\n", "# Set random seed\nimport random\nimport numpy as np\nimport torch\n\nseed = 1\nrandom.seed(seed)\nnp.random.seed(seed)\ntorch.manual_seed(seed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed(seed)\n\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\nimport pathlib, random, string, time, numpy as np, torch, torch.nn as nn\nfrom torch.utils.data import DataLoader\nfrom sklearn.metrics import f1_score\n\n# --------------- device handling ------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# --------------- load SPR_BENCH -------------------\ndef load_spr_bench(root: pathlib.Path):\n    from datasets import load_dataset, DatasetDict\n\n    def _load(csv_name):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / csv_name),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    d[\"train\"] = _load(\"train.csv\")\n    d[\"dev\"] = _load(\"dev.csv\")\n    d[\"test\"] = _load(\"test.csv\")\n    return d\n\n\ndata_path = pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH/\")\nif data_path.exists():\n    dsets = load_spr_bench(data_path)\nelse:\n    # fallback synthetic data (very small, just to guarantee runnable script)\n    from datasets import Dataset, DatasetDict\n\n    def synth_split(n):\n        seqs, labels = [], []\n        for _ in range(n):\n            L = random.randint(5, 15)\n            seq = \"\".join(\n                random.choices(list(string.ascii_lowercase) + [\"#\", \"@\", \"&\"], k=L)\n            )\n            lbl = int(seq.count(\"#\") % 2 == 0)  # arbitrary rule\n            seqs.append(seq)\n            labels.append(lbl)\n        return Dataset.from_dict(\n            {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n        )\n\n    dsets = DatasetDict()\n    dsets[\"train\"] = synth_split(512)\n    dsets[\"dev\"] = synth_split(128)\n    dsets[\"test\"] = synth_split(128)\nprint({k: len(v) for k, v in dsets.items()})\n\n# --------------- vocab & encoding -----------------\nPAD, UNK = \"<pad>\", \"<unk>\"\nvocab = {PAD: 0, UNK: 1}\nfor seq in dsets[\"train\"][\"sequence\"]:\n    for ch in seq:\n        if ch not in vocab:\n            vocab[ch] = len(vocab)\nvocab_size = len(vocab)\n\n\ndef encode(seq):\n    return [vocab.get(ch, vocab[UNK]) for ch in seq]\n\n\nfor split in dsets:\n    dsets[split] = dsets[split].map(\n        lambda ex: {\"input_ids\": encode(ex[\"sequence\"])}, remove_columns=[\"sequence\"]\n    )\n\n\n# --------------- Dataset / Dataloader -------------\ndef collate(batch):\n    ids = [b[\"input_ids\"] for b in batch]\n    labels = torch.tensor([b[\"label\"] for b in batch], dtype=torch.long)\n    max_len = max(len(x) for x in ids)\n    padded = torch.full((len(ids), max_len), vocab[PAD], dtype=torch.long)\n    for i, seq in enumerate(ids):\n        padded[i, : len(seq)] = torch.tensor(seq, dtype=torch.long)\n    return {\"input_ids\": padded, \"labels\": labels}\n\n\nbatch_size = 128\ntrain_loader = DataLoader(\n    dsets[\"train\"], batch_size=batch_size, shuffle=True, collate_fn=collate\n)\ndev_loader = DataLoader(\n    dsets[\"dev\"], batch_size=batch_size, shuffle=False, collate_fn=collate\n)\ntest_loader = DataLoader(\n    dsets[\"test\"], batch_size=batch_size, shuffle=False, collate_fn=collate\n)\n\n\n# --------------- Model ----------------------------\nclass SPRClassifier(nn.Module):\n    def __init__(self, vocab_size, embed_dim=64, hidden=128):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_size, embed_dim, padding_idx=0)\n        self.lstm = nn.LSTM(embed_dim, hidden, batch_first=True, bidirectional=True)\n        self.fc = nn.Linear(hidden * 2, 2)\n\n    def forward(self, x):\n        em = self.emb(x)\n        packed_out, _ = self.lstm(em)\n        # simple max-pool over time\n        pooled, _ = torch.max(packed_out, dim=1)\n        return self.fc(pooled)\n\n\nmodel = SPRClassifier(vocab_size).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n\n# --------------- experiment_data dict -------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n        \"epochs\": [],\n    }\n}\n\n# --------------- training loop --------------------\nepochs = 5\nbest_f1 = 0.0\nfor epoch in range(1, epochs + 1):\n    model.train()\n    train_losses, train_preds, train_gts = [], [], []\n    for batch in train_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        optimizer.zero_grad()\n        logits = model(batch[\"input_ids\"])\n        loss = criterion(logits, batch[\"labels\"])\n        loss.backward()\n        optimizer.step()\n        train_losses.append(loss.item())\n        train_preds.extend(logits.argmax(1).cpu().numpy())\n        train_gts.extend(batch[\"labels\"].cpu().numpy())\n    train_f1 = f1_score(train_gts, train_preds, average=\"macro\")\n    # ---- eval on dev ----\n    model.eval()\n    dev_losses, dev_preds, dev_gts = [], [], []\n    with torch.no_grad():\n        for batch in dev_loader:\n            batch = {\n                k: v.to(device) if isinstance(v, torch.Tensor) else v\n                for k, v in batch.items()\n            }\n            logits = model(batch[\"input_ids\"])\n            loss = criterion(logits, batch[\"labels\"])\n            dev_losses.append(loss.item())\n            dev_preds.extend(logits.argmax(1).cpu().numpy())\n            dev_gts.extend(batch[\"labels\"].cpu().numpy())\n    dev_f1 = f1_score(dev_gts, dev_preds, average=\"macro\")\n    print(\n        f\"Epoch {epoch}: train_loss={np.mean(train_losses):.4f}, val_loss={np.mean(dev_losses):.4f}, val_macroF1={dev_f1:.4f}\"\n    )\n    # store experiment data\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train\"].append(train_f1)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append(dev_f1)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(np.mean(train_losses))\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(np.mean(dev_losses))\n    experiment_data[\"SPR_BENCH\"][\"epochs\"].append(epoch)\n    # save best preds\n    if dev_f1 > best_f1:\n        best_f1 = dev_f1\n        experiment_data[\"SPR_BENCH\"][\"predictions\"] = dev_preds\n        experiment_data[\"SPR_BENCH\"][\"ground_truth\"] = dev_gts\n\n# --------------- final test evaluation ------------\nmodel.eval()\ntest_preds, test_gts = [], []\nwith torch.no_grad():\n    for batch in test_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        logits = model(batch[\"input_ids\"])\n        test_preds.extend(logits.argmax(1).cpu().numpy())\n        test_gts.extend(batch[\"labels\"].cpu().numpy())\ntest_f1 = f1_score(test_gts, test_preds, average=\"macro\")\nprint(f\"Best Dev Macro-F1 = {best_f1:.4f} | Test Macro-F1 = {test_f1:.4f}\")\n\n# --------------- save experiment data -------------\nnp.save(\n    os.path.join(working_dir, \"experiment_data.npy\"), experiment_data, allow_pickle=True\n)\n", "# Set random seed\nimport random\nimport numpy as np\nimport torch\n\nseed = 2\nrandom.seed(seed)\nnp.random.seed(seed)\ntorch.manual_seed(seed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed(seed)\n\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\nimport pathlib, random, string, time, numpy as np, torch, torch.nn as nn\nfrom torch.utils.data import DataLoader\nfrom sklearn.metrics import f1_score\n\n# --------------- device handling ------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# --------------- load SPR_BENCH -------------------\ndef load_spr_bench(root: pathlib.Path):\n    from datasets import load_dataset, DatasetDict\n\n    def _load(csv_name):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / csv_name),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    d[\"train\"] = _load(\"train.csv\")\n    d[\"dev\"] = _load(\"dev.csv\")\n    d[\"test\"] = _load(\"test.csv\")\n    return d\n\n\ndata_path = pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH/\")\nif data_path.exists():\n    dsets = load_spr_bench(data_path)\nelse:\n    # fallback synthetic data (very small, just to guarantee runnable script)\n    from datasets import Dataset, DatasetDict\n\n    def synth_split(n):\n        seqs, labels = [], []\n        for _ in range(n):\n            L = random.randint(5, 15)\n            seq = \"\".join(\n                random.choices(list(string.ascii_lowercase) + [\"#\", \"@\", \"&\"], k=L)\n            )\n            lbl = int(seq.count(\"#\") % 2 == 0)  # arbitrary rule\n            seqs.append(seq)\n            labels.append(lbl)\n        return Dataset.from_dict(\n            {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n        )\n\n    dsets = DatasetDict()\n    dsets[\"train\"] = synth_split(512)\n    dsets[\"dev\"] = synth_split(128)\n    dsets[\"test\"] = synth_split(128)\nprint({k: len(v) for k, v in dsets.items()})\n\n# --------------- vocab & encoding -----------------\nPAD, UNK = \"<pad>\", \"<unk>\"\nvocab = {PAD: 0, UNK: 1}\nfor seq in dsets[\"train\"][\"sequence\"]:\n    for ch in seq:\n        if ch not in vocab:\n            vocab[ch] = len(vocab)\nvocab_size = len(vocab)\n\n\ndef encode(seq):\n    return [vocab.get(ch, vocab[UNK]) for ch in seq]\n\n\nfor split in dsets:\n    dsets[split] = dsets[split].map(\n        lambda ex: {\"input_ids\": encode(ex[\"sequence\"])}, remove_columns=[\"sequence\"]\n    )\n\n\n# --------------- Dataset / Dataloader -------------\ndef collate(batch):\n    ids = [b[\"input_ids\"] for b in batch]\n    labels = torch.tensor([b[\"label\"] for b in batch], dtype=torch.long)\n    max_len = max(len(x) for x in ids)\n    padded = torch.full((len(ids), max_len), vocab[PAD], dtype=torch.long)\n    for i, seq in enumerate(ids):\n        padded[i, : len(seq)] = torch.tensor(seq, dtype=torch.long)\n    return {\"input_ids\": padded, \"labels\": labels}\n\n\nbatch_size = 128\ntrain_loader = DataLoader(\n    dsets[\"train\"], batch_size=batch_size, shuffle=True, collate_fn=collate\n)\ndev_loader = DataLoader(\n    dsets[\"dev\"], batch_size=batch_size, shuffle=False, collate_fn=collate\n)\ntest_loader = DataLoader(\n    dsets[\"test\"], batch_size=batch_size, shuffle=False, collate_fn=collate\n)\n\n\n# --------------- Model ----------------------------\nclass SPRClassifier(nn.Module):\n    def __init__(self, vocab_size, embed_dim=64, hidden=128):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_size, embed_dim, padding_idx=0)\n        self.lstm = nn.LSTM(embed_dim, hidden, batch_first=True, bidirectional=True)\n        self.fc = nn.Linear(hidden * 2, 2)\n\n    def forward(self, x):\n        em = self.emb(x)\n        packed_out, _ = self.lstm(em)\n        # simple max-pool over time\n        pooled, _ = torch.max(packed_out, dim=1)\n        return self.fc(pooled)\n\n\nmodel = SPRClassifier(vocab_size).to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n\n# --------------- experiment_data dict -------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n        \"epochs\": [],\n    }\n}\n\n# --------------- training loop --------------------\nepochs = 5\nbest_f1 = 0.0\nfor epoch in range(1, epochs + 1):\n    model.train()\n    train_losses, train_preds, train_gts = [], [], []\n    for batch in train_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        optimizer.zero_grad()\n        logits = model(batch[\"input_ids\"])\n        loss = criterion(logits, batch[\"labels\"])\n        loss.backward()\n        optimizer.step()\n        train_losses.append(loss.item())\n        train_preds.extend(logits.argmax(1).cpu().numpy())\n        train_gts.extend(batch[\"labels\"].cpu().numpy())\n    train_f1 = f1_score(train_gts, train_preds, average=\"macro\")\n    # ---- eval on dev ----\n    model.eval()\n    dev_losses, dev_preds, dev_gts = [], [], []\n    with torch.no_grad():\n        for batch in dev_loader:\n            batch = {\n                k: v.to(device) if isinstance(v, torch.Tensor) else v\n                for k, v in batch.items()\n            }\n            logits = model(batch[\"input_ids\"])\n            loss = criterion(logits, batch[\"labels\"])\n            dev_losses.append(loss.item())\n            dev_preds.extend(logits.argmax(1).cpu().numpy())\n            dev_gts.extend(batch[\"labels\"].cpu().numpy())\n    dev_f1 = f1_score(dev_gts, dev_preds, average=\"macro\")\n    print(\n        f\"Epoch {epoch}: train_loss={np.mean(train_losses):.4f}, val_loss={np.mean(dev_losses):.4f}, val_macroF1={dev_f1:.4f}\"\n    )\n    # store experiment data\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train\"].append(train_f1)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append(dev_f1)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(np.mean(train_losses))\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(np.mean(dev_losses))\n    experiment_data[\"SPR_BENCH\"][\"epochs\"].append(epoch)\n    # save best preds\n    if dev_f1 > best_f1:\n        best_f1 = dev_f1\n        experiment_data[\"SPR_BENCH\"][\"predictions\"] = dev_preds\n        experiment_data[\"SPR_BENCH\"][\"ground_truth\"] = dev_gts\n\n# --------------- final test evaluation ------------\nmodel.eval()\ntest_preds, test_gts = [], []\nwith torch.no_grad():\n    for batch in test_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        logits = model(batch[\"input_ids\"])\n        test_preds.extend(logits.argmax(1).cpu().numpy())\n        test_gts.extend(batch[\"labels\"].cpu().numpy())\ntest_f1 = f1_score(test_gts, test_preds, average=\"macro\")\nprint(f\"Best Dev Macro-F1 = {best_f1:.4f} | Test Macro-F1 = {test_f1:.4f}\")\n\n# --------------- save experiment data -------------\nnp.save(\n    os.path.join(working_dir, \"experiment_data.npy\"), experiment_data, allow_pickle=True\n)\n", "# plotting aggregation code"], "term_out": ["['Using device: cuda', '\\n', 'SPR_BENCH not found, falling back to synthetic\ndata.', '\\n', 'Traceback (most recent call last):\\n  File \"runfile.py\", line 57,\nin get_dataset\\n    raise FileNotFoundError\\nFileNotFoundError\\n\\nDuring\nhandling of the above exception, another exception occurred:\\n\\nTraceback (most\nrecent call last):\\n  File \"runfile.py\", line 73, in <module>\\n    dsets =\nget_dataset()\\n            ^^^^^^^^^^^^^\\n  File \"runfile.py\", line 61, in\nget_dataset\\n    synth[\"train\"] = load_dataset(\\n\n^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 2062, in load_dataset\\n    builder_instance =\nload_dataset_builder(\\n                       ^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 1782, in load_dataset_builder\\n\ndataset_module = dataset_module_factory(\\n\n^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 1497, in dataset_module_factory\\n\n).get_module()\\n      ^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 913, in get_module\\n    data_files =\nDataFilesDict.from_patterns(\\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\nFile \"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 690, in from_patterns\\n    else\nDataFilesList.from_patterns(\\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 583, in from_patterns\\n\nresolve_pattern(\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 344, in resolve_pattern\\n    if\nis_relative_path(pattern):\\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/utils/file_utils.py\", line 88, in is_relative_path\\n    return\nurlparse(url_or_filename).scheme == \"\" and not os.path.isabs(url_or_filename)\\n\n^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/urllib/parse.py\",\nline 394, in urlparse\\n    url, scheme, _coerce_result = _coerce_args(url,\nscheme)\\n                                  ^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/urllib/parse.py\",\nline 133, in _coerce_args\\n    return _decode_args(args) + (_encode_result,)\\n\n^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/urllib/parse.py\",\nline 117, in _decode_args\\n    return tuple(x.decode(encoding, errors) if x else\n\\'\\' for x in args)\\n\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/urllib/parse.py\",\nline 117, in <genexpr>\\n    return tuple(x.decode(encoding, errors) if x else\n\\'\\' for x in args)\\n                 ^^^^^^^^\\nAttributeError: \\'dict\\' object\nhas no attribute \\'decode\\'\\n', 'Execution time: a second seconds (time limit is\n30 minutes).']", "['Using device: cuda', '\\n', 'Traceback (most recent call last):\\n  File\n\"runfile.py\", line 34, in <module>\\n    spr = load_spr_bench(DATA_PATH)\\n\n^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"runfile.py\", line 27, in load_spr_bench\\n\nd[\"train\"] = _load(\"train.csv\")\\n                 ^^^^^^^^^^^^^^^^^^\\n  File\n\"runfile.py\", line 19, in _load\\n    return load_dataset(\\n\n^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 2062, in load_dataset\\n    builder_instance =\nload_dataset_builder(\\n                       ^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 1782, in load_dataset_builder\\n\ndataset_module = dataset_module_factory(\\n\n^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 1497, in dataset_module_factory\\n\n).get_module()\\n      ^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 913, in get_module\\n    data_files =\nDataFilesDict.from_patterns(\\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\nFile \"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 690, in from_patterns\\n    else\nDataFilesList.from_patterns(\\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 583, in from_patterns\\n\nresolve_pattern(\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 384, in resolve_pattern\\n    raise\nFileNotFoundError(error_msg)\\nFileNotFoundError: Unable to find\n\\'/home/zxl240011/AI-Scientist-v2/experiments/2025-08-17_18-48-\n06_symblic_polyrule_reasoning_attempt_0/0-run/process_ForkProcess-\n2/SPR_BENCH/train.csv\\'\\n', 'Execution time: a second seconds (time limit is 30\nminutes).']", "['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 2000 examples [00:00, 108933.06\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 500 examples [00:00, 89994.94\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 1000 examples [00:00, 146418.49\nexamples/s]', '\\n', \"{'train': 2000, 'dev': 500, 'test': 1000}\", '\\n', '\\rMap:\n0%|          | 0/2000 [00:00<?, ? examples/s]', '', '\\rMap: 100%|##########|\n2000/2000 [00:00<00:00, 22467.40 examples/s]', '\\n', '\\rMap:   0%|          |\n0/500 [00:00<?, ? examples/s]', '', '\\rMap: 100%|##########| 500/500\n[00:00<00:00, 23516.47 examples/s]', '\\n', '\\rMap:   0%|          | 0/1000\n[00:00<?, ? examples/s]', '', '\\rMap: 100%|##########| 1000/1000 [00:00<00:00,\n24857.93 examples/s]', '\\n', 'Epoch 1: train_loss=0.6754, val_loss=0.6559,\nval_macroF1=0.6780', '\\n', 'Epoch 2: train_loss=0.6353, val_loss=0.6525,\nval_macroF1=0.6779', '\\n', 'Epoch 3: train_loss=0.6258, val_loss=0.6381,\nval_macroF1=0.6760', '\\n', 'Epoch 4: train_loss=0.6164, val_loss=0.6362,\nval_macroF1=0.6779', '\\n', 'Epoch 5: train_loss=0.6121, val_loss=0.6347,\nval_macroF1=0.6860', '\\n', 'Best Dev Macro-F1 = 0.6860 | Test Macro-F1 =\n0.6948', '\\n', 'Execution time: 3 seconds seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', 'Traceback (most recent call last):\\n  File\n\"runfile.py\", line 41, in <module>\\n    spr = load_spr_bench(data_root)\\n\n^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"runfile.py\", line 32, in load_spr_bench\\n\ndset[\"train\"] = _load(\"train.csv\")\\n                    ^^^^^^^^^^^^^^^^^^\\n\nFile \"runfile.py\", line 24, in _load\\n    return load_dataset(\\n\n^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 2062, in load_dataset\\n    builder_instance =\nload_dataset_builder(\\n                       ^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 1782, in load_dataset_builder\\n\ndataset_module = dataset_module_factory(\\n\n^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 1497, in dataset_module_factory\\n\n).get_module()\\n      ^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/load.py\", line 913, in get_module\\n    data_files =\nDataFilesDict.from_patterns(\\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\nFile \"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 690, in from_patterns\\n    else\nDataFilesList.from_patterns(\\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 583, in from_patterns\\n\nresolve_pattern(\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/datasets/data_files.py\", line 384, in resolve_pattern\\n    raise\nFileNotFoundError(error_msg)\\nFileNotFoundError: Unable to find\n\\'/home/zxl240011/AI-Scientist-v2/experiments/2025-08-17_18-48-\n06_symblic_polyrule_reasoning_attempt_0/0-run/process_ForkProcess-\n4/SPR_BENCH/train.csv\\'\\n', 'Execution time: a second seconds (time limit is 30\nminutes).']", "['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 2000 examples [00:00, 149708.35\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 500 examples [00:00, 125091.08\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 1000 examples [00:00, 184413.65\nexamples/s]', '\\n', \"{'train': 2000, 'dev': 500, 'test': 1000}\", '\\n', '\\rMap:\n0%|          | 0/2000 [00:00<?, ? examples/s]', '', '\\rMap: 100%|##########|\n2000/2000 [00:00<00:00, 23736.46 examples/s]', '\\n', '\\rMap:   0%|          |\n0/500 [00:00<?, ? examples/s]', '', '\\rMap: 100%|##########| 500/500\n[00:00<00:00, 23960.06 examples/s]', '\\n', '\\rMap:   0%|          | 0/1000\n[00:00<?, ? examples/s]', '', '\\rMap: 100%|##########| 1000/1000 [00:00<00:00,\n25149.78 examples/s]', '\\n', 'Epoch 1: train_loss=0.6838, val_loss=0.6740,\nval_macroF1=0.5265', '\\n', 'Epoch 2: train_loss=0.6496, val_loss=0.6676,\nval_macroF1=0.5508', '\\n', 'Epoch 3: train_loss=0.6283, val_loss=0.6693,\nval_macroF1=0.6419', '\\n', 'Epoch 4: train_loss=0.6293, val_loss=0.6692,\nval_macroF1=0.6395', '\\n', 'Epoch 5: train_loss=0.6216, val_loss=0.6581,\nval_macroF1=0.6676', '\\n', 'Best Dev Macro-F1 = 0.6676 | Test Macro-F1 =\n0.6818', '\\n', 'Execution time: 5 seconds seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 2000 examples [00:00, 158147.31\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 500 examples [00:00, 122935.22\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 1000 examples [00:00, 177634.42\nexamples/s]', '\\n', \"{'train': 2000, 'dev': 500, 'test': 1000}\", '\\n', '\\rMap:\n0%|          | 0/2000 [00:00<?, ? examples/s]', '', '\\rMap: 100%|##########|\n2000/2000 [00:00<00:00, 22770.87 examples/s]', '\\n', '\\rMap:   0%|          |\n0/500 [00:00<?, ? examples/s]', '', '\\rMap: 100%|##########| 500/500\n[00:00<00:00, 22536.94 examples/s]', '\\n', '\\rMap:   0%|          | 0/1000\n[00:00<?, ? examples/s]', '', '\\rMap: 100%|##########| 1000/1000 [00:00<00:00,\n23316.59 examples/s]', '\\n', 'Epoch 1: train_loss=0.6957, val_loss=0.6816,\nval_macroF1=0.3359', '\\n', 'Epoch 2: train_loss=0.6625, val_loss=0.6458,\nval_macroF1=0.6674', '\\n', 'Epoch 3: train_loss=0.6349, val_loss=0.6572,\nval_macroF1=0.6672', '\\n', 'Epoch 4: train_loss=0.6191, val_loss=0.6383,\nval_macroF1=0.6800', '\\n', 'Epoch 5: train_loss=0.6101, val_loss=0.6344,\nval_macroF1=0.6800', '\\n', 'Best Dev Macro-F1 = 0.6800 | Test Macro-F1 =\n0.6919', '\\n', 'Execution time: 4 seconds seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 2000 examples [00:00, 151643.37\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 500 examples [00:00, 146807.98\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 1000 examples [00:00, 249453.07\nexamples/s]', '\\n', \"{'train': 2000, 'dev': 500, 'test': 1000}\", '\\n', '\\rMap:\n0%|          | 0/2000 [00:00<?, ? examples/s]', '', '\\rMap: 100%|##########|\n2000/2000 [00:00<00:00, 24035.51 examples/s]', '\\n', '\\rMap:   0%|          |\n0/500 [00:00<?, ? examples/s]', '', '\\rMap: 100%|##########| 500/500\n[00:00<00:00, 23765.38 examples/s]', '\\n', '\\rMap:   0%|          | 0/1000\n[00:00<?, ? examples/s]', '', '\\rMap: 100%|##########| 1000/1000 [00:00<00:00,\n24654.68 examples/s]', '\\n', 'Epoch 1: train_loss=0.6940, val_loss=0.6784,\nval_macroF1=0.6840', '\\n', 'Epoch 2: train_loss=0.6641, val_loss=0.6455,\nval_macroF1=0.6879', '\\n', 'Epoch 3: train_loss=0.6224, val_loss=0.6318,\nval_macroF1=0.6777', '\\n', 'Epoch 4: train_loss=0.6197, val_loss=0.6452,\nval_macroF1=0.6779', '\\n', 'Epoch 5: train_loss=0.6165, val_loss=0.6322,\nval_macroF1=0.6960', '\\n', 'Best Dev Macro-F1 = 0.6960 | Test Macro-F1 =\n0.6978', '\\n', 'Execution time: 4 seconds seconds (time limit is 30 minutes).']", ""], "analysis": ["The execution failed due to an issue in the synthetic data fallback logic.\nSpecifically, the `generate_synthetic` function is incorrectly passed directly\nas a data file instead of its output being written to a JSON file and then\npassed to `load_dataset`. This leads to an AttributeError because the\n`load_dataset` function expects a file path or URL, not a dictionary.\n**Proposed Fix:** Modify the `generate_synthetic` function to save its output to\na temporary JSON file and then pass the file path to `load_dataset`.\nAlternatively, use an in-memory approach supported by the `datasets` library if\navailable.", "The execution failed due to a `FileNotFoundError`. The script attempted to load\nthe dataset from `/home/zxl240011/AI-Scientist-v2/experiments/2025-08-17_18-48-\n06_symblic_polyrule_reasoning_attempt_0/0-run/process_ForkProcess-\n2/SPR_BENCH/train.csv`, but the file was not found at the specified path. To fix\nthis issue, ensure that the dataset files (`train.csv`, `dev.csv`, `test.csv`)\nare correctly placed in the expected directory (`SPR_BENCH`) and that the\n`DATA_PATH` variable points to the correct directory containing these files.", "The script executed successfully without any errors. It loaded the datasets,\ntrained the model, and evaluated it on the test set. The training and validation\nlosses decreased over epochs, and the model showed an improvement in F1 scores,\nindicating proper learning. The final results were also saved correctly.\nOverall, the implementation is functional and achieves its goals at this stage.", "The execution failed due to a FileNotFoundError. The script is attempting to\nload a dataset from '/home/zxl240011/AI-Scientist-v2/experiments/2025-08-17_18-\n48-06_symblic_polyrule_reasoning_attempt_0/0-run/process_ForkProcess-\n4/SPR_BENCH/train.csv', but the file does not exist at the specified location.\nTo fix this, ensure that the SPR_BENCH directory and its required files\n(train.csv, dev.csv, test.csv) are present at the specified path. If the files\nare located elsewhere, update the 'data_root' path in the script to the correct\nlocation.", "The execution output shows that the training script ran successfully without any\nerrors or bugs. The model was trained for 5 epochs, achieving a best Dev\nMacro-F1 score of 0.6676 and a Test Macro-F1 score of 0.6818. The script also\nsaved the experiment data as expected. No issues were identified.", "The execution of the training script was successful, and there were no bugs\nobserved. The script trained a model on the SPR_BENCH dataset with a synthetic\nfallback and achieved a Best Dev Macro-F1 of 0.6800 and a Test Macro-F1 of\n0.6919. The implementation is functional and provides meaningful results.", "The script executed successfully without any errors or bugs. The dataset was\nloaded correctly (2000 train, 500 dev, 1000 test samples), and the model was\ntrained for 5 epochs with results improving steadily. The best validation\nmacro-F1 score achieved was 0.6960, and the test macro-F1 score was 0.6978. This\nindicates the implementation is functioning correctly for the preliminary stage.", ""], "exc_type": ["AttributeError", "FileNotFoundError", null, "FileNotFoundError", null, null, null, null], "exc_info": [{"args": ["'dict' object has no attribute 'decode'"], "name": "decode", "obj": "{'sequence': ['FHHGCDHEHEHHACGH', 'AHHBD', 'BBBAGDFBA', 'CDHAHBDBADFEFE', 'HCCFAEGCGAGEGG', 'FCGDFCE', 'EEAAHAAF', 'HACCBEHE', 'GCCDBEEHBEH', 'BAHCHEEDEGBGFAGCB', 'DEGFFHEHBEHCBB', 'DHBDBHGAFFA', 'HCDEGBCAHHA', 'HDAFECDC', 'DGFFACHDAFECEAGC', 'AFFHCECGGAHHH', 'FBBHB', 'GCGHADGGGCGB', 'FBBAAB', 'ADCGDDBCBE', 'FDCGAHF', 'BCBDEEDGFEFGGDACHCC', 'BFFGEEH', 'BCEHBEBDCAGAHGAHBG', 'FDACDDBEEEDHBGA', 'AFBHHHHCEFBGHHDDHD', 'BEFHFHEACB', 'HDBDDEFCBEGAC', 'HHHDBDAEGGBBEAAFH', 'GDCGBECAGBDGGHAG', 'FHBECFDFACHB', 'GHGACGFEBCFEDGGDHAB', 'ABACEFEACHCAF', 'GDBEGDEFGGHBADCEGHF', 'FBDBFFGFGBA', 'HDCFEEGCFFBAF', 'FFECEDDACBFAA', 'EAEHBCHDCF', 'EFCEHEAHDCB', 'CCGEEGGADB', 'CECGCEBFCHABE', 'CAEFGCDAFHA', 'CCGCHADDAFCHC', 'CBEFHHBCB', 'EDHDDCABCCHH', 'FEFHHBEECBHCDEGG', 'HDAGDBDB', 'HGEADCCAHBGFGCBG', 'FFHHC', 'FBBAAGFDBGAEG', 'DGDCCFEHCHEAABFABAAF', 'CHCFFHFAAHDFCCDBFCE', 'HCCFCFBF', 'DEBACCDEHHGGD', 'AGHEAGGGGDDAAHBGBGGC', 'BDHAEDDEGFDF', 'HEAHCHAEFBDAGBCF', 'DAFACBFAHGCD', 'CBBCDAAA', 'BGCADEGBD', 'AHCHAHEEAHHDH', 'EHEBG', 'AHCBAGGFFBDDHDFF', 'GDCFFE', 'FHCGCCBCEDAFFBGBG', 'AGEED', 'CDCEHDHDEHDCCEACHCHF', 'FFBEEHFGEEABF', 'GCFBADECGA', 'BDHEDEBEHAHE', 'HHGAFA', 'HDAFCGH', 'GFFEDFGAH', 'CDHCHAEC', 'GEHAEAHACHACFHH', 'AAFCDBHBHAFCEAAFF', 'DHAACGEGDB', 'HDBHEFBHEGEHAA', 'BEACCDGED', 'AGBHGHHEAEBHCBHEFD', 'AFHEABFBDAGDDHHGAGG', 'FFFEDHDFFGADD', 'DDHABFADGBDCHGGDAAHD', 'CFBEAHGBACD', 'EEGGAHAHCGHA', 'ADBGHDDBBDF', 'CDADDAEDBCCDFBABB', 'BFAEB', 'BHAEFAHDHDHEDEEBEBEF', 'AAEHHE', 'CAAFHHHF', 'DGEFECDFAGGDFHFBEG', 'CEAAGAC', 'BFFGCHBF', 'EAGEDGBGDG', 'EACCHC', 'GDBGFFEGCCEGDEFHCCDF', 'EEBGHCEACF', 'BCGBDBDGCEFBE', 'ADGACGGFGBE', 'CCCCHGCFCBHEEFDFEGFG', 'CDAEFDAAEGCBDGGCB', 'BDBHEEAHBDGCGB', 'EHBDCDBAFBEC', 'CHFFEEAHDAEAG', 'EHHHDAAEAGHEAA', 'HACGBGEADAECBBGHHE', 'ECEAHEBAHCEHAF', 'HBAHCG', 'HFCFGE', 'ADGDFDA', 'AEBBHB', 'GAGHFFFFFHCBGGC', 'HBHDBBDHACBHFBACEBB', 'ABGEDAAGFDHHDA', 'HDFBGDFHGFAAG', 'HBBFG', 'GAGDDBHCBHC', 'GDDFEECEDACF', 'FGEAFG', 'DAHGEDDEGAHDHH', 'FFFDEEBEFEFCBCDCHAB', 'BHAHAHAFDAAEGFDGBF', 'BAECBAHBDFGHGF', 'AGBGFEGABAAHFBCHHGHD', 'HABFGE', 'DFAAGFEDCDFAGHFBEHC', 'DBFBECDHADG', 'FEGABHBDF', 'ABGADHFHEDACHHHEEG', 'DFFCDEBE', 'DHBADBCEHBGCHGCBG', 'BHGFAAFHCEAHA', 'EAEDCDCHCDCEFCEGFH', 'GCHECDBDCAGB', 'CFHACFD', 'DFGBCBF', 'HDGBGHCAG', 'FFBHDHCFGCA', 'GCGGHGGFCEFBCBFFADE', 'HACBBCHFCHBEFAHCAAD', 'AAABDF', 'DDBCDABHCEBDCBHBFFGD', 'FEFBFCFHECCCBAHCDDCA', 'HCDBF', 'CFBGEEBACGBCBC', 'DDFCDCA', 'AFHHGGCDGCCBFC', 'HGCGCHF', 'AHBFGEAAAFDAADEFGA', 'FEAGCGHDDHBBEFEGCHG', 'BFECDD', 'AFEGBDGE', 'GFHGFFAGHCAC', 'CBDBFACBD', 'CCHHAFBH', 'GCDEFFCFBEHCA', 'EAFFFBBEHAFABFEBCH', 'FCGDFDFE', 'HHBFEGBCHBFE', 'HHGFEG', 'GGBACHBCDFAD', 'GDGDCAEDCFAGE', 'BAHDDDCAFGCGA', 'FBEDFHFEBFFBBCBEFBC', 'GBGCCABDHFHGGHBEHGDG', 'HFHCEEAC', 'DEBGHCCDEEDBHCBAABAE', 'GGFFADDDDDA', 'GBBDGFDDHC', 'DFEAHAFF', 'HFAEHDHDGAGBGDH', 'AFAEADDD', 'AGDFDFDGGEECAFB', 'AEEDGDGCEBGFHHCDH', 'HFBFDAAEBGDDGCADH', 'AFHBHBAGFCFDABD', 'EGGAHGAHFBDFBHBF', 'HEGFECHFCHFAHFGEBGD', 'CFDHHH', 'EAHGEDFDAAFBDABBD', 'CAFHDBDBBCB', 'HGADB', 'CBEFHGHAHG', 'GCGHDGGAECGC', 'DHAFEAGFDCAABDBEEH', 'AAFAAABH', 'CBHDHBAD', 'HGCGAHCBHBHBDCHFE', 'HCFFGHBCCCCBBHGEGEEC', 'GGEBGGABCEGHEHEAB', 'FABEDEFG', 'CEBBCGBAAHFCGC', 'DDEAHGHCE', 'EBDBEDEDFB', 'HABCFBF', 'DAGEACEDDDGHEHDGCDC', 'GEFGHCECCAEFHGGB', 'DBCHFBDG', 'FFBCABCABAE', 'DDFFBD', 'AEEBEGFGEFAEEAED', 'HCFHHGEDHA', 'CCAGBBGCFDEA', 'GGDGCFHEAADD', 'EBHHFD', 'DFCHHGAFCEHCB', 'HAEBHAAEFBHHDBHDE', 'FFGBFFGCCAFCBBH', 'DDEAAFE', 'DHAGDBABGFCCBEEG', 'GGGBFHC', 'EEAFBC', 'CEBEEGFAGEGABEG', 'CCGHDAHGBHGEEFD', 'HGDHA', 'EHBAFD', 'FEGCDDACDHG', 'BADAFGHAEGFC', 'GBHCCBD', 'AGHECHGBEBAEDEC', 'CDABCECDHEDBDCDACDG', 'GCGBABCGH', 'BEDCFCC', 'BCCFGBHHBHDCEFDDEE', 'BFAGE', 'CDGDBBDCDDHBFCCADBA', 'EBEHFE', 'FFEFGEGACDBDAABCA', 'BHFEHG', 'BFCBABBCAFD', 'DEAFDHDHGBBABECG', 'FCHGGGFFEGEFABBEDFG', 'EBDCFCFB', 'ECCDEGDFCBGDEH', 'CGHEACEBGAHDCAHDD', 'FBFAFCFDGBCEEH', 'DGABDDDC', 'BGFAEHBF', 'EEEHDABE', 'HHGADECFBBFEBHHGDFBH', 'HGECEHFACBFFBF', 'GEGCDAEDD', 'CBDCBCECFC', 'CDFCB', 'FECACABDCAHG', 'DHHHBBEHAEGBBG', 'FFCGECHECBFCBBG', 'BECFE', 'HHDGCDCFGCEGHCDEHD', 'GCEBAEDH', 'FHEFBBCFBFEHDACBH', 'GHADGFEAFEGCBGFCFHHE', 'HGABBCAAG', 'BDFGBADAHCHHHDEB', 'GAADCAEBBCFFACDFGF', 'GFHFBECDCDA', 'DHAFBFAEAEFHAHAH', 'HADACAEHGG', 'CGHAFGEHCG', 'FBEEEF', 'EBDHGCECGEDCBEDEFAHC', 'CFEGEHBDDFBEFHAFBAF', 'HEDFGC', 'BHGGH', 'EFGCCEHBFFDFBCD', 'CFFFHEBDEDAEGB', 'HCDBHAH', 'ADCCFEGHHBDHDH', 'ECEDAHDGEBFDFCFE', 'EAEDF', 'GHCDD', 'HCEDCCECEAGFBEE', 'FCCFECFDGBGBGFE', 'HAGACFBGDCFH', 'AHBEC', 'FGFDBDEDEBAHEEDH', 'GAEFDAFEDDHA', 'AAHBCEEDDBBCBED', 'EEDGAFCBEHHDCHADDD', 'EGGAF', 'DCGCHADCEFHHEDHDACCD', 'CDFCBHGG', 'FGACCABFAHCDBCAD', 'HBDACBBDHAAGCADC', 'EEDGEHHG', 'ECHCHCFFC', 'AFCFADBFEFH', 'BDFDFBHCDHBBE', 'GABHAHDFAGCF', 'FCEBFFFBHCECCF', 'FEGFH', 'DCADFFFG', 'BGBEEBAGDAECHEHHAFG', 'GDCFGAFHEEDD', 'GAAEHCEDGBADCDCGFBCD', 'AEAAGGBFHCFCA', 'DBEHCAHHCAD', 'AFDAHDDAHHABAECFDH', 'FEEFGCGDD', 'HECFDDG', 'EGDDCDBBHHEHDC', 'DEBECCBED', 'CBGFDC', 'AFAGBFACGGBDDBCHC', 'HEBABAGHDHFHACHGF', 'BCFACB', 'BCCDHCEGEDBDCEEEAH', 'EECGBHGGEGBHCGCH', 'HACEAEFAGEADAGFBEHBG', 'GGDEEEACEDAACHBAEHAA', 'EHDBGCFGECCGDA', 'CHDGDAA', 'BDEHAGBHADBHAEGBCGEE', 'GBFGCEHG', 'EEHDHGADBDGHA', 'DEBHHBABEBAEHDDH', 'CAEDFEHBCDADDFHCH', 'GBGEBFBDEF', 'ABFACDGDBCEADGBED', 'AEDEBCDB', 'EDBABEBBC', 'FFCEGDHGFCACBAFD', 'AHFEBEHDEFCFGBHH', 'GDEGFGDHCHBDH', 'HACCHHGCDHAA', 'ECHACFDDCDFCDCGE', 'FADAGCGFGABCDF', 'FEHCBDCCFFH', 'EBECFCHH', 'GHEEGBDCFAFD', 'ADEHFBHGGEF', 'CAGHDBGHBFCHHFGAFGC', 'FDFCFFFDGECABBEBCG', 'AFCBEFCGE', 'DCHEHEDAA', 'FBGCFCEGGCGB', 'ACAGHADBFHABAGHECDBG', 'FEHHHBDDEDEEC', 'DCFECHD', 'AHDDFBFFDDGEA', 'BGGBEEDBGHAEFHECD', 'FFEAED', 'CGDHFDEBHGA', 'DFHBAGFE', 'EHHGHHDGGBDBHDGHCDDC', 'HCBADFAAGBBBAED', 'BCBACFG', 'CBDHDFBEFEAFGFBDAHF', 'GDFEDCCFGFBFE', 'GAFEEAHGC', 'FGABDGDGHDFC', 'BFADAHDGGCE', 'HCHECGGDHDDD', 'ECFACFBGGDBAAACHB', 'CGECBCEBHGCE', 'HDCGBBDCBBDDA', 'CGCHHAEADBHF', 'EHGHBBHEGACFHD', 'HHFBCEFHHBACAAGH', 'ECCBDHGDACE', 'AHEAGDEDFCH', 'HAECHCGEGDFBA', 'AADGGBFFDDDF', 'BAEBEGCGBDH', 'FGAAAGCBB', 'ADGFDDDDEAHFE', 'DHBEEGAHDDEE', 'EDBAGDGCHEDHEBAEHAGB', 'BHHAEFBGFAGDEBGDGDFD', 'HECEEHHAEFDEDGCBAECG', 'CHECBGABHGDHACBDC', 'HHFECGC', 'AFHBACCEACDEBG', 'BDHHBADG', 'DHFDGDBEHDEFDEHHCC', 'HHAECABCEE', 'CHCBEHFG', 'EAGBE', 'EEBEEHGADBGHE', 'FCEFFABBCCGHADGFAH', 'BDHGGDGEG', 'FDBBDGDDGG', 'HBGFAGF', 'BCGDHDDECAEGDEHFCF', 'GDCEECCFCACDHDDC', 'FDAHFHAEH', 'DFAFBDDEBCEHCG', 'DAEHGHDC', 'DGDHABBHHEG', 'ADAAFFAGEDBFHGB', 'CADBHADCADADEEFEBC', 'AHGGACHACFECEBHGAEA', 'CFEHGGFEHEDGGFGCHBB', 'HCHACDDABFD', 'BDCFHBAGBBC', 'DDBGBCEDFEGECFAHBGDH', 'GAFGBBDBCBF', 'CCEECABAAAGHDCACFBFA', 'BCBFHGDEHAHABAEHGHFA', 'AHECBABHADGDDGEEB', 'HDEHAFHEACHDHHBFGH', 'DEEACCCCBHDBFFCHCHF', 'AAGGBG', 'HAFEGAFGB', 'CFABGBEFBEBBFDBDDC', 'AEFCGACBDFBC', 'DFFFFDAEAA', 'BDCAAADECHG', 'CBGBBGDCAFDD', 'CFGBAABDH', 'DGGEFDFHEFAAFBGBHHE', 'GEBFDCCFFEEEGH', 'FGCCEEADBGD', 'EEFACEDDCF', 'AEFEB', 'HAEGCEGGFGCBCEHBGB', 'FACCGHHB', 'HEAFAAABHEGGCGFFAFGH', 'EEHGDDEGGBGAGDBD', 'AEBCFEFCACCCCGAEGE', 'BGCAHGHABAEG', 'GBAECFACEAGDCBF', 'DFDFEDFECFHFBDEEFCF', 'HGCFABAGHBCGH', 'EGBAB', 'FAGCHBF', 'FGFBECDDDHFDGFHCDE', 'HBDABDCHABC', 'GGFGDGF', 'EDFHFGEEFBFBFAAEA', 'DCHBGGBCBCEBBABH', 'FADBAHDGADAAAGG', 'CGBAC', 'HCEFACGHHB', 'BFFBADCA', 'DGAECCEFHAEDACD', 'CBBBDEH', 'BHHGGCD', 'DBCDFDEFC', 'HBEGCFHEECEBAC', 'BACACAEGAEDHAEGDDAH', 'GHGECHCGAE', 'EDBFCE', 'DBHGACGC', 'GDHDCBAHBFEDBHBF', 'CHGGCBABHC', 'CECGDEFDFFEEGBE', 'CEACGBHFEHHD', 'GGBBAAEBACGG', 'DFAAFCFHAFHCBACGCH', 'GBFBABEDGBEEBBHACF', 'FBBEFBGBGAG', 'GCHCBCHFGCBBC', 'GCFFGCCHGDB', 'ECDDGBHDDDFGAE', 'HGABCCCHHBGABE', 'HHEGGFCBDAGCACHBCGFG', 'EFECHBGDA', 'ECEHFDCCD', 'CGFCC', 'DAABBAFGGBDD', 'GGFHACEFAHCAA', 'CFGABFGDE', 'AHFFBEEGAGGDE', 'BHHEFGGEBH', 'GBBAFECGADCAEEHEED', 'BGBAG', 'GDDCDDBFAFGGBFE', 'GAFGBDCGGHFFHHDFEB', 'DGADBECCDF', 'CDBEADBAC', 'AEDHGEGCGHADGFBCEEBB', 'EAHFBAGABHHHD', 'FEFCBHBDFFDBD', 'CBGDHGDDEHGDEHEB', 'EDAGDFCBDEBFH', 'BABACDBHEABCC', 'BCGBCCCB', 'CGFBG', 'CEHFEAGABDGFAECEBAHA', 'FFHCDHFCGA', 'EDDHEFGEEGEDEDECCGCF', 'AHGED', 'CAAHAADA', 'BAFCAEFGGFBEGH', 'GEAHDHDBDFHGB', 'ABEHB', 'HEDBCDHABCBDFECA', 'FCFFCAAHBCHHGBDFAHAB', 'GGHHEGFCHEBBDAEFAEA', 'BFAADEFFFHEDABEAA', 'EGHHCECAGBEADGEC', 'BACCGAHABDHFHAEBHCCF', 'HFEEHFDFEFDFEGEHDFD', 'DBEFE', 'BADBG', 'BFBHDHGHG', 'FAFFCGGA', 'DCCAEEFACHB', 'BCGFDAGGDABBGDD', 'DBGGEAHHDHCECAC', 'HHEAGHAFBAEGBGH', 'BCAFGF', 'GFCBF', 'DDAAEF', 'FHGGADDEEHCH', 'EHBHACG', 'EHHCGAFBCAGE', 'DHDDEHCACFBDAFHEFE', 'ADAEEFGBGCEBCFGFHG', 'CFDGAHHAFCCFADBGGHB', 'CAEAHD', 'HAEBCCGEDDEFCDGF', 'GHAGCDAHFCHHGAAAH', 'CBGGCDHGHCED', 'HAFADHAEDH', 'CHGHBGBBDBFDEBCHHHAG', 'AAHAFAEH', 'GCAECFABBD', 'CGHDDG', 'FCGEGCAHCDFGDDCFE', 'GCBDDEG', 'BBDFHG', 'ABEFFD', 'HGEFFCGAFBFFHGGEGEAG', 'AHBDDDACDEDHCBBBAHH', 'ACDGCEAEBA', 'BEGCHBCE', 'ECBBCHGACDE', 'FFAACDGH', 'HAHEBCBDFGHH', 'FACDEGHCCFAEBH', 'ECHEGG', 'HDGFDBHGACEF', 'CBEHDAHBF', 'HCHBGHFG', 'CDFBECDHBGBDGDABG', 'ADBBCDCAF', 'GAGHB', 'GFGEEEAE', 'BCCAACCCHBBEFF', 'DBECAHBADFBAF', 'FCCBBBAEDFAD', 'FDHCHDDEF', 'FDEHFE', 'AACCAGDAEEAGFAHDGHDA', 'AEGAFDHDEDHCFDE', 'ACBCGHBBEHHHGF', 'DBCEHCCHDBCH', 'DBEHFA', 'BEDEHDFFHGCFEHBDGAHC', 'CCAFBEEEFCFDGDFCEH', 'BDFFHDDDCFDEEE', 'BFACBH', 'FHDBBHFEEBE', 'HDCGGHHCEHEAFBGDDFE', 'BEFGCGDEBH', 'DHHEAAH', 'AEAAHCE', 'EGBEDEDCBB', 'BFDFFG', 'HBFFAHACBFECDBCGDE', 'CDCHAEHFHEDAEAEGG', 'DGCFDHFAGFFAGHAGEE', 'FFGCGFFDCFBFA', 'CFDBACHHFCDCDFG', 'ADBFCAF', 'AHGHDHABH', 'ACFEFHDFGGB', 'CDDAEEBCAABDFBCHBECH', 'CHGABHCDEHEGEDDDBGA', 'BFGHGGCCAHAACF', 'EBBGHEH', 'FGEDE', 'HEDCFAHBDFGCFBEHEC', 'GECCGBBFBC', 'CADADCDHBAE', 'HDEEGBHBAGGDGDD', 'GADFFDCADEBCCCA', 'EHGAHFAEEBEHEEABG', 'HFDAE', 'HAAAGHGFGF', 'ABAAGGAEACCADFHH', 'CDBFAGBDEFGFBCAEDHCH', 'AEFGCFAFACB', 'CHFCCBA', 'AGDFC', 'GFCBCEDEGDDBBFHBBA', 'BDBHGHGA', 'GECABDDBBBDAHCC', 'DBAHGBHHAABDHEE', 'AAAAGGEEBADG', 'CAAAFHC', 'EDEAD', 'HCGCFHGACAGBDDD', 'DBDHHCAEGCDFFGCEHB', 'BCHGDCGFHACFC', 'DBHDBEBFGFDDAACBDF', 'GCFHDAE', 'CBGFBCBCDEEAC', 'AFHHFEABGFCAEGEC', 'AEGFAEDAGDFGGCACHF', 'BCFHDH', 'CHAFA', 'HCADECCDBEFD', 'HEGAFCHBDCBACHEHAAFF', 'BAHEFDHGDGHHFG', 'EHCAHCCBGGACGBDDB', 'HBCHGDEAABCC', 'FEDFC', 'AGDEHBDGEBECE', 'FHGEDFHCDCGCFFDABA', 'EBGEGDCHDGGGDCFCHDHC', 'DBBCCBBHBCA', 'HEHDGADC', 'EAHEGADCA', 'AAECFAFBCAFHC', 'GGEEEAGDHGEACAG', 'CBDHEBBGADHGDFBDE', 'EAFCHC', 'DDFFCEDHHAF', 'FDFAHGE', 'EBDFHE', 'AAGCHHECHFBCEEE', 'BHFFHBA', 'GCHCBBC', 'FBAFBGHAGHEFBBAGGD', 'GDCGCGAEBHGADFEADF', 'AGDHEHD', 'EAHBCECDDDDBCG', 'DBGDDCAGHCDADDFAEBHB', 'BHABBGDEF', 'FGAEDBBHADA', 'DHDEGDH', 'CCEEBBCDCHBAF', 'DABBFBF', 'GCDHCHDFECB', 'HAEAFDDGGFHF', 'HGAGDDBGAFBADA', 'GEEHFHC', 'GCAACEBHEEFG', 'BHBFFDBDEFBF', 'DBHEH', 'FFGFAFEAGAGBACHB', 'ABECEBBFBFAEBBB', 'FGBAGA', 'GDDGADEACCBDCCDFGH', 'HHEEHCAADF', 'GEGHCCBFFGB', 'AGEGEAF', 'GCHACEHGABHFGAHE', 'AFEBDAGAHGCCGGBBBHDG', 'BCADHDFCGAFDFABGGCE', 'ADADAHAFFDHB', 'AEHGAEFHACGCCEFHABA', 'CCEFBFDHBAEBGFGEEEGH', 'EEBCBHG', 'CCHCABGFECDCG', 'FBCCDFG', 'EHFFABDFFEADCDBBFGGA', 'HEBGAB', 'HFABG', 'GFFAEHGECGAGGAHAHF', 'HGGGE', 'CDCHADC', 'EADGABGAE', 'GFAFBHGGGCG', 'FECEAH', 'HHECHEAADCDFHGFHCA', 'BHBGD', 'EDEGBFGHCCCEGCA', 'HAEGFDA', 'AAFFDCGHAGDCD', 'FBDHEDDGFHAGG', 'FAHBF', 'FADHHBBGGHFHHBEA', 'BHBHDDDC', 'GAFGECEGHDHGGB', 'DEGEBDDACECGFDHECE', 'FBCDBDGDCFDFDDGDGF', 'ECHDFFHDCEDD', 'BFCFFFHBHEDFFFGEE', 'EFHGGEAA', 'BCAAFBFHHAB', 'HBEGCEGCAFHDHF', 'EBEHGBABACC', 'HEFEHGDEGG', 'AGBEBCCBBCGCCHGFA', 'BGECCCDFEEGGBHAD', 'FEEGCG', 'CBCCHHEABCCCHC', 'HDABDFFDDBCFGABD', 'HCHHFEEDEBCEDGHCB', 'ADGHGGEEBDAGCAHB', 'CHDHABHDDAHCBGAH', 'CHEEFDB', 'BBBAACDFGBGDFEDFA', 'CEEAG', 'EAHGGH', 'BCAAHCGGCFCBBFGGB', 'FGDEBACAFADFFCGDBC', 'ACGEHCHFCAEAABHDHD', 'HBCDAGFAGFAFFDAC', 'FCDCGAEAD', 'FAABADCAGCHFDBB', 'EAHGEHD', 'EGGGAGDEABHBABBHFHE', 'EHAEBHFCBCBEABHFFDE', 'EAHFHBEEAFEBBHFHDECA', 'BHBDHHHHAFGDFE', 'EFEGEBBFH', 'HAGHCHFEG', 'GFECGFBAGFEAFGHFEB', 'ADFFH', 'EAHECFABGE', 'EDFAEEABABFDHA', 'DDDBGEAEFHD', 'GEEDGDBDEBDDCDC', 'CEFDHHCDABHDA', 'HBDHAEG', 'BEHFACE', 'BFFDCG', 'EEEHDFCGAGCBGFCABE', 'CBHFDGHGHHEBEFB', 'FDCFCHBA', 'GBHCHEGHFBHG', 'CHCHBBGEFFFHBBGGEB', 'ABBFBBFGCAHEEDHEHEBA', 'HEEHCAFEFBA', 'GGDDCAFHDCCH', 'DBDCGCCEEBCAGEBECGGH', 'DGBHGG', 'HCCDBBGAG', 'EGCHFHAAFDBA', 'AEAFEBCBFEFFHGECE', 'GCHCHGGH', 'ECBGA', 'DHCHHCCGBADEGCEHAH', 'GBCAFGEGE', 'HEHFCGGFCEBFBBAHD', 'ECADBDCEAEFDECGHB', 'BDDFCCBDGAAADHBE', 'GHCCFCBGBDDCEBG', 'FEEHBBBEDGGBBBFAGGEF', 'CGHFBGCEHBBFBD', 'ACCCHCHFAB', 'CDBCFBGGFEAHHGAEGG', 'EEADHCEGACFDCBEF', 'GDCDCHBDDADHGHDDFGCA', 'GFBBHF', 'GBAEFBEDGCCHFAB', 'FHCADDFHEACDFFHCHHBH', 'ABHGHDEBDGHHCEFDAC', 'HGBHEGHBGDDHBFDGCCEF', 'AEFAFCHCDBEACAABFDDB', 'FCHAAFEH', 'CHBHEGAABAFE', 'DEAAFADGFCAGBGBHFFFH', 'HFEFGCFGEDAFCH', 'AFDBBEGDGBCFCGDB', 'CDAFECHFDFHHEHAFAFC', 'EGEDFCGGHFDDDFD', 'CFGHGCEBEBCFGEHGGHFB', 'FCBFHCHHEHEA', 'DHHCF', 'AGEEBCHFCA', 'EHDBBAACHD', 'GGDAAF', 'BHECHDGGCECAGCEBAFH', 'HEGABGGDHFADE', 'GDCHEGGGCECFBDFF', 'BDABGC', 'GEHAHFE', 'DEGCDAFGHGGBE', 'FBFFDCGGFAGA', 'GFHBCBDEFFAEDDDGFG', 'BFACF', 'EAEGBB', 'CAAAAGDAEGFHFCF', 'DEHHGEGGAC', 'DCGDCE', 'FDHGGH', 'DDCHDG', 'ACEEGFG', 'AAHAEHHHFAFHG', 'CFEADEGFHFGEHBGCGDHF', 'EBAGAFHABGA', 'DHGFDFCCACEDFFBGB', 'ACHEHCGFDBFA', 'AAHEDGEDHBAGEBHFBA', 'GDDGBBEFDEBBAFEF', 'GDBFGHHCBAD', 'FEDHHEFEBAEECA', 'HCFBB', 'DFECCFEFFAE', 'ACAFHHAFFDADC', 'AGGFB', 'BFGFACHBDC', 'FEABAB', 'EBFCHEHHCCAFA', 'GECAAHAB', 'CCFFFFDHFGDFH', 'AAGDBB', 'BCHHAFDE', 'EFDCGGDEDGBBEDBFEEB', 'ACGCHB', 'CABBFGFBFAABHEECHAG', 'HHBDHCFHDADA', 'DDFCGC', 'HCFCD', 'BDGCGGEFFFDF', 'DBDEHBAGBCHDEE', 'CBBHBEHHDCFGDEGHF', 'GABGEBBBHE', 'BEHEA', 'FCGEHCECGHB', 'CEGHFBH', 'AHCADBBECHCD', 'DEEFDDEG', 'FCFCHABFEHHEHCGF', 'FHFGHB', 'GCAFAGEGGGFD', 'CBGGA', 'CHBFFHBECBBFDCECFA', 'FFGFACHDDBCFACHGEABD', 'FBEEB', 'BBECBF', 'ECAEHFEBG', 'BACFFHGGABHEAFEB', 'FABHGCHCCFCGFBC', 'CDBEBHC', 'ACHAEB', 'EADHEECHBBEFFBHHGC', 'AFEBABDEDAAEEH', 'FDDADCBDBDAHCGBEB', 'CDDCAFADBB', 'CDHEEA', 'EHCGCAEC', 'HBAECEHEDFCH', 'HHADC', 'EHCAHECAEHEEDHFEDDG', 'GGADHABFFBG', 'EDBEBFBCFDEB', 'FHHAAHCGEADDCEACB', 'DHFHECDEG', 'ABADEAACEBH', 'CBGGDCCGFFHGEBC', 'GFDGDHADCHCAFAAFHFDA', 'GACCDAH', 'BHDAEDCFBHGEFE', 'DCGAB', 'CDFBBBFFBCAAEHG', 'BBHFGC', 'DCEGGCFG', 'HGDCFEA', 'ACGCCEHDHEACDEAH', 'EBABFDGEAGCCBDAG', 'BEDHBFADAHHBAEH', 'GEBCBAC', 'AAAEAHHGGEECA', 'FBBAAADCCFGEBDGCBDCE', 'GECDGCDGAAAECFFDABCH', 'EBEECE', 'DGFCHFEAFBFHABG', 'HAFDBAHEAFDDAHDG', 'DBEHBHDHGHHE', 'BEEHHC', 'EGCDGFFHHBBGBGEAEGH', 'BDEFGABEACEE', 'DGDDAGBHEHAC', 'EAHBHAHADCGGHDE', 'BAGBB', 'HEHEDAHGAHAGA', 'DEDCEEEFFBBHECBGAC', 'CHBCCDDHB', 'CFBEA', 'AEDEHDFGCGHGGA', 'DAEDCDECAHA', 'GEAAGFFBECBHDBFD', 'FEFDBFDAFCCAEDAADC', 'BHBDB', 'EBFHGHHBAHBEHGHEGDEA', 'FHFBBCCB', 'ADEBBHECFFFH', 'ADCGGBBFDAADAH', 'DBFDEFEEF', 'EACHEHADF', 'BDAFHHAB', 'FHAHAAGCFFHDBHGAFD', 'EAGFEE', 'CAFABBDBCGBHABA', 'ACCFAGHDB', 'GCEFGBCEHHFFGFFAHDCF', 'EDDDHFDDC', 'AFEGBE', 'EEGDBEHAFGDHA', 'FECCGAFGFBBBDEHBEEA', 'BDFBGH', 'BAHCGBADEEAEADCFEBB', 'HEAABF', 'EADFEADE', 'HGEBDEGGFBEC', 'CABHBHC', 'AAGCDFB', 'EBHDCFFACFDEFHGACF', 'BFCBCABDGDBBGFG', 'BCDCH', 'AHFFHDABCFCE', 'HCDCHDCDAEBHAFH', 'GCBGH', 'FAAHEBC', 'CHCDDCFGBBHBADHA', 'BCCGHBGDBBEDFDGCHGD', 'BGECHGHEEHEG', 'BAFEFHDBDDFABAFH', 'ECDFHEHFACHCH', 'BDCHCDFFCFECDF', 'ADADDEAFEH', 'BEHCHDCHHFBADE', 'ABECAFDDDDFEFGFBBBFF', 'GEDCBCEHD', 'FBCDCBDBCHDHCEFH', 'ACFFFDHFEHAHGDA', 'HHCFGDDDHFEHG', 'HDAFDHBDHGHH', 'BAHFADABADDA', 'BHDFDAEEDB', 'GAGGFFDED', 'EDGCCB', 'GAECDBEAC', 'CCGECEAECACCE', 'EFACDEEEHFGA', 'GEGDBHCHBHCBCHG', 'GEFHCD', 'FBDDHCCEEGBACDB', 'HEEFBBFEAFBGGECAFBDA', 'GEDFCBDGDHG', 'GDBEACGDCACDGGFD', 'HGCFBFHD', 'CHAGGCGAGHDA', 'CADGC', 'DDFHBFEC', 'ABFACAG', 'ADGDHGDGFA', 'FHGGHE', 'CDEFAFAF', 'EABBBEGBHHHFHHC', 'ECEDDHFA', 'EGHCHECCFEC', 'DHCDAACHCF', 'HFAADBC', 'FAEADDAHCFBHE', 'EAEAGAEEHDHEFAE', 'EAFDFFHHEDH', 'BFDEBGABEG', 'ABDHFBBH', 'HDBCFHFEA', 'GAFFFHBCFFFBDHE', 'DHABHHGEGBGCFGCGGD', 'CCHDBGA', 'CCAAHDFHCFBGEGHB', 'BDCFEAA', 'HEFCAHFFCBGGCCC', 'GECDAAHCCEHBHBEE', 'FCGDCECFD', 'BCDADGCAAHEHCGB', 'EEHBCFDBFE', 'BHADABE', 'BADGCGEDGGFBABDG', 'CBGDAGDFHGD', 'EEGGCBDADHACCDGC', 'GDHCEA', 'FCHDFFFAGFGGB', 'ACFBFEBEFCDHFAFCDHAB', 'EDAGHBFCG', 'CCHFHFHEHDAGCB', 'ADDFFBHG', 'EEHEF', 'FCDFCGGBCDGEGGF', 'FCHGHAGAGCFGGBC', 'FBFCADECBAGDCECC', 'DCGFGGGHHHHAABGE', 'EHEBEAAFFCEAGCH', 'CHCFABCHCF', 'FHCAFHAHAACBDHC', 'HEHCDGBACBCB', 'GGADHBE', 'HDFBCFDEHFFFGAFAE', 'BHFHGBHG', 'EBFADGBEGEDCB', 'DCAFDH', 'BGGHFEFBGBHDHEE', 'HBHBBDCEEDDGDDDAHG', 'BGCEAACHAFCAGDBGDC', 'DBAACEBCHCAFDFCDFGC', 'AFFHCEEGGHEGBEB', 'BGEGFGCCABHAEHHBEGG', 'FCBFHGABAFCGEABA', 'FDAHHFEAG', 'EAEADEDAF', 'BCGBEGEHHG', 'GGEHBECGGFDAAADFC', 'AGCHCE', 'FDHCBFHDGHABAAAD', 'CBAGACCBHDCECABAGBHH', 'HFBFE', 'CGECEHDEHHBCAAADCFG', 'ABFAFBHGBBF', 'FADGHDDDGGFGHDDHE', 'FHDEHGFABBEGBCHAFEB', 'GGDHFHEAAHFDEACEHCGA', 'HCEEEH', 'CCADGDDDHGCFDA', 'HCEDABDFCCGDFCGCDG', 'CAGCH', 'DFDHHCCCFDF', 'ECHBBGE', 'FHHDFBAAGDEEEEDECD', 'FHHDFFBBEAG', 'ECHFAAADDAEGC', 'CDDAAECEEG', 'EEEEFADAEGFDCEHBE', 'GDBHBDGABGBDACFBFAB', 'HCBHEECAACGBGCHDD', 'CCGCGABC', 'BGCBGGDFGEACEAHC', 'EEBCA', 'FABBDBDCDCGAA', 'ECAEGFADCGABGFHDCA', 'FCDDHEHGEFECF', 'HGBCCCFGCBDGGHDFDA', 'AGFCECAAFBGECFDD', 'GBFGHCGBABDGBCA', 'CFHHDH', 'AHGDGDFEBABE', 'BHGGFDDGGFEEEFBD', 'GDBGHBEFGBFAGEAF', 'DDADCCACGHHHCEDDFAH', 'HBFEGDAEFAEF', 'DCEBGCE', 'EFHACABCAHACA', 'CBDCDFDBFE', 'EFFCFBHFCECF', 'CEFHGCBCHGHA', 'DBHFFF', 'CHCBEBBGBDAGE', 'EEBGB', 'EFBCHHFEDAAHBAGDDHBH', 'BHDBGBCCHGBEHFBFBH', 'FGEAAHHDDAGAE', 'AEAGFACDGDDGEGAAGHFB', 'FAABDFGHAGEG', 'CAAFGBGDF', 'GCAGBDCGDBDEFBFA', 'HECCDCAFGHBCDEEGAF', 'HEBCBDECFDBCHHDAF', 'ABFFAABGHHDHB', 'HBDEEAGC', 'BDFHDDCHCBABHBFC', 'ADADEFA', 'AHDCBEDEADFABHB', 'FDEGFFAGGDDB', 'AHCAGCG', 'FGDCH', 'EFCACBEFA', 'EGGHAHBBABFEB', 'BECGFHAFHGECAHGFH', 'HFHEE', 'GDAHG', 'HDACBBBCDBBDAA', 'HACHADGG', 'FBBEAH', 'HCFHBAAHG', 'GGHGHCCECAGEEH', 'FGFHFBACA', 'HCEADDAHEGCFHHGG', 'GAEFEGF', 'EBFAAHHBCEBCDAGGEEBD', 'DHADBHHFCHGFHFECEFH', 'CHCEFGGGFH', 'FCBCGABBAAAABABG', 'HEACBAFHBEG', 'CAHAAFCBACD', 'CGDCGEDGHA', 'GECCBCE', 'BCFBEDHHGADAGCAAHDGA', 'EFCCBBDECHDEFCEEFGF', 'ADAECHCBGDHEA', 'GGEAEBBBCCACDBAG', 'EFDGH', 'BGDCFCFBHAGAHCAB', 'BGCAFDDBDCBCAGAAF', 'EAEBFBHA', 'FDDAHGH', 'EAEFEGDFBDDCCFDHHFGB', 'AAHACB', 'BBFEDFFH', 'GBHCH', 'GHHFCCCCBE', 'EBAFHDCBHDGEB', 'AAHBGBCHGGBCGG', 'AABGFEGEGACB', 'FCDDCACFGGDAGDG', 'GCGAHCGEEFB', 'DCFFFBCHEAEFGC', 'CCEFBCCHGDA', 'BEBBDGGDCAC', 'EBFACE', 'HEDCCEHGAHFCACHED', 'ECBCFBCDGBFDHEC', 'BDHCFCCEGDBH', 'AHBBDEAHBHFA', 'EGEAAGCCAH', 'GFCECADEFBDDBG', 'ECAHFEHG', 'HCHAGCCCBDG', 'CEAGHDDEHFAADACBHHBD', 'EACGDHAEGHCE', 'GGFDFAGAGGHBEBACE', 'EDAEHGHBDAFEAGGAEFGH', 'HBHBBHEGFG', 'ECAGHEAH', 'HFDDDDGCDBFCGHBAGFHH', 'EHGHDAA', 'GBFHDGCCGGHCF', 'AHADFEAGBAAAEH', 'EBFFGAGCBCGEBGFHDAHA', 'CFDDCG', 'GBFEFDDBGDCHCDABCDE', 'EACAAHFCBA', 'FGHDHFAABEDEBAAB', 'BDFEDHHFCEBAABG', 'HBDGCGFFB', 'FGCBFBD', 'FHHHGDACBECC', 'HFFHD', 'BEBHBGDBACAFGAHEH', 'BBEEFGFDFDBCC', 'FBABFEDHBFGHAEAB', 'DFHHGBCHAE', 'EACBDFDFFEDAF', 'DHBBAHHFFEBD', 'DFAAFCFGHDA', 'GFEDGE', 'GHBDCEEAEDAFGABBDFG', 'HBGAEA', 'CFHBBDGABCFGHD', 'FEDAHCGHHDCDEEGH', 'DHBEHGDEA', 'FGCGD', 'EHDFHHGDGFDFCC', 'DBBGDHCAFFG', 'ACCGBADACAHCGCCHHBF', 'AHCGDHB', 'CAAADDHFFHEEEHDAAB', 'GFFBACFDEBCE', 'ECHHDHABAG', 'AFCGGDGGDAD', 'GDHBDFGADHAFGCHGCBGG', 'ABEGAHFCFFCEDFB', 'EABDCGBHCDFGBHDBD', 'DEEDDDDDDBED', 'BCHCACDDFCHEFHEAFAH', 'FEBCCFGEFGDFCFCAFDB', 'BFFABFAHEGBG', 'DFAAH', 'ECHBAHEDFBCCHFACFF', 'FAAABEADFGGFBFEB', 'BAAEGBGGGDAF', 'GABDEFEGFCD', 'FCGAGBBAAHHHE', 'BADAGHECBCAAFCAF', 'CFFBBBAGFAGHFHHFAHHG', 'BGHDBFDCDFCEHGCEDBE', 'ACBBEACDHAFHFHBEFAG', 'DGAHFD', 'CGCCHBEBHBEHF', 'GDGAFAHBGHG', 'DHGEE', 'FFCDFAAABEDEHBHGHH', 'BFBEAADGAEHFGHH', 'HGCFBAAFHHHEHBG', 'GAFBDHCEFED', 'BGGCGBE', 'FDEDBDADBHDDFCDHEHC', 'FCHDACCBD', 'EBCHEDCEDBFEDEH', 'BACAFABHHGAAAF', 'HBBBEGBAEHCADHDDA', 'HHDGBCEFEFFFEAABBFCF', 'HECDDBACBHAFFDC', 'BFCBEAACHGDBBDGCFEDH', 'EEFFCGEHHEHHAEEHCEC', 'EBHDADCBHEHBFAGCCDG', 'FHABAHGHFCBBFCHAEFFG', 'DCFEDGCDGHEFD', 'BEHGCGEEE', 'AGEAEADEHCHAFDGACD', 'BHEEBACC', 'EGBHAGHGBBAFHHEDGCDF', 'EHDFGFCHD', 'DADBE', 'BFCEGBFEBDG', 'DDFFCHGDBDHGBDBB', 'BBBHGBGF', 'ABGBDGHGBGDGA', 'HFHHCCAFGHAEF', 'HEHEFF', 'BBBEBHABH', 'DBEHFBE', 'CBCHHDC', 'AFFCEDBHDFBB', 'DHGDGHDFGFHCBAEBFH', 'GCCFFGBFECAEEBFEGFB', 'CDEGACHDCDDFC', 'ECGFECBFHGDBEFG', 'HGBADEGHEBBGGHH', 'DFEFEAAHB', 'BCGFFGEFFFAHGCF', 'CACBEDDGACBH', 'HDEHHCGGFHDEGCD', 'GBBCF', 'GDHCHDCHEDF', 'EGDEFDGADHECFCAGGA', 'AGCHFGBCFEAE', 'AEDDGBHCCGEAAGGCDFFA', 'DFBFCDABDACEH', 'GEEAAAHAHBFC', 'FDCFHAEBGAHBHFBED', 'FGDCBHEFHDC', 'DCBAGHDHHCFDD', 'EGCBCGGHGBDCAAD', 'DFFGHFBBGAAE', 'CAADECHB', 'FFGGDCDGGDCGDACBCB', 'CDDFEFHCEGDFB', 'BDDFFCBFAC', 'CBABEBE', 'EGABFDCEHGEHCF', 'FCDGFBEGA', 'CACDFHEHCAFGFBD', 'EADBEF', 'DBBAEB', 'FDGHCAAAAHEBDAGFAAA', 'GEAGEBDDA', 'CBACH', 'ABEHBAHGBEFABHECDE', 'HADCBCHGA', 'EGDFAC', 'CBBEA', 'DGEBDCFFAACBCAAAA', 'HCGBDEEEBGDF', 'EAAAB', 'FHFCCHHCAD', 'ECEBAEBDAH', 'FHBAH', 'CHCDGBCDEDDC', 'FGGFHFDHBDFBGAA', 'CACDACHGHABGBGCACHC', 'ABDDDBHEGEAEHCEA', 'GEEGBB', 'CHACBCHBHGDG', 'ACDABHGEEGFBDBFCA', 'FDEAFB', 'AFBFFCDGB', 'GFCFFFEGABHBHDDBABB', 'FEDAEHDHCFFHFD', 'FCCCEFEBFBCACCF', 'EHBCGBEGGHHDFFEBGAAH', 'CGBAAFCCBHBAAD', 'CEFEDBDGAHCAGCEGGB', 'GDEDHC', 'DEBCBBDFHDHDH', 'ABGDHBDDDBGGBFCGCDCD', 'AGBCAHGABAHD', 'GFFAFHCDDHABCDBBEFBH', 'FDDBFDHBDGEGEDAC', 'CDBAHDGBCBHGED', 'DACDFDFAGEDFAE', 'DHBEDBHBDFBCDGD', 'EBEEEFGEDBFGHAEDGA', 'HDCFAGBHEGEDHBBGFBA', 'EAACCGFHFAGDBH', 'ADBEFA', 'BBGHHCHBGFCEADFGCA', 'GACEGHHCHADFHFF', 'CHGCCCGEGDGCFBFEF', 'CFGHFGFFACDA', 'CHCFBFDEEEEFDHFG', 'DFAGBGDEHEEDBGHHG', 'GCCDBDFDFCHCBDB', 'FBAGCGDFCBB', 'HCFCBFCFA', 'BAFAACACCHFCFEEBGBGA', 'CEECDFDDAFEG', 'CGHBC', 'HBDHABB', 'BAAFAFDFADFHHHDCABC', 'CBECCGDCCB', 'DGCDBFCBADEGBAABEG', 'DECAHEFBGGDCFBAE', 'DHBGHGFBBDBADCGGBHCC', 'FFGDEABACFCGABFHAHE', 'FCHDEFBCDHBEHAEFGF', 'DAHEA', 'ABCAGAFFEFAD', 'DEHGHGHDCGEBG', 'EDEBDFEDFEBABB', 'CBGABAGGB', 'FDBCFGHEBFAHEADDHDH', 'HCBGCBFAHBBA', 'BDFCEGHGFFHCCGH', 'HFHCEAAAFHCDBAAEF', 'CAFDGFBDBEBBCCBBEHE', 'FCFEDFCCGDFAA', 'AGBFCFFFG', 'FHHDFABADCGEAAFCDFFB', 'DDECBDGFEEDHA', 'BDGACFHCFDEEFFEEDD', 'FHHABDBAFGCCD', 'DDFCECEC', 'DCFFBCGGBBAHFHHAC', 'EAGEEFHBHCDH', 'CABFACBFDBHHGHHDHGC', 'GBHDDEDAEFBFBFAHBCCE', 'DHABCF', 'GCGAFBBAE', 'FDBHAHCFBCBCABGBFEHG', 'HDAEHDAFD', 'CFHDDFA', 'CCEBCEGCGHHAGHCBD', 'GAFCCCCCGGG', 'CCGAFBACHB', 'DGBEABCHEAD', 'FCCGHCGHEFC', 'EAABDEFCFBBECC', 'FEFCFBAGDGD', 'FAEFHAF', 'FHFGHFGHECHHEAGGD', 'FEHABEEABC', 'GFEAAADAEHDH', 'EABDHFGCDAC', 'FECDCCBDCGBCADAFFHBE', 'DEBHAHEG', 'DBFHECGCCBB', 'AHEDCD', 'FCDGAACDDFAHFEBGG', 'ACGBABCHGBBEHEGHDE', 'BAECDFFBD', 'GADBFCFBED', 'BGABFC', 'HBGBBAGDECAGH', 'CAHDFHDCA', 'DBGDHFFDBACGE', 'DEBFABCDAAC', 'BEGGCE', 'GACAGFBBEAEDHHH', 'GDEFAFDHBHDBFG', 'BFHBGADDFECDHHCA', 'FHGGFGHBD', 'DDHFHFGACGGBGGG', 'GBBBGFGEGDBFAHC', 'GFDAHAA', 'CGBHHGCFAADFGGG', 'BHCBDCFGAEGEHA', 'DHHBEBDF', 'BFBGFBGAFBEE', 'GDDFEEGBD', 'ACEAFDDFEHFB', 'AFAFFACHECHF', 'CEFAFDHCHCGDEH', 'HHCCCAEBFAGBEDCCDEGB', 'EHFDG', 'ADCBFCEECH', 'CFFGEEGGB', 'DGFHFHEDBFAECDBHDA', 'HADFFAHEDFEGDGDBHDC', 'EAFBCDHDAHEBBFCBFBGF', 'DGCFCECBDEE', 'BFBGHCB', 'FFCAFGEABBGFGCHGC', 'BGBDAGHCDAE', 'FDFBAADCHH', 'CGEEEBAB', 'FBBFFDDCADDEAFDG', 'FFCBGHCAHEAEBHHCDDC', 'EADBFCGBGADGCHF', 'FGHABCB', 'CFHBAG', 'BCGBAAGGGDBGDBC', 'AGCAFFFC', 'GHEDAFDCEEAHCACCHGGF', 'DDDEHFFEB', 'AABHEEFAFHCFFEGEB', 'CFCGB', 'EFCCHCAEEGGCEFBA', 'BGCADBGCBGDEG', 'CBFCDABGHCEDG', 'BDBEB', 'GEEHCDEHHHHG', 'ABDBFAEDEEGFDCCHFCHC', 'EGEFEEFDAFAGGD', 'FCFCGBBGGCEBABBHAA', 'ABHAHFACBFDDFF', 'DDCEEEDFE', 'GDBEFBHFAGDCAFA', 'CFFFGG', 'BEHFCFHAAGFEGCEEFGGB', 'HFDFD', 'BGFEBBCHDBAD', 'AHHCCHFEEBHHACDFB', 'EGHFBAAHGAGEHECDCA', 'BHEBBGBFBCHHFBD', 'EHEEECEGBE', 'DDFACHCEGEED', 'HHCABEFCBHEDFHDBDFFC', 'EAGDBE', 'EEACGGECCFCDEEEHGE', 'CHGFAEDCFCFDDDAAGE', 'BFFACGDBDAEGF', 'CGDDCFFAGGA', 'DHCHEGDDFHGHFDCGFBEC', 'GGHGDAGHG', 'EHDGBG', 'HFCGFEHCAHBEHEDGAFE', 'BEGDHBDAADGDG', 'FDEBDCHDGGH', 'BBFEFHCFEG', 'HBAFCGAFHDBHCDFEEGD', 'GFDFBGCGBFGCCGD', 'HHBBE', 'CFCEFGCHBGBBCE', 'GGEEFBH', 'BBCHH', 'CABDDDEECDCDB', 'HBHEFACGGCCDBB', 'EHBBHEBDG', 'BFDCGCAHHEBABDE', 'DEFHCHBDFGDAEFB', 'HBGBACFDCBHDCECGABG', 'BDFCA', 'BFFEHD', 'GAAGDDBGAAEF', 'GAGBEEAAGGHDBHAF', 'FHBBEDHH', 'HEGFAAD', 'HECDAEBECHFHG', 'HCCCBBHACCDCECEADBEA', 'BFHEAD', 'FCADGCDBHDGDGFGGHAB', 'AFEFAAADHFEBAFEGHDE', 'EFDDAGEHH', 'DEHGABEFAHDAB', 'GGHAFFFFH', 'FFBDD', 'BEDECCAHEGDGFECHE', 'BGFCECBHGGHCCEGEEGB', 'ACEBFBGDGEFB', 'AAEFFFA', 'FBDBFFB', 'BGFFAAECFEFBEECBCEE', 'AHGAGGGHBG', 'GECFEHDDFBBAGCAHFE', 'CCHEDBE', 'FHEAG', 'EFDGFECHAHACA', 'GCBDH', 'CCGDEGFACHAHG', 'GGDBGGCCCDABGBHGADFH', 'HHEEABADCDGAD', 'BDHDHCDCACGECACF', 'HABBCBHCBAD', 'CFAHA', 'HFCAGBDGDGEAFCBDHBG', 'BBAEEGAEEC', 'ECBDBCCFGEFEH', 'FBFBGDGDABFFDHB', 'ACHFCGEBACEAHHFGC', 'BCHCFACGHACD', 'CDGAAHDAGDD', 'CGGBBDAEEFAGHBHEGFG', 'HHAGECBHEDHDCC', 'GAHDEADHBBFG', 'HHDFDBABEDGHEBDDAFF', 'DBAAFGD', 'FHAAAAEEAAAB', 'BHFBGF', 'GCFBFHCABCGFAG', 'FGEFBBBGE', 'AGEBG', 'FCFAGA', 'HADCEGB', 'GBFEFCBDEAADHEBEGCCB', 'GGFDBGA', 'EGEDEDFDFGE', 'DCDECEGDDD', 'CGCDABAGEEEBFCDGFG', 'FHGGGCEEBD', 'CHDHHCFBGFBEBEAG', 'FDFGHH', 'AHEGHCD', 'ECGDHDADFHHBAGGHAB', 'DEAAEGG', 'ADGECHBEGGFGDGBEHB', 'HDADEBGGBHBGHF', 'HECHBAECF', 'CBABGCEHGEFAHEFACCGB', 'CACCAHDBEEFABDD', 'DHBAB', 'ECEBFBADECCDAAGFB', 'EGHHEHHDHCFBG', 'DFHHDCCECCDFFFCFA', 'CAAECCC', 'CEHEGGEF', 'GDCFCG', 'DGFEAHHDE', 'GACAHDAD', 'GCGAHGBAC', 'EHHEH', 'GCGBGDFGFFHBFFBBDBG', 'ABFGCGDBBFCH', 'GHFDBHADHBDCED', 'CBAHBDEB', 'BAADFFCBCGEADBAAGC', 'AFGAFAEA', 'BBDEEG', 'GHDHEFHCHF', 'DDEHEGCAECHG', 'GFCGFHCDDCFA', 'FHEFFFA', 'GBGEDBBGHEDHAEDAGAA', 'BDEGBAFG', 'DEEDFBFDBDCAHEBHDC', 'HBGFBGBDFDBBABFH', 'CCHCGDGAEHEH', 'GFAAHCCFH', 'HAFCBDGGFFHFCBCBFD', 'HDHFAGGEEGE', 'DDEFDAF', 'FBEAAABECEDGDC', 'HHBFGACEBE', 'ADBABEBHCD', 'CEEDCDAABFCEHGAAEEF', 'AAEAFEFFGDFGFBABHEAC', 'DGDBFGGFFFGFCDBDCH', 'CCHCEF', 'EGBDBEAG', 'GHDGFEDAAFBGGAA', 'HBHDDFFAC', 'CBEACBFGC', 'AGACCCDEE', 'EHCHDGDFHHGH', 'EDGDFBFECAFGBBAFAFBB', 'GEFHHFBBC', 'GDGEE', 'GCHDCEEA', 'AHBEEECCH', 'FFCFHFDFDBCBHHGB', 'ABEBDBFGC', 'BDBDG', 'HHACEGCHBE', 'GEAEABHBAAFGFCHCGBE', 'CFDFEDEHGECEFDF', 'BDBGCAGDEAHF', 'DEFGHFEGAE', 'EECBCDHGFAD', 'AHBABBACBEGBDFAFGE', 'GDCGDDHFEHFDA', 'HAAGCGDHGHEEHGGEEAC', 'GBEBAHGBCBHG', 'CEAEFFGGCGD', 'EGEFBGDH', 'FEFEGGEEAEGCCEBFCAA', 'FGAFECA', 'CDCHGHAFBBGA', 'HBFCCHAHDGHGBABC', 'BHGECFFCHBDCCGADDACG', 'GEHEDDECBBFDHGED', 'EDBDGHGCBFGD', 'HCHCEHHHDHBAFE', 'FHBHGDHACACHGABD', 'AEHECGFBECAEDDGCG', 'DEHFAB', 'GHBGCHBB', 'DEBFGFE', 'CAHEFDGH', 'BHADDF', 'HAHEHBH', 'HGCDGDEGHHHB', 'HAABEGGAEGFAABGHD', 'GBAFEDGE', 'FGCCBADF', 'EFEGBDFHBFABEFAEEDB', 'AFHAEDBADGFFA', 'FHCGCHDHCBDHG', 'FHCFFGDDBBADBGHAFCHB', 'BBBCEADFFBHBAECA', 'HEEHDAFHGFDCGFGDECC', 'DAFEFABEFDHAEBCDCGFD', 'GHDHCF', 'EBAHHEAFBFA', 'CDDCGCEFFBHABGCA', 'DHDGGHEBHED', 'BHACHFCAGAHFADAF', 'FDEGDHHECCHE', 'HDCGDFHCA', 'DHBBHBCFHEADABHECHGD', 'AGEFF', 'EGFDDB', 'HFAAGCCCFHEDFF', 'FBBHAGHBCBBAGE', 'EHGBGBHGAHDFG', 'HHEGHBADFEAEDCEEC', 'DECADHGF', 'DFDFDGADDC', 'FCDAECBDBEDEH', 'DFBCCHECAF', 'FDCBEBHFHBBCB', 'AEEEGFGHHCAFBAAECHD', 'EDBAGGHEGA', 'DHEFAGFDADABGAGHG', 'DEACEBBCFAA', 'HEBAECFAFBAAACEFH', 'BHDHACCHCAE', 'AGAFAGCEAAGH', 'HHECABC', 'EHFCAAA', 'DGAECGBAGD', 'BGBHDABGFB', 'BGEBCAFFHFGGCHDHE', 'FBEHEBGFDDDEDHCBDHFC', 'BFABFECEHA', 'DEDEEHBDFDECE', 'AHCEFHCHHDGGAGDEDCDE', 'FDEBECBHGADABCCGCAF', 'DHFCABFDEF', 'ADFBDGF', 'HGHDHDDECF', 'CGCAGDHBGHBADDADHEFH', 'GFFGEADBACGBG', 'FABACCCHGGGBECEGFEFD', 'AEHEHCHBABHDFEBBFEBC', 'BEDCGGAGCE', 'CFAFCGBFGGFCHEHCAGE', 'DFFAEFDDEEDFCGAFCB', 'GHDEH', 'HEEEGCFHAFFA', 'DDAGAGAEDCFGCBGFGAB', 'HBDHFHGF', 'ECECABHA', 'DBDAEFDFGBFDA', 'CEDAHFCG', 'EAFBAFF', 'FBHCHAGEDDHAEG', 'FGEFCBDCCHBBECFDD', 'BFDABGDGFGEGBBGE', 'HBGAAHDEACECDCGE', 'HAHFAADGFDHEDFC', 'FECADAGECFEGBFHE', 'FBHGDDHEFCCC', 'CABFEEHGGBCDEB', 'HHDEFAGGGFHEBCC', 'DCCFEBEHEDFDEDBBGD', 'HHDABBGGBGAEBCDFDEEC', 'EDADEG', 'CGHAHBAA', 'ECEABH', 'EADBAHHHHDAAE', 'EBBGBBGGECAGGFCHGDE', 'CHECEHGBHDCFBEHGHEG', 'FCHBDBDH', 'BDHDGGDA', 'EBHHFBGDAHDEFFCFDEF', 'AGGFG', 'CDGCDHHDECGBBG', 'HGCGGFDDFBDG', 'HAGDFH', 'GBHAHDEHAHDBHCB', 'BAEBFADEGGEEEA', 'CEFBBFAGFEDD', 'HHDGAFABEAHDFEBA', 'HCCGEGDFCEHHEDFDEBDE', 'CECGABBAGHC', 'HDBDCA', 'GGDFBGDCFAA', 'DGFED', 'AACBDAGDDFBDEHDDBE', 'CAAAHF', 'DCHEAFGFECGAFHAC', 'GCEAECGHAHECAFBE', 'GFGHDHDE', 'CHGCCAD', 'CFEDEB', 'EEAHCAEFGFFBGFDCBAEE', 'AEBHDCBDAFF', 'HAEEBGHDGEHHDAAD', 'AGAADHBDH', 'FGDFFBGDF', 'BGEBFDBDEHG', 'CAFHBFAFD', 'DBDFGHHCGDBDCDE', 'DGBFGAGE', 'BAGDGFGFGDCHEDBHBGAD', 'GDDFHGEHBBGFAADF', 'HAFFFHDGFDAFBCGEABBA', 'CFCGAGCGGECCCGGCGAAE', 'CHBEHEGHHD', 'ECBFAGGE', 'BGDGF', 'CEGHBDEAFE', 'BBFDDDECFDBHG', 'DFBBDFEBBGHDA', 'EFFCHFCBDCBDGDDADD', 'CGDFFFBCCBEHFEB', 'FDAHC', 'ABBBEGGHDH', 'CHBCBEE', 'GFBFDBADEEHEH', 'ADEGHFEGDABHBEC', 'DEBDBBBAEBAAB', 'DEECDFACGHEGBGGA', 'BAAADEH', 'GEBBGHCECD', 'GEAGDFDBC', 'GAGDAF', 'CGCFCAHAH', 'CECCFEFCEFB', 'FCGDEDCDFGADGFCHAFHH', 'DEHEEEHECHBDDDDFCC', 'DDDFFHDGE', 'FEFHBBBFBCCBFEGCHG', 'AAFAHHCF', 'HHEFCCGFEGE', 'DABAGAG', 'DAFCHBAEFDGFA', 'EDAFFBHDFHBDC', 'BBBFCAFAGGC', 'CEFDBGHFFCGHAFFG', 'EHACCFHBCBECEECFB', 'FHBCDHBA', 'HGFBFFEEDABHBC', 'EGEBBHABAGD', 'EFDAFD', 'HFDDDDCEC', 'CDECAGGECADEGA', 'AFECHAGHHHBGHGFBC', 'HHDBAHGFEDHHA', 'CHBCEC', 'HDCGBGAHGGCGHDAGHC', 'BBAGBADBEGCCFHHDE', 'EDCHBEADAFDAHAFGHCH', 'CDFBGGDDECH', 'GBDAGBEBGHHG', 'DDBHGBEABGEAAADDACAH', 'CAEDGFGBFHBCFAAB', 'EFHCC', 'GAEDECFHEECFHF', 'HADHHGCGAAH', 'GGBAGAFACCAAEAHH', 'CFBFBCAEDCGFEEADAD', 'CDAED', 'BGCHG', 'CCAAEHGGBBCCGCGGC', 'ECDCFEEH', 'FAFHEHFDEBE', 'GEABGEFAEF', 'GFHAACCA', 'DEDECBDEHFDAFFAABA', 'GBBCFDDGGFFFAACEFEFG', 'FGHBCA', 'DGCCGEFBFBDAGE', 'HEEBDHEFFCHEEBHBBGFD', 'CHAABAFCCFCF', 'DABEBAFHGHHACAE', 'EDEDHG', 'BHHHDAHDHEDFFHA', 'EDEACDEDCGGFCEEHGGFC', 'EHEBEB', 'AEBCHHHBECBDDAFFDBBD', 'HBAHCBGBCFEEEBEGCHF', 'FCBAGGHFA', 'FEBEHHBDBAGFB', 'DFBCEA', 'FAFGDBACCBECHBHADCGA', 'ADECCFHFCHHAC', 'GDBEEGGDHA', 'EDFCABCDF', 'AFFCEDDEHA', 'DCADDADEAHE', 'BGGDHEGEEEE', 'HCCAADFCGHECAACAGEHA', 'FCHCCECC', 'EBAHAGFGCGCCDEFCBEDC', 'BCBFGAG', 'HDEAFBDDEDCGBAHHDG', 'FBDGBFDGCBBDBG', 'EGABHECGCCB', 'CFCHEHECA', 'DGCDAACF', 'GBHDEEGCFCF', 'FEDEE', 'HBAHABHGG', 'HEGFBHFCFACFB', 'GEGGEBAEGAGABHDCG', 'GECGECCHAGHHCGHH', 'FHAFHAADEBDGG', 'CCFHCCHBEAFFFDAGFEGG', 'DDEACHDHCADGCGF', 'GGHGBDHD', 'FCEFFABDAFHDHECGHFA', 'EDEDE', 'HEGFCD', 'HEHAHEABFHCCBA', 'FBDDDFHFFACC', 'CDAABBFDAAAEDEEBGEBC', 'GHFHFCEABEHEDHHEBAD', 'AFBGGC', 'FCFEDDFCEEADFAEABE', 'AFFBEFBDAFGD', 'FEHCFFH', 'BECHB', 'CCGBEFEBFBCBHEFADA', 'GADDFGAEGDDAHHAFDDE', 'DGGEDFEHAG', 'FBGDBBA', 'CFECDHCAEGF', 'ABCHBHDHEEBGBCCE', 'DGFHBFEECB', 'FBGBBDBCDBADEFFHA', 'BHBFCFEEGDAF', 'ACGAAFFBDBEFCBDDF', 'BCAFHDCAGE', 'HEEAH', 'HCGHECED', 'CHGDFHBCFHCGF', 'GABHCCADBDEB', 'HGHFDGG', 'CEDBEFHEBGCDGEG', 'HCBFGEHCFHBBBGGGFFE', 'HDHEBHGAAECDAHHD', 'EDDCHAEHDAAHDBD', 'CGCAHD', 'BGFCDCHCAF', 'AAGFB', 'EGDEHFEE', 'HEEBCHDEFCCDAAFH', 'ECACFGGB', 'CGDBBCEA', 'FEFBDFE', 'FBEEDFEHDAHCFBBA', 'DEHAGBDACHDAE', 'ECHFEGEEFHHDA', 'HABGACDFHFFCEAAA', 'EHCEBACEAECG', 'CFGCFGFEEDFGE', 'BEHHHAFDA', 'GDAAHFHCFFGCE', 'CDEAGFCEHE', 'BCGDHFAGDBFFFDEBBAF', 'BEGAEHGABCBHEEAEA', 'BACEEDEADFEDGFCCABAA', 'CEHFD', 'AFCFCFG', 'DBFHHGHEAGAGACD', 'GFCCGCEGHBE', 'CBHFEEHCHDFAAEDDECGG', 'GFCAGHFEHHFGHHFAEBD', 'EEHFEFBEAHBFF', 'AFAEECGAEF', 'BCEHGACAEAEH', 'ADGGE', 'DBFAEHCAFCCHBAABHB', 'HHGFDHCGAH', 'CEEGDHCAHECDBDGEC', 'HFBDBHDGAGCE', 'GAHFAHDDACFAEH', 'EEEBDAFAEAGFADFDH', 'CABEEGGBDEHBBG', 'DEHHGFCAFGE', 'CCEECC', 'BGBABAHCGHC', 'AAHEHDAAEEEHHG', 'GGEAADAGHC', 'DBEACAFD', 'FBGECCDGEAHHCBHABCC', 'GEGEADHCEBHBEHHG', 'CGFFDCHAEEHFAF', 'HCFHHGCGBGCHCFADAFCA', 'DAEHGGBBABBD', 'HGCHHGHBGDHE', 'FEAAHGDFA', 'FFBGDAFAFBGAFE', 'CEGBFG', 'GBEHDGEEDCHHHCCCB', 'BBBEBEAFGBFDEBGH', 'AGFDBEBFGHGFDGDDAG', 'EBHGGBDBDFHAG', 'BHADFDFEF', 'GEDBHCGDHHD', 'FCCHGHAEB', 'CFADEGBEBGEGBGECC', 'BFABHEHG', 'EGGEGFBADBECHG', 'FBDBA', 'FGGGHBD', 'HCACEAAF', 'HAHDHBDF', 'FGCFFHHAGBDEDFEC', 'GEDAADDEGFBDBBGFCFE', 'AAABHGFFGGDHA', 'HFFCDGGEEHGBGA', 'AGHBDBFB', 'FCECF', 'BAEFE', 'BAFBDDEGEEBEHFDHBHAC', 'AEDHGACEAEHBFCBGD', 'GBDEBHFEBFE', 'AGCACCHGDDEGHC', 'GGCFFF', 'BADBCFFDDC', 'BEGFDAEFHFAFFHCH', 'HBACGDEHGCAFCFHABGA', 'GEGEEFBEFHFCHGH', 'DGGGDFGHDFEFHFDBAA', 'GACGGDGG', 'CBCBDHCFDDF', 'BAHFC', 'HFCCDAGEBDA', 'HFBAA', 'GGCFAA', 'CHHHAGF', 'FHEGCFBED', 'HBBFEEBGDHFECCGBCEDA', 'GBFHBDCEEHCGGDFFGE', 'GDFBABAF', 'BFACDCFHBBFC', 'FEGHEFFCH', 'CHACEACBDGC', 'FDEDCHFGHCBGDGFFFECG', 'GABCGCGCCCDDDHBHE', 'GAFHHHAAGHHHDAHB', 'CDBFD', 'CHHGHCHGEGBGACFHGCH', 'HGCCHFCDDF', 'CDFAGHBGHAGAECDGH', 'EAAHFEGCCBHDCDCF', 'GCBADCCGCGEBCFAB', 'HHEGGHBBCDHFDF', 'DCBCDGDEHDCGFEAC', 'FGEHAEGCAC', 'DEFDDAGCEGFFFAA', 'DBGCEHECH', 'HFEDG', 'BGGDCDB', 'CAEGAEHEC', 'HFAHEBGBDC', 'HFEHBHACAHGBDBH', 'EHBDCHEFFHEDGBBGD', 'HAAGEA', 'FCFGADCAEFACFD', 'HADAFDG', 'HHFAGBAFHBHADCDDECF', 'BECHAGE', 'ABDAHDFDGAEADDADBF', 'AFECDCBEAAGCEEH', 'CEFBBCFDHHEBHFGDA', 'ADHFGBFABAGCHEH', 'BGGADEGFEHCACFD', 'BBDGH', 'ADGBGEAHHFDF', 'HGDFAEBBHCBAFE', 'BBHFEFBDFGECEAGFCEF', 'CFFCHGHFADBGDCG', 'FHBHHDFDFFDBEHAEA', 'CGGCGHHCBDEFAHGHB', 'BCGHE', 'CHEBGDC', 'CFBCGE', 'BGEBGGFBCBCDDE', 'HCGGGFHBFEGGHGFBDGD', 'AEDHAC', 'AFBHGGADADDAHG', 'BBAGDEHACBBFE', 'FDHBHFFEGHABCDAGEC', 'BFGFBDCGCHBDAGBFD', 'AHCDGGDBFFEDFHECBFGC', 'HHCFCDDACBHEHFB', 'DCFFADDAGCFEA', 'GDBGBDBGAFEC', 'AEAFFCGAAFFEACAEAB', 'HHGCBDHGD', 'CGGFACHGDCE', 'AAGAACGCAAAC', 'EADBHDBDADEFAHEC', 'GFGGDHAEECBFHD', 'EGAABAGAEGDBEGFGBC', 'AGHGDEHCGCBGDDHBGFFC', 'DACHH', 'BAHCDCAGGBEEAF', 'HFDDFGCADDF', 'AFEHFAAGEACAC', 'HEBBDCHDFGGEBCFEFBCD', 'CBDCFDEDABAEH', 'BFDEBEGEEABDFGDDDCDB', 'BCEEE', 'GADDDG', 'CDEAEHCFD', 'DEGCGFHGB', 'FDBBFADDBCBGCEBBA', 'FAEHGADB', 'AHHFHFHHCHCBE', 'CCHDADGFDCFAEH', 'GDEHBEHCGDDBBFDA', 'GCAEGEDEA', 'DCEDCGACFBGFAA', 'BBFHCDHHCC', 'EHEHCEAFEF', 'HBHFCEACDBCHBHECGGF', 'GEDCBDHBBCDHEBBDFC', 'EBDCDDECFDCADACHGB', 'DHGDBB', 'EHACCDFDHCH', 'BGGGAH', 'GCHAAFFHBAEEFGEGADE', 'GGCFAF', 'DDHBECGH', 'BCCBE', 'ABDEDF', 'HBDCHDDFBFHAAFG', 'EGGFBAGBBBBFCHA', 'FHBFBHH', 'HDHBFFGEFCFFEBA', 'DCGAHFGHEFGE', 'GAHGHFFCEGEHBFBE', 'EFHHGD', 'DAEDACHDACACBHAB', 'HFDHFAECHCFCGHFFHE', 'AGFEAFDEDBHBFBEBEHCE', 'DBCDB', 'DGEGBBEFCBHAH', 'FCEBFFCGH', 'BEDCHACCDBFFA', 'AABGBEFGBD', 'AFBFFDDGFGCAHDFA', 'HCBDFGHG', 'DBFBCGCH', 'FFGCHAAHADEDH', 'DEFFFHFDDGEEG', 'EAHAGF', 'ABHEBCGGGCF', 'EEGFFB', 'BDACDBBGHEFFD', 'HGCEFGEBB', 'GHGHHGEGBFAEHFCC', 'HFFADEFDAE', 'GEGFGBFCEDFG', 'AGHBHCHDGHA', 'BEFFADDBGDGB', 'FHCHCHBBB', 'BAGEFGHGHADD', 'AECEGEGFEEAAC', 'DEFBHFCAG', 'GHFAEEFHBFFFHHA', 'EAAFHHHDAGCGFACF', 'AGDFBHADFCFEGHFDFGGB', 'DEGHFAHACBAFGDECEH', 'BAEHBHCCEFEFHCGABGC', 'CDEBDCBGAC', 'EFFCFACGGEAGDDAGDBH', 'HDCGFACFBGA', 'CHAHAABFFGCCHEHA', 'GDBEHGGCFFBDDCFFD', 'DDHHBCBBFEDAHFCGDH', 'FFDBBE', 'EGHGCBGDFFA', 'CGHEBDAH', 'ADDAHCHBA', 'BECADFFHDHCGDBA', 'FHFGAGFEAG', 'HADBCECEDDABBCGFC', 'EHHBBCHDGGG', 'DAEDBBE', 'HCGAA', 'BBDCFEDGEEGCCHCEAAH', 'FGGEDGGDFFHHDFAF', 'FGEEDDG', 'AHEGHCFEFCBDEAGFAAGB', 'FCBBCH', 'EABAEDCHCC', 'GDGCGGHFGFBDEGHGFHEE', 'BAHAACHBGDFHAGAFDGFG', 'GFCCAFBGCADGBEB', 'EBECDBCE', 'CGCHBFBEHG', 'ECAGBEDFCHDAEDGDGEE', 'BFFHHACCADHF', 'CFEBFAHCEGDCBAAFA', 'FCFHGDFGCHBH', 'EFCHFHAGAEG', 'GGGGBB', 'DEGHAB', 'DHDEFHBFHDDCEDBEFCBG', 'GDCEGAEFDFGAFH', 'CHGAFGGCFAEBHAF', 'BBHHEAAEDEABGCGBCEFB', 'DGGFADDACHEHEEFDDD', 'AEDFCFEFBECBHFHAAHA', 'EADFA', 'EGHFEAGGEBDHBAH', 'HEDAHDGBAGHHDFCEA', 'HAEDHGEBADCD', 'CBGCBFDDCCAFCCH', 'CBBFCDDAEF', 'ADCDBDA', 'AGCHA', 'EFCDEFB', 'DEHEHEDAABHEECCECDG', 'FCCHCDCDEDEEB', 'FEGEFFBABFH', 'HDCDFE', 'AFAHBHFEGBHBADABE', 'DHACACGEHHB', 'HHFGAEABGDEHHACCC', 'EGHDCABE', 'GHFCEHDHFEGGBHD', 'ECHECCAHDCAB', 'GCAAFBFDCHGHDHEF', 'FDAGDE', 'GHHHEHCFBAFDACCDB', 'DFGGHACCACFCBHB', 'CHHED', 'FHCDCAFABFEH', 'DHECCHDBDFBBFGD', 'CHHFCBHHFDHCEFAF', 'GBHFDDHGAGE', 'AHBBEHEFHBABAH', 'DEEAGGABEBFGCHAAAFD', 'EHBHAACEC', 'ADABEFBFHABHH', 'DGFBBDGAEDHEBECDCH', 'EDCHFAECEADFEBGF', 'EADEACEHA', 'DBBDGHEECEDBEGHB', 'BCGCAHGGCFEGCHDHBGF', 'GHEDBEBECDBFDE', 'EBFAFF', 'FAEABCHBBAFEDFEBBHAA', 'CEAHDEF', 'BEFBGFBGGD', 'BHEDHGAAAB', 'GGFFHBCG', 'ECFGABFHE', 'EABCFCDHH', 'FHGHAADGGCF', 'CCGDEGFHECABDECHFB', 'HDCDBAAEDDGFH', 'ECEFDEEFDCDFGHEC', 'BHEGACAEAFE', 'DBGEA', 'HAHCBDDEBCHFGGFHC', 'AHHCFFHEFHECGHBEB', 'DGAEHE', 'DDDGECE', 'CCFEHFFFFCDAHFGH', 'DCCBGHEEFEBCBDD', 'CHBCDHDG', 'HFHEBBEBBGAGGGCFB', 'DAEHBHGFEAAEHBHD', 'ACHDECCEBADFHFEHAEDA', 'HDFHGDGEAC', 'FHEGHDGBGEAEAFCBAFD', 'GADADAGBAFBAECBEAC', 'HGHDHFBHHFF', 'HDHBHEGAEAC', 'FCGHBAABBCDDFCEFBBD', 'FCECDFEEEF', 'BEEDD', 'CFAAFDDHAFGGEBGF', 'GGAAHCGHBHFEGEGEDF', 'HDCEHC', 'DEFEEGHEFECFHHGEEBFA', 'FCEHGFHEDE', 'HEHEFB', 'GFCFHADFEHBGCBDCFED', 'CDHDAFCE', 'CAGAAAGACFBBFBC', 'ABGFDBGBCFAEFGCFDDA', 'EDHADFFBEACGCFD', 'BAAHC', 'DCFHGBCGFECFBAABEG', 'ACAEDFCDFEEGC', 'CCGFB', 'HAHHFCGCBCDHHGFFGB', 'HDFEBB', 'CGGCBGDF', 'DCEGBF', 'HHEBHGEDHEH', 'HDCDB', 'HDCGDGBEGHBCGEFFD', 'FCADH', 'FFBADBAHHH', 'FAHGCGGHGDFFGGEF', 'FGFFCFGDFAEDDBD', 'HDAGFCGHHH', 'CEGCCEECCBCGGFEGD', 'FGDHEADBCCHGABGBCDH', 'FFCHEDAEDEEDACCEDBC', 'DDCBGAEFGE', 'EEDHFBECA', 'BGBAFFEBEBGFG', 'ACGHD', 'DAFCHFAGBD', 'CBGEGHEDAED', 'HEGAECEEGCEDEDC', 'GAEAAGHBAFH', 'GCDFFHCFGGABFABD', 'HCHEDAEGDHB', 'DADHFFDEEGEDBD', 'AGHCGF', 'AGABC', 'CHACFBFFGHEDECCHHBBF', 'BGECACDGAGDBGF', 'AADGHD', 'CEEBCGCDCEBBHGCDFG', 'HFGEFBFEHBDFACHDCH', 'BGEDFFHFCFA', 'ACDBAFDDCHFAB', 'HHDGGAGHBHHHDEEEHDAC', 'AGEGGGGBA', 'EAGGHHHHCBHGCBAHGH', 'BAAFDEHBHHHAEG', 'AFDGFCG', 'CDCHAFFHCAFFE', 'AABGCFEAFEHGC', 'FEAHAAEDD', 'BDCBGH', 'EAGDH', 'DGFBECGBAFFGGFGFCA', 'BFFGDFCCB', 'ECFCEHHEG', 'BGDFAAGFAAEFEECE', 'ECCGCGCFDCABDE', 'DAHHDEABDEDBEE', 'EEEBCDC', 'FBAFDDG', 'CFBBCFHCBGDBAEGCE', 'HGADBDG', 'FCAEGBFADFFAECEEGH', 'BDDEE', 'CHHGEDHF', 'GFAHHEDABEDBAFH', 'GDAGHCHDEDFABCCEGFD', 'HEBAGEHCGDCFCG', 'FHEAAECGFHG', 'EGGDCBDBCEGDGAFEHGBB', 'AAECDBBCGDFEFEHHEGA', 'GEHFBAFDBHGBDEBCEBG', 'FGDEEDFCGD', 'BCEHBEDGBFHA', 'HHFDEGD', 'ADGDGABAEGBDHF', 'DGCFDEABGDCECACDD', 'HGBCBEEGCHD', 'AHHEFBAFCHDCEF', 'DCECCDGDBD', 'ECCCCGDGAF', 'FDBEECADEEADDGGFD', 'DHGBFEECC', 'GBDBGHFHA', 'CGGAA', 'GFDFCCFA', 'HDAAHDCG', 'ABBDGEBCDDFDED', 'DHECECEFGFFGD', 'DADBGEBCDGBBE', 'FDDDDFD', 'DHHBACFB', 'AEEHEBDEEBHAAB', 'HCDHHCD', 'HHAFGBCCDHC', 'ECDGECCBFEADHBDDEA', 'DFEHBHDGDHE', 'GGADBADFBHCEHG', 'DABEEFDB', 'DBECGGBFAEBH', 'FAEGGADCCEADBCAB', 'BFAGEEFBGH', 'ABDAAHCEFEGCFABDEDHE', 'EBHEA', 'GCAHADABGFCFBDCDFH', 'AGGHBCBHAGABD', 'FGEAEH', 'CHBDGCFHBBBGG', 'GCFGCCEAD', 'AHFFDDHGGE', 'BCCDCDFAGC', 'ECDGBA', 'FBDGBFDAG', 'DDGEGGDHF', 'BCACEEHCFAADFAFBCFBB', 'AGEDDCCECDDDG', 'BEHDGFFACFEDC', 'CCBCDBDFDABBHCH', 'DHGHBDACGDBBF', 'FFHDF', 'AGFHHEBGEC', 'HEBDFCGFDEHECDBB', 'ABAFCHCBEDGH', 'CACGGHBGEDBFGA', 'BFAGBECGAAAGCEEGF', 'GEHCAECAAHHHHHCHDBAE', 'EBCGGFACCH', 'FFECHBGH', 'BHEEEEDEHDBDGEEFH', 'CDBFE', 'ECDDADEEHEHHDHCD', 'AEHBB', 'ADHCDB', 'DHBHCEGDFCG', 'DBHAGDAHECF', 'DDEHHCDFGGGA', 'BFEHCGDHEEFBBD', 'CGECHFGDACDBB', 'EBHBHDFFBH', 'FHDFHCBB', 'ADAGF', 'ACFAECFHFDCEACD', 'ADEHEAHEDFBFEA', 'BDFEHGAFCDFAGFAD', 'BHGFGDE', 'DGEAFFFAHECEHEHCEFA', 'DFFECEAC', 'DEDFBAE', 'FDAAFDHB', 'GABHGCFDCGFCHDAHHEC', 'GEBEGDDCDAEDDFBG', 'BBFEFHECBBEFBB', 'EGFABAGHBFAGEHCHHCFF', 'HHFGBCCAB', 'DHGGAFCCHGACB', 'HABGG', 'EGDFBBBACFHCDEHAHCAH', 'AGGDEHFGDEEFB', 'BFBFHEFDHDGEGBBDHFGE', 'ECGADH', 'ECBFGBGAEHF', 'FADHHGEDDHAEBHFDGHBA', 'BCBDFHH', 'CCADCGFFDCECEAAEHHB', 'ACEBCDDGFGGBFCGF', 'GDHBGCAFF', 'ECCEEHACAAEDBD', 'FHHGD', 'CFDFFHFA', 'HBEHA', 'HCBHAADDCBAGBFFAFEHF', 'FAHAF', 'EACDFDGECFEHAADGAFB', 'CFAED', 'DBEEA', 'AGDAFEAGDEBAHHCA', 'DFGBHAFEDD', 'BHFHBCHEEFADCAEH', 'ADBDHEAAHDFFAH', 'EDDCBCHB', 'DABEGGDEGDFEGHFC', 'DDCHADCE', 'ACGGBAEGHA', 'FBBGGBH', 'AHDFAACFCFDDDCHGDGCD', 'BCBGBAGCHGF', 'ABECBGAAHCACADAC', 'FEBBBFHHF', 'DDBEFFAD', 'HCAFEAHD', 'CDHCFAHDFEFEH', 'HEGFHEADEHFH', 'GAECDBHCDEGEGEA', 'CGFCFEFFGCAABBGFBBG', 'GHEDCEFCDFDDBH', 'CHABH', 'FFHCBDDHGDADDHEFGHB', 'ABHHGAEBCDF', 'DGBDAGG', 'EEBDGAFBGHBGAHECGDCA', 'DGBGFFGDBCE', 'GDBACCHG', 'DEDEBAECEDC', 'GHFGFBGCBHFFFDADC', 'GHDGC', 'EBEFGDFAGBEGC', 'CFFCDCAEHGGBAADCDGC', 'GCAEDGGH', 'CGAGEADF', 'AGGEEFAAFGCH', 'GDDCGDCCFHDGBAE', 'FBEEBCGCEDGHHBCHCGEA', 'HEAGEB', 'HGCDDDDBFEDFGAEF', 'ACBGEEDACDFHHEDGHE', 'FCCDCEGEAC', 'GAHFEBCBBFEBD', 'CFCEDFDB', 'DADHCFB', 'HABGABD', 'CBCHFAEGFFDCABCDDCC', 'GBBFEHCEBGCAGFDDFH', 'GADDEH', 'GDDGDDE', 'GDHCHFCCH', 'BHADGCBBBEFBDA', 'HDEFGDCHEAGBBDBBDHE', 'CEDBE', 'FCAGAHBDGDDAEFCACA', 'GHDFDFHAF', 'DEEAEHFCEFECFDAFCE', 'BCAFBH', 'AGBFABFG', 'EHDAABB', 'CAHHAAEDDCGBHDHGFEBG', 'AGEFGEHGDGECAFFEGF', 'DAGBBHEAACGEDCGAG', 'FFEDEEDFAHBGDDCBCHFF', 'HGFHGHA', 'CGGDAFE', 'HGHBEDBACHG', 'DAHCDDHFCGEGCHGGHB', 'EADEAAGFGHDGFB', 'EBCGHCACGFHCFD', 'FADHC', 'AGDBGACHDFAEAGGHDAAG', 'CEAEFCDBFHGFBFFECA', 'CDHCBCGGDEEDBFC', 'BCDEA', 'HEGGDCEBGACHB', 'HDDGFHGEFEFHD', 'DHBCEBHACHFECEACCCHG', 'FBFHAEEDFBHC', 'GEGDHABGFFBBHDCEC', 'HGBBC', 'BFBGAHF', 'BFDDCFCBBCGBFG', 'GCGDBGCGA', 'DAFCGDE', 'EAEGHDBCGAGHDDGCBCH', 'AABDAEEACD', 'ACBABAGGFBGCGFGGBEG', 'DCHEBABCGACFBA', 'AAACBFHHGDEBGBFHCDE', 'HEFDABFGBCDDFDAH', 'GACCCE', 'BADCAADHCACCHDDBEH', 'HEHAFHHGC', 'AGCGGBEEGDD', 'CFHHCDG', 'CGFGDFFEBAGAGHAE', 'HGAHGABHFCHCAF', 'DCFBDGDCBAF', 'CDABBECCDECACBCD', 'FEGAFBHBDHCFBAHGBB', 'ACEDEBD', 'HEGEDAGCBE', 'GGDFHEFFEAGDACFDGEG', 'BGHECCGHBFAEFAHDB', 'ADDDFFBDBCBDCAHDA', 'ADAFGBFBDEC', 'FHCBFDHCDBEE', 'EAAEGHA', 'AHFHG', 'FHDDBHFBFCFEBCH', 'GCBBEGCBBEFFCH', 'ACEFEDBCFFHDHB', 'DHEBHF', 'DDFEGCGBGAHGGCGECAB', 'FDHGFGGGG', 'FEEHFBAGAFCGBGDFHCHD', 'AEHBCBBFHBAGD', 'AEGAHBB', 'GBHCEEDABAHFDAHBGBA', 'CEHBCEHBHC', 'AEHDEHECAAH', 'HHCGD', 'EBCFBGFFACCCHGGDBBF', 'FHFGE', 'CGEHCBBEGGAFGD', 'GECBGBEGACE', 'CEHGCBGAHGHEH', 'EABGCGDECEBCFEDBHBBH', 'FADAEFA', 'FCGBCEFHGC', 'FFAFBBG', 'BAGDHFCBDHHH', 'CDFCBEFGFGECDFHCCG', 'FBCFEFGFCGDFAB', 'EGCGGHEEBCFFACBFE', 'AHFFBDDC', 'HDEBC', 'CDHEB', 'AADDDBEFBB', 'FEFFFHFCFB', 'AABHBEBEGD', 'BFBHCGEBEA', 'EGEECF', 'CGGFGGADBBGGBGH', 'EHGHBBBDGDGGDGHE', 'DHFDAACGDEDEE', 'AFCFGBCCAEB', 'AGAEHHBHD', 'ACGCCGCCEBA', 'CFBHDHCECGDGGDCDFDF', 'DBEFBHBDAHFA', 'HDFBBBFBFFABAGD', 'HEHFBHAFDECGAHEFA', 'DHGDCDAFBAEDDGFH', 'ECHDFAGAGEHAAFHE', 'GDHAG', 'HHDADDFCBAGDDAFBA', 'FBHCBEGCAHCAEBC', 'BAEFBFG', 'GCBEACGDDHCA', 'ADHBGHBD', 'FBFEAHFABHABBEC', 'DBCHG', 'EDGDBADABGGDADBEAH', 'DGGCDHEA', 'GBCBDAFHDADDDEBDDFBE', 'AGHFBBCHAHFHGGEF', 'DHGEGCGGCCHDHGGGGFH', 'EFBEFCAAHC', 'FFCEFGEFFAGE', 'HHCEFHGBCC', 'DGBFCAFEBBGBHCH', 'DAEHEDDHECFCF', 'EAABGGEDAHDHDEEF', 'CFHADCDFCB', 'DDHFAECDFBACEHHAG', 'GGECHADHBEHFHBAAGFEB', 'BGHBEBEBGAHF', 'BAHADBCBDCGDHFABAEHF', 'BADEHCGBAHAFDF', 'FFAHEFD', 'ACEFAA', 'HBBGBFDHCAHCFEEAD', 'CBEHDHDECFBGG', 'DADEEF', 'GHFBGDCDCGHG', 'GEBGGFCGEHDFABFAFGB', 'GDAABB', 'DEGFBHADFBBGAABA', 'GFGFHBGFFHFB', 'CAFDDFBCAGBFEEE', 'FEAFCEHD', 'DDDDEBG', 'CCFEACAGBGFAHBECG', 'FADCCFHCBHFEAB', 'ECEGEEBHDGBAHBD', 'ACACGEAD', 'AHFAFBCCBHBBF', 'GHFDAABFDAE', 'ACBFF', 'ACGECGDBGAD', 'GEHEGEHFGFDFEAGCGHB', 'GEACHGEFFD', 'ECGHGB', 'FEAHBFBBEFDHFEABB', 'FHCDF', 'GCFEBGHDFDAGHBEDDB', 'DAEBGEB', 'GECAAGCG', 'BDDDAFGGFCFGCC', 'ECFEFBEHBAHBHCFGFHEF', 'EBDHGHEAEHGDGBD', 'DDEDGHBBE', 'EHGAAC', 'EGBEADECHHAHBHG', 'BFFGFHEECGBH', 'DDGHBDBHGEEFAAAFFFA', 'CDDCAD', 'EDGHFHGEGG', 'ACCBHBEEHFFA', 'HFGACFFDCACDD', 'BCGCBDHFCFE', 'CCDDGHGFC', 'DFBEEGEAHBFG', 'DAEHC', 'CEFFBHDDCBFGG', 'FDAGCCCHFB', 'HBGFAGHDH', 'EEEFBDDH', 'BHGECGEDBCDCF', 'GHDCFAAACEDDHDFAGFD', 'GCGHDAFCCDEEGBBFC', 'HDHHHCGDG', 'BHEECGEEGDAGGGGFGHBB', 'EHACDFHCCHGDBBDAAGC', 'FCHFHFCAFGFC', 'FGBHAEE', 'ABCHFBCFGEABAE', 'BFACGEECAEGDC', 'CEHFAGCDDA', 'DBBACAC', 'CDBDG', 'BBAFHHEBH', 'GFFDBEHHACGC', 'ACEFAAAGADBHFD', 'AFBHDDDHEHFBGEFCAF', 'CHDGEHBCHGBE', 'FCDEBEBCHBCBBE', 'ACDAGCGAAAFEH', 'GGHEDFBFEGG', 'HAAEADHBEF', 'FEABEDADECHEH', 'BAHHBBBFHBGFE', 'GCCDBFHGHE', 'ECAHHFGBDGGFFACE', 'BACBAFF', 'CHBFEAGCGFHAE', 'DFBGC', 'ACCDG', 'EDDCCCDAAHBEHEGBAF', 'BGFAGHEEEFHEAFA', 'FGABCHHHAGBBAC', 'HCHFFHHDFEAFBC', 'ACHAEHGCE', 'CGFGBEBBCEDAAAHBAH', 'HEDHAFFB', 'EHFAGECGCGBHEGF', 'CGGABAGDBECDCFEDB', 'GHCDHDBGA', 'GGHFBBFFEFBEDC', 'HHBAEDBDDCBFHCDEDDFH', 'EFEDABHB', 'CAAFCCC', 'CFBGDDGEGHE', 'GDHDGGH', 'BBGBDDAABABB', 'FBEHDAHGCHEAADAEDDBD', 'BFCAHHCGA', 'AABGFDF', 'CGDBHEBCHDCFADABEBDB', 'EFAEECGB', 'GBBGFCCFEFFCDHC', 'BFCEFCGDHCGAH', 'FDCHAEHDAFCD', 'HFAEEHEGBFGADD', 'AFHEFFFAFFGEBDCHBCD', 'ACBDEHHAAFEA', 'FADBHAADEDDFEBH', 'DDCHBADAEDCF', 'GHHBADGHCEADCEEHCGA', 'HFHEGCDBBEEEF', 'HADBAHEEHGHDDAAAC', 'GFEDDCEHGBEAFDAC', 'HBHGFHHGDB', 'BDBHDACFABAHHHGFBE', 'GFEADH', 'CHCCA', 'HHCGCG', 'GFHEFAHEEEEFDHAGE', 'FCGGDH', 'BEEGHGFCFHBAA', 'HECHGFCHAFB', 'BDCGB', 'DGAFEBGCCGACDCABD', 'ABBAGGHCHG', 'HCFBBFAGECBDDD', 'FDADEBH', 'GDADDCAAHHACCGHCHGE', 'DBBFDCCEABEDGHB', 'AHDFHFDGA', 'CCFBHHFFFFFBFFCDA', 'GCHDHHGG', 'BECGFCCBAHEHHA', 'CEHHABDH', 'AFEDBBBG', 'GCGBCADHCAFB', 'FCADDCHHFEEA', 'GFEFGDCHGH', 'BDGAHHFBGHABBHBBHCF', 'EBDBDEHGFAB', 'EFFHBEDHCD', 'AECAGGFDE', 'ECFHBBADEDDCCCE', 'GBADDACBE', 'BHHHAAFHECCCDGFEAH', 'HGBEBDDEFG', 'EFHDBACBEF', 'ADGDFGH', 'ACFHEHGFADDGBDEBACAF', 'ECEACAAFEEE', 'GHCFHB', 'AHHEBACAG', 'FHGCHGCA', 'CAAFDFGCDABDHCF', 'GEHFCGGFDDBCAFGGHCB', 'ABGGACFDGBAFHC', 'FAGFBBCBFGFAAGGABC', 'GGBAFGCCDHBCGG', 'GHDCGEBDDDEBA', 'BBAHGHCC', 'FGGBGCBHBEGADFF', 'FCFBADHHCHF', 'ADBGBFHA', 'HFHCACFCEFCFDH', 'HFACGDADE', 'ABDHGEEGDBEFHCHF', 'EDDFBEEHBEFEDCEEFGCF', 'DCBDEEHFBBADCEBHGA', 'DAGFEFFHDAEDBEECBED', 'ACFCHCDCACCCHEDCC', 'FEHEAF', 'BGABDHHHAEACEHEH', 'AAFCAEDGC', 'GDGFEDBCC', 'DCEEGACDCFFHCBFHFHE', 'EEGBGGCEEA', 'DBGFGDH', 'FDGFHGAFGFHHGAF', 'DFEGECCEAHG', 'FCEGFBBEDBCEGAHEE', 'FGGGGEEDADD', 'HGHEGCCDEFED', 'BEECEFCEEDGAHEEF', 'FGCEECEHABADBBH', 'CCGBFEDHC', 'FACFBAAECAG', 'EFDDCG', 'HEAFFHAHCBBDHFH', 'CAEEHCCHEBCCGB', 'HCACHBDHBBHGEBHDGF', 'HAAGEFAFBEDFBEHGA', 'BBGEHGBAEFGABB', 'HHADEEHCA', 'AEDHBBC', 'GAHBCHHFEBG', 'BBBBECAC', 'BHAGDBHBDF', 'BADECHBHHDCCAEGHD', 'FGGFABCFHGAHBHC', 'BFEGFDEBACF', 'HGHGDDE', 'DFHHADFGGBFHEAHHGHC', 'CDCEGC', 'GAHECBABDDF', 'HFBAAGBHBHBH', 'HCCECHACHC', 'CHGDFFGFAFCCBFH', 'CGGDDDCHADBCAHAFEHBC', 'DBHEGHGD', 'BECFCFDFFGC', 'FDAEEBFHHHDHC', 'DDAAECHEACFCBHGF', 'AFBBCDFEEHE', 'EHABG', 'CGABC', 'ECCCHGHDF', 'GGAECGADBBBDGHHD', 'DCBEGHFDEBACECA', 'GHHACGFCDHFGDEC', 'ADFBBEHFCDDHDCGDEBEA', 'AFEHCEABGCGAHGAGC', 'EGBHEGHCFB', 'GAAEDEFC', 'AHCCEEFECADEHGFFGBAC', 'CEBBAADEEFAC', 'AGFBFEGHDDEEC', 'BGDAHEDHDCFEBC', 'DDFGCFAABEGEAD', 'BDDCBEHDCEECBHGABA', 'FHFFH', 'DDGHBAFCEHBFFEF', 'AEGBEDCHEDAFDGDHHD', 'HCGGABEDC', 'HDAGHGGCHHFFBBFBG', 'GCEHFGFBFDDFHHDF', 'GGGDHGEAE', 'EFHHDGHDFDGEGCHDFED', 'CBBADEFEHCHBFDDEEFD', 'AFCEEECEHADFDEH', 'DAABDHBCHADFAEEEA', 'DDHHBEAHB', 'DGEFFFDGBEAF', 'DHBAGFEGADEHBGACDC', 'EHEAHDFBBHG', 'EABFGECAG', 'DHFDDHE', 'CEGBFECHG', 'CECGHCBCCHDGGFFC', 'DHFGDAGGEABEGDA', 'FGDCH', 'EHBDEGAFBHEDDHAAC', 'CDEFHHEDGBHFE', 'GAAFDHAFGCCGHCD', 'GCACEHHFCGGDEDFHHG', 'ADEBCDCE', 'AHDBBHF', 'CCADHDADBHH', 'DCAEGADHDF', 'BCBGAD', 'HFFFBFEFCGFFCAE', 'BEACDDFDAHBF', 'FDFECFAFCBGDGBBH', 'CFEGEFECCCEFGACCCDH', 'GFAECDBAAGFEGEAF', 'ACAFBAFGEG', 'DFAADEDEHBAEAEEA', 'CHBAGD', 'FGBCDGHCAD', 'FCEADCDCBDAAFB', 'HCFGDBC', 'CAAEFFDC', 'HAEHFBB', 'CEFEGHDHAHCHFCAGE', 'BBBGDAEDBGDF', 'BFDFDGHDFDADAECCEC', 'CFBBACFC', 'HBCBDCBBGHBACFA', 'CEGDGCFAHFHBEGFADFG', 'DDFHDECFBDFGFGEGHHDF', 'AEGHAGHFHE', 'HCGDCDAGAC', 'AHGDCHCAEDCDBF', 'GGFEFABAG', 'AFBEG', 'FHHFHFAAFAEBEDEABCBG', 'FDDABDHEAAA', 'AFAFFDHHFABGDCA', 'HEFFEDFDGBEAG', 'EFFDFADHDHADHBD', 'GEADAFFEHEADCA', 'EHDEFDBHDFFH', 'CEHFFFGGCCDAAEAC', 'EEBBEAEHDHEFABHCEDFB', 'EGFBCG', 'FCEBAFECCD', 'HDAHD', 'FDBDAEFHHBBBGBD', 'CACEGBECGFCDGD', 'DBAHCH', 'CGCAADBHACDHFBDBAAAA', 'HFACEEGFHAFEHH', 'GBBAGDCDABHF', 'HCEBGEDDHACG', 'CBFEHCFBCCDFAHEC', 'ADHADHCDAAGBA', 'DAACHFDEBGE', 'EAGFHECFBHEBECDDFCE', 'EDEADDABCDBGGCHHCD', 'ABBGECFAAABADGBBC', 'AAGBGAAAGAEAGBAB', 'EGHBHDDGDGCBCH', 'FDAACCECC', 'ECEFCGBCFCCGGECHAF', 'FEGCDA', 'ADDBD', 'HABEHADA', 'GBHAHGFABEEHDADHDFCG', 'ABBBBAEBBEAHFD', 'FCDCBDGCABAGABHGEA', 'BDCAGBCBAF', 'HHAAGFCCCE', 'HDABCECCBH', 'DGCHEACFAEDDHHEDEE', 'HEBDHEC', 'BDFBGBEHAGCFCGDH', 'DGHDBFCCH', 'EEGDCAHHDCHFBAE', 'HBBHFECGACBECBEDFBG', 'HDBGDBEGGBAAEGH', 'BCGDCHCCCHF', 'HHGBEDDAGCHCEC', 'BEFHAHEADBCAFH', 'CGAFDDFHHAEEDGCFD', 'HABAFHGAGGDDHEDH', 'ABHBCACAGHFEHDCHBHFG', 'CHAFEGBBHCGECH', 'EGAEAEAHEFCDEAFHHA', 'HGAAFH', 'CGFHGFGHECCBEHC', 'CCAHGEGDGG', 'ABDDBDAGDG', 'FHGCCDD', 'DDABBGCBBHBGEHGG', 'FDFFFABGGGEDB', 'GDDHDDGEBCAGA', 'AHFCEBG', 'DGAAFABGFHEDAAHHGEBE', 'CEGCE', 'FHFCBECGDAA', 'FAHCHDBFDCEACEDD', 'EFFCCDEACGHFDH', 'EFBGECDAEA', 'BGEHECAEEEEHDCAEF', 'ECEBBHFEDFEE', 'GHECGDGFCHBDEFH', 'BHFGBCDBHFFED', 'DBBCBCAGHDGFE', 'GDECF', 'BBECBGABEECHDEHGHC', 'FDFAB', 'AEAGDEEAA', 'BHEABBEGFBFGFCFG', 'ADEGDAHBCDECEBB', 'BBAEABFBCFDCCFGG', 'FEBAAFGBCEAGCBEH', 'HDGBAGAEDEAG', 'FFDDDEACHE', 'ABDCGHCCH', 'CBEGFAFCHHC', 'GAGBFECEEFBEE', 'AGEAAEB', 'EEGGFHDHCHGHGH', 'BBDFDCB', 'FGCEBDFDFADCEDHBDA', 'BAHGHFCCGAEG', 'FGGCE', 'ABEHHFHFGCE', 'FGCGGHEABGBADED', 'BCEFFDBC', 'FBGHGCAGGCBGAAC', 'BDEDBFDFHGHHEHH', 'GECCFBHAGAGEGEEGBBH', 'GFEDEDBBADHHCCEFEFB', 'DCDHBEBCHFFEABAFECCC', 'DCFBHHFBEGEAECGD', 'FGBCED', 'ACGHDBCDAEGF', 'AHEDHDFGEACEDCFFHF', 'HHGDCCB', 'GAAHEG', 'DHAADEEHGC', 'CBHABEGHGEADDHCGEBBA', 'GFDDF', 'CCCDB', 'DEBCADDEBHGB', 'BEADAEAEFGEBFCFEHEG', 'ECGHGBBBAAEDCCAGD', 'CHEFGGB', 'BEEAFHDCAGBA', 'GABGHBFECCFDGDED', 'EFDGDAA', 'GABAAFEADFBADGDFFFD', 'FFDEA', 'AHHHGB', 'DDAEGABDEACDAEDB', 'FEECEDCHEH', 'GAGAFHHGACHCCAC', 'AHGCEDFHEBCFHCBDFFGD', 'FCGFG', 'EACEADCDADHDHBAHC', 'EDHDCGHEBAFBGHFHA', 'BECEE', 'CAEFFEBE', 'EFFAFBDFFEEAH', 'BBECEBHGGGEHBACEC', 'HDGBCAH', 'HEHFGFA', 'DFEEDFDDDF', 'EFBAED', 'HCADCFCBFEF', 'EDEAGHEGBH', 'CDAHFDHCBDBGCHFCEA', 'DADCDDFHGCHACFHHA', 'CCBHCHGBHFE', 'DGCDA', 'CFDADDEAGDABDECBGFFE', 'DGFAGFDCBEBBCHABHAF', 'CBDCDGADBFBHGDHCC', 'BGDGAAEGDHDEDEDGAF', 'DCAFDBABC', 'FHEHFHCECEFEBDAAFFH', 'ABFACHAA', 'FHDDAA', 'DBGCHCBBCCEHED', 'CBGFCGBBEGBAHDB', 'BGHDBDFHCDGD', 'GHGFCGHEFDABGHB', 'HFHAB', 'CHAGGGB', 'EAEADABGED', 'CDEFCEFHFHD', 'HCBFCEBADAF', 'EDAGCFHCEFAHCBADCFDF', 'GFCEFADCEGCGEDA', 'BAEEECEEEGDCB', 'AHAGDDBBD', 'HGGCDGADCAFEDFB', 'CACFFFGCGCBAGBGHHFBD', 'GCEHAEBDF', 'DDEGCHBGEBEGDFHGDHAB', 'CBAADCBEFEBD', 'FFABHAD', 'DEHGEFAGGDAFBGE', 'EBDBHAAC', 'GGADHFGC', 'HHCFGBHDEAHCHEDHEED', 'FCDECHFGACEC', 'HCHGACDGD', 'AGHFCEFAHEHB', 'HCFAABBGABFEA', 'GFDGAHGDE', 'DDFEGCDDABEGGCG', 'CAHAFHF', 'GBGBGACGHE', 'GHBDGAHACEF', 'EGDHCHHFHEH', 'EGCEDGDCCGG', 'FDGFGFFGCAFBHH', 'GBFBEEBGFDEBBCEG', 'CHDFHDFADBDBDGC', 'GDHGGBEG', 'AEHBFHEABFBCFCBG', 'BDFAHDFCCAHEFF', 'FHFDEDHE', 'AFADAFBHFHDC', 'GHEEDB', 'CCBAHAFHEFADGBGFEHCG', 'HGBADAEGGDHAGG', 'HGBDHFFEAFEHACFDACG', 'EDDEHCAAHHBEHBHHEDBE', 'FDGCEBACCGCHEDG', 'DDAEEBDGACGDFC', 'AAAHGFEFCDAGFBAEEA', 'GCEAFGHCCGHCHGFF', 'HCCABEDGDAABEGCDCFBG', 'CFDDFHEAGEECHC', 'FAABHBGCAHGEGH', 'BCCCGBBHFBBBGGEBFAEB', 'DECGDF', 'CCDGFEGDADHFB', 'GEADHGBGCA', 'CBABAFFFFB', 'GEBHGHGAHCEBAECHDB', 'DEHDCHBDDBACDBCFGEC', 'EEBEDBBDG', 'GDCAABEEFAEHEDCBEAFH', 'DABDBFBFGA', 'CBFAFGDGDGACHEBBGDB', 'HBCFEEFGFDFEEHHFEH', 'HAEGEEGFDGA', 'GFAGDB', 'EAGHFFGEBAGF', 'GGEFFEGGEE', 'CCEEEBDHDGGFGBGGEED', 'HGGGGFGFCAFDAGDBEE', 'GFGBCDDHDFGGB', 'FDFGBHEEDBFGEFDHD', 'HGFGGFHADEBB', 'CGGCED', 'FCEFBHAAHC', 'HHGFAA', 'BHGEDCGFHCHDAHH', 'GFEGAFGHBGADAAEDCGF', 'DAADCGDGGFEH', 'EGDEHHEBEAAEC', 'GEGFAGE', 'DDDBFHEB', 'EHDGAADHH', 'HFHAFFEBGE', 'HGEHDECHEAEDFH', 'HCDDABCFAHH', 'HHFDCFBHHGECHHHGFGGB', 'HFHCFAHFEBEHHGGDGBA', 'HAEDFCBFEH', 'FHDDCBFCB', 'EHEHFEDFBFFHDFEB', 'AHEGDHE', 'AGDEHHACEGGGFD', 'ACABGG', 'GDGDFAAH', 'FEHECCFHFGCGD', 'DAHDEGAEG', 'EBDCDEDBHDADA', 'GEGGDCECGBDDDDD', 'ECHAGC', 'CFAEGEBFHCBDD', 'BFEGH', 'HHCBADDCEECFGFFCDHGG', 'BFDAGHEDDGHEFAD', 'DDFHEHBFA', 'DGHFAACEGGCBEFF', 'EEEBCDGFAA', 'HGADHHDGGBECFDGG', 'GECEHFAG', 'CEEHCGBDBADFCDHHB', 'EGGGFC', 'GAHGBHFEBHGDCHCH', 'CBACDCACBFBHAEEHB', 'EDECBBGEBFDBB', 'EEEDEDCF', 'HBGFBFCEAHCF', 'ADACDDEEBGEE', 'HHDBABHBGG', 'GFFBFCHFAGCBAHHGHEEA', 'CAHEFHDEHECFGE', 'DBHEEGDBHFBEAGA', 'GAADHBG', 'AAFFAHFC', 'ABAAFFEB', 'GDFFHCCHDCF', 'CDCDFAAADCCDFDDH', 'FECDEA', 'GBECCGFDGEGCHFBC', 'ACDDBFCFGEFBBGBF', 'EGBEHFDBH', 'BAFFGGFEFCBGCGDAA', 'GEECGFHCHDGHCHC', 'HEFHFFDDBDEGGHCBDDGH', 'GFGEDGEHFDCEDDAFED', 'DCEGGD', 'DBBFHFHACACHEDC', 'ACEBDEGEDFHGBDFCGFDD', 'BFCEGCEAFAGBFAGF', 'CDAGGEFEABBGECHBC', 'EADDHEEED', 'DGEGAHFFCFDDE', 'BDEGEAHBCEB', 'EEBHDEBBGDGDG', 'AHGGCFGFAB', 'ADFBCEAE', 'BHBHHHACCEEAGCDG', 'BAECFHEBCD', 'BGHEEEC', 'CDGHEA', 'CCFEDCFCAHEEB', 'DEFHCEEDDACBBC', 'CGDEDF', 'AEGBAAAGEDBDGAB', 'HBFFCEHDFAAHBBF', 'CDAGHADFBGAGHECB', 'DEHCGD', 'AGAHE', 'BDHABHAHADFEAC', 'HBHGGHE', 'BFDHCEEHGACHBH', 'AHFAGH', 'GCFGBBADAAAAGGFGE', 'HHBBAAGCAFB', 'CDHECA', 'CABCAGCGFAD', 'BHDFBEGFECHCBHGDD', 'FBCHAGAEBEHDFG', 'HBBEHFAFGBH', 'CGABABBE', 'EHEGEHBHHFGD', 'EHHBAHACEH', 'CDEHE', 'AACBAHGAFADCA', 'GGBFBGEBHEHFHGCE', 'BCBCHE', 'EGFFAHBHE', 'EFCHHHBEHBBGHBHFFH', 'BCFBBHBDDF', 'GFCBBH', 'AEBAH', 'DFGCCEEFEEBFCBFCBFC', 'HEEDHDFD', 'BHHACHFEDF', 'BEBCG', 'AEDCDAGFDFFDAF', 'CHDCDFBEFGEHGDEEGFE', 'GEHGDFA', 'HDCCEHHAGBCBAFADBB', 'BEAEBCDEHGCCABDFF', 'HGEBAE', 'BAACCE', 'CEHHHFBBDABA', 'DBHFGHAFFBDGGHCCDB', 'DEAEDAGDEGCD', 'FBDCDECGDDHCAG', 'ABAEBHGDD', 'GHBBBGCBABGGFFCDFF', 'BCGEAAHFGCGHFB', 'FFGBHHBBGB', 'AABAADGBDDDC', 'BEHGHHH', 'BGDDDFDAEGBA', 'FGGEEEBCH', 'FCGBE', 'FFEEEHDA', 'EHGGDDGA', 'FAEFCCFG', 'FBEGGDFCDHDBAHCCBH', 'CGCBGFGEADBDBH', 'CGAECGC', 'FEDHCF', 'GGCBABCBHFDEBHH', 'FFFGBGAEGCEEDDDE', 'GAAAD', 'AFCGFCAECAHEGCBDB', 'BFHDAFHCBHHC', 'AGBECADBAGCADAB', 'EBBBHH', 'HAEHCEE', 'HBECGBHEBF', 'FHACGFDACDHD', 'GDEDBCBFFGHACE', 'HFGEGDGEECAGEA', 'HHCEFHHAAAHFGBECCA', 'GDECADCAFACFBDEEFAFH', 'BCHBCAD', 'BEAABHCGHEDF', 'AHHAHCFEHHEACGEBDB', 'HEGBHDAAHECGFD', 'FCCGFDBDBBDHHCCH', 'CAFACAEFCB', 'HFBFHBDBEGDADBFGEC', 'BFFGDGHEDDGFABEDGG', 'GFGAGHFCECAA', 'AEDFGD', 'GEHAHBBHB', 'FBHAHHGHGAB', 'CCBCC', 'EAHDHBDADHGFFEFCAH', 'CHDFHBEEDCEDAEFGCDEG', 'EFFDHEAFCBFBEACHCABH', 'EGECFFEBBAAHAGA', 'EAFCFDEF', 'HFBDDCDCFHDFGCEHC', 'BBHGBHEEDEHCCBHBF', 'BDBGB', 'EAGFDEEADH', 'ADFCFEBDEBDFCEEF', 'AFABFCBACHBDAGCHBG', 'DBDAHCAAHC', 'EECFFH', 'GDEDD', 'GGBEBBHGGEDBGGFEE', 'CDHBBADBDGGFDCAEHH', 'DGCCC', 'AHGFE', 'AFCGFBDDBD', 'EGEGEGAAHHGBBACFAFF', 'CHCBFACFGHCEEFGCG', 'EEACEDDFCAACFADGGDDD', 'HEDEECEHCDEBGHCB', 'BHFCACFBAE', 'EAHDHFCGH', 'DHFDBFDCG', 'BCCDBFCF', 'ADGCHBEFCFDABFB', 'BCFFCCFEBFGDB', 'BGECACCFGHCFGCH', 'BFBCGDDFFFEADBEGDDB', 'BBFHGDEDC', 'HCHFGAD', 'ECCGBFEFCADC', 'CCEEAFCCGHADA', 'EAFBACFEBCHED', 'HDHGDAFCBC', 'GFCBFAG', 'CFFGFFFHAGDCDGABGAE', 'HEGAABGBHFGEHDCAAF', 'FEBHCFCABHAGBAGDD', 'GDBAEA', 'EBHHFAECBFHAHAAEGE', 'EFHHHEDA', 'DGDBEEFFBABEADH', 'EDDGGHGCFBDCHDADG', 'BDCFBHDHAEECAH', 'EHCHBDBEBDAFEEHGCDH', 'DDCCECGHAFAA', 'FCFGGDBHFGBDCDHCDG', 'BBHGAC', 'GBBFAADAAHBGCD', 'FCDAGBCHEDFHAG', 'EBECEF', 'CEDFFHACBE', 'FCHDDHGHFAAAEA', 'CEEEHBD', 'AGGHC', 'AGGDCFDDA', 'AHECE', 'FHHGFBDFBCFDBGAFFFB', 'GHEDHEEAFD', 'FGCDEDCHFD', 'GBDCBGCHG', 'AECCACHHCHBGBDFBGGC', 'BAHEEEGGAH', 'AACHEADHCGBDB', 'BFEADCCACCCAFFHBE', 'CEDAHFAABFDHBGDBBA', 'EEEADEDBHCHEGHFBGG', 'HECGHAF', 'DHDDEEHEE', 'AGFCBC', 'HEHEBAGBGBECFBABGF', 'GAFDB', 'CEHFAFDDEGCAH', 'BDFFDHHABDCA', 'FAEGDCAFHCDGED', 'HDBEABGFGDAHADEHB', 'EAFAGGACBC', 'EBFFBEBGDADFAEAAE', 'AEGECCCGAADDFB', 'FAHCEBHCAEHFCCH', 'HHFDFB', 'BHBDEBFCGA', 'EFDDDFA', 'BABBGA', 'BDHCHCHFAGAE', 'ACDEFFGEE', 'CBGGBFCHDEHCG', 'AHACBEHCEAACDAGGHC', 'FHHFAHGADBAFDDB', 'DHHHH', 'GBBCCEEHGBHABEE', 'ADHCEFD', 'DBBGEFBEHDADEF', 'DEHEDGHHFC', 'ACHBACCHDH', 'DEADBGCCACGGGA', 'DGHCCGECE', 'GHGGCC', 'CFBFEDCHA', 'ABGBEGECBAEEFDBDFCGD', 'CABHDFDHAEHBBF', 'FBHFBFDFFCE', 'CHGDH', 'EGBADBEDHGBDBDFGG', 'FCFAGADEBC', 'ECBDHFBGGECHFHH', 'AAAAC', 'DCGGCFBHHGGAFE', 'AGDAEAFDFGB', 'HBEGDADFBCG', 'BFCHCCHHBEFHHF', 'ECECDGGCGGFGBFHBC', 'BCCCBECCGHBFG', 'CFCEADHAFHBFHAFB', 'ACHDDAAGGHBDCFDADCDH', 'DBEEHBEFBAHAGB', 'CABBAADEDGDFC', 'CDBAADHC', 'BHACCGEBHEGGBCEEH', 'BEECEHCACCHCAGGGH', 'ABFCH', 'ECEBHHFBBDHDBDF', 'DHDBEFDEAEABGDBHBECD', 'FCAAAGAAAGEHHE', 'EBCFDABHFFEBHBDGGA', 'HDECEDBCEBEFBFBHFHG', 'GDGEGEGGCGAHGAFA', 'BFCGBFHBEA', 'HGGEC', 'HGGEEHG', 'GGCAEGCHBGFC', 'AGCDAABAEABG', 'DDHDFFDHCED', 'BDFDCAFABGGHFHB', 'FGFCCGDAGCFHCFCCHCDG', 'GBCECAADABDDHHFAHGFA', 'DAHFCBEDACDDEDGEDG', 'FECFFBFABFGEG', 'ABGFAFBHEE', 'DEDAECBFCB', 'AFFDEDHGBCFACDHB', 'BEBFFABFEBDADG', 'DACFBDAEDGAHE', 'ADFCHFEEACAFAEB', 'FDCAFGACCEFAADAECFB', 'FGGECAACDBHDECFE', 'FACDDDEHCDDHE', 'FHFDDCDBCAAFHGBEB', 'DCDFH', 'CAEABACABEBAFGFHD', 'BAGDFFFDFEBH', 'ECHHECDDGFDHBGAG', 'AGBDCGHBDAADFADAECH', 'DFDBCEGAB', 'DCBHBHGEEHFCEC', 'AAAAHCH', 'ABAAGFHAECDDCB', 'BCAACHAFGGCG', 'ACCBCEDFCCF', 'DACHF', 'EACEGAEHCGCGEADAFGC', 'EEBCH', 'CDBGCBDEB', 'HHECH', 'EGCAGHE', 'ADCBCGBHDGDFDADCABD', 'EACDA', 'CFBBAEC', 'HEAAFF', 'HHDHGDDB', 'GBFBCEBGCEAGEGEGFG', 'HGEDBA', 'CHCHBEDHHAEC', 'BDABFBABEEFBGDAGCFG', 'CBDBHBCAGECCDEH', 'DBGCBDBB', 'HBCEDC', 'HDGGEFHHHCHDFHFDEC', 'DCGBCGCBDGDHFD', 'GHHGDBGFEBGCED', 'GGGHGBAAGHADFAHCADBG', 'BBDBBGBGEAAHDCAAF', 'EFAHEGCG', 'EHHADCBCHFEDHFF', 'AEAGAAAE', 'FADABHFBAB', 'DHAEEFBAGDEDBCEAH', 'AEDEFDEH', 'HCEAA', 'CDFGAHGFCGBFFHHAGBFH', 'GHHFEBCAGDGEBHD', 'ADGDHABAHDEAHCC', 'FCHDEAF', 'DBCEDBACEHHHED', 'AHAEFEHCDCCEGBGCFCEA', 'AGGGAFAEEEB', 'EFHAEEECBEED', 'HHDBEGAHCFFDAHD', 'CGHHGGH', 'ABEAG', 'HABADDE', 'AEGHBEGGEAEGDFHBHCGA', 'HBFHGDFBGHBADGEF', 'BBGBAEFCAH', 'BEBFEGCGHBG', 'CACGAFGEEBAFFEG', 'DBGHBHGGFFAB', 'HAEHAEFGEBECCF', 'CEFGCDFCBDGGBF', 'HGFCDFEGAADDAGH', 'DBHEAABHDFBAFGCEDFA', 'CEDBGGAHGHHBDDFCHF', 'AHEAGHFHACHGBDFAG', 'FGBBHFHDHGFDCCH', 'CCABEGBGCBD', 'HDEADCDDHF', 'AFHABGHFDCCC', 'GBEGBFCEBHBGHHG', 'ADHDGBDFGDCA', 'GHGEABEHEFBHBAHGGH', 'FDBBCE', 'GFCHECABGHEFCDDFCH', 'FFAHHCEDCBCHDDGDE', 'HHDCHCADBCADCGCECFDH', 'FBDHHAABBGEA', 'DFDACDGHEGHFEEBHFBHF', 'AEBGEFHADFGBACEFD', 'ECDECEGHCGDHFBGH', 'FDFDBGBAFCG', 'AECBGABHABABFEBD', 'FFABBGGBADC', 'CHDAFADDHAE', 'AAEFCFCAAGHDGDBBEA', 'EAGEE', 'FDDBHCCCEDCBHHFHDBC', 'EGCCHCBEFDGDHA', 'FFDCDBCADGGDFFECA', 'GBDACBDGAGGBAAHCA', 'FABGACCGBA', 'HHHHB', 'FCGFHCHDAHFHFGEG', 'DHECFEHD', 'FGEHGFFACECDBAAC', 'EBEDAGA', 'ADDEDBAHAAHAC', 'GDEFCFBEBAHBEBFDFC', 'ADFFEEHGGADBDB', 'BADFHADCA', 'FCCBFCEDAGHA', 'ECCHCEFEGCH', 'GDGDFFEHDAGHHGAFF', 'HCCABAFH', 'DFDGHH', 'CGCHCHGGFCGBGFCC', 'AHGAGEFGCB', 'GGDEFAEBCC', 'AHBDEDFEHFC', 'BEDHFDFC', 'AFEFGG', 'EAEHAAFCGFCB', 'DFFBDFEGBGDB', 'EECEGHGFCHEHDBBHDCF', 'AEGDDE', 'GEFGAHHHCGHDBGCD', 'DADEAGEEACG', 'DFGDHDBFEH', 'GBDDBEAACHFC', 'AGGAHAAFACABEEB', 'DHGAAEHHBG', 'GDABFHCCHF', 'DHFDFEHEHG', 'EGGFGC', 'BDDCD', 'GEEDBBFFCCFFEBFHAD', 'HCEBCBCAGHGGEF', 'HFBCAG', 'FBECFEAFDAFGGCHFFF', 'DHGAAHCCBCEFF', 'DBAAHCDGFCC', 'GAEBCBCGEGFFHBCEF', 'BGGFCDDDDDDBDFGAH', 'HCCGFB', 'DCBBGEEGDFDHEBDAFDBH', 'CFFHBAGHHEBGEEFB', 'GFEAGGAFDGDCEA', 'AGCAFDFEGDEAE', 'DBHHFBF', 'DEFEADFCCFCGHCAHDH', 'EFHCDGEFB', 'EFGHBDGCEDGCCBBCA', 'GHEFBFBEGCBEHECHECC', 'CBAGDEB', 'HCCAAHAGEBFDCCF', 'EDFGDBFACGAFEDAGEEEG', 'FGFCDCHFC', 'HDCFC', 'BDHBEADBFFEFF', 'BHHFCHDGHADABCDFDGBH', 'GCEBAGEBFEFEHHBCGAFG', 'BBACE', 'DCCGHDGFFHHGF', 'HFCGCDEDDCFFEAGBFF', 'BGEDABFBGGBHFFAAGBBE', 'EFFBCDBHBCBFA', 'AGAHBGFFG', 'FBDAFEB', 'BCGECEAGDECED', 'FFAEHGHBC', 'HGCHDEGGD', 'AFDEEHGGFBEGCHBD', 'CHBDEEHAHCH', 'FAHGBECBEDB', 'GGBEEFCGFFEDC', 'HDCHGEC', 'DBBDEHFEEACAHBB', 'FCCGBEEDBHA', 'HGCFBEAAAGDHHEG', 'FABHHEBACGHBAA', 'HDCHBHHHBBDAFEHBHG', 'ECFDH', 'FFCGHHBABFGHFAAHAEDC', 'HCCCAGDFBDFFACA', 'AGADGEGCCFEFFHHECEE', 'HAADFFH', 'HBEFCEEEBHEHCCHB', 'DBDGHBCCBDCCDE', 'DGGAEFCAADECF', 'GEECBGBEHDDACDFAFH', 'CBBHBBHGFHCAAHEECEE', 'HCBEEEDHHF', 'HBCEABCHFFHDDFGC', 'BBDAEBFDAFGFGCBDH', 'GCABCGBECCABAGGEGDB', 'AHHGEBG', 'ECEHABG', 'CBGGEHABE', 'EEGHBAGFD', 'ABDFBGADD', 'GFCFCBDBBDG', 'DFACDBA', 'AGABD', 'FEBCAF', 'DGGFGGEGEDBEGACAHFGH', 'BDEGBGBCBCBHHDAFBHFD', 'FGHCDFBA', 'BECBADCCAGADG', 'FHCACFHAABHHEG', 'EHABFEB', 'CCADHHBHBH', 'CEBGCFEHHBEBGACGEGH', 'EEHHAFEGAECDAB', 'HCFGCFCCDCBBEDEAGCED', 'CEBBAEEDAE', 'BECBADFGEEADFGBEEBB', 'BBFBGHHFHEEHDHGFCHC', 'GDHGEEDFECCBFG', 'FCACCHBCCAD', 'EGDFEAGHCACDDCADDEA', 'FBCDAGCE', 'EDBEGHD', 'DCBHC', 'HAAFEG', 'EGAABAFG', 'HFEDBDHFC', 'DHGDCBAGBHHBGCE', 'DAAFGCBBCGACEHC', 'HBBFFCDECFEAHFAG', 'GFEHHH', 'GEEGEEEGFFEHB', 'GFDBDC', 'CEHDAAAFEEFH', 'HBBCBEGAEFAHFDAFAE', 'BDHGFDBHDHEBCA', 'GBBAAFCBDF', 'HEDDF', 'GFCHCGH', 'HCGEBHBGC', 'ACCBBDD', 'CECCCFEGFHEFEACC', 'AEGEGD', 'EBACGAHHBDEDHFB', 'HBFBDD', 'CGFGAFFBB', 'AEFEDBHGAEGH', 'GDHCEBAECDGCHDG', 'DEGBFFBGHAAACAHEFHH', 'CCCFEDFDHEFCBGEE', 'EGBAHAHC', 'AAFFBACCFHCH', 'DADAEF', 'HHHHDAFDC', 'HCACCFGH', 'EDFFBDD', 'HEGEGBH', 'CEGBABBAABAAGBHHBGG', 'CECDAABADEA', 'FEGEBFGBGFDE', 'DHABGDBHEGEBBGCHDGB', 'EADFGGEBADHHCFG', 'BBGGBCECHBF', 'HCCBCCAEDEEHADGBC', 'HACCDGA', 'BCBECEDCCFFADGBFBGE', 'HCHCECABEDBGBH', 'DAAEDGAFCCHFAGGD', 'EBEDBC', 'ECAGFHBAFBBDDFD', 'EBDDEFEHHAGHE', 'HGDFEFC', 'AEHBGDFDCCHBDEEEFEF', 'GHEGE', 'GGFAGEDFHHAEB', 'HEAAHG', 'HHEGDE', 'HHEGFHAAGGHDHGDAAFAE', 'BHAGDECDFFC', 'BDBHFA', 'FADEHBFADBFDAEBD', 'DDBEGFDBAE', 'HFACEACEH', 'EAADAEBCAFEHHBGGFCAA', 'HEECEE', 'AAABECAFBHBBH', 'HBBBHEGGCF', 'ACFGFAGHADCCH', 'DGFDCACBCDEHGFBGEE', 'HEEEHDGABDFFFHFBH', 'EBABDBEC', 'BGFFGAHAFGHBCG', 'DDDHEABGBAHBDFADA', 'BBFGHDHDGBBCDE', 'GFACADBBHEGDACHH', 'HGFAGD', 'ADAFGBEHBHH', 'EFGCCEFDACCHGACH', 'CHEAHFGHG', 'DAGAH', 'AHBCGHAGDFFCGHDF', 'HFCHFBDDAE', 'DFFCFEFFCAHECGEBAEDC', 'FDFBCECFCAA', 'CFEGHFE', 'AABDHHEFDHEAFEC', 'FEFHE', 'CHDGEG', 'BGEDGBGAADHDADCFF', 'BBEABCDBCA', 'EGEBDHCCDFBECD', 'EDCEBHGHEBEDEBD', 'GFCFEFHBE', 'HCGGGBAFCCAHEDAHE', 'BBBFCAEAHBAECEACBADE', 'CHEGBGB', 'DCDCECCGCAFHBB', 'DEAEBAGHF', 'DHAGCHFEGEDGDBECCCC', 'ECDHC', 'BEAHHBAGCGFBAEF', 'AHDDBEFDCAABEBBDBF', 'EGADEC', 'GBDDACACABABF', 'GBDFAACDEDHA', 'ACGDAFCHAFABEFCAADE', 'HGBHEGAAH', 'CHCFAECFDCDBDDGAGD', 'EADDFDBAHGACGEE', 'GAHFGEAEFCFDADEFFGDH', 'BHDGBCGEGCHHDBDB', 'FEDCFBGGDCBAEDBEHDA', 'FDDEACAFEEFFAEGAE', 'EBDHCFDDDC', 'CAGEHHGBFHEECEHDAG', 'BAHGHFCDCGHECCGE', 'DBCADF', 'CGEBHGCCG', 'CHDBHBEGCGFEFB', 'AAFDFHBE', 'GCGCBAHFBBCCEFCCGFAA', 'GCEFGGCCEFHCEGBHCB', 'BAFBDEAEBGEGFDFE', 'AFCFFAEGC', 'AGGHAE', 'DAAAADGDCCGFADAF', 'AGGGDDBDGA', 'DGBDBDAFHGEEGHEBBEFF', 'HCDCHBDC', 'HEEDCGCGGD', 'BAEDECBGBCECGAFCDEE', 'FBCFCDFCGBFDDDHG', 'AAAAFCDADFDGABFC', 'EGDCFCFEAHDDEHCBDB', 'GCHHEBFBCBBBAC', 'ADHCFHCAH', 'EACAGCGEAAB', 'AGHHDCGDDDEECE', 'AHCFB', 'FADDCDCEBHCE', 'FEEFEDHE', 'EAEBFAHEEFACGGEFBE', 'FDCDEGGG', 'GCACFB', 'AFCABHFFHADEDGCE', 'EHDGHFDA', 'BCHGEGGFCBHABC', 'DCGHEHEHAFDBCEGE', 'EBHACHBAG', 'GBDDHG', 'EGFCAFBCGD', 'CCFAD', 'AEHAEBFFABCGE', 'GCABF', 'BEDCCHAGGDG', 'AFFEHFGFFFB', 'DBEAGFACGGCCHEABGEEF', 'GBGFCBHEEADHAB', 'AHDECECDFEGBEDHEEHA', 'BEDFAD', 'EFBGBFDEAHGGEHFHABDF', 'FDDDGBBCCDACFG', 'BDHGBGHEHC', 'DFCHBEHDGE', 'HGGFEGBGBDCBHC', 'GHEFF', 'HGEFDBBAHACBECGEEEAB', 'DFECHCEFEBDGCA', 'CFDGHGAACCAFHA', 'ACHGGD', 'BAAGDC', 'BHAFFGDDBGCB', 'HEBAGCHDHEGBDCBEDD', 'DDFECFA', 'GFHFGGCGAHADBGADAB', 'EAAEGACDGFCDGG', 'HHACCDBAB', 'BHEBF', 'DCBFFAABEG', 'CBFEFFAABCDEG', 'FFACEFCAAFDBC', 'AEFEBA', 'HDEFABDA', 'HGEGEH', 'EDDACBAFDDCFFDBDFDA', 'GDGAGA', 'ACACCFBEB', 'CBHFBBHEDCEEFADDEEE', 'AHBCCFGGA', 'GEEACHFFCCDDDCCCBGA', 'CCGHGDFHBFCG', 'HBDCBDEAFHHEBED', 'FGFDEACCBFEAGCDGFE', 'HEDCBDG', 'CCHCFFEFGAHAG', 'ACBFGHACGH', 'CGBAF', 'HBGFHEE', 'ACAAFHCEDFCCCDDHBF', 'AFDCBGDDADDECF', 'GGHGGH', 'FCBFEFGHFHDBABHDBAD', 'AEHCEAHEDEAHCFDBB', 'AFBGABEADHAHHCHHFHB', 'AEACEBEBEACA', 'GHGHDBADGBEHEAHCF', 'ABHGDFEDGCAAABDDCGEG', 'FCDHHFBDBFBG', 'HGHBBHE', 'CAHEDGBG', 'FBBBD', 'EBDEFEEAEBCHEGFF', 'BCCFFABCGECCEBA', 'FHFBEFDHFGGBADHAFED', 'GAADDGGB', 'GDGCFCHAHBFDAEBAG', 'AHBECGCCGDCDEACD', 'AAHGBHACCBEAD', 'HHGGEBDGHDGFGECHHE', 'AHFBG', 'HHEAFABDDHFAABBGA', 'FHFEABBEGFACH', 'HDDGEFFCEBHEFCB', 'GGHCCAEDGACCFEC', 'CAHADHCCCGHADGBC', 'GHGBGHHBCBECBHBE', 'AFHAFGBECDBECGGDHBHA', 'CDGAFGDEFDFABA', 'AADDBAHFBEFGCF', 'CGAFEHDCHCFD', 'ABGEGCE', 'EAEEECFAGCAFC', 'FEFGCCG', 'BEHGHDCHFFDFDDGBA', 'BHGBDGDAAHFFF', 'GDGFDHHFGFBDFD', 'FAGFACBH', 'HECGHCEE', 'CEHCGDDEEHE', 'AHGFEF', 'FAFAABBHAHHHEDDAHD', 'CEAHAFHCBHD', 'DGEBEGB', 'HCBFBEDHEEH', 'DBGBAEBEBCDAGGBD', 'BCCHDDG', 'CAECGGDDD', 'EFCFFDEBDHEG', 'FECHHDF', 'DAFDCHGCGDFHFBECHD', 'AHEACDAHB', 'HGHGBDFBFHEF', 'ACACHHDGCDEHGHE', 'EHBEGEEDAFAGDHCEFCH', 'HGDGHHAAEG', 'AHDDGDBFBDB', 'FCFACBDFDAGFABBCECDB', 'ACFHFFHCDBHEEGHHDA', 'HHBBFFBBCBCAG', 'HBCGE', 'CBEBDF', 'BAGABBDHDA', 'HDGDACBF', 'DEGBFGCADGFH', 'ECGHAA', 'FGHCGEDAEGFDCG', 'CBFBECDAHHH', 'CCAGCCE', 'DBCEHBAFHCDDDFAGEE', 'HGHBGCADACHFCEE', 'GCAFAGDDA', 'CDBDDECCCFDBCGEDDC', 'GFFBHBHFCCBGHADD', 'BEFAF', 'AEEGFECEFEAAEHF', 'DHGHCGDDAFHCHADCGD', 'ABCBACADCFGHD', 'CCACDGCBGBBCAH', 'ACABEDDBDAEBDBEDD', 'GFCHC', 'BECDBEEAFDHHB', 'EEEGGEABGG', 'EEGCDCEACAGBCFACCAGG', 'EDGDCF', 'GEHBFCBABDEGHAAAGD', 'AFCHGFDAA', 'HAHACHCAGEBHFECF', 'BHFCF', 'FEGEG', 'DHBCCEFEABGAE', 'DDAHCGCEDFBAEBED', 'AFEADFHADEGEDEEHAD', 'GECHAFDFDFHDABGF', 'HAFEHGDHAAHFDBFBHCF', 'CCDCAAGBBEGB', 'DHBCB', 'BBEEADBFCDAAFEAACFCG', 'ACGEF', 'BCHCFGABAGDHAGG', 'CHDEBHDGBBDCAB', 'GACDHEEEE', 'BGDHEGFBBHABBACG', 'DDHADEFDHDHCDGHAAG', 'CECCGFEAECHBCHFHD', 'ADGEBED', 'DADHECBEEHC', 'GFACAFECAGH', 'EHDAEGBCH', 'HDHADEAFCDGG', 'AEBGGDHBG', 'DAADEHEFHGDE', 'AFDHBEDEFGB', 'BADCAFDEAE', 'EGEECGHHGEBGHHDHGFB', 'AHBGEAFEBACHHADEBFHF', 'DGAABFEDDDDFGHGB', 'EBAACEBFFACBEFCAACFH', 'BDEDACCGCEHGEBHFDF', 'AFHEAADHGBABCCGACDGA', 'DDDBBC', 'EDDEHBHAFEFH', 'BHHDACAFHFGBDFE', 'AECDAHHBEAEEEH', 'AEFFBBBCCBDGFCA', 'GFGFDBHB', 'CHAGDFDDHHBGCFBBAG', 'FACHFHE', 'AFBACCEC', 'GDAGDBHEHDFH', 'CBDACFGGGBHGBGEEGA', 'FCEDECDCEG', 'DBFGBGHAHHCFC', 'AEGFFG', 'EGADBGGAGCGGBA', 'FFHEAGCEAGECBEFC', 'ADEED', 'DAHHEGFDFFCF', 'HEGHGHC', 'BCDDD', 'HGEEAHCCBBFGADGHEB', 'DDCEEGHB', 'ECFFCFEFEAHGCFCCC', 'AHCDDAGGA', 'DHFEGBHHGBGFBGA', 'EHCGGFDBAB', 'GFBDD', 'FHAFCACBFCFEFEE', 'BFFHCGDEAFEDFDAH', 'ABFGAGHDHFE', 'HHGDFGHGCGE', 'GHECHFB', 'CBDCEHHEABEBGF', 'CBACHGHCHGA', 'CGGHFHGDAGCHCEFCG', 'GHGEBCEBBGFFBGHDFFB', 'FDDAFBG', 'BAAAGCBGD', 'CEADCCDDBC', 'GFCEHEDCDAEEBACA', 'DCFHCAAFC', 'DHAEGHEBHAC', 'HFEEFAGGBGHCGFCA', 'AGGFEFCABGGG', 'BBBAFDAABFGGHHBDGFFA', 'DBDDGABFDDHBDD', 'HEGDGGBCAGAHCGA', 'FCHFCGDDDHGADA', 'FCFHHEFADE', 'CBCCDCFFFCHEDEH', 'EGABFFGDEBECHA', 'HAHGD', 'HECCDHECGHE', 'GFEDFDCFGECGFBHFCFD', 'DCFBDCGDEGGBBCHBE', 'FHEEAGFGAE', 'HFFHGGAHAGFFDDGDGACD', 'EGEFHEGBGEDCDHDAE', 'GBCFGC', 'GBHBAADDBCE', 'GHCBCDHGCFAACAHHDHCC', 'CBFAFBEDADDDFHB', 'BDAHHC', 'HFCGFDD', 'ACEGHB', 'DEFCDCECAD', 'DDEBFE', 'HCHAGDG', 'EHCGAGEECFFGB', 'CDDFCD', 'EHECDDHCFBAGGC', 'DFCGFAFGEGEGFHF', 'GCHDF', 'EGABADBFEHHHGCDE', 'GFFHGCDHFDDFEHCGBHA', 'FBBCAFHEBFC', 'ABBHBDGBEDBAHGACG', 'HEBBBHHFCDFGCB', 'ADGBEAHCHHD', 'GFACBGEEFHBFA', 'CCFDHCHBEBGABA', 'GCHAHGCAHA', 'CHFCEGHHDGHEAB', 'FGFHGCFACCBF', 'CECEDBHGHHB', 'AEGFAGEFEHCFFA', 'GADGCBGDFFC', 'DEHHEH', 'HGGHECAAGGBCC', 'EDEHCCBBHBCEFHFDAABG', 'BHDFGHCFGE', 'DAEDHBC', 'GHEADDDDCH', 'AAEAHHHDH', 'EADABHDHGCCCHCBEECB', 'HCEDCHG', 'ABBHCEDDFAFEAAHGAHC', 'ACFEGCDFFGBECH', 'GCAFAAGB', 'ADBBBEGGC', 'AHCBCHGAF', 'CGDEBBB', 'BFGCBADFEHGAEADHEB', 'FGFGDAGHDCBEEB', 'EDHBEDEBHB', 'DCBBGAADFDAGEHGAHC', 'CCFHBECFHHH', 'DDAEACCFBCFCEBBAGBDG', 'FGCEDDHEFGBECHCCC', 'BEAFCHBABA', 'DDCFFCHEAHFC', 'FBDHAGGFDFBDF', 'CEGEDDEGECHDBH', 'DAFDDBBBDEAG', 'CDDHCADGBDC', 'GGFEDEDBHADGBDFAC', 'BDDDHCCBFHCB', 'CAHFBC', 'AFGCBEDFAFFGD', 'EDAHEDBEAHBBG', 'DBCGBBF', 'FHCCAEEDDEEDFDGDB', 'GHGACECDECHECBAC', 'HHAABEECBDACBADHBCE', 'DGHHCHGHHHFBGAGB', 'DECGADBEHBBGEEGABFBF', 'FHHBEGAFDGADGE', 'CBEEAECGBEBBGDBFDB', 'CFEFC', 'BAGGCEECAAEHAAB', 'BFGFFCEFF', 'BGAHEAFGDHB', 'FAEADAD', 'CGBCHF', 'FFHAFGBFBEHBABHDAGE', 'CAAFEDEHCGAGHHDGBCA', 'HAFBADEGCF', 'CACFBCHB', 'ADGAHEADHFFEAGAFAEAD', 'FCBFHEEDGA', 'BGFAHAFFFGDAGEHGFE', 'CEBAHFDHBAFGGAADBBD', 'FDDCCAGFECAHEHGGEGGA', 'AAHDHFDHD', 'EBFECAHFBFEGHEFEHBC', 'DBDGAEHCGBFBFGG', 'DHDGFADCFFHF', 'BAAEFBGDCBGEBA', 'AHFDFFAEAFCDHDHCD', 'AAEDHFCABDEAFDCD', 'CCGBEGA', 'BEAHBBBA', 'FADBEFBGHAFHD', 'GHHCDBDGADFGBD', 'EGHHDAHG', 'EEBBDBBGDBG', 'FDGDHDHGED', 'BCECDAFHBAAFDFEFE', 'ACEECCAHHD', 'FCACH', 'BEHEHHBFADFHAFDGFD', 'CFDAAG', 'GAEDHGD', 'DFAGAHHCGGHHEGBAHGBF', 'AHGDCAEFCAB', 'BDCEHDA', 'AHFAHBCAHDAGFC', 'HCCBDHCDHCD', 'EFGBBCDCGBEHHB', 'CABDH', 'HEEDGGCFBGCGDDEEF', 'DFEEADCCDAA', 'DBEHFHBGBAHFGBEE', 'BGDFCDAHHGBBF', 'HHAEFDGEHDHCEDC', 'DCEBCF', 'CAAHGBEGHHGBCAEADHBC', 'CECGCBAGBEDF', 'CBBHAEFCA', 'FBBGDAD', 'DGHAAECEABB', 'EADBAF', 'FDGFD', 'HAFEADDDEGGFBFC', 'HBFCEDABECHGD', 'BBCFGABDGHEDHAHHDDG', 'HFFCDGCGCHBCHCHBAD', 'GFHHFDFADHBCAEECCG', 'AACEF', 'EFGEDHHEFBDF', 'DGCHGHBEFBFF', 'BBDFBEEBHG', 'GFFDFFBA', 'DDGGDHHDCHAEHDBGDCF', 'HAHADA', 'FHBGH', 'BDCEFAHGBHBBFEGDDC', 'EEDDCCAAGEFE', 'ABDHCAACEECB', 'GDADDGBEGBHGBF', 'AFFAFGGHCAADEBBDGG', 'CGCEBACBHDHHEFGFA', 'HDCAFHHHCGBHFFDA', 'DHABEEEAGAEEBG', 'EBEFEBHEBGB', 'DGFAHAEHHACBBA', 'DHHDEBAEBDFBGFG', 'FCDEAABEECEHDFDGG', 'EGADCDAFF', 'EHAFBFFDAEFHCHBDFEHE', 'CGHGBCAGABCDECBGFG', 'BBCAECCFFGAHBCADDDFB', 'EEDFHHC', 'DHGFFHABDDFDEACHHAHC', 'EDHCAEGHADFFBCDBCCDH', 'GFBAECBCBGBDHEEBE', 'FAFCEEDCGBEGEFGEAC', 'CCFEFHEHCEGB', 'AECEEBGBGBHGEE', 'HCHCA', 'ECEHG', 'BDFDH', 'BHDAGHBCGGA', 'BFBGHEGEBEF', 'BBHFBFBGDDHH', 'FECHB', 'FEFGDDGHDFCHBFE', 'BEFDC', 'DHGEBFBCFDAGFEAE', 'CFGFBEEB', 'HFCBG', 'CEGBAFACCBAEC', 'GAEHEECG', 'CFFHFAEFDF', 'HCGBGDHFDBGGGB', 'EBGBDGDHDF', 'DHBHEAHAED', 'DCGGHECHDFBE', 'DGFDEBFDDAGCHDBFAFG', 'EHBEDA', 'DFFHABHBHFFFBD', 'BAAFFECADFDEGCAEHCG', 'CEECCACHBEGFAA', 'GGDEDGGGHFEFAGGF', 'GDFCFFHGDDEDHDCHBEHF', 'BDBEBCFHC', 'EHGFHBGCCDDDDGFBB', 'FEEFFFGH', 'GHCHGDEDHCFFGGECAH', 'HHGHAAACGCHHBBFCG', 'CCEDCDAEBHBGAGCFEADD', 'EBEDHGAHBGDADAADFG', 'ACBAAACAGHGHFHGF', 'EGDEGBGDFB', 'EFAHCAAEEC', 'BGCDEEAHAF', 'HDCHCAEEDBC', 'AFCDGHBFFECADF', 'AAHEH', 'BAAEGHFEAGBACHECDBD', 'DHCEHDHEBGHDAAEEAD', 'ACHGDEGGGAG', 'HECCCGFAHACFAB', 'FHABEDGGEGHADAGDCD', 'GCBCE', 'FHHDE', 'HDAFEDDDGABCBEC', 'DFCDGHCAGGBCGBBEFGE', 'EAAHB', 'HGEAEHBFHGC', 'BGBEC', 'ACCAHDGBBCDABBFDBE', 'DADHF', 'AACFCGFACEBF', 'CCDDCGCFEC', 'HGDCAA', 'ECFGAG', 'DEGDAFFBCABCEBG', 'DCHHHEBFHHDAEGCDGAF', 'EFAADECG', 'FCAED', 'EBEAHABGCHD', 'ADDCAGAFEDCFGF', 'FGDADGHHGHCHAFEAAE', 'EEEHHGAHFFGAAGFDCFEE', 'FCDEGH', 'AFEABGDABDFGEBGECH', 'CFHGHECH', 'HEDDCDBDGFDEACG', 'DHEECAAAH', 'FDDCAFBDDHEHCCGFCCGB', 'EBEFHGAD', 'GHCCCDCDGCGAD', 'DBHHAE', 'ACAHAFCEEG', 'HGBDHHFHDAEC', 'DADDDDHGCGH', 'GAGFAAAEEAHAABAA', 'CCGBAG', 'HAFHFAFDG', 'EAECBAAHDGGFGDCHEDHC', 'BAAADDFGGHFCG', 'ECBGDAHECBH', 'GBEEHCACAFBCABCC', 'HEHGHEEEBDDABGEAEBAE', 'EFFBBCCDG', 'FGEAFAAEAEEAGH', 'CBGBECADBBEFHHEACBFD', 'AAHAGEBHBAHA', 'BACHDFGBFGHDEAHFD', 'HAFGHHBDG', 'HBACFAGDDA', 'DEDFAFCHHHFCHBAGDD', 'BHBCBGDEHC', 'GHCHHCCGACBDCACGB', 'EHDGBHABGBDEDCHG', 'CCCFAEDHFCGGBAHDB', 'FCCCH', 'FEGGBAGCEEDEGBCD', 'AAGFCGB', 'EGEGDCEAA', 'HFCECEGBDEACHFCHCFD', 'DBADC', 'HCAGDFCFEAEDEF', 'BCCHCGDE', 'GGHBCDFD', 'HDDGBDGBCCCDHGC', 'EABBBAB', 'EEFCDFCGDCGFFEFDDDB', 'AFCEEECGDGEDF', 'EHAGCACDFHBEADGAEH', 'GAGBHACF', 'CBBCGDBGHCFBBBGGFHH', 'EFFBCGAFGCGEAE', 'HGDDEFDHGAGEAED', 'BCHFHDEBDEBG', 'CAHAHBCAC', 'BFDCHEFHFFCECGBFBDA', 'FABFB', 'HGFEGHAHECDDHACDGCB', 'HDEBC', 'GGGHCBFH', 'CGHGDEFDFDBBCGFGC', 'FABBHFADDADABHBHGCA', 'FFDGDHBCHFCCGEHECHH', 'CEEGFBCA', 'DBADBEFCBFACBA', 'FDAGEDF', 'AFDHA', 'DDCDBABCDFA', 'CCCHF', 'EDAHCCACGDAAB', 'CDFDAEBEEBEBBEGB', 'GCEEDACGHCF', 'HFCAEGBDBCFE', 'EFAAECGGCHABCGEAAGE', 'HEGFCBEAEACBCBH', 'FHHEHB', 'HEGHADE', 'ACHEGDFDEGEFGACAFGEE', 'BAEFBDEC', 'AAACCHABBGBG', 'FBEFBCCBBGDHDGCAFE', 'DEBDHBECHHFDBCDHABEE', 'FGCHAFAA', 'FCHFHFDFFGFDFFFBAC', 'FGBEDAHCDC', 'FBEHDDFFAA', 'GAEBBAEEGHDEGGBE', 'CBFHAE', 'BHCABBFGHF', 'GBDGHBCBGCCBABHAH', 'GBDHCBDFEAHDEAFCDG', 'HEEAEDFBGGEDFEEEB', 'AEEBEGEE', 'EFBDACBBG', 'GAHAEEHEEFEHGAGFD', 'FACBEFDDDCHAHFCHAFDH', 'GCBEAFGFBFECD', 'DHCBCAEDDAAD', 'BDDFBEDCEEHB', 'EHFHBCBHGB', 'ADHEHEF', 'BCCHDDHBGGEC', 'HAFGGEFGCBAE', 'GAEBGDCGAEAB', 'DABDAEEC', 'FEAFCCCGCFACHF', 'DAAAAFFBCAEBED', 'EGHGAGCHCBDCFEEGADC', 'AEAEBEFFAA', 'FBFAHBGHFCDA', 'DEHGBFAFAGGHGDFBFCGC', 'FFHHCFB', 'BGEDFDAHBFDCDHFGBDE', 'DGBHFBGFAF', 'EFEABEEADHEAAEC', 'HCCAFFBB', 'BGGCBFEADBFGGFHDD', 'EGBBBHCCGAEGFHGEC', 'BGABGAHGGDAHECEEDD', 'EHBGEGFCFDB', 'AGFHH', 'FCAEFAABBDEABGADHFF', 'EGDFECCE', 'FAFFEGBBG', 'CHEHBH', 'CDAACGHFDADHG', 'DBCEHEACACFFHAHFGDB', 'AHGCACABFEFFCAE', 'ADFBD', 'CGFDBHFG', 'DGDCHAHBEA', 'AGEHAHEHB', 'EHDDGCBFEDGBEBBEHHH', 'CBGCGEDECAFEBAGB', 'FFCFG', 'GCBBCFGEEGCEDEHDHBDD', 'GDBEBCHFFEBEFGFH', 'EGEGG', 'HBFFADBBEADCBF', 'EGFDHGACAGDGBGG', 'BHAAABFECB', 'FHDHGAEEAB', 'BECDEFFABCAHAC', 'EFFHEBH', 'DGDBDAGD', 'DCDDBCEE', 'HAHGBHBCGHAF', 'GFAACABFEDFFDADEGF', 'AHGDAG', 'FFFAFHBBAAB', 'ACECEBCB', 'ACGEHDFFBG', 'EBGBCEDCHHABAEFH', 'CEBAGABEGC', 'HDEHDGCECFECGBHACHGD', 'AAFDDBHGCCHHGGHFDB', 'FCFFDAAHFAGAFFGG', 'ACFHBEACBBFB', 'BGCGAGEBECBFHDHC', 'GADHHCDDECEEDCBHBBCG', 'FHHHBCCBBAFA', 'HFAFAGCBB', 'HGEAFAEFE', 'AABCBAEGHBDCEGECC', 'FHHGHHHCE', 'DECEGFAGFEDAGBFBFG', 'HAHBHAEFF', 'GEHCAGBAGFECFBB', 'HEHCGGFF', 'CCEBGDA', 'EDEDADCEAEHGEGBAHD', 'FHFAHABBBBBHBGDBBHBH', 'FHBAGADBEDHBHHCBAFH', 'EAAEBCHFFBHAFCFF', 'BAGEGBGAEAGEADFBEHE', 'GFDBDCBEEFGGADDABD', 'FHDDACGAHCEAEEGFHH', 'CCFBCEFGDGFHBGDDD', 'AHCGE', 'GEFGDBFGBFCGDFCDFEC', 'ECHGADBDAGHHHBFC', 'DDFGDDCHG', 'AGAED', 'CAHBCBBEEBHFBFA', 'BFGCCDCBHBEEAEADC', 'DEDDEFFEFACDGFACDE', 'GEAAADAEEDDD', 'CCADEDHBDEBCFD', 'ECECFHBCHHFBFBCB', 'GBAEEBHHHDCCAFDHEAA', 'GDEFCCCFDDHGBE', 'DCHFHAFHECCDA', 'CGGGABDCADFBCCEGCGAH', 'HGEDDAE', 'FEHEHGC', 'GEACGF', 'CCGGD', 'HGHGGGCGAE', 'BGGBDE', 'GGBGB', 'BECBCCDDCBAAC', 'HGGCEADCCCFEBAHBB', 'FBEDHCDD', 'CDDACAF', 'CCFEDCGDADGDHDH', 'EFDEFAD', 'DEFBGAHGGEHBF', 'DCEHFDFAEBEB', 'GGAAHHACFGHCFBED', 'CHHHFDBHC', 'BHHDBFF', 'ABCDHFAFAEGFF', 'GACGCCDEEEGCDBGBHHHA', 'EAACFCGAGGE', 'ABHFDDBGDDAD', 'CFGCEBCEHGCBEGCEA', 'EHFCCBGHBB', 'AGGCGGDBD', 'HCDHBDDA', 'FGHAGEFGGFDDBDCAEH', 'HAADBGF', 'EBACFBCDHFAAA', 'BGFBGFHAFF', 'CHEGFAACACFFDHB', 'BCCEGH', 'AHFEFB', 'DHDBEGGB', 'FHHFCFFHADGAF', 'BGEAECDECCG', 'CEGEEABEAACDECDH', 'BHHAFBBCGAEABCBD', 'DDHEEB', 'GCAEACBCBECHBEFCC', 'DEAGEFCDHEAHGC', 'AABFCEHCGDFA', 'EHBAGEDBCFF', 'EDBCAGFF', 'HGDGBHEBFGH', 'CGCABDCBAHC', 'DAEEDBHGED', 'AACEF', 'BEAHEFGHHADAFGBAAEDA', 'DGHBDAAHBHHGFCED', 'DHCBBEEFAFCE', 'CEEHGB', 'BADCAD', 'DFAAG', 'FBHGFHHBAHECHDGE', 'EHCCCGBFDDEEEH', 'BFDFGDE', 'HCFHDA', 'EFHCHDFDHDGEHECHGBD', 'GFEGAB', 'DBHEEFGCGHFH', 'CGHDFDAFAFGGHE', 'AEBDED', 'BGDEDD', 'DDGCEDCDEGFFAEGHDGD', 'DFECAGBECGDE', 'AAFFGFC', 'CEEEFHCFDAGDDB', 'DBGGCGDBEBFFHFHFDEC', 'FHCBGFBBF', 'HDCCGFEDGHAHDEAA', 'GEFCAACBHDCGDEGC', 'BADDDBHAFGDHCBBHEGC', 'CBHDH', 'GEEAC', 'FFHDACBGBB', 'GHHGDCCAGAA', 'FACGCAGD', 'CGHADCEFBCBCAAHDDBD', 'FADACGABCEHBAG', 'GFEABFAAA', 'HGFCDGDD', 'FCAFEEBGEEECBAGFCEBD', 'ECCDAGB', 'GFBEHBHFCGFCEDC', 'DCBDCABEEBE', 'HDFHGHB', 'DCFAFD', 'GDDFCDCEFAGHDGHB', 'DCDAGFAGEGFFGAHDEBCB', 'EGGBE', 'DHBDBHCG', 'CAHDCDFAAFBCGEGH', 'CHHADFCFGFEDGFBBE', 'AEFFHAHFBCCHACCGA', 'AFEADFH', 'DFAFFBHEGGDBFA', 'ACCHDDAFHFA', 'FFDEDBAGHCGFADEG', 'GGEBGDCFCCDBCB', 'EEEDABGHBHBH', 'AFBCBEACCGCCC', 'HEABCCBFDEE', 'DEDHBEBFDCCBEAH', 'BEFCCGGBB', 'DEFCFCEHEDDECBC', 'GCGBCCBBCCHFHCEBFE', 'DGCAEFBCFBAEFFCDC', 'CDABHHEAGGGC', 'BAEAA', 'BGDCGHHACDECEDE', 'FBADGDCCFECBEHHHC', 'GDEAEDEEEB', 'GGFCCAFEF', 'FBHBBE', 'CDBBFDHHEBDHEDHEAGEB', 'AAABB', 'EDDGEDDCBFFCAHBCEGC', 'EADCDDCGCECA', 'DDFGDCHBBEBD', 'BHBAEGCACEAC', 'BBBGFE', 'HGBBCFBHFGBBFBBEG', 'ACEECHHDH', 'DAABBCAFAGA', 'GHBGGDCDFCBCDHD', 'CFCDGEB', 'EGHFBD', 'HFEFADFEA', 'DHDACFHFGGGDH', 'CCHAGBCH', 'DHCBA', 'HFCAE', 'HGAAEE', 'DBFABGG', 'GGFFCAFGBGEADEHC', 'BAEEFEFHGHBDBGFHHAFH', 'EEDBGFDBAEDGH', 'CCBGCGA', 'AGFGCDGHBCHBCCBDBG', 'EHBADDBBFFBDC', 'ACCBEFDBAEGH', 'AEBACFDGCEBHAHFBC', 'CFEFFDDECCEBDDGCEC', 'HCHGCAHADDG', 'ECHBCHFD', 'FHBECBHABC', 'ACBEBBACFG', 'FCCCCGHCCDDCHAAFGAGD', 'BHBCDHGHGGCGAEECBB', 'CEGGDCEFECHGACEEADE', 'HGEHGDEEBCHCCCEG', 'EHBAGGGAAEFDEGCGBCF', 'DDFEGFH', 'DHGCFGDFGAAFEB', 'FFCFEAHA', 'GEGAFAAAEBEFCGEEBHH', 'GAHFAFBCBF', 'HHAFBCDBD', 'DAHCHECGFBBGHDGHD', 'BBABEHDG', 'GBAHADGCBAH', 'CFAHHHF', 'HBDCCHADFEDCADDH', 'CGEGAFFDDFBDFCACB', 'CCHABC', 'BCBFGFDDADFE', 'CEHGBFBHFF', 'DDACGGACDABFGHGBHG', 'HGCHBCGEEFBDD', 'FEDGEHCBAGFD', 'FFEFACDAAAD', 'FCHDBGCF', 'BCFAGGCAGFDDAHGAEH', 'ABDAHDBBHCEEBDHDHG', 'HDCCGBDCABBBDGFDE', 'HBEFEHCHGEFADG', 'FCADFCABFBB', 'GHGAFFCH', 'HFEBCCBCHEFCGB', 'BDBHFHE', 'GFDBBDHFHHACBBG', 'HEEAHDCBAECDDFEECAA', 'FBGBAAEBFEAEECCFAHAB', 'ADBBGFDDGAABCB', 'FBBDGCEFCHEE', 'DFDEEGBCEAHBFGEBEH', 'BDDCGAFBGHDGFHFC', 'FHHEDHAED', 'CEHCCCE', 'BGFDFAHDHBGEC', 'BDBHFAFCF', 'CFCAGHCDGGCHFFFHGE', 'EEACEGBB', 'AFCGBADDA', 'ADDGGGBAHBEDGC', 'DFAEFCGEFBH', 'DHFCGCFGC', 'FHDAGG', 'HBBHGGACCGGAHFEAC', 'GEABHCHGDGAAAFBBGGHC', 'EHDHGDDGFC', 'FCGDHHEEBCGC', 'FBADBHBCDAB', 'AFAGEHGEEFCFDBDGD', 'DBEDAAFGHCFECCEHGCAC', 'CGCGCFEDEB', 'BCECFAGBFCA', 'GBFBGCGGAHD', 'BBEFBABFBHGH', 'FCACGDDFDC', 'HHFDFADHGFGGBEFB', 'CDGEHCGCD', 'GBCDFGHAGBFEFGADACAF', 'HEFGABDGBBA', 'BBCBFEA', 'DEFHBF', 'HBCDHEDFFBHEBHGFHGF', 'ACGHCEHCEFEHCFC', 'CBBABEBDAAHHDEAB', 'AGHACFED', 'CDGBEHBAFGGFHDHC', 'EHAEHHABD', 'HAFAFAC', 'CCAEEGDCFH', 'AHFHBHGFBDCHH', 'HHBCCED', 'FGDFFAHDEHG', 'HEADBEECGDGBAD', 'DDHDC', 'GECCHBHCCGGHC', 'EBFHDAEGGB', 'AFFGFBGAAFDBHF', 'EAGCCFDFHEH', 'CABGHFFAGDHAHBE', 'ACGHGBAGDB', 'AFADAFBBHADGDFEEG', 'BCDHCGBEEBBEHHHHH', 'EEEGFEBEGBAADFBDADDB', 'EDHDAHHDEFGHGFEABD', 'DCHAE', 'FHCFBBFGC', 'CCDDEDDBD', 'GGHABBBBGGDAEGCBCF', 'EDBEDFBHED', 'HBGEADFGC', 'EEAGEDBEDFCAAHGDGAH', 'DBDBDBCDAAA', 'HBHDDA', 'DEAAFHACCCF', 'EAEDBBE', 'CFADBCBFCAGBBAEEBHFH', 'EFBFFBECCFFAGDBFEGHE', 'CAFBCEBAEDBAF', 'ACBHGEG', 'GHDFDCGFBCAA', 'ACFBAAEBABGEDFDDD', 'GACHBEHFDFA', 'DHAGFFAGGH', 'ACFFHFDEDGCHDE', 'EGHEGABFDGCFC', 'FDEGADABCACFE', 'HDDACGFGEGFADE', 'ACGHEEBC', 'ABABGFHGGABDEBHHBD', 'GGGDECFDFGE', 'GHGAGDC', 'CHHEEAEBBCBB', 'EDHBFCBB', 'GBAAGEDFHCGFAF', 'DGEEEAGBEGFFDAAEE', 'AGBGF', 'BFBHHGF', 'AECEADAAHABHFBDHF', 'FBEBHECGGEFGGGAA', 'BBBBDAGCGCADBFHAG', 'GBHEHECECAFB', 'GEAGHC', 'EGEEFCEHGHBHGGEFCE', 'FGFECCDDDACFFADAB', 'CHBGBDDHD', 'CBGAFHBHFE', 'HGACGBHH', 'GBAGEDABCGFHGCFDBAHD', 'ABEGFDECDCECABDHFFAH', 'ABGFCBHHG', 'CHHGABEDFGAFBB', 'AHCFABABGGABCEDDEAC', 'FHGHFBCGAEDDGEEFDA', 'DHEGCCHBCF', 'DHDEBDCFCCFBAFEB', 'BDFEDCG', 'GHFAGBBGAGBBCEEEB', 'DFCCDADD', 'GFACFDDGDCD', 'DEABGAFFECBDBG', 'GDAHCACGEGHEEHDAG', 'BBADGBCC', 'DDFADFEHBGBG', 'CABAEEBFGGFA', 'EFDDBCDCHCDDDGDDG', 'CDFDHFFGGAFHGFCHFE', 'HAAGCCGEAEC', 'ADCHCCHGFEBFCGEF', 'EBGHBEGFDAHAFEHBAG', 'CAFGGCBDGDEFDDBCCAF', 'CFCFCADC', 'HABHAGHEGAEAFCEG', 'DFAGEBFCB', 'BCCEHA', 'EDBACFEABCDHHFGB', 'EGFFBAHDFFFFDHEB', 'EGFHGCGCDGFDAGG', 'CFAFAFCFG', 'CBBDGDHCCAD', 'EFCHEFGBAE', 'HAEHAHGBDCGHGE', 'BAGEBBHF', 'HFBHBCGFBABECBCE', 'FGBFC', 'EBDCEHEFADFCE', 'BBFAAFCAFFGAEBGBAFCE', 'AFECGEDCCBFE', 'EHAEHBABGB', 'AAEFDECAHDA', 'AACCGABBAAADB', 'FCBEFHGECEHCBB', 'AHBAAFHE', 'BFFBGEDDCBAFFDAEHHE', 'FEGBFF', 'BEEFHAHGFGHHCA', 'BCBCAHFDABAHAFHBEGE', 'DFAGDGCAEEADHEHCBCA', 'EGDGD', 'CGBEBCG', 'FEFEAGEACDFCCAEBEAB', 'CDABECCFFAAFFDDEEFEC', 'FEBDHHFFCGGEGGDFFGFC', 'EDBBCC', 'HGGHEHEFCFDDFE', 'EGGABEA', 'ACHBHE', 'GEDHEDAFDBHFCEBDD', 'HGFCHBGECEGADD', 'CGCACCACGFGBCEBGAB', 'CDFGBBFC', 'HDGGDHGEFDECGEC', 'DBCFAGGDEDFBEDFEH', 'FFAAFFCAAEAFGAFFBAHE', 'DGGGDBFEGGA', 'FEGEHCDFC', 'HEGBDFBEFDACGH', 'CFEEGCBHDG', 'BEBBHEHDBBFCACFDEG', 'DDDGFG', 'EGFCEACGGC', 'AEEAH', 'FGEGDEFB', 'BCGAEAGHGEBHCAEDG', 'EBAFGGGEAAEHBFG', 'EBGACGBACHHBDFHC', 'DAGEEDBACDBHGBBDHHFE', 'AEHBGDDAAEBDDBFEBAFA', 'AHDCCFF', 'ACEFCCE', 'ECACHDCCGBG', 'CCHCCGEGHB', 'BDHFC', 'EDBGABFHCEHGGHCDAE', 'BBHBBCEHGGGF', 'DDEHCGGCDBEDHHFCEBHB', 'GBGCDFDGBAABCCFFHF', 'BEGFHBFCCADAHDGGDGHF', 'ECHEEBCB', 'HFGCAFHHFEHHEGGEG', 'BFABDGA', 'BGGCB', 'FFFBAFGFCDGEFCHDHAG', 'AGGABGGGEDE', 'FCDEHFGHEGBBDFDD', 'AHCDGGED', 'FCGBADBGEHGGHEHFE', 'ACACBACDHEBCDACD', 'HEGAAFHHAG', 'HGCGHB', 'CFCCEBFHBFHHEADAF', 'ABHFCEFHGCHEBDFB', 'HADBCAEGDAEFEAGDHFGH', 'EDFAEGEAFAAEDHHBDC', 'HGBHCGDADADECAFDHD', 'GCFBGF', 'HCGEHBHFAB', 'GCBGGCFECE', 'AHEDEDEABDDDEEAD', 'HGGGBAEBAHGEGAACHFE', 'HFGCFHHF', 'CDBGEEF', 'BDFFFDADBDCBBDBGGECA', 'FEDGCHAHFDHHHGGHFFGH', 'ACDBHBFEADDCGBGC', 'FCCEDEHCHAHAC', 'AFGCF', 'HHFHEADHBEEG', 'DDCCEBGFHEEACG', 'DDBGGADAGAAFG', 'EHAEG', 'EBCAGCFGAGHDFFHGCCE', 'CHGBFCAFFBDHCGBG', 'CBBDHED', 'EBHFHFHHAFCHBHGCACD', 'DADEEGFHCBDHBFGEBGD', 'CHDFEDHHDCHHDHAECHC', 'GEBAABFGGEAHABDHG', 'BHFCAADC', 'DHAHF', 'DGEBEF', 'ECDECCCHBDFGCH', 'CAACBA', 'EHGBDD', 'CGHDCGGHCAEA', 'FDBGCHCEAHGF', 'DBDAEFDDGFFABFDEAA', 'GCHGBFEAD', 'CEFHCH', 'GGDAADABEFEFHFCBGAG', 'FFCDHE', 'AEEDACGDHGEHF', 'DADHAFHC', 'BGFHFADCFDCFDHCFBEF', 'GHACDFF', 'ECFEHAFGC', 'HECHDDBACHEBBADEGH', 'DGEFD', 'EHGBDBE', 'AGFBAACADEHCEGD', 'DFBFHHHBDBEHC', 'AAHHGBEEDHC', 'HBCGABAHBHEF', 'HGFGAGHACDGBDEAFEAC', 'FEDEBH', 'EGACGBDFACCD', 'CAHAGEGECCCGBDCDC', 'BAGCEGDDCGABDEFDC', 'CGGFB', 'HAAEFC', 'EFEHG', 'GEBBHHH', 'FDAFAGGEFBCEH', 'CHCDCG', 'CAGFFEECBCA', 'GDHGGGHDEAEBGBDDHHE', 'CBHFBGDGFEEGBGCH', 'HABDFEDACCAFHG', 'AFAAFCDFFBD', 'DAEGCDAFCDGHF', 'AFEDDAFAGACBH', 'BEDABDGH', 'AAHDCGCFHH', 'BDCHDEDDDBADBGF', 'HFBBDEBCA', 'FGDCDEBBHEDBBGHBCHH', 'BAEFBBHGCGDGG', 'ECBAHAHE', 'HABAGDGHFCDBEHHA', 'CFDCBECD', 'EFBDBCAAF', 'EHHCBEHHDEEBBDEFG', 'DDADCEBDGDAEFE', 'GHGFBAF', 'FAFDDFFDHGDAD', 'EAGGCF', 'DEBDD', 'GHECDCFABC', 'FDFGCGBEBBDACF', 'HEHGHCFFCDGAHHDDD', 'GDEGEEAHBFFDCAECDCG', 'CBECHHDEHFD', 'CEGBFEEECEGACEEA', 'FGECADCEGAGAHB', 'EGFGFADDGEFAEAF', 'EACADDHDDHGBAHADHEBF', 'HACGCBCHFH', 'EDFFGEHEFC', 'GGCEAGCG', 'AACDAADAFCABEC', 'EEFHAFGAEEEHG', 'FCGAE', 'BBEABFAFECB', 'ABCEBBHBFBDEC', 'GCEGEDFAAECBH', 'EHFAHEAFHHCADBH', 'BGCGCDGDCGFBHFFDCFDD', 'CGFBBEFHDBH', 'GDCAFAHHHDE', 'GEBGE', 'CGDGBCCEDCFEFE', 'GAEHCAECHGEFBG', 'FBHHABFBDBCE', 'CFAGDGBADHDG', 'GFHBFHF', 'BECDHHEEGHEHEDGE', 'ADCGEBCHFFAGH', 'EECEGHA', 'DCGDDCHCAEFDHCFDAGGH', 'BBBGAFEBGCACCBEACDGA', 'CHBADHGHDGCDCFBDBF', 'GFBHHFGDAFHEAEFBFBH', 'GGEBGCEDFADFE', 'ADFDC', 'DFDAFAFFDDCEEECA', 'ABEBHAGCAGAAADHGED', 'EBFCACECBAFGAABEG', 'AGADACBAABEGGCFCFGE', 'EEBDAAD', 'GBGGBFDABBGH', 'BFGCC', 'AEGAHDCA', 'AAGEDHGBFAAEADC', 'AGEFEFGAFFGACFHGCH', 'CAHFHDDBF', 'EFBHHBEBEFEABEGDCBB', 'BDHCGCAABCFEHD', 'HGFDH', 'BDADGABHDBHG', 'EGECGE', 'DGGEBCHEFB', 'FDHFFHGAABDDFEHAE', 'ADCFHDHF', 'GEHDBFGDCHDCFG', 'HAHFHCCAEEEHCGEDE', 'EBDDEG', 'EFEAFCGBE', 'FGBGF', 'HBEGFACCEHAGADEHFGC', 'HBFAE', 'EGDBAEDDAGAFFCBFF', 'CBCGHABFBH', 'HACHFDGHADAFGCECAGCG', 'HCCBFBHBH', 'DFHFAADGGABF', 'HCCCBAFDFAGA', 'CGECEGDEFDBABBFCEG', 'BHHCBHGBGABGAGHHBHAH', 'EAADEAAGHFDCEEAC', 'BBCEEFCHHB', 'HADCFBDCBCDEHCHHDCHF', 'CBHDEGF', 'HFHFBACACBA', 'CCADEEAGCCA', 'DCCHFGGBDBGCBFFB', 'HDGBHEECGBEFBECHEDBB', 'DBAFDFACE', 'HADCAACDFAGFD', 'DBECCGDCGCAC', 'FFCFEECFFG', 'CBEAFEGHAGBC', 'HDGFDEGCFBH', 'GHHEBBEHHGGFADBFAC', 'AFACGCHAGEHABHD', 'AHAFAGFD', 'CCBDHDAD', 'GACABAHFAHCBDGHGBDGE', 'HEBGACH', 'BECACHEBAAGBABFDEE', 'BHAHCCDFHEEFCEDAAFEH', 'CDHEGF', 'FHFEDFHDDHEDBAADAEFA', 'GEFHEBBHCGD', 'BGEFDBHHFDCBHADGH', 'DEABDEBEEHFGHF', 'FECEHAGHDBF', 'DGFDCDDHHHC', 'AHBAHBAECGGGCEF', 'HDDCE', 'FEDEFFCECBFG', 'AFGBDBDDBACHF', 'DDACACEFFDFBACEHGC', 'CEGAFCGCE', 'DEDAABCGBAGDHBA', 'AABCAGCAEFFEEHHG', 'BGGCEFAEDAFGEACAH', 'FDBDGEGAHCEA', 'EGBGDDCDDEEGFHBGEE', 'GCDCFCBC', 'GBAHFAGFCEFHAAC', 'FAAGCHFDEFBFCBDFHAGB', 'ACGHDEFGHEEGAEG', 'BBDCGEGAFGG', 'AADGFBD', 'GGBGFDGCAG', 'DGCECHCBGABGACA', 'FDEAABDEEEGGEHB', 'EEDDFFHFCDEEFEB', 'DBBEE', 'DBHAEBEDEAAB', 'CAAFFBFAFHDBFH', 'EEDFHGBDAGF', 'DEEBBCEEGF', 'CBCHGGBBAAFACHADBHEB', 'EEDDHADEBD', 'ADDBAGFHBAH', 'GGBCHDFDBBDFABFDBDG', 'ABHHBDCAB', 'CBDEGDAGGAACDCA', 'AFFEAHCCDFHFAEGB', 'ECACFDECFHEE', 'ACADCDAGHGHCGAGCH', 'EBBBDHDCFCECFAA', 'EHGFAD', 'EAGCFFDHBE', 'HAEGDBACBFA', 'BHGFBDBGBEEFEH', 'DEBCDBG', 'ACDDHFHACBGDAG', 'CCCFEDAEGEBD', 'CECHBECEFCGGHD', 'FDFCBECGHG', 'FHBCEABC', 'GGGAHGC', 'CGGADGBBBAACD', 'CGAGFABBG', 'GGDHEE', 'BFHCCACHEDAHB', 'FDDDBFBDFFHHBACBDH', 'DAEGEFCHEGAEHGBAH', 'ECGAAFFAC', 'AFBDECHGEFBGAHEG', 'BABGGFB', 'DAABGFADBHHAHFDBE', 'CAGFDGHC', 'BGGEGBGHAABCGGGH', 'ECCDBAH', 'AHBHHEAGEHG', 'GCAGAFBGHHE', 'BAEDFGEFGCDH', 'ACGDADC', 'FEAAHACDBHFEEGGFH', 'HAEFFBFFGBFDAAD', 'AFCHHDDGAAFHDAGGDEB', 'CCGHAEHFDHGCHBBCDD', 'BEHBGEBFAFDEHAF', 'CEFEHCHGADEBDHDDED', 'EECHEDCAEHBF', 'CDAEHEAEBEEHCA', 'FHHBH', 'EFFHBGFDAAGBFABBDHC', 'HCHDDAFCH', 'DGFCBFDCAEA', 'DEFABGGECCDCECDD', 'CEHBFEEFGG', 'DGDGCEAD', 'DHACAGEABHACEC', 'HBFAFAFAHEECHBG', 'FCCDDGHEB', 'BABEAAE', 'FAHEBFHEHHHDHBECDCA', 'BCEAHCGAFFHGF', 'DDFFC', 'GHFFD', 'EHBCFFBDG', 'GFDHGFFED', 'BHDDF', 'ABHGAFCGABAEAGHFAFBH', 'BAHAFHGGABHAHFGAADH', 'DHFGCDEEGAFECE', 'HBFGEBHGBE', 'HAEECFCGFHG', 'GABGFDCDFHAB', 'HEBGFH', 'FGFABAHG', 'GBEGBDDFFFHB', 'FDHCGBFHGB', 'DGBDGHDDAAG', 'FHGFCBEEDDECD', 'GBBDADGBFCGFFAHEC', 'BBBBCGFDBD', 'EBBDC', 'GHGFC', 'DEGGDHGABFDBDCBDCECH', 'HADDFCHGDCE', 'FCDCFHGDAACFDDF', 'FEAHDA', 'CADCAECDEDEHHDFHD', 'FFCCBECDEFCGDE', 'GAFEDDBHCAHGFFAACEB', 'BDCADDDDBGC', 'DAEGDDBHCBGBHCHBG', 'GBHGHDHCCBAB', 'FGCBAHH', 'HBBHEGBGHBFEEHEFGGGB', 'BFAGEDGBGEBEFHAEFGE', 'FGDBEFGDDCABFAABHAC', 'EEEBGEBFAGAGEEE', 'HCEDFDHEDGACH', 'HGBCA', 'HABCH', 'EGHDDCACGGCDDGBFG', 'HCECGDHHCH', 'CBGAGCCDD', 'CGBFEAC', 'BCCBCDBCEEDGBCBC', 'FEHGABBDFBHFGGDEC', 'FFDCCHFFHGHBDBH', 'FBAHFBFHDCDACHD', 'FFHHADFEEGBEEFHBBCDD', 'GAGBECDGCBFEGGHCD', 'GADBCAHEHHDD', 'FADADDFBEG', 'CAEGEFBC', 'DFEHECGDAGFGHADBFC', 'FFCDBDDCAGHFGEDGCAG', 'CAHDHFF', 'GDHGBCCFDAAEBDHAEHA', 'EDFGF', 'HBAHHHGHDBAHGBE', 'EECHAGFH', 'BBECCHBGGHAABDFDHGB', 'ACGFAHEGGCBDF', 'BGFHHBACGGBHFHGBGF', 'FEDDDFFDDECBCA', 'BDHBABFDG', 'BAADBHAAFFD', 'FAHBHDGEHEFECCCFEFF', 'GCGBHADCAEEBEFHBDDHB', 'FHDCG', 'HHBHGGFCFADEHH', 'BBFDHGCAFD', 'AECEHHDCE', 'DCBHDBEC', 'GCDDGHCEDDDAEB', 'BHCDAGEGG', 'AFFHHC', 'HAADGDDFBHEFEEBDHCB', 'BDDCFGCCDGCBDBFBCDFE', 'BEGGHDDHDHCFCF', 'DAFDAGAHFGDFADFACDDH', 'GCBHADCEDGEFC', 'AGHDBCD', 'FDFGHHADH', 'EHGCE', 'AGGGAHDFFFEFEFHFHEH', 'AEBABGGH', 'EABHFABHCECEGGHDC', 'AGDCA', 'BECAHDDD', 'BFGDEEEFDF', 'GAEFG', 'CFGAGBABDEABG', 'GBGBBABCDDAFFADA', 'FBEDGFEEDEDFECA', 'EEGHACHBHDEFAE', 'AAAGAEDEAGAGBFBE', 'FADAHHHCGHECGHH', 'CAADH', 'ACBGCDGGD', 'FCFDBEB', 'GFHGBCDCFFECBFDFGDGD', 'ACFEGDGEHEGFDBABDFH', 'ECHFEDHBDFECBBDHGFB', 'ABFFBDHGHDHH', 'AHHGCFBBFBHDBDFBFHB', 'BBAEEGDBF', 'EFGHBCEDD', 'FHHCGCAHEABGDEGG', 'AEBEGBFCBBADAFBEDEB', 'HEGHHE', 'BAEHAHHA', 'GEGECHEFABHCHFEGE', 'BDDFBH', 'DADFGHEH', 'BGAHGEAEEEBCFHGFBHEA', 'ECDEB', 'FEHFCHCFEGAHDGECCAE', 'EGHFHDDHHBEAB', 'FEHDADFADBCGD', 'DGEADADCEFAGACCEAGA', 'AEBDGAEHHEBCGFHAAC', 'HCGECD', 'CGEEFCHADCEDAH', 'DBCDEDD', 'HGBBAH', 'HEHCCHEFH', 'GADEEFBAA', 'GHBBH', 'DFFDBFHHEDABHEH', 'DHFFEGFAGBBAE', 'GHHCHBFD', 'HHHFBA', 'AGHCGEEBFHCC', 'DGCFB', 'BCCEFCCFGAGDGE', 'ABBHEBAGCCDF', 'GBFEFFCAAHEHEACBEGBB', 'GDFACEDCBAADHEDEDAH', 'ECBDDCCDHHCEHBHCDC', 'FFGDDBHCGFDDGCE', 'EAEFCEFDADBGE', 'BEAGDEEBGBHDFBAHFB', 'BCAFCDDGGCF', 'DADFEFHCACHADE', 'DCCDBHAECAAAD', 'FFBAGEGEDAAGBBCBCBH', 'DCGDF', 'BGDGAGFFH', 'CFDBEAHFGCG', 'BCAEA', 'CCDEGBFAGCBEAFE', 'EDAHCG', 'AFBHBFBDHGBFHAAAEG', 'EBFFGDBDFABBFCGB', 'DAEHAHDGF', 'CFBDDAGDFHHD', 'CHHEDBAEBHDGDDGFEHDE', 'FHGCFHDBG', 'ABHBDGFAD', 'ACDGHBFFF', 'BDGACCFCBGGFFGCAG', 'BDBBCGBBFCBFD', 'ADEDDHBCADDAH', 'GGAACACDBBGBCDDA', 'ECBFADD', 'EHDDBECAGDDDDG', 'GGEHGEHAHAEBCEA', 'GGABFGAHFAFBCGED', 'AHDGCCHFGDGEDHBHCH', 'DHCFCH', 'ADFBE', 'EBHFCDCEBBFADGCDC', 'EFFAAGEADHCEFA', 'ECCGCAEGDFBE', 'CFGHGHDGAAFBHAFFADDH', 'HAFAAHBDDGBFDHBC', 'HEBGHCCBA', 'FAADEAHGGCGADA', 'FFDDGFFHBECBCGDFEA', 'AABAAGEGGAHHDHEBECC', 'BDBHBDHBGD', 'GACFEHBBBEFACBDFB', 'FDFCGDGHDDCGECFBBAH', 'AAHEDAEGHEBBCDGCHDH', 'HFGGDAGBCGDFG', 'ABGEBDHAEHBGFEAHBFDC', 'GGGCFGDGFA', 'GFCCGFFHCGCH', 'EGDGBE', 'AAHCFHAHFBGB', 'CCDHBEGBDBGBGEAABDF', 'DBEEEED', 'BGAGECEFBHEE', 'DEEFGGC', 'DCBGED', 'HHDDHFE', 'AGGHHEFDEABAFG', 'BGGGGHFDFHBGBH', 'GADHA', 'GFGAEHAGDHFHEGCBBDHC', 'EHDAFFEEABD', 'CCHGFFBGAGAFCB', 'ACAFCBFBHACCFCCE', 'HEHEDFHBEFCCAABHG', 'BACABHF', 'GECEDACGEHFGHG', 'EAAFCCEGBABDAGG', 'DHEDAABCDAAFBFFHGBE', 'AEFACAFECAEECAHHBEDH', 'HGDGACGHBH', 'CBFCFGHBEHAHEDFGAC', 'FDGGH', 'GBCGHGA', 'EHBBEECHEHA', 'EHBFCBCBFAHGFDHFGHAE', 'CDGBFBEEHACHBCC', 'GFAGFCDHAGDE', 'EABEGBHG', 'EDDHGHCCEH', 'CBHBGCCABFCDBBBGCBF', 'GDGFGFEDCDG', 'HDBFCHEEAGGFFAD', 'HDHBFHGAECBD', 'EAHECDDFEGCCF', 'FACCFDCH', 'DBCFAEBAHDEHDFFC', 'DBDEEHHAFGFGHHAGEE', 'FFGFECFGCDBCE', 'CBHFDFDCFEAACHA', 'CGCHFEGACACEAFHDBE', 'ECAEHDA', 'AHGEFECFGADFCDHGGED', 'AAHFGFBDFDAAEGDEDC', 'EFAFDBFBGCECBGCCB', 'CBABFEHFHBGHGBGCCGH', 'EFGEBFFBHCGBEFDDG', 'FAFCAEBGC', 'CGFEFACBAA', 'FCADGDHDDDBHHEDAAHBB', 'GDFDDBBFEGCHF', 'AEADEHDDEEC', 'FGFBFFBHCCFDF', 'FGGCAEHAAA', 'HGHHGB', 'AHDEAGEGGEA', 'HAGBE', 'GEBEDDFCAFBGA', 'AFGHGHCFEE', 'DAADDCFBHCDGEFFBGE', 'AEEEAH', 'FCBHAFDFDEF', 'BGAFGCDCD', 'AFFEFECFHEBD', 'FEEBBEAHEDFDHAHGACH', 'HCBEBFBCEABCCDBE', 'HHDAECEFCACEDCEACEA', 'BEFGBAE', 'DACDBBBGCDDFCHEF', 'AEHDECBFAF', 'FDBCFHB', 'HCHEGBFDDBDDFBGHDDBF', 'CHFGHHHFDCAD', 'GEFFHCHCCAB', 'GGHGDGCGHHF', 'EEFACHAGGABFEDGFAAA', 'CCAGFC', 'CBHFGDGBGG', 'CFCDEDBBCDEGFGDHGCE', 'EEBFBEADB', 'ECEFHHFCHDCBBC', 'BCBBAFGABCAHHC', 'BBAHBHEDCFBGGBDBHB', 'DAACACEFEBBEAAD', 'BEHEFDGFCECH', 'DAHDHGDDBEFCEHABD', 'DEHCDGAHHBHHAHBHFCH', 'DBCBE', 'EDBCHH', 'FECAADDEDGHHAH', 'AEFBDHAEDEAAFD', 'BFFEGHFFBBADGBHECE', 'FGHCCCFHHDEEDCAFHBEH', 'DBBGFDCAEGCC', 'DBBGADFFHBBAHCD', 'GEGCHGHGHFAFHBGGHF', 'EHBHGF', 'GFBBEHEEABDGC', 'EBHFEFDCCGDDH', 'BCAAABDGAHDAHDBDHAB', 'GGDDEFD', 'BBGDBHHBGHGC', 'BCEGGGCEEEFFADFCHH', 'AAHGBFEHEHHCGHBCAE', 'DBCHFCFDDGCCCBHBCE', 'EFBAE', 'DAFFEAFDEGEEBDH', 'HACCGDFED', 'FHEDD', 'AEDFBAHBBFEF', 'FCHCEGHGEEEBBFHFCAB', 'DECABBFFACFCBBEFCDF', 'CAHAGDGHC', 'ABBADAHEDBE', 'DEBAACEBHFDFDFCABD', 'HFEBFBEFHEDGDAEHH', 'GCHHACGED', 'BAEAAB', 'HEFFBDDHHGBHHG', 'EGHCFECCFGDHHCCAHCA', 'DHEBDGBAHD', 'CEGACDAEEABAEBEGBA', 'FHGHDCFEA', 'ACAGFBGCHEBACHDECEBH', 'BGDHCBHCDE', 'AGHCCHB', 'HAHHHBGCHBHGBBCAAHGD', 'CADCEEDDFHAFC', 'EAGHDCABCECDEEAH', 'EHACCGCDADECHDGD', 'EGAACHGECBCCDFFGDCGH', 'FBGGBHH', 'FDCEB', 'CEADAFGHABAFBG', 'CAGEC', 'HGCACAFGFG', 'AFABDACEGAEGC', 'GCCGEBDCGCGBCAFDFB', 'AGCFEBDFGE', 'BCBEHFABBH', 'BDHBGEABHGECG', 'EABGEEF', 'HCCDCEEAEGH', 'EBAGA', 'FEHAC', 'HHAFDCFBBHCHAGCE', 'BDCBAFEEECGEHDHH', 'CFDGBEDBBHGCFAGEBHHE', 'BGGFBBCAHA', 'BEDBEDBCDABHFDBGB', 'EHFBGFBAC', 'GCEFE', 'CGAGBEDBBC', 'CEEGFABFGFAAC', 'GEAFAGDC', 'HGDBBGFAFBFDFHFCEAE', 'HCBHBGHHAFCGCEHCFD', 'EEGFDEGFFDGDFD', 'GGFHGBDEEAFAGBAAE', 'GAGGCGEAHCBDA', 'ABDDGGFCFHABHC', 'DACCAGG', 'DGGBGAGBAHCH', 'DFEAFDE', 'AHECBHFCEFCCEEAGEADE', 'BAAAGGGDDDGHECCGFBB', 'FEGHDB', 'ECFDFGHGFFHEEEHHGF', 'GEGDAFFB', 'CEBBDADA', 'CFDECFHDDHECAAGFF', 'BCCCGBH', 'FFHCAAABBFEBGA', 'BHDBCHEFHFEH', 'GCAHDDFECDAABDBDAE', 'ADCAGCADGHEGHBEAHBF', 'EDADEB', 'GFBHAGDFG', 'ABBAEBECEDGFCBGHDG', 'AFEGD', 'DAGFHAAF', 'AADDC', 'BCAGBFEGEHDFB', 'HFEGGAEECAFC', 'AADEDDDABCHDCFEHHBCH', 'EBBBCHG', 'GDBDA', 'BEDFGHCFADFAEHEBC', 'FBHEADA', 'CACDFFCBECGCHBHBAH', 'CGDAHHDHGEGGG', 'ADDHFACDDAFDHEBDD', 'FEAFBDBGGFBFA', 'GGAGCCCEA', 'DGDHHDBDFBHB', 'BCFFCFECHCCHHBDF', 'FHGDGA', 'ACHABEFBH', 'HGFEDEGBBEBEAD', 'CADGCEDEBEB', 'FGDBCFEAECGDEE', 'DEBFHBFAF', 'GDDEFCHHHDCGG', 'ADCEFAG', 'DBEBEFDA', 'GBDGFE', 'FHCBGBCEEA', 'CACFGDEFHDFBEB', 'EHGBEBCGHEFCHEHGCD', 'GFBDEHBCD', 'FBDGG', 'ADDBFEGBHGAHD', 'CDBGAFDB', 'EDCECCDFB', 'CEEAFEGAHDFDFDCC', 'DBBAFBHGBGBBAGAACDGA', 'CHEDDHHGABF', 'CDBGDABEHDDFH', 'DHEDFEDEAHFDHAED', 'EHBFDGF', 'AHBHEGBDAEFFAFFA', 'CDGDB', 'CFBBHBDDCE', 'ACDFFHDCBCBGHA', 'BHCGDEF', 'DCDDAAHEHCFHE', 'AGEDDGEABGCD', 'FFDCDBAGFCHDEBDD', 'FHGHGDA', 'BBHHFDBCBAAEEEFAHDFE', 'BBEBGHEGFB', 'ACGAGABEGA', 'EDABGGBABCHHCFCC', 'BBBEDHC', 'EDGHDH', 'DDDBGCGCDAHAD', 'CHCAH', 'HGBFGGC', 'ACAFBCADFFEC', 'FBAACDEACGCAB', 'GHCGBCGADEBFB', 'EAFGDGDHCFFGB', 'CFHDDGFGDHGFGA', 'CFEHFCBHEBCCDGD', 'EEGAFGCFEFBA', 'CCBDBEFDDAACDDF', 'HAHGGGBCFCHDCDEFB', 'FEAHH', 'ACCGGGHGDBHGFDBHBFBG', 'FGCAFABEGBHHBEBECC', 'EAFBED', 'CHFEBEHABG', 'FDFHDCABEEGADBHAEHE', 'GFEGDGBB', 'EFDAC', 'DAAAGFECHFGCDGGC', 'GFBHCCAHCGCAHF', 'AACBC', 'CGDFHEDFEFEFEDEFFF', 'AEAEHFEEBCEEBDCBEGA', 'FGHEFGFA', 'FEBCHBHADFFEB', 'DFAAFEFEGG', 'ADGCEADGCDAGCECDBE', 'EDFADHGHCAG', 'FBGEHCGFFA', 'CDHBFEEDGE', 'EHDHDGFGHGHHADCHB', 'EHGCFBFBDBCHDC', 'EDCEHDDBHACDCAFDFEFF', 'EEFDDBBECEEFA', 'HADADHCHHBECDHCFDCG', 'HBGDDDDHCGAEBHDGF', 'BCEEFCGFAAHDHCBCF', 'HCDBFHACCAGGGBA', 'EEEFFEEFBFGC', 'HFBADGHAHA', 'CAHHBC', 'HBBFHGAEG', 'HHFCDCBFBDHHA', 'ADHGDFCHCGFA', 'AGFDHDACEFEDBEBCCA', 'CCFGGBADHHAG', 'GFGAGBBAGDDCAE', 'BGEBBABEFCGAH', 'DBGDCCHDFHCA', 'BEEEACEEFHBACH', 'GEDFFFHBH', 'FAEBFGFCFGHBDACF', 'AEBAAG', 'AEEGDBCAHBHGEECGB', 'BAAGGC', 'GFAGDFFD', 'CEGBBHHHHGEDHDFDCCD', 'ECHDGCECGDBFBFHEHHH', 'CAFDE', 'CAEGHFAFF', 'ABDFDFBHG', 'CAFADACEEFHBFCHABF', 'BDEHGBDCHD', 'BDGDHEEFBBA', 'AFAFHFFGECEFFFBCGHA', 'GAEHEDEBDEF', 'GHGEECAGDFFHBFFCDFE', 'BDFAFEAECFDAAHFGFHE', 'CFDBFDAEHG', 'CHHDCBABAEDDEAEC', 'FHCCGGDBGGECEAGGC', 'GEGHAGC', 'ACFGEHHBFBBDA', 'BEAHBHHBC', 'FBABGCGGDEBADFAA', 'EFHFECEGFGBD', 'EDBCAFDDEGHGADGEDB', 'CHBEC', 'FGHHCAADFDGEFGCHEFA', 'BCADBFC', 'AFGEGFD', 'BCCBH', 'DEADBHHCED', 'CFHBBH', 'GHGGHA', 'CCDGHCFFEBHHG', 'EFFADECAEBCDABH', 'CHHBFHEGDHHFGDAH', 'CHCCCDAAAGHGCAB', 'DDEEBEBGCGEABAGFDBDG', 'GHACCCGGFACBH', 'CAEFDCFGBFCGBG', 'EEHHCDHGEAFEDCHCAAG', 'GBDFCABECFFHHEFC', 'ECGEBH', 'HHFFEGHHF', 'ABEFBHBBCDEBDGEHDBA', 'BFBEBEDAHDDB', 'FBBCAFFDGACHGAF', 'ABADBEAC', 'BDFBAD', 'CFGGDGBBEH', 'CABAFDCCEDBHHCFAE', 'GEHDECCFECCHEDGCHBHB', 'BEHBFGAAEHDACDDACB', 'BBBBBAGFFFCHEDBAFBF', 'BBCHFDAGHGEBEC', 'BHCADGGE', 'GEGGBCAHHHE', 'BGBEGBBGG', 'ECFGDABEACCAAGEB', 'DCCCBBCEBCD', 'HHHDHE', 'GHCAEFCBHFBHDCA', 'GFFCACAFFDD', 'GFHHE', 'HGDGEFDDEAFGFEG', 'BEHDF', 'BBDCGEDGBGDFA', 'FHEFGFCFC', 'ACEFFFEDHDGHFFHDBCBC', 'BEBDFFCDABCEFEHFE', 'DDHEEEDHCFGFGFDFF', 'ACHACFFHCCCE', 'ECHFBGFCHGG', 'GADDBCFDBEEHGDGCA', 'BDBFHGCCAGDDDF', 'DBDAGD', 'CADCHCBCHHEFGA', 'FHBBBGHEFGBFCC', 'CABFEHCG', 'DDEFGBH', 'FHFEADGGFA', 'BEHAHAAAHCEBCG', 'DDGCADCCBF', 'DADFDFF', 'DBCCFACBACFDCDACDDE', 'FBDDCG', 'BAAHFHEEBDGECFDCDHEC', 'HEEFGHC', 'HGHCFGEHHCHBGA', 'DEAHEECEDBAEED', 'DHDFCHADFCBHBAHD', 'CHBEHBDD', 'BGHBADEBCHBEEG', 'HEHGABBCECEECC', 'BGECHCB', 'FGGDEFDF', 'AHEDGHHBGHABFHGFGFFE', 'EDBBGC', 'FHHDDC', 'GGDDCCE', 'GAEDEFBDEH', 'DCHECFGHEDAEG', 'DBDHACAGDFDBDBEFHD', 'HDBFCDHDFGHBAE', 'HCHBEDAHAGDCGABGECH', 'FCDAGEABCHCE', 'HGCADHHEE', 'HEAACFAFA', 'EBHHACEACEA', 'EAFBCFAHGDFGADFCDAF', 'HGBDFHFEFCCGD', 'DAEBACHGEBCECAFFEH', 'HCGCAEBDGFGBG', 'AADHBBCBAA', 'AGEHDB', 'GFEDGCBDA', 'BHFEFGFFBEBGA', 'DHHAFAC', 'CEDCEBHFHCHBBDG', 'AHDCBDDDCFGBE', 'HAFCE', 'GGHCDACCBA', 'AHEAHBBHABCEDBHCACBB', 'HDEEFCHAFFAEB', 'CEBCBDGAHEFDFB', 'BHFHDDCFFBG', 'CFFABBACCCGEHECHAFEH', 'CBDCDEGFBEDC', 'DCHDDCCEDAHBHGCABDHB', 'CGDAF', 'DFCBFCCAE', 'ADEFFGGGBBAGBGB', 'CCHDBHHEGBADFFB', 'GEDBHGECECBAEA', 'AFHFGF', 'DFFECADGDECHBGGHHGA', 'CFFFFHCCDDBA', 'BEHHAHEHCHBAHEFBBAF', 'HEAEBABFBBFHBAACHDB', 'EDHGACFDABBAGGDABHF', 'GCCEBFFFGFCEFHDEGB', 'CEHDEE', 'EHEDFCFCBGGHC', 'HEDDCAGFBBFDDFDAGE', 'FDBHFGH', 'GDEDECHGDA', 'ABEDDH', 'FADGHEDBGCC', 'DHCCFDHHCH', 'HHDGGBGFFCGCAEBEBD', 'GFEFEGHGCEE', 'FFAEABBFAGHD', 'CBFBDEGBFGFGFHADEFE', 'EGHDCGDCC', 'CBFCDEGAB', 'GHAAHCFEBBD', 'HEHHHGEEAGADD', 'GGHBDECC', 'DCEAEDBBEE', 'EDFFBDDEDBCDE', 'GDFHCFHEAE', 'FCHABECHHDFGADBDD', 'BCGABHFGEBEBG', 'CEFGGFG', 'DHABDA', 'CHHHDFEDBEAGEDADEFD', 'EBDDCHGFDEBFAEC', 'HHHCEFECEFCFAB', 'EBAHCGGAEAD', 'EEDACCCHBEBHBGCCEHA', 'FCEDEEAB', 'CEDGAHFH', 'DABAHGHDGCE', 'DGEAFDEEFFFHD', 'BBDDGCACCHGFHBFAHFA', 'FHGFHBBG', 'FDEAAECFCEFHBCA', 'FHCGFFFAHFBECFDEDBBC', 'CCFCHECFHDFHAGBB', 'CAGEGCGCBEADHEHDBACD', 'BBAFHG', 'AHGEG', 'FGDFFFCCABEFABBGCDCF', 'BCHDHCEG', 'BFAFFFEBAF', 'CHBECAEGEAHFBHE', 'HHEDGHFCGEHDGEBEHGC', 'HAHAFGGAEADAAA', 'EGABCBBCGAHCCHDB', 'CDAGHFFBABEBGBAGEGH', 'EBEGGADH', 'BFADDDGHBFDCCEBEB', 'BDEGHHE', 'EHBEDFAB', 'DGGBB', 'GGBGDFCHDEFAHDHB', 'HGBGGECBDEA', 'FEDEBBFF', 'ADCGDECDDHBFDACAAHE', 'FDHFCHGF', 'FDCHCEEHFECD', 'GDDEFCCGCAGDC', 'EHBBEGCHFAF', 'BBDGBCBEDAGA', 'CDDGHBDGGFC', 'DEGFDCDHCCEDDGFBCBAA', 'CBBAFECBGGBBFHD', 'GBEBBBHECEEHCHBBCAD', 'ABHEDEDHHAH', 'BCGEEGGGFEH', 'EAEEEG', 'DFGAEE', 'FCACGEECHBACBABECDE', 'ABEBAFEFD', 'FACHDFGAF', 'AAHAEACFECCEHFEACE', 'GCDDCF', 'EBDGBFEEBGGGD', 'HHHGAFAHDEHCDDHDBFAH', 'AGCBEHHHD', 'DECFDBHFAFCDGGFEDAGC', 'DBGBDDAEGHHFHCC', 'CEGGEHCBDBBHCAFCDC', 'AFDGBE', 'DEBAD', 'FADBCH', 'ABGABHAAFFAAGH', 'HBACGHCCBAEAEDC', 'FGAAACCDBGGGDCGEFBC', 'HGDAEBAFEDGBBDCHDCDD', 'FBDEHCHDCGGAGGHDCA', 'CDEGD', 'CBCCEECECDE', 'DHBCADGDECEG', 'AEDHCGGABADDCFHCFDHG', 'FACDBCDGBADDCD', 'FDACHBGEFFGEE', 'EBEDBFDDCFG', 'AFGHAFDHD', 'EHEGABAHBDCEFGDH', 'DCCCDFEADH', 'AFCEEHCGBEFFHAFFDGEG', 'FBBAFGBECEBEDBCEEGH', 'FFEFGHAGHCCDHAFDB', 'GFDGGBHACADBAE', 'HFBAGBECDCCGFAAB', 'FACBAE', 'EAGFABHCHEH', 'DACEEFCEEBCDAE', 'DDCHFBAFCD', 'BHDFDHCFGD', 'HEADAFDGHFF', 'EABEFBEBFFEGBH', 'HHCACCECBDBDB', 'BHAGFEH', 'AEFEGCBAH', 'EEEHGGHCBAHA', 'CAGDEGCEDFDGHGEGHFH', 'AFHFCBFCCFB', 'EGACHBB', 'AHBECGHEBEHGAFF', 'BBACDDFEAA', 'GDEGFHEF', 'DDAHBBDBEFHCD', 'FBCGEBFBDGHAGAHBDBG', 'DFEFFFCFAAGGCFEGBB', 'GABFDHEEEA', 'EDGGGEEFDCCAFD', 'AECGGAAHADGG', 'CECDHCGFGD', 'HFBFHDEGAEGDAFAEEC', 'HCDHAF', 'GABCFCEBGBE', 'BEAHAEAAA', 'FFGGHFGFFG', 'FHCFBHAADAAECFD', 'FDHEDCHHCEGAEC', 'ADBFFHCEADCFAE', 'FBDBBDHFFGA', 'FCAEE', 'HCDBGEEDAFGDGAHA', 'DDFDFC', 'BHCCGFDDGBGAGAAEFH', 'FHEGAGCFA', 'DBHHFBGAFDEGEECHFDB', 'AEADHGGF', 'DCFHDHGHAGABDGAACE', 'HEDDCDGF', 'FADCFBDEDAABAGFEHF', 'EEBAFGFAEFCBGACDEFG', 'GCHFH', 'FCBHCEBEECBFGD', 'BGGAHBBBHGG', 'FCFAD', 'CCEGGBDHAEAGHG', 'HDDDFFFDGECA', 'HGCFDA', 'BBADAF', 'DBAADDGHBFGHDBEACF', 'DAAFGFC', 'CFADACCGC', 'HDDGBHGEFEBB', 'AEDDEAGGBGHAHAAEF', 'BBHADAFC', 'BHFAADCBBBHBFHBDB', 'FGBCFEH', 'EFBHEDCHDEADGAFE', 'CHFBHE', 'CHGCCD', 'AECFGDFCEHFBHADDGCH', 'DHEGFEEGGEDGDGHHHBFH', 'GBCEAHDHHAHEBFHBFGB', 'HGEHG', 'HAHGFAGDFAFHBHGEG', 'HEFEG', 'FDGEGDADFDEE', 'CAFGBEGGACCDDB', 'CABBGDBC', 'DBBDDEFFCCCFF', 'EEHGBHECAFAGEEDB', 'HBHDEGHCGDCEG', 'GHFBEBHFBBCGGEBCG', 'DBBGBFC', 'FECDDCDE', 'HAAHGGDDFCGEAEFHE', 'EFHCGEAEAECCAH', 'GEFBHDA', 'HFGCABAGGFDCBDFFEHHA', 'CHDBDEBFHHCBCEGGBGEC', 'CEGEBAAFBE', 'BAEFEGFACCAAGDABCCBE', 'CHAABABB', 'CAAFHAHAFEB', 'CEDFF', 'BCEFBABCH', 'AFDGDG', 'FEGEEDCEDDCBH', 'GEDDFACFHHCCDAE', 'FAEBCFCGABACEC', 'GGEGHFHAH', 'FFEEHGFDBCGGH', 'HHDDGBFGGAADDAB', 'AAADCGEECFADEFFED', 'GACHED', 'GGAHHEEECBADAAAFEFHD', 'BEHAGHA', 'HADCCFBAEABBFCBAC', 'DFCECCEFHD', 'FHCCBAHGH', 'GBDEEHDDABB', 'HEBBGBGEG', 'GHFBBDEAAFCHDACAHEH', 'FFBABDGFBDADEFFAGCCF', 'EHGCBCHBEAE', 'BAGFAFCA', 'EGGHEDFGGFFHGCAB', 'DBHEHHCBGEDH', 'DGEGGBCD', 'DHAGFCBA', 'HDEDBDBC', 'DEDDGGAFHEHADDEAGGCG', 'DDCADBEEAEF', 'GDGDHBFEHGFDBGDG', 'AAHEAHBFHFBCGGED', 'DHAHEFFBEAFBECF', 'BFCAFBDFB', 'HAHHHBCDCAHABAEDE', 'BCFDADBADGHDECAB', 'CDBGDDGGHGBAH', 'GCAFHDHEEGF', 'AFCABGGCCGEADCHHD', 'BEEEHCCD', 'ACBHEA', 'BEFFECFADBDFFFDHDGA', 'AAEED', 'AEHBGBFEGFGEFBCHAADH', 'BCAHCGEGBH', 'DDFDHDBEGDAGHGG', 'EDEFCFCDEH', 'BFHDCFCD', 'GEGAD', 'GHFDCHACA', 'BFHDHDGDGACACHGDH', 'GEFGCDBFAEBEDEDCHAB', 'CACEHAFEHACFHGF', 'FGGAFGCCGHAC', 'HECDD', 'HAGEGDBBDGBCDHB', 'DHFCGDEFACFABCGCBFBB', 'BCBGGFDEFAADCGFCDHBA', 'BECEDHFHABAAFDGGHFCA', 'CDAAECCEDAA', 'CAEHBEGEBE', 'DFDAHEAEH', 'CFCGBDFHBCEFEHFDDC', 'DCHCHFHGCC', 'HGDBCHFCBDHFDBDGDAHH', 'CBCGBHFHH', 'BHFABDCDCGHAD', 'AHCHH', 'BGDHFACEDHFAHDGE', 'DFFDAGHH', 'CEEFDBDGEHGBHDE', 'HADBFBGFBDFGDHCH', 'GACEFCCAD', 'EEEHEGEH', 'BEBEDEDFCFFACC', 'BABDBFDAGGEEDFDHEGCA', 'HFCHDDEDGG', 'BACDHGGFF', 'FEEHBEHBEDGBCEHEEAHG', 'HABGBCBE', 'FFCCBFEBCDGEBC', 'DCAGGDEAFFH', 'CFHEFGEDACBBADE', 'BBFBEFBECGBBEBADDFCF', 'CAEBHGAHAGHCFDA', 'FDDFDFE', 'FAADEAC', 'HFDGCACAB', 'EHAAA', 'DFGGHHBFCDHD', 'BCEFCEGAHACCA', 'GCEFEB', 'FHGCFCDHBGHHFFBGHGHA', 'FFECFEGC', 'DBHDFC', 'DCCGBAFEHHDHGC', 'BFHGH', 'HGFEBEGE', 'ECCAAEBCCDGE', 'BHBECDFACBAGCB', 'HBBDDFFB', 'CHDCDFBCAGB', 'BFHFFEFFAHG', 'EHGHC', 'HDAGCCFGFACFDEBC', 'DGBFFFG', 'CHCBFEBHBAF', 'FECHEHHAHFGEAECH', 'FEEEBDBHFCH', 'FCABEFAGGHABFFADEEAA', 'ABFDBDABEEFF', 'HEAACAHCHGDGHGBHHFH', 'CAHGAGCBHAAGDCADEADD', 'FHBHCEEF', 'CAFDHDH', 'EBGHCEAHDCGCAFABCCAH', 'DDFBDBC', 'EAHCBBEAED', 'ACCEDBCCDCHCAEBAG', 'ADHGDDEBGEHFGADADC', 'FGFCHAGAHDEHDCDGDDGG', 'HDDFADDDGHFGD', 'GFEGCEABFAE', 'FADDGCAFCCGFHFFBGCAF', 'ADAEHBFBB', 'DDCABAG', 'FFGDEACHFCGDGGHADG', 'FACCEFDH', 'ABBFCEGGADAHGAFHBBF', 'DBCDHEFCBDCB', 'AEECHBF', 'DFHAGFGEDGGBAHBBAFCA', 'AFDCAHCDFCBE', 'HDFBBAEF', 'FGDDFDGC', 'FEFFBCFGEDGBDF', 'AFCCFEHHGBEC', 'DDBCEFBADDADC', 'CFEGBGCA', 'ECAEGADFCHFHBFAHGEA', 'HHAGBEBCAEDGCG', 'CHHFADEEEDFGECDGBBBG', 'CFHADCEBG', 'BDEEBBEGDHEEBGDGHEFB', 'CAFEFBFCF', 'FHGFGCEDCADEA', 'CCGAGBAGFCHFHGF', 'DGGHDHEFHE', 'FDDACHDAFECFHCBHCBBG', 'AFBCCFBHAAHFEAG', 'BDCGE', 'FFDCHADB', 'EEGHFGGHGDFECHDFDGDC', 'GFEBEDA', 'FDCEBFDEFHG', 'AFBDECFCECDEC', 'GHGEABGBCFBGFEGEEACD', 'AHHABBCEDEEFDBE', 'EAEFADF', 'CCFFFFEEFBGEDGDCC', 'FFEBADFCBABBGGA', 'FAHGE', 'DDFCEHBEEGCCFACG', 'EDCADCBABGFDCB', 'AGEDGBEFBCDBFFGHH', 'BAECHEAHFADAGEEEHD', 'CDFHCBADBGAFGAAACA', 'CCABAHBC', 'EBBDDCGBHBGECGDABF', 'DBECDGCCBDDDH', 'GDGABAHCE', 'AFBBF', 'FFEAHABBGD', 'ACDADHCDFD', 'BBHACDBDB', 'EHBAHDCGHDHAAGCB', 'BGCDDGCCGGGED', 'CAAGCAEFGBGDEH', 'FFDACFAGEDEECCGF', 'DGABHFCED', 'BGBHBBGHDHCCCHAGEDE', 'EHEEFHFEGAHBFFDFECHD', 'EEADEHEEHEEG', 'DBDGEHBHA', 'AFHDAEBADFBDHEAHFBEH', 'ECBFBBDCCEBFDGCG', 'DFFEE', 'BCACEH', 'EGGBCBBH', 'BDHCA', 'EDFHGABGHAFEAFGEBHBA', 'HGAAEEEEHEBHDGHCHD', 'BEHBHGEG', 'FHADBFAAFAABAABAB', 'CHAEADAE', 'BAHCCHCCEDBDBGG', 'HGGBBHDHE', 'EHBFAAGFBABBBAEDCED', 'DCAEDF', 'FBDBDECEBBFGEHGHAF', 'EGEEFADCEDHCFAEHFG', 'CCDBFB', 'GCFDCAEHDDHBAHCEFHEA', 'FGCFCFBDEADD', 'CBHGCEDDCHGH', 'DGCCBD', 'BFDFEFFAGHCFECGD', 'BFAADCB', 'GHEHFGDGBAE', 'HBECHFBGCCDB', 'CFGADEDDBBAGFEEAHH', 'HGHBEAGBAABAAAACC', 'HBFCACCEF', 'AFHAHFCGCDEHE', 'CAGDEBDDGBFAEB', 'ABAFEACAEDG', 'DFCGFE', 'AGDCEHBDGCHA', 'FBEFCBEEG', 'AHCACGAGBCDH', 'HCBHDFDEAHBDC', 'AAHHBE', 'DGDBHBEAEBCFDBG', 'DGCFDGCEHBHCC', 'EGABHHDBFDBBAEC', 'HDCEBCGCEH', 'BFCDHBFCA', 'CCCGFAHCDDCHBDF', 'BEFCCCBEBAAFDDB', 'GCCFFGHABEBACAFDB', 'HHDEFEEEAFFGBHDHBBHF', 'HDHDGBEEHBFFCACE', 'HBGDABDBFEEGHFFF', 'ADDCDE', 'AEFDEDGFACDFEHHCEF', 'FDAAB', 'HBDCGFECFADFFF', 'FEAHFCGBACFBB', 'FHEHEEAFHEFBAAHDDCA', 'BAHCCDEAHHBA', 'DBEGD', 'ECCFHFGGADBF', 'GHFCBHHGAABDCAAH', 'FEHGH', 'CGCFGCBF', 'BCAFHCAFAEC', 'AHDCCAF', 'CAHDBADHECGAD', 'DDCCECBCEDCGHBCGA', 'ECFHABFDAHA', 'BHDBDFBEHDDDBHHA', 'EBGGDBHCGAEBF', 'FACCHGBGEHGE', 'AHBEBEHHCAHCFACDA', 'HBHGGAGFFAHCABGHCG', 'DGBBCBGCBFDAGBADB', 'AFGBE', 'AHEFFAHBHFGEBAHDFGFF', 'AFDAFCEAGFBD', 'FGCDEFBFECECHFECBD', 'CBCGHF', 'ADAAEEHCHHCFCC', 'CHDHFEBHCFDDEHEAG', 'ACBHBGBEDH', 'HHECAGCFAHFBFBCA', 'ECBGDH', 'DCHGAEAADCEGGCDH', 'HFFAHHECCBFDDH', 'HDFFGG', 'FDFDEFCHHDECC', 'EHBEBDDFCFCDHBFBEGG', 'FEHBCDBBHG', 'ACFEHABFCHFAHCGEAC', 'AHBHAFAEDCCGBCCF', 'CFFCAEFAADFHEFCDB', 'EDFDEBEFFBBB', 'BEBFEBEDFDDABCAFD', 'DFEGBAACEHEFCH', 'FCBHABHGHHBFEBEFDB', 'AGCFEEHFHAGHEHBABCA', 'ECBBD', 'AAFGBF', 'CBDFEHGAFHFA', 'DGFDBAFFAED', 'DEEAHGGDCECFDB', 'CDGCDCFCBGDCEC', 'HBEGACC', 'FGCHDFEGDFBCDEFD', 'EBDCDDDGFHFFDADHB', 'BCHHGE', 'CDHAGADG', 'DEHAGCHEEBFCFDGEHDD', 'GFEDCGED', 'BDGCHHECHGHFBEFAH', 'FDECGHDAE', 'CHAAHA', 'BFDDFGCBHEFD', 'BHEGDFCH', 'CGHEDDFGFHAGFFAADA', 'BAGFGHAHBADF', 'GFAHEGCDGFBFCFB', 'DCECEAHFEFAGCEFAFBC', 'GAGCBFDBAEEAHFCDBD', 'HCDEBGBBHEC', 'AECECHEGH', 'DHHHAACAEDHGDHBBEBB', 'EGGGGAHABAED', 'ADFADBEBEHDBHC', 'HFDDGBECECHHHGBGEG', 'HBEEDEFCCFGGBFAGEG', 'BBGGAHHGAAGACGCH', 'HFEGCGBGCGADCFCH', 'EFEEHGCDDBGDBGFCACG', 'DFDHBAFADDFHEEGBFE', 'CBEHBEDECGDFEDD', 'EEEDCGDBGGECAAD', 'GBBDBH', 'FEBBHFGFGDHBHDG', 'CEEAAABEHFGHBGFBBEEG', 'FDFEDCFBGACCBGBBH', 'BCFDGABFCGFBAHHHECBE', 'HADBFCFFAHHG', 'HDFCEEDECDGADGB', 'EACGDHHHCGDFG', 'HECGAEAHFFDBHGFDEEC', 'GCHABGHDGFCHFHDDEHG', 'EHCEDGEHEHFDEBA', 'AFGFDBAHGAAED', 'ECDBCFD', 'HAECBCDEDBHHADDHAG', 'AAEFAH', 'EGBEEGADEH', 'EEDECGGABHEHC', 'BADGABDAA', 'GAEBDCBHHCHG', 'DDFAHB', 'CFDFGBDBECBEEDFHDG', 'EBHEHFDADCDGFGDE', 'HCBCGGFBGBG', 'HAFGB', 'HCBBAAHCADABF', 'CGGGAAEF', 'HBEADDCCGDABGHFF', 'DCFADBCH', 'AFFAAGCDDFDGEFBE', 'DHEGCFCAADFEGAFCCBF', 'EGBBDHFEDADC', 'CHHHCG', 'FAFFDAGEDDECEA', 'HGHFEHDHCBGDBEEHBB', 'BBFAEHE', 'DDCEDBGBFBDEDFEFAG', 'CAHECAC', 'FFGEDHBECFAEBFA', 'GGEBG', 'DCFAFCFBCBCFAD', 'FGCGDECADDGCBGFCECGE', 'GAHFEFFADGAGDDGEFG', 'EHGAHHB', 'BCHBBECE', 'CBABFFGDGGDAABCCBH', 'DBCDDBCBG', 'CDAGFFFBBADBDEBF', 'FFHEAHDFDDEGGCFABF', 'BEHGAACHDF', 'EHCFGBCCHBGBHAEB', 'AGFHHHGFEBGGBDBCH', 'AECCGDDBAFC', 'BDCAGFGCEB', 'CBGGEHGHGBAAFGGAFBE', 'EAADHEEGG', 'HGEEDD', 'BFDDCA', 'GFFFCHHAFFDCGFBCAH', 'DCFAHGDBEHCFACA', 'FGHAFCHFDGDHEBHCG', 'BFEBFGFCAHDCD', 'ABCCGBGCDHGGBDACFD', 'AFABDGEGDBGCAHACD', 'CGEHAFBBCAFCGGHDAF', 'FFHAGH', 'FFCGHCBECEEHFFBFE', 'BEBCCGEFCAFGDB', 'DGAFBDCCFABADCF', 'DCDFHFCEHFCDDHBAB', 'GHBAFCHHHFGCACC', 'AGFBECDDBCBDAFABF', 'HFBABHCCDCEEEGGAA', 'HCHFGAAEFFFAHEGEAED', 'ABABDGHAE', 'CAFGFGCBEEEDCFCFDCDD', 'CDEBFFEEFABAFBEGHBEH', 'GFBBBECFHFBDBFCDBDD', 'BAHFGDBCDEGHE', 'AHHCEBAHBDBCAGFCBGC', 'GBCHAEHHBHDB', 'BADDDGCHDB', 'EBDGBDDHCAFABEFEBEAD', 'AGAHHEHBDGHEBHGE', 'EDCDDEGBADDFFC', 'FAHGFCDDAFBGAGG', 'DDGBCAFAHGHBDFHHDE', 'CGCEHBBEHB', 'BGCECGCDECBFF', 'HFFCEDBEBEB', 'BHEEADCEFF', 'CHHAACHFE', 'BGACBAEAHDEH', 'HCGAFFDEBGBGCHAFFHH', 'FCGGBEACAD', 'CCECFDC', 'CECFAEFAFAFFBHBACDEB', 'ECBHEDFHB', 'GECADFA', 'EBAGEFEGC', 'DECFGCCECADDG', 'GAGDAEACGE', 'DAFCBAFFFEFE', 'DGEDDDFBHAB', 'AGACBDAHHHHEAFBG', 'ABBDHGHEHEHDA', 'EHDAFGCACFGH', 'FCDCFA', 'FDHABFCFGGCGG', 'BBFAFDDBBBAGEE', 'ECAAFDB', 'CEGDBGFBGEGBGFCFCBBA', 'FGGGCBCHG', 'BEGBAGCFBBGDEDE', 'BBHAAFBFHFEE', 'FCDDHBG', 'BGAADDHEBBE', 'CBADBBEAC', 'HCDGDGHGE', 'EBBAEDGAEFDH', 'HCEADAFDCBDBBDGAE', 'BFACADDGBBDCB', 'BACECGFE', 'GBHAHDHDCADGE', 'EFCEAFAAGAGDGGEBF', 'EHCEDDGD', 'DGHFHDEEGF', 'FGHHGHDDFADCD', 'FGBECFDB', 'GAEABHBHBCEHE', 'FEDGBCBCGF', 'ECADEAAEAGHAG', 'FDDDCGBEHBDGHFBFAF', 'DGAAAE', 'GDADHD', 'AHHCCBDBEDEBFFB', 'BDBFEFFBDAEGBEABDBDB', 'BGEEBGBHCDDBD', 'FHDHDGHDFACFGFEE', 'GFGFCCEBGGGF', 'CCAGEHEF', 'DBBAFAEAGGBDEBFHADHD', 'HDAECHGCF', 'GDDCFBHEBB', 'DGACEFEECFAHFHCE', 'FFFAHAEBDCHCBAFHCGA', 'CFHBBGBAHADBECE', 'EEEGGGCEFHGCCDDHBE', 'GFEBFEDBG', 'CCCGHGEEFGDAC', 'ABFBFFEBHBFGCHFB', 'HHECBH', 'GEACACGEAECHABACA', 'HBABF', 'GFGCHDAHCAADCHFGDE', 'BDACBCAFAFGAC', 'CEFCG', 'DFADAFGDDBBDD', 'HGEEGCDBE', 'HAHABAAFGCCEHGEABBEH', 'BEEFAFBCEDBFDBAH', 'EFEGCDBBEBAE', 'FGAFBFCFCCCCDHGEFBBC', 'DECEABAHGGHCDDCDGECA', 'GBDCECAEH', 'EGAGCBCGBCDBC', 'HHBEBA', 'AGEGADGABBFHEDBG', 'DBHDGAGEAB', 'EHHFHEACFCGCF', 'HBAEFFAHEBFFDCGC', 'BAAFCGEHGCECAD', 'GBCCBFADFBCFGGD', 'CEFBFHGE', 'AEGDCDACDDDG', 'AEGBCHEHFABH', 'EEAEHGBFBHFBHF', 'BGDCEBC', 'CBHHGB', 'BDEEACBCCAAEHB', 'DAFDAFEAECBAFGAACDB', 'DCAEBBEEFBC', 'EGBBDHA', 'DHFBEEBB', 'FHHBBGD', 'DHCEA', 'FAHHFHDDFF', 'HBAFCAHCGHG', 'BHAHF', 'EGFAEEEF', 'BCFBFGEFCHEFDCBGDA', 'GACBGEEGEECFGHB', 'CACHCBEEBABEFDA', 'FFBFHHGBHCEGE', 'BADDDDHEGCEGDCA', 'CFEDGHADBDEDDA', 'HCHBBFB', 'FDBEHGF', 'HGEECFAFDCCEGAADH', 'ACBHBHHHDDCCCCD', 'HCHHEAGHFBGCAECEHCF', 'CDAFFGEGHEGDG', 'ABHHBDAFFHH', 'GECBFDEFBBA', 'ECDCBAGDFCDCFDA', 'BFDDAAAF', 'DEACHAHDEHCFECDAACD', 'FHBGBFFAD', 'BGAFGGHH', 'ACFCHBEHFCBC', 'EFBEGFBGGCDACBDHFFB', 'FBBDHFGDEGHDCE', 'EDFFC', 'FHFCE', 'HCGDEDBB', 'ECBFEDAEDEBAECFDDHEH', 'FAECBEDCGHEEEHE', 'EHBAGFCCBBEBDFGA', 'BFBFEEFEFECHGECAGDC', 'GCDABAG', 'CEECECGDFDAFFBABDFD', 'EHGBHDAGFAHBHG', 'AEHGEDDBEBFHBGCEEBBF', 'BFGBBDEFHED', 'BFBCHAF', 'BFCDD', 'CDFCDHE', 'EAEHDDCEBGEFB', 'CDAHAGA', 'BEHBACBGBCAAE', 'GHHGD', 'ECABDHAGBCCBAHEGDF', 'BDBAAFC', 'DACAHFGEECCFFAHHGBED', 'CDCFBHDCCGFDECG', 'HGFBEGDCABEG', 'FFBFFDFCGCFFGBF', 'ACFHBGDFFAAEHEBAEB', 'HHDDDBEAFBBFF', 'CAFGDDHHGHDAFBDAE', 'DCGHHEDCGH', 'HCHGHC', 'BEAGFA', 'ECEAHA', 'BHACBHA', 'CBAFGGEFGEDHBCG', 'HGAHCC', 'HADDC', 'HBHDFEHADCBFEDCHB', 'HGDBFGCDG', 'FGFBDFCECECAHCBHHACE', 'DEGHGEC', 'EDDAGEECFCGEDHDCAAG', 'HAFHHEEGFCCBEEA', 'AHFEEGECABD', 'HCBCDGFA', 'BDABDCFFAGEEAEGDD', 'GDGGGDHGEEEH', 'CEDBHDEEADCH', 'BDDFCDDGGBGCH', 'HCCDBA', 'DABFCGFA', 'CCFGDAACHBA', 'CGFFF', 'GEFGFEFD', 'HCFBDCDHDDABAE', 'DCAEECBGDHAFD', 'FBCGBDGGCHFEEG', 'GBBBEFAHA', 'HHEHFEDHBAFCB', 'BHBGDEDAGAHA', 'FAEEDCDAAHACCGGGFF', 'DADGGBDEAHGFFHDEEFB', 'HADCADDE', 'EECGFEGCFHAEGFGGC', 'AHEBCEBGC', 'DDAGHGGEEDGHAHEFAB', 'BBHABEHCFAEDDAAAB', 'BBGBHFCCHGEAC', 'CHHBCA', 'HHGACCBDFHAAA', 'EEEGBEDEFAEGH', 'FHDEADCDBFFCDHAHD', 'CECDFEAFFCDGBBFHFFE', 'CCEFEBGDD', 'HHEFACDG', 'EEACHBCACHDGD', 'GBEBEEFGHDFEBCG', 'DBEHHEHAFCGDDGCEHGA', 'ACEGDHGGADFCADHBADHH', 'FCBFDBGGHH', 'GCDGBCCDF', 'HAFDHCCFBBBEAC', 'BEGHHDBFFGHGBECEGD', 'AAFFAGEEBCEAAGEHCCBH', 'CFHGCGFGBFHEHADFFH', 'GFCFCHEDE', 'AFBGE', 'ADHGGDH', 'FFDEEFGFHHEFC', 'GBFEEDAGCCFCBCED', 'CDBBACDFDEHHFEBAFBED', 'EAAGEHCHEAFG', 'CAGGDFEDBCBGGH', 'DACAA', 'GBEADCCAEHHABCD', 'AEBAHCHHEDGEEHEAFF', 'FBCFBAAHDGAFEHGCHA', 'GBGEBGFHABGECDCBC', 'BBCEDCAFF', 'GGFEBFBEBCBEABADA', 'CHEBEHDBDEAABHGHDBHA', 'AFFGACEDECG', 'FBCFCHDC', 'DDEBCFHADFAFHCC', 'FDFEAEDFGCFGA', 'HGADDCDFCCABB', 'ADHABEECEFCDHFBD', 'GCBGFDDDGBDF', 'HBDAADGFDBDEEFABDA', 'HBAHDDHCAEDAGBB', 'FCCCGBHE', 'FFAEBAA', 'CFHCBEGHA', 'EGGFBDEF', 'CBEEFHEGBGDHDBCF', 'AFBADACBFHFFFA', 'ADEBGAABACDFAH', 'DAGGDABBADA', 'DCGAHHCACAH', 'HBHDDAD', 'HGBEBDC', 'FGDHDG', 'AAGBDAHBHG', 'GEBBHBDHH', 'BCHCFCFCHAADDHEH', 'AABBDBFHBBBGAHGHHFFG', 'DGFFDGEBCEFDD', 'HFDCFEBDFG', 'HFCBED', 'EBGBCBGDAFFHACE', 'FCHBB', 'CFBBGAA', 'CCDFFEGDBBEEBAB', 'FABCDFB', 'CCFHHCDB', 'BCDFDCDEE', 'AGEDFAGFDBAGE', 'ECCHBEEFBFDGB', 'GFAHGEFBHHADE', 'EGBCBFEHEACAAHCEAECH', 'FDFHHGAFEBAB', 'GBDGAFCFEEHFDDDCHFF', 'AHDCEAEBCEHHEADDF', 'GGBCCHEAFEGGBH', 'BBFBBBAFDBACACCFF', 'GBBHHEDFAACACDFCGH', 'EAFDFGAACA', 'DDEGC', 'DEBAEHDFEGDGEA', 'ABDACHAD', 'BAHAEAGAFFGDEB', 'CBGFHHEFBHE', 'BAEBCHHG', 'CHFEGHBDEFCFACGACHDE', 'FGAFGACCFABBAA', 'EDFCHHGEHBA', 'AAGGHCFHECEHA', 'BFHFGAABDCBH', 'DDEBFEHDGCFFG', 'AEHACDCBGFCB', 'DEDAEFDCFC', 'DAHHBFDBEEAAFHDEFBDD', 'CAEDACHHHDAGEEBBCG', 'DCCDAEGAE', 'AAHEEBGABHHDFC', 'BCBCGFEDBEGGEAHDEAH', 'CFECBFCHCHHCH', 'EDBCBDDAGHGD', 'GBCEEECG', 'CABFAH', 'AHFHGCBDDFE', 'HAAEDFH', 'BAHAFHD', 'EAGEGFEGGDCF', 'CGEGABGFDBCCAFHHBCC', 'ACBDACFCFEBGCDBBEA', 'BHAFHEBDE', 'GCCEFBH', 'DEFHCA', 'HCGCGHHAGGCH', 'FCDEB', 'FBEHCGGDFEDF', 'BDFAGCCDAHCBAGH', 'GEFAGAGA', 'HCDDGHGE', 'HEDFCBGGF', 'FBBHDBDFG', 'DDDHFDEF', 'EABAHDCHG', 'GGDCBGFDGFDAHCACH', 'CDFCDEAHBDGCAEECAB', 'AFHAF', 'EHGFFDHDHF', 'DDGDDEHAG', 'CFGDFCHAEFDCFCHAC', 'DAEEBEBGGBBEDGDD', 'CDAFCBCBBAACH', 'BHGACHHD', 'ECAAEDAHGAAGH', 'BHCFHHGDACHCBHGGBHCF', 'CEHAFFAGC', 'GFGCHFGFBH', 'CABDAFFCF', 'HBFACGBACGH', 'GFFACFBFHDH', 'BEFDECHHDFCCGH', 'DADHAGHAADCBDFCHHE', 'DFHEH', 'EEAADD', 'GFCBDGDDAHC', 'FABEEFBEGDHD', 'DGHEA', 'BBAGHHHHFAHCGGFHE', 'EGHBGBCFEGGFEGGH', 'EHHEFBAGAHB', 'BEEFHCACGB', 'CHBFEGDB', 'CDEEFFDDHADB', 'BBFCABECDDE', 'EDAEEFGBBAFGBEE', 'FHGCAAGHGBBFDFADEDA', 'FBFCDDFEGDGFFEDGGF', 'AGDDGBFFH', 'DAFHBFFAADFFBEDCBAG', 'EFGHHAAABECAHDH', 'AEABEBFAFEGFFDH', 'FDCGA', 'GCBHFCBAHBH', 'FECGBGGDAEAFGE', 'HCBAH', 'DGCAEACDGHGGEBA', 'CCADHDC', 'BEEDCECGDHEAAC', 'DHHGGBAD', 'GDEHAAEFBGCEBHAEFF', 'AFBDCDFBGHFBE', 'EGDADBDHDDFEFAGDDAA', 'BFFFFADDDDC', 'FFHBACEAEBCDAG', 'GFDHCDDDFCBCEECFAG', 'ABBFABB', 'HGBFHBEFEHAE', 'ABDCAEAC', 'DDGGHBBGE', 'CEECGEEGDCCFF', 'DFDBGEHDCDBFFFE', 'CFCDG', 'FFCFFFCCHDGDBF', 'ACADECCE', 'EDFBCFBAEHG', 'DFFAGG', 'CEHEDEDBGACEEDCB', 'FFFCFBGCGEDHFGDEGAC', 'DGBFGEC', 'HDAHBAHDDFDA', 'CFABBEB', 'ABBCDE', 'BHDGA', 'GBHGHAC', 'GEEEEDBGFCHEBHBEAGD', 'BCDAHCFDHBHEC', 'EFEAEFAACHBADBGDC', 'GEEEEFEHGBH', 'GFCCFDAHC', 'FCFHDBHEGDFCEGEEAFH', 'CBFGBHCFGFABACDDAAAG', 'EGBHHEDCDDFF', 'ABDCBHEGHHHEBE', 'EDFGFBEEF', 'HCDFDBCCEFGDBGEAG', 'DDHFFAGHDGDEBB', 'DHADEFCDABCGBEHG', 'CDBDCADGABBAAAFFHBA', 'DEAAF', 'CCFCBDE', 'FBAFD', 'DAAHBGFDDAFDDACEEAFC', 'ACEBFCFDG', 'HFFDBBEE', 'BGDGAGFBFFFEGFA', 'CACHECEAHHBD', 'GHAAFBDEEBGDHBD', 'EECACDFAEBAC', 'DGGAGBCBDAECGGEG', 'DDCCAAAHCBBDGBCGGEHH', 'ECHDDACEACEHDACCCH', 'FAHEBCBDCFCHFEGA', 'GCHHFEEBCADHHHBCDE', 'GFGFFB', 'CGDADFCDHCHECBBDBB', 'FDDFGA', 'AHGBAHD', 'DFFFFACGCC', 'HFDCCHH', 'DAGDFFFGEB', 'BHFDBGEGAGEFHDAFFC', 'DDHGBAGFHAHACEDACCDH', 'CCDBACAEGDADACG', 'AHABACEEAEHHEE', 'AFAHGAECDAHBCD', 'HEAEGECAE', 'BHCCHBHHHACFHBHC', 'DCHCHDHFBGEFCG', 'CFCAGDCACHB', 'HBCBEGHDEGCFDGBAG', 'BACAEDDGCDDGDGBEGF', 'EDBAFAFABAAGFGEGDBD', 'CCGHCC', 'GHDCDCEE', 'FEFAEEHGGAGFBGBEAA', 'BCFFHAHGGEAADF', 'BDEACDFGHECBCC', 'CBCEBCFAC', 'DCHGEEFEADFDEAAH', 'ACDHGBHDCE', 'EBGGAADAGDCEEG', 'HGEBGHE', 'HAEGEDFDDEHGEEFEBDAG', 'AEGGADHBAFCFGDCE', 'AEGGFBDAE', 'HEEDEABBHHAHE', 'EGAEAHABAG', 'DFFHFAGFFEAED', 'BAHFGCDGGEGFHECAAE', 'DDEAF', 'EHHFA', 'FFAEDGAAHECAHBADFCC', 'FFHHFEGEBHBFHAC', 'CHDFGBEBEGB', 'BHFEADDDHFEFCCAFE', 'DCBFDDEBAEACGGB', 'FHABHAHAA', 'HCFDHCABGFACHCAGEGH', 'GFBDB', 'HHEEFEACEHABHH', 'DGBHFBDGFAFACFB', 'ECHAGGEHDGHGFGEHEAHD', 'GFHGFGEDBBAF', 'HCCBBBGFEGB', 'CAHCHCGHBHBAHFC', 'HBHBGB', 'CFBDBCGEFDAEGEBB', 'ABCAAFBC', 'BGCFDAGACBGBDEB', 'DADDGACBCAG', 'HDFCFEABHADGAAHCAADE', 'DEHBECA', 'AFGHGCC', 'HHFHCGF', 'FCHGDADEGEB', 'AFCHAEHHHCBAECBBEHB', 'AACADBFAFDBACHFGCAG', 'FHFEGAA', 'EBADCABHAGGEA', 'DBCBFE', 'BAFDEAHCHAHCBEED', 'HCDDEDGCDFGAFA', 'BBADGAECDFGEFHDA', 'HHBFBHD', 'HFHCEBECEGGA', 'DBHGGHDEFEBHB', 'DGDFHHCHFCDFAFHBEE', 'HHBDAHBGBGHGHEBAGG', 'DADGHEBDAEAGECCHBF', 'AGEAHDDFGBEBH', 'CFDEDDFGDHCHBBDHEBHA', 'GGGCC', 'GCHEEBHDGHGEGBCGAEF', 'EABEDCFBHEGDCFB', 'DAAAGCEAGA', 'AFFHFEADCCGCHDHGGC', 'CCECFBAFHEEAEH', 'CGFFHEDBHADBBBCBD', 'FHDBDGCHFAEEA', 'FBGGFHAFGBGFGHCECD', 'EGFADFHFH', 'FEDEGHH', 'AADDFHCFD', 'AACFDACCHEHAABHADB', 'HAEGEFCA', 'EEGHDFAEEDBCFHHCGD', 'DAAGFHHGCDBEGABBHG', 'FDHGEFEHGHACADDCHB', 'HFDGDFDABGEGECEFG', 'EAHFDHCEDHFDB', 'CGGBB', 'HGBDEEBDDDGHDFFFAFH', 'CCFAFFCFDHDA', 'ECGHEFDHFEA', 'HBBFCEAHD', 'HHACHG', 'HAACABGFAB', 'ECBCEEHBBDGCGBHC', 'HHEECEACDDFFCCBA', 'GHABDHA', 'CGCCFABEFCDHFH', 'GDHEHBGE', 'DHADGDBDCEAGFGB', 'CFHFGDHBCA', 'ABBCG', 'FCDBGEEBBFDFAHE', 'GGFCE', 'FHBCGBGFGAFFFHCGGDCD', 'EHFFEDG', 'CBADDCBDAAEEFGFEGE', 'BDGBBGGHHEGE', 'HCFCGB', 'EADEBFFHCCHCGGDDFBBC', 'FFGACABAFECECDF', 'AGABGHGC', 'HGEEA', 'CHFFHGCCDEAFEFCDECAF', 'CHEGGBGDBF', 'HHFHEHCB', 'DDCFDFHHCHCDBFBGDFG', 'DFFAEEGFHDAEDAGGGA', 'DDBFBCCH', 'EFCGFFFDGEAFHECFBA', 'AEAEGDBFAEACHBGGGGC', 'DABFCGEBBEBAHEBBBA', 'EDHGADFFBHEE', 'BHHGEECGH', 'FADBDE', 'EHAGBGBCA', 'EDGDHDFGG', 'EFCHFHGCEBFDDH', 'CFBGFG', 'GHDCABGHEGAHHBFDCBFE', 'GDFDBHCAHECCGAGFAEC', 'EGBGABFG', 'DFBHFAFEHBGEDCD', 'EDCCA', 'EHFFC', 'CHDGAAGHCFHFEECCAEBH', 'EBCEHDG', 'GHADFCGDGG', 'DFDEBFEBB', 'EHBFGEED', 'EDCAAADADEFFF', 'GGEHHHBDHGBBBBF', 'HCADADHDDDCBEDBEDGD', 'FDEFHEHGGHEDAED', 'ADAAHFDDGHFEBEHD', 'GFDEEEGGAAFDH', 'CEDAFCDGECGEEBC', 'AABHEAEGAGAFCDBAEEGA', 'HHHADAGH', 'GBBFAACG', 'HHGGCBEGHBFFEECF', 'BDEBBBDCAHFCHEFEGFB', 'HCDEB', 'DFGAFCDAGAD', 'DBDCEBBCFABDDEGABADF', 'BAHCGECHFHA', 'CEGBDBFCHCCHFGFEAEFA', 'EFDCDCBGEGCECGDDDHDF', 'DFGDABDCE', 'FEHBCBEFBCFFDBBAGAG', 'DDEHBBEGCGCBF', 'FBGAGD', 'FHCCEADHHGFFDCCEECGF', 'GFCBFEHBFGEEGFHD', 'EHCCBHABGGHHC', 'GAFHDCAADCCBA', 'GFEFBCCHFHGAFCHBHA', 'BFGCFBEEADCCHFD', 'DHEHCFDF', 'DFHFACAHFFGAGB', 'AAHGEGCGAEA', 'EAFCAAD', 'EDGABCDB', 'HDHACHHBHAGB', 'ABFEFGHGADEE', 'GAAADGHDEDFFEGBDDFGH', 'ACFCHEBBAEHG', 'FDGCAFFFFCDA', 'AGHGAEADCDABHG', 'GFGHHGDH', 'HBFBDBEHAGCEDDE', 'HDEBHAGGHDG', 'FBDAGCGEHC', 'CDHFAEHGEDEGHBFH', 'ACHAG', 'CDBHADEEG', 'DAHCHHCBCBGE', 'GFADAAA', 'EHEDGFE', 'AAAAABHFEHEFEAE', 'HECEEFBDCG', 'EDGFCFC', 'AABBAADGHHEGHCCEFF', 'EGHCFBEDAA', 'EBDFG', 'CHHEDBHFDG', 'AFBBHAAGGHBEFFH', 'ACCEBD', 'AFBCFEBFHFHEBGDEE', 'FGDEBBADGBFHCDG', 'GHHFGCHDD', 'DEDEGE', 'DHDDHHDEDF', 'AEEEFBEF', 'CGEGBD', 'DAHDBBDDGBCAEAAFDHF', 'EFCGHEBBBHFBFE', 'GDHGBDACEAF', 'EHCGAGHHHDG', 'GAGBEFEEDH', 'GEHGBFAG', 'DFHDGDFHADCACABA', 'CGCACEEEACF', 'HAHGFFAEAECCBFEECB', 'HEACHHHHAACBGADB', 'EDEGGEFBCBHHCA', 'GCAHDHBFACDGCAADE', 'HCEEA', 'DDEHBGCH', 'CCDHBAAEF', 'GHDBBEG', 'BEDBCAEBEGEBFFAHDCEA', 'HHHHAGDHHFBEFHBAGHBF', 'FAHFBCEHFCAE', 'GEHECECAECFBCACD', 'DFHEBBEFEBDDE', 'HBCDECCGAADA', 'AGGCDDAGBAHDCE', 'GHHGHGEHADEBF', 'EBDHFGED', 'CGFCFHDDDFFEF', 'AAHCFEAB', 'AAGFBCFBEGDACBA', 'ECEDHFG', 'HADHCDGGEGHFAACCEAH', 'HEAHCFGHGDFFFEGDE', 'CFBFGED', 'HBDEBCFFHHDCHB', 'AFCFHAB', 'GFDCBBABF', 'BFECAHD', 'FFEAGDGHCFDDDGEDDF', 'DGDFFFDDFHGAE', 'BEDHBGHBEAAFF', 'CBCDDA', 'AADHHABCBHHEFHD', 'FCCFBECHHABA', 'CBDEEEECEEECD', 'GAFCBCAEGEE', 'EGEABH', 'CHFHFA', 'FBDGHGCHDDGECE', 'BBCAEFGDDECG', 'HFBEHAAAFBDGDEFB', 'CFEBHBDFBGDEAGBCHGC', 'CGADFFEAAGECGCECG', 'FFAAFGCGBFCBGHG', 'ECBGGFHFEHHHDF', 'HDEGGBDEDEAFGHAEDGBH', 'HHECHB', 'GGCABHGHGBBBBHFFBGCB', 'FDGCAFHB', 'BGHEGCECAHFGCHFC', 'BCAGCDEGBECDFHA', 'HDCHCBDCGBGECDDGHFA', 'ADGCEFH', 'BHEFDECFCHDBGA', 'CGGGGD', 'DEFBDFHGGHHE', 'FGFGCBFHFC', 'HCFCBDGAGEAEDECEADAF', 'BGBDFFBDAHGBAFCGDBH', 'EFDBFDAGHEFABAHFCCE', 'GABDHFFCHEBGG', 'DHDHEBFGFBF', 'BHDBAFADDAFCAA', 'BGFHEHBEHD', 'EHFAAEFCEHDD', 'CCCFBGEFBBCGGDHC', 'CFDCGEG', 'AHDHBDBBECCDABDHH', 'AEDBEEFDGBEGFCBFAGCE', 'DCBCHEFHFDBDBC', 'AGCBCBCDGHGFAECDF', 'FHFHBECDHCHCCGBAFFE', 'FDGBAFHEHBDECHAH', 'HHGDEDCAHEFHAHFH', 'EBABFBABEGGGGGACFDC', 'AEDAABDCCAAGCAADGC', 'BCACBHBHBGDABH', 'CDCBCA', 'CDGCFHBH', 'EEBHC', 'HACABEECFBGFFCDFD', 'ADCFACFBCBCHFHH', 'CGFHECHDDBHFCCF', 'GHFAFAEFC', 'CEAFGEDBAD', 'HHFHEGHGHCAHDAFHFB', 'GAAEH', 'AAECF', 'FAHCAAAACABHH', 'GEACAGEACCAGGHCAD', 'EHDDFADHCGCEGHDDABCG', 'FAFHAECDGCAHDEFHH', 'ADFEFAFEGAHBHBGCBC', 'DFCCGDDBBEF', 'DAFACC', 'BGFHGGDCGBFFACEBBHC', 'DCFBHGEHB', 'GHCDFEFFFEDHCHHC', 'BEBFDAGGDGBDAD', 'FCDFAHHBCECFB', 'HFAACADD', 'GBCCFGDEAEHECGCA', 'DFFADHFBFAGDHF', 'GDHDBFA', 'GFCBAFCBCECAEEFBHEE', 'ACGCDBDEG', 'DGADFHCGCFF', 'CAFFHE', 'HCEDDGADCBBFHGCD', 'CGHBB', 'HACCACAAFG', 'GCFDGHBBABHHGFD', 'EAHCCACCACDCEFGBBG', 'BHFGHGADFFCEEDEH', 'FAGGEGFGGEAHDBBBB', 'FGHDDB', 'BCCDAEDDCBAAC', 'HGCDCHBBHCC', 'HGFFFHA', 'HHAGCDBAGCBCA', 'AAGEFCFDDD', 'EBHGGGAFABBE', 'AEEDDGHGEGGB', 'GHCECECHHHCBADFB', 'CDHHEEDEDHGCGEBBCEFD', 'GEHGEHF', 'DHDGAACBDBCADAEDFB', 'FHEEFAHEACEHEBE', 'EBGDDHHBCHHDADC', 'CAEABHAGBHFBBGCEDH', 'GDFEFAEBADEEAGFHE', 'HHADBEBGD', 'DADFFDHGEEGAED', 'AFEGAEBBEAEGGGFCEFC', 'DAGFEE', 'HDGHDAEFEHBE', 'CABEFCFGBCBAGDDBDFEA', 'GHCBBFEGFCBBEHDBD', 'ECABFEDHCEGGFAGE', 'BDBABEBHEFCFCD', 'AHEAHEAB', 'DGGDA', 'EDEFEGADGHABB', 'GBDDBD', 'BBFACHDCACBBEABDAG', 'EFAAC', 'BCHFHBFDC', 'CFBDBDFBBEGCCFHFCDC', 'EHGBFG', 'FBFCBGFFEFHACHFDDBEH', 'HGDGGAEFDBGDHFBC', 'EEEHCBBFDAADHGE', 'AFGBGFBEDDBFCGFBFD', 'FHCBECHAGGFHFG', 'GFBHC', 'EFHGFHCCBFACBAHEEC', 'GDEAGHFCDGEFD', 'CEECDCAEAABB', 'BCFDEFHGGBHHBGEEGCH', 'DHFAGFHDDB', 'BHHDEBEEHDHCDGFE', 'GHEEFHHGDFA', 'EGBEDDBCBADDHA', 'BGGFGC', 'AGHAGGDBBDBEGEDEDGG', 'FAAHEEGBDCABBBAGCHD', 'EHCHFAGHCBBGB', 'EFDEFDEEBBFDC', 'ACHBBH', 'GHGGDECEBBBGGDGEABBE', 'DAGEHCA', 'ABFFHH', 'FABBFBGAFEGABFBFEF', 'BAHDHFABGGDCDEBHEF', 'ACAHBFECEDBFA', 'HAEHHDADBEHFBAH', 'BBDAAFBEH', 'GBCCHCHGBDGEECD', 'GGGDFEGACBDDGEAAA', 'BBBBHFG', 'EBAHHCHBCGHFB', 'BBCHF', 'AEHACCDFCGBF', 'ACDCFEGHBGHDDG', 'CAHEDAGDBGG', 'EAGGFCFGFB', 'HBCGHDEAGDCFDF', 'FBGABGGDCAFEFAECH', 'ECHGGGGEGH', 'FDDFDHEBH', 'EFAFGDDBFDGGAABEEBG', 'CDCDCCDEDFEDC', 'EHBDEBCFGCGAFHADDD', 'HFAABDADEEEEHECGE', 'CEBCDAHGFBFFEGGCCFH', 'AEBFACECEHHEDBCBHCHG', 'BABCA', 'EEBGCCBBGBFDFAFBFCH', 'CADEGCGC', 'GDBAEFDDCG', 'AFDEDDFABDFFA', 'FAGCFDDABG', 'FFGDACCCDCDGFHF', 'HHBDDGFF', 'BEACEGEECADCFGGF', 'GGHECEDDHFHA', 'FHBFHA', 'CCGFFCGGEFAGEGGGF', 'ECEFFDBDDCBDHD', 'HDCFDCCAHHCB', 'HADDHGHGAE', 'EEAFC', 'FBGHFBAFBHAHFBE', 'CHDEFABDGBD', 'HCHADAFGGCFF', 'EBAGGGCGB', 'FDGHBDEABH', 'GDBBBECA', 'ECFHHBBGDCC', 'GHDDB', 'HBCHFCADHEDG', 'FAFDDCGGBFFAABHEHG', 'DAFEHBHF', 'AABHDCHDBBHGHADGGCDG', 'DCHEBEFECABHG', 'GGHFBDHFACCFHGFGFFDC', 'CEBGBA', 'CGCBACBE', 'DGFEBB', 'HAAFAD', 'CCAFFBDADCBAF', 'DBHFBDFH', 'HDHAEFA', 'HBCBEBFCEFDCHHGA', 'FBHFDDHDEFFE', 'EEHFHFC', 'BBCFBCFAFHGCG', 'HHFCDE', 'AABAF', 'FGBEGDCACCGFGADDDA', 'CFHDEDHGFGGACC', 'FFADAAFCDBDGEAGEAH', 'AGCHBBGGHDBCEFGBBB', 'BGBBFDCBCBFEHCE', 'GCGBDCBDDDHCBGAAHD', 'FGCGHC', 'DCBHFECEEEG', 'FFAHEHBGFADBGBBAEAF', 'DFHFHCGHCGED', 'AFFHFAHHEFEGAAFHBB', 'AGEGAGDDEAAEFGAGHDFA', 'GFEDCDDBF', 'EBCFAFCABGCCFE', 'DADBG', 'HHCDBDDHEFCACBCEBCAD', 'ACCACDCHFBGFFGEAAEGC', 'FBHFB', 'DHCDDFHEEDFFEGD', 'BACECAGHGDFHDHEFFD', 'EDEFGAGBFCDCAADAHH', 'DFBHEH', 'CBEDDDHACAAAEAAFCB', 'AEDEBAGCACACBCCE', 'DGGCBCHEGFEBA', 'GBDHAAECGDDAAE', 'HBFFDA', 'HBCBEGFEHAEGFBCCAEFG', 'CDFBG', 'ABADEE', 'FHACEEDGCHBEA', 'AEBGEBFBHCBEC', 'BHGFGEHEEEEFCEFGGF', 'GGHGAGD', 'BGBGDHAEAGCCAAEBAHEH', 'EBCCFFFGAEGAEE', 'HDDFDEAEHE', 'EAECAABFADAGHCF', 'HACCADH', 'BECCBCCEDBHAHGCHHE', 'AFCCACDBGFGBFFAAG', 'FGFDGCFDCHFEHAHAH', 'HEBBBGCHD', 'BEGADAEHHADGAGHD', 'FBAACBFGACFEH', 'AFBBFDCCGDHEGBA', 'HCAEDGAGFEHHEB', 'HCAHBD', 'AFAFH', 'EAFGGFBEEBBAGAAAAE', 'GAAHDDDHCFFFEAADD', 'HDAEDHFDHAAEDFD', 'AEBEADACBGHGDGD', 'DHGEBBCDBECF', 'CDBBDCBBBAFBBDA', 'GDBHECB', 'CEEAEGFDEEBHCFEH', 'FEBEGBGDADEB', 'FFCBB', 'EFHGDHADEGAFDHAD', 'HEBEFFEHAHBHFAFDAA', 'CHGFFBFHEHG', 'BFEGFDADFDABAHDEG', 'CBBHGEHGFHCB', 'BBCCGCDBDAB', 'HFDFFBC', 'EAEAGHEDAEDFEHDDC', 'DAGHBDBFD', 'DBFCHCCHCEEEDH', 'HDFBEH', 'CHFDBDGG', 'FCGFCECHDDEBHA', 'ACGGDFEBDEEDHEHEHBHF', 'DADGEGCGCGDCGCGBAFE', 'GAEDAHDGCBBAGGG', 'CGGCAEHE', 'DGGHEBADECC', 'BDGCEFFHAEGDED', 'ACDCFDBC', 'DGDDAEFFBAEFGAAE', 'GEFEDDAEBFBGEFEEHG', 'GDDHGCA', 'CCCGGDHHFEDFHBGFDA', 'CGDBDG', 'BFFHAGGADCFGFCDHCDC', 'CBBBGABGFDDHHAEDHB', 'FDFEFBCGAAAB', 'EDAHGGFHH', 'AEHFFCFGAGBFHAG', 'HEEEAEEGADAF', 'EHGFEBFEFE', 'DFEBGEHCBBCHBBD', 'BFABGBAHAFBDD', 'EEEBHFHGBHCBA', 'FBDEGGDAFAHHCCCHE', 'AGAABBFBFGDACGCG', 'FHEHDDAAECGGGGBH', 'DEGBHFAHGDEHB', 'GHDCEDAACBEDFBEBCFAE', 'BHFEADEAEDAHDH', 'BCEAFCDDGBEBADFGBAF', 'GAAGDBEFFAB', 'FECEBFDCCDBBC', 'BFGEEFDAGBEDEDDFBHA', 'HEECF', 'EBFECBGDFAAAGAACAGB', 'BAGCBFFHDDCEEBCEGE', 'GGHCGBECHABA', 'ABCAEBGHBFAHFEBBE', 'FEHBDHGHAGFEBHDAGAG', 'FDEAEEEAHAHACBFEHAAH', 'HFAHAEHHC', 'FFADFEHF', 'HDCCDFD', 'GHCCC', 'CCAAGGD', 'HFAEB', 'CEBFCDBEBGDCBA', 'EAHBBFDF', 'DBHCDFBC', 'GFBHFGFBFECFC', 'GGDFAGDAEDCCEHEEF', 'CFBAABBDCC', 'BFCGBA', 'EHDCGEGBHGEHAABAFF', 'CDDAACAHBBDCEHG', 'BAFCCGAAA', 'CHGAB', 'FHEFCHDGCGHE', 'AGGCBABBFGEABDBC', 'CGGGCAFGEGFCC', 'FCBBHDDE', 'ACCBECADFHBBCGEABAF', 'GGECECDBBBFHDBBH', 'FADDBFCGEDFCBFDGEG', 'AEBEBE', 'FAAGGFCDDFFFD', 'FBEGB', 'GGECEAEHHBEEDHDHEBB', 'DHGCDCFGDGDBFBC', 'EACGHDDHDGDDFCC', 'BFGFAEFAGD', 'BHDHAE', 'BHABBEE', 'DCBFCEFCHCGCGCCD', 'BHAEHGEAGDGHFGDBAG', 'EFHBEGDBEFFAFGAFGH', 'GGEBAFFFGCEHEAHFBG', 'HBBEFACFAGDBFGEACG', 'AHBDHEABHEGBBEG', 'EFACGHFEDDAGBH', 'BACDECGEFEGGHBFHECC', 'FDHDH', 'DEDGEHFDA', 'CFAEHHDGHEGA', 'ACBACGAEFGCHECAGAC', 'ACBCHBFBCGFFGFD', 'EABBGH', 'ABGFGBCEA', 'HBGAAEAGCCEBC', 'CHGFF', 'BFDAEFBEDC', 'GFFBDDFCAADHEBADEHGG', 'ABDCBADCAEGHHCDD', 'BDACGGBH', 'BFFFDBGGAGEA', 'HFEEEAC', 'BHEDDDFGFACBEFDEA', 'HHFCGCD', 'CGEFBEGDF', 'CDBCHFAEEAFCFCFHDC', 'FDHEHGACCGEACAE', 'GHGCBDFFAAEEEG', 'DBCAADHGDBEBEBC', 'BBHBBHGBBDCEBEG', 'HADDGGH', 'CCHCH', 'HBGCDBHHFE', 'AGDDAFHBGGE', 'FBEDBCBGFB', 'CDGAHHDBHDDFAECGBA', 'EBHEF', 'BBDAAECFGEFFCG', 'CCAHHCHHCBD', 'GDHFEGECHHAHEGBEH', 'CBCDAB', 'HBCGGCAGFCCAECFGH', 'BEHHFDDEB', 'DDGBCBFGFHFHEF', 'HEADEHDBBDAHEGD', 'GDHCDHHFGABCGB', 'EEGBECGFF', 'EGGCFAHFAG', 'AHHGCGDCHHF', 'EBAFF', 'DFCCEDCHAE', 'FFCAGCEBCB', 'BBADCEFHHECFCFGBHD', 'DEAFBFHDBCB', 'GAEABG', 'GHCDBCHAFGHDCA', 'DDCHA', 'AHBAEDBADGEBE', 'BCHDEE', 'EGFGAGCDAGBCGA', 'FGBADFCHFBGCBCBDECCG', 'GCEGBBEFGBAH', 'DDDBAEFB', 'BGGGBBFBCF', 'FBEGACCAHADFDBHBHF', 'GHEAAAAFHHDEDB', 'GDDFCCBCGBEF', 'GBBDCBABEFCBDEDHEA', 'DCBDCCCCCFA', 'EAFFCHBABDBBGGD', 'GGAABBFEGEEEEHAFCGHH', 'EBBAFGEGFHDBDDCH', 'ADCGDEFBHEDCHF', 'ADDGDGCDCABFHGG', 'BAFDEBGHDDCCFHCBHEH', 'HACFGEGHHEFEDBHECDBA', 'FFGED', 'EDCCHEEFBGHGFEGEFD', 'HDDFEHEGAEHH', 'DDCCACHHHDDAGHA', 'DHGAEFHCEAGDCEHGCH', 'AGAAGAHHGDHDDCDHA', 'HCGEF', 'HCCCAHEAA', 'EAHBFG', 'AHFDDCAGDEBAHB', 'AHADADGAHBECABCDFH', 'BEGHFEH', 'DDDCCDBHBF', 'ECGHCHHGAHAEFCBB', 'EGGBGGAHHCAA', 'FEEBDFH', 'ECHDHE', 'HEGBCDC', 'EHEEHGDGHFBGGCHBDEAC', 'BDCDEAEHFHDECHDGB', 'AGABEBHADFFHEGDAFEC', 'CEEFADFDBGBBE', 'GHEGGDGCCB', 'HCCDCAEBGDCFCBCEA', 'CCEDBDBAACACDGH', 'FABGEDDBG', 'HDDAFHCHFCHFHAAGGF', 'HAAEB', 'HAHDGADH', 'ADEBDDABEDGFHGBEAH', 'ECEEBGHDHHGFAAD', 'HCHAEEBECGEBBFCCGF', 'CEHFFED', 'DCADDFECBBBHG', 'EFBBDCGFGCGEHA', 'DHHBEECDFEEADBBG', 'EADCG', 'BBBDEGDHBFFFHHFBADG', 'HDABCFFHACBCHBGHC', 'ECGADEHG', 'DHABHBE', 'AFEHFDBGF', 'FFHAEECACBABHDEDB', 'EAHGHB', 'FFGEEFGBFDAAFDEHC', 'CHEEBGAFDADEEAEBBHF', 'GCEHEAEAHFCACBB', 'FFHACHAHCBHH', 'ADGDEBDFEAGCCA', 'FDADECBCB', 'GEGBEHFEDGFCGEE', 'DGDBEHCHEE', 'BBHDFBBEAEGEBBAAHBCF', 'HEBAAEBFCADAFBEGEA', 'GHDDBDEGAGFCBHBGC', 'CGBACBHCDCECHCHG', 'EBGCAAB', 'ACCHEACCGBAGG', 'DHCGCDBBBAF', 'AHADCAACFA', 'FHCFBEGFDDA', 'FBCBFDGEEFGEEGGHGH', 'CGDFAEEGBBBGFHGFG', 'FFEHGDEF', 'BADHCHECDHFCCDD', 'FAACEGGCDBC', 'BAFBFGA', 'DBDBGEBCFFED', 'EBAFD', 'GGGGBAAAEADGFA', 'AHHHAGBAFDFCA', 'AFDHDHEH', 'EHCEABFEDDDDADAH', 'AEDCEGBCHDACGCBCEFGD', 'HACEDHCFFE', 'BGEBEHACDGEHHFC', 'DBDDDFADDADGCBEEAGDA', 'CHGDFACCC', 'FFHBDHEGBAFDCAB', 'BFGGHE', 'EBDGCBHDCFACHCFDAEGB', 'EHDEHHHGDEAAEBECDDAC', 'AFBAAEHBBGCEGEBAFHF', 'EFDAHHHADE', 'GECCBBGCBBE', 'EBHBFHCAABFBBGHDDHD', 'AFEEG', 'AHHFEBAABDGFBBFDHDCE', 'BHHCGFCFGAEHDBHBE', 'EBFFCFEEEFAGDEDFA', 'AGDEABBGGBCB', 'FHBEBECDHB', 'BDEGGFHBDFDHBFHCFA', 'BBCGABGEHABF', 'FBFDHGHHBCG', 'BDGCGHEBBGDEBDH', 'FADFACEEADDGGGBF', 'AHGDCCDB', 'CEHCBFHGEAACCBFAGAAC', 'HCBDAADCFGAFDC', 'CABBCGBDB', 'DEEGBGDCAADC', 'EBEDHG', 'DGCDAHADFABCHBCDDB', 'HCABAFHGACBDFEDDHGG', 'CBBGEBEEDH', 'CHEEDBBCBBEGFAC', 'DFGADHHFDF', 'AACCDBEAGED', 'EFAAEHDDAH', 'DGFHHFBCHGAD', 'GACFBHAAHCGHHCE', 'GFFHBBFECDAA', 'CAGAABHHHCCAFAC', 'AHBGEHGAFFECHCFFBBH', 'DHBCGBBFHHHECAB', 'ECEDHHFAGDBHCDCHFCD', 'DBAFCHGA', 'CBCGHHECGBDCFBCG', 'DAADBHDH', 'GDGFFHCCDDBDDHEFGADB', 'ABDCFCFCACBEBHH', 'BFFDFD', 'DGHBEHBFEEAEBAE', 'DCEEBGEBBHCC', 'EGGBGEFFBGFGDEFEHG', 'ECAHBEAGDGGGAGF', 'BHFGCADHACA', 'HFCCADABCFGHBHGBA', 'DCCHCACDGBGEHHF', 'HBHAADA', 'HFDABDEABDDGDEEBF', 'AGGFAGFGBAEFA', 'AGGFEGEGDFFDHDECEGD', 'AEEGGDHEHCEDED', 'FAHEADBFAGACHCGEB', 'DEHABAGEFE', 'FADHHHBGCHABAFBHGAA', 'GGEGBDAFEB', 'BCHAAFCDBAFFH', 'BEHGBAGHAEAEHFA', 'ACEDEDDCFC', 'DBAFG', 'BAEHABAE', 'DFCGDBGFFEFDHGHHEA', 'EHGHGHFG', 'AAEFEAAH', 'ABCFHCFABBFGFFGEADB', 'GGEGFHABCHCFDEH', 'GFHAGGC', 'EFGADBEF', 'HBCDFFFGEACCAFE', 'EDEECFCDADAAEGC', 'GCFGAGHCGFGFHBCG', 'GGHBA', 'BECFEGGDGEC', 'DCDFDCDEDHEDGEEFFEE', 'AAEDDAHCEHCGAGDCCE', 'GBDHFBABGAFADFH', 'HGBHE', 'BCAHFFHA', 'DBHAAFBEDFAACHCD', 'EADEEHDFCBAACBBHFBEG', 'BEHFCEAGF', 'GAFDH', 'HEBHBFBDCAD', 'FACCCGCHBHGC', 'BFGBGE', 'CCHHGADGECCEFCHGEEH', 'BDDDHA', 'AFHCAAEE', 'EDHGDFCA', 'BDFEDDECDCEEGGHBA', 'HAFGCAFHGA', 'AEGDGHDGGDE', 'GGGGHBDFCB', 'EHAEFF', 'FFBFBDCGBFABGCG', 'CDEFGBAGDHBEFHDFA', 'HAECBGHAE', 'DBGDDBEFDFEHAFHA', 'EDHGHGFBC', 'FCFBBECBDFB', 'GFAFFCFHEBGCCH', 'DFCEACCGGCAGAC', 'EEDAHGEGFAGBFAADGG', 'BFEEHAFHGBAEAAFHF', 'BHHEGBGC', 'FEHBGGBGCEECG', 'HCBCGFBCEHHBHGAHAAH', 'BGHCAHAGBBF', 'AAEBEBAGGAAACCCEEE', 'ACEDAFBAADHEHFFBBH', 'FGCHBEABEFEA', 'CABEHEDDDFH', 'CAFCCEDHGCDDHGCBF', 'DFECB', 'EGFBEDGDA', 'EHEFCF', 'ACEEFCEH', 'BGCHFGDGEHHE', 'CDAFBHHBCFEG', 'CFEABFGBCDFDFFE', 'HCFEBBFDHACFFC', 'ADBGHBGHFCEG', 'BDAACHCAAA', 'GDCGCE', 'EBHCFBFAHHCCBAF', 'CFGHCFCDGDGFHAEHEBEA', 'CDCEBEDHCDCDD', 'EGDDGABEEBCADFBEBHC', 'FGCCAHGABCHHCHHGBGF', 'HEFFGCEGEECD', 'FFAGDFDEA', 'EAHDGBEBGAG', 'DGHGCGDDE', 'HBDGF', 'FEFGEBCBA', 'BHHAAEDDAFADEBB', 'HCAAFAGDAHADABHF', 'DDFDBBFGACAHEDHBB', 'FDGGHAECAEADGDE', 'HFHAGE', 'FDDCDDACHCGG', 'CGACFDAHAEDDACEHGBDG', 'FCGAACFGGBAHEAEGH', 'GCCABBBADDHDD', 'BDGAEBGBEFDEB', 'HGEDFGGBBE', 'GHDHDHGEFAFBBE', 'BECBCADCFEEFHGBCGFF', 'GECEADEHHDDAEGHA', 'BADHGBGCB', 'DDEDGHDBCDEADG', 'GABEAFAFEBDAFB', 'AHGGHFGDBBFBFDE', 'DBBECFEDAF', 'CBBBBDACADCDABEG', 'FAFFEDCEBDFDEFFHEE', 'FGCGAFGFGF', 'FEFHB', 'GDFFDGHGDC', 'HGEDBAFAAE', 'FAAFFGFDCHEFDCGCGEGF', 'EGDFAEDHBHBAEDHF', 'BBGAAAGGBFHGBBF', 'DFEGEDEDEDDDBECBAH', 'BHGCHDEFCHABBHG', 'FHHCFCGHABCCFB', 'FACDCCECEEEHCHGDB', 'HAFBAAFDCDA', 'FACBFBG', 'BGBCFFHGHHH', 'CAGFGFHHADFHAGBGHGD', 'BFDGDGHGBEDD', 'AHFDDAAAFCDEFCBGB', 'BBDFCDHBGG', 'CHGCGGBFADGFD', 'DGAHGHFCFB', 'BCHCBCE', 'EGADBAFHCF', 'EADHGCDGCEDABHBEAADF', 'AGAGBBADFDFA', 'AGCDCGEDABFEBDD', 'BEDBGCGDB', 'HFGBBEDEAAD', 'CHBHAGGDHGHHGHEACHBB', 'ECBCDFBCHFGDBE', 'FEHGDDCCB', 'BEHFADCEHFEF', 'CCADDF', 'CHAEABEGGD', 'ECFEBFFBAHFADDEHH', 'BACEBHHECGBHCADF', 'BDFBB', 'GCGCCEHAGE', 'GFEEDCFGBAGEHHGG', 'DCBDDDEEGGHHBHEHB', 'HBFFHFDBAAAGHC', 'GFGEGEEDBGDFGFEABHHB', 'BEBGDBBHGBACC', 'EBDFBC', 'EHAHDFFFGAG', 'HHDCCDCCHBEEECHCEFBE', 'HGBAEEGAH', 'HDGCADHG', 'BEFFCEBDCCFEAHEGA', 'ECBEEGBGHBCC', 'CEGGECHBCGGBEHFBCH', 'HGAFHABHAB', 'EEFCEHAGDABCEFD', 'AGHCEG', 'FACGEEHDGCBBGHCAHCG', 'HDHFCAFCGBDAAEFHBAFG', 'DACDDAFEDBGBFEFEHA', 'HFHBGDCFBGBGHGEFGG', 'DDHDAHEEFDGHCFGBC', 'GHHEFGFHGGD', 'GAGGCH', 'AABHE', 'FCAGBBAEDHE', 'FGAFGACFHAFBBGA', 'DBCAHB', 'HCHEAFGH', 'FCBDDFDHBAB', 'EADCAAFCDCDAHECA', 'GHBGGEDFAEAHDBFCDCEE', 'EDBEBFADEEAACHHGCAEA', 'BFFBDGAEEDBFGECB', 'FAFCBBFCCEECGBHGDDD', 'DDECAEBH', 'DAEGCBFFEFH', 'FFBGBAFGFFG', 'EGBAEDFDHH', 'FAHBEEFEFF', 'FBDEADBB', 'BHGCCAABGADEFB', 'FBGCFAGHAFGDG', 'GGEADDFGBEHAGDCDDFEF', 'FBFDAFFFE', 'GHHDDGECDHHGGBCB', 'GCCFFAFDAFFBDCBE', 'FDHCBCH', 'HHDGGCAEDBBBEEBBDA', 'FAEEB', 'BCGDGGDGAAFBGB', 'GFFEFHDGFDHBB', 'CHDECHHFEBFH', 'HEDCGBEHBFE', 'HBDDEEBGFHAFGA', 'ABFFABBBDBFBFCGE', 'AFEBFGEDEF', 'EBGGBAGBGHABGDFC', 'DGHBAGHE', 'DFGCEGE', 'ADFEFAAHEBG', 'BADGDHAEGADAFCHA', 'BDCGCHFCF', 'CDCDHABADCFCCFDHEA', 'FCBGCEBEHHFAHCFCC', 'GCAHCFAABGFGCDG', 'GFAGAGABFAAHEHCHHFB', 'BBGFEBCFBADCFFFH', 'FGGEHAFAEDHBDEAEDE', 'HAEACBECDGBHDA', 'CCCAHCADCBHGGG', 'GHAHDDBEDABAGDF', 'BFABAHDGAFHH', 'EADCACDAECHABD', 'AEBFECCD', 'GFHFEHA', 'EGGGAHDAGFECGA', 'AEBHHAB', 'ECAHFCDHC', 'EEECFHFDBDG', 'HDCEBGEF', 'GGEFBADAHHDCEGHDDFFF', 'GCFHHAEGGEBH', 'BGACBHCCAAA', 'CHECGADDEH', 'CGABDBECEABCDDE', 'BABEGAGEFEF', 'ECGBDDGECEADBDBHH', 'BGFDGCHDFEHEGFEEC', 'EBDHCDABFEEHECDGFF', 'CECFHBEDDBDAHB', 'FFDCAFGBDABEHE', 'FFCHGHGFHFBH', 'AABAHHBBEECFE', 'EFCHGEC', 'DGCGEFGD', 'DHCCCEA', 'EFGGFCDDHDEFCG', 'HBFDCCDGGCG', 'BFFCFEABGCHCEDCADH', 'BAAGHAHAFFACDB', 'BECAGHAECEEAB', 'EHAFEBHFC', 'CGGCDEABDFBCFEAD', 'DBBADEHDGFABCG', 'HDBCBDDDAFFH', 'DDDCBCE', 'BDEFHGAABAHAEH', 'EHDADCHBG', 'HHGFD', 'FGBDAHFGABDGGGAHG', 'BCBDCGHADBDA', 'GGDBCCABG', 'HFCDCF', 'BBHAFHHFHEBC', 'EABHECHBFHBBFB', 'GDGCBHCHDFAABGDEE', 'HEBHAGEEEFEHDB', 'FHGDGAEFDCABGGFC', 'DHAAHDGAGCFECC', 'FFEHB', 'HBHBCCBHFEGFEBDCBFDF', 'BGGCFGCBF', 'EDCCGCGBH', 'CABGFFG', 'GHFFBHA', 'GHDDBFDEBHDBCFFCAF', 'EBGDCBGEHBFBHDF', 'DCFFBCCCE', 'HCFBBEHHBGCHBEEEH', 'HBACACBEHEHABAHEEDA', 'ACFGEHDAHDCB', 'BBCHDCGGFDBCEDBEAGE', 'AFGCHFDGHGA', 'AEFEFECCDA', 'DGHBEBHHHGFCA', 'CGFDGBBE', 'AGBAFHC', 'GFHCEFHFHFFEEDAFHBD', 'CHCEHGCBAHBECGFEE', 'FDBEFDBD', 'BFEABFABACG', 'EDBEGDFDHADGDHH', 'FDAFHDGAE', 'HGACE', 'GEEGEBHHEADFCDFA', 'GBFCEGGBEFADGHBAEG', 'BDDGFFBHH', 'CFABCGCGGHAADG', 'GBGDGBAEBCHB', 'EFFEHHGCEAFBBGCFDGG', 'AAFEDECFGDDE', 'HEFHDEDFFEEGDAHGFGHH', 'CFBGHDGB', 'AHDDEFCCGGFFCAFAH', 'FCCGBDBDGC', 'EHFDHHAFCGAB', 'EBCFEDFGBCCEHF', 'AHECEEEA', 'CGADGCEBHBGFAD', 'DEAAHDEDDHHGAHGED', 'HHBHAGDBCACDAF', 'FGHFHFECCHEFDCBEHFE', 'AFGBFHFBAECGCBFGGBC', 'GGEACFCGAFCHCDE', 'CACBBBGAHE', 'FCCADEFGBEBEDDAEHA', 'ABBBCBECCFHFFBABFEE', 'FACAEGFCGAF', 'GBBGCGGADFCGEBEFAFEA', 'GFFHEHFFAFHFGHA', 'FDGFHABDGHH', 'HAFFACGHFACAGBE', 'BEDHCHHGDDEBDEFBCGFH', 'BDCDHEAAFEDDADDGHH', 'FGGBBHCGACFBGDBCE', 'EFFAHHCGBBCFDHCGEHCA', 'EFBDHFECAEGHEFACA', 'FDEHAFACFG', 'HEFEBG', 'HHGHFABDAHEFDDHH', 'GBEDAEDEAAHAAHEHC', 'BDHAAGACDACBEFGDACG', 'BFGAFBEEHEA', 'BGBAFECHFB', 'DHHDDEEAFBHD', 'BEDEHEABHA', 'DEHCB', 'CHCGEBEEBBDDGD', 'BACHFHBFBGH', 'HCHABEHGB', 'DAFFECGFCBAGG', 'AGGBFFCHDDBGFHBD', 'HBGBCDFDBDGCFFFAB', 'AGFBBB', 'GHGAHGHD', 'HGEHAFCCBEFDGCB', 'CGGGBGAGAH', 'DEEGHEEFFDGHGADCEAF', 'GEBCDGAGDEBHAAFEHF', 'DDADEGA', 'CACGGHHDGHEBEBDHFAB', 'FGDBD', 'CGDHHEBHCFEFF', 'HCBCABAEEFEHCCDED', 'ADFBHA', 'DFCFFE', 'EFGDDCGCDFFFBHCCGFD', 'CAHFEHB', 'DEEDHGFBFCAB', 'DDACAAB', 'EEFBBABBAAECDAB', 'CEHFHEHAACEAE', 'HEEGGDBHHFAGAEB', 'CACDDBBGAGFG', 'BDGCDEFCGFFCC', 'GEBDGAAHDGAADHCGE', 'DGFGGFCHE', 'ECDDBGAB', 'BDFECHEADBCCGCDBAFAD', 'DFGDGGAFEG', 'FCFFEBAEEBBHC', 'ECADH', 'DFCHDFDDEEHHCFAD', 'GEEADDFBBCCE', 'CAFDEGCCGEADECG', 'DCBECCBDBHEBD', 'FHFACHDABEEFBF', 'FCAHGCGCBFGBDAGCFG', 'BDDFFFGACGAB', 'BHHAEDC', 'FACCGEGHHEHGEAABGCH', 'ADBFGFDFAHGBCB', 'CGDFEDBHEGF', 'FCHDEGHBFGDCGC', 'DFFBFABDAECH', 'DACCCBDDDDADHFGFCA', 'GGAADGBDFG', 'FGCECEHFCGAFDFEHFD', 'EDFCEF', 'HCEAEDG', 'CEHAGFHFEFFHFEG', 'BBCHEFABGADG', 'GACDFHGDADFGFAAFH', 'CHDEGCGAADHHEC', 'ABGACEDDGEF', 'BDHGAAHB', 'BAFGFEAAFHFAEF', 'BHGCACBCHEA', 'GGBCFDFFB', 'DADCFFFHEBDH', 'AACFDGDBFBHEBFHH', 'CFCEGBCCBCGB', 'DHHAEEAGHHFFDHDGH', 'FECFF', 'BABFAFFGHCCBCACDGGEC', 'HGFGECCFBBCA', 'CBEEAC', 'FEBBHHDCFBGBECFFGDCE', 'CBCHDFHDBEGACHGEAH', 'BBBAFBDCDEGAEDE', 'GHBEH', 'FGCCHAACBHBCGGDCDF', 'CGGBDD', 'CFFADCFD', 'EGHADFACAGAACEEEB', 'BCAAHAECDHDFACECEFC', 'HDDFGGAAADGCFGHHEEDB', 'HAEFEHFGFFCAAGACHHD', 'HDBFHFGCAAADCDGG', 'DGFEBFCAHDGDHFFCFCHB', 'HGCBEHECCEBA', 'ECHFCFFFEAD', 'ABCEHFECCCCHDBBEG', 'BAGFHBDHD', 'BEDFEGHGGFHEDAACBFD', 'GFCCBAHFGEEDCCCCCBFB', 'HCHDD', 'GEBBECDH', 'GFHBEAEBAFFFBHADFFE', 'AGEGHCDACGBDGEAEH', 'AFDAEDEHHG', 'CFGDGGDCCCCGGGEH', 'AGAHDG', 'HGBBGAHDHD', 'EEEGDCHHEAEDCHCC', 'HGAHAGDEBEF', 'HBGHHGDFEHBEECFBHGHA', 'AHABDCEFFHGGH', 'EHGBBHAFDEDHA', 'GHFFD', 'GBFDEDAAD', 'EBADCAGGE', 'GAFBDFBGHGB', 'DEGBFEEDGGFB', 'CDBDGCC', 'DCBBFHEAA', 'GGAGBGAHDGFDBFHAEFHE', 'BCCFA', 'HBHAEEAGDDFDA', 'FCECEHAABBFE', 'HCBHDGGAAFAHHBHBGBG', 'BHHDCBAFAABBEGEC', 'BCFAEABFCEE', 'HCFAFG', 'GBDDGDGEAFEFCCAGGDE', 'ADCFGEGCA', 'DGHCADFEA', 'CCBCACHFFGGBG', 'HEBFEDD', 'AGEGCCCGDFDGC', 'CFACBBAGBCEFEAEEEE', 'BDEDGGFDDABE', 'AHDCECCAEEHFEAH', 'GDFBFGAAAEH', 'GHGGHGDEGADAACEHCD', 'GECGHAEFAAGAB', 'HABBBCEADHACFFDG', 'AFBGAACBB', 'EBHFHEHADECHADAE', 'BHAECHHEG', 'DEAEFEDDC', 'FHEEGCGEHHD', 'CEACABHABAGHBCB', 'HFBFGA', 'CGEGDHECGHFGHBDHCBG', 'FHHEDDDECA', 'EBFFCGFGDEDAC', 'ECFBGBDGFCDBHDB', 'BCADCGECDFCG', 'GBEEHHGHHCAFGAFBCF', 'BDFBBAECEFEH', 'BGEAFGHCCEBFB', 'HBGBABDFDDHDDE', 'BFCCEGHEFFBHBF', 'EACEEEHGC', 'DHHBCDDGFHF', 'DGBCAFFE', 'AGECH', 'FDHCDFB', 'FFGDAGEDEAGHEGHAAH', 'EDAHHAEBADGGHEACA', 'BEAFDGA', 'GCHADEDA', 'HBEGECFBADGFFH', 'BADFEDGDF', 'GBFHHDFGCFDEEA', 'EFDHDFHDFE', 'DHBCEEFFEHAGFCACBBGD', 'AHHHGHB', 'EEDEBCFCHGBEGCG', 'FFGECDDGDCBEEHBEGHCF', 'BGDCEDFBBADDGGG', 'AFCCEDDC', 'HHGEHHHAAAGCBFBACF', 'HEHCEEEH', 'FCBHDGGGCHCCEB', 'FBADHCEF', 'HBFHHDAGHD', 'BADDFBFCBGEE', 'FBDDCDGHHBFGFAG', 'AHGGDCBDDFBFGCDFGHE', 'AGHFFFBG', 'GACBCF', 'GCHGDBCADDF', 'HCCFAFECEHCEF', 'HHAHEDECGCCBCAHBGF', 'HAHCDDABEHHCCB', 'BHAGCFBDADECEGCBD', 'GFFFAHFFDBGDHAHFABDF', 'FEFDAFADAE', 'HDBCCGBFCCABADHA', 'DGBAHDBA', 'BBFFAFHBDDABFH', 'DCCFAEEEEHACCD', 'GAEADFFCCBE', 'ABEEFHGDEFAGAG', 'CDDDBHFEHGEGGCFCGBHH', 'DGDAFH', 'DDBHCHHFFFHAFBBFH', 'FHHGBFHCEGEEFDADGFDB', 'CAAEHBEGF', 'DHCBBDGEH', 'HFDGB', 'BFHBFCHHCGGEHAA', 'CCFHEDBGDFAGEDGHED', 'FDBCBCCEDGDEB', 'FGDDDEEDHDCBF', 'GHFGHFCGDFHCHDCGCFE', 'FBAACBHFAAHFEGAG', 'CCHGACBGHEHGFFFDEE', 'HACFCBDBCEBAHDHFCBHC', 'AAACHGGFBGHHECDBAB', 'CCFFDBACDDEHGCECDAG', 'HBDCFEBFHGGBDBBD', 'EFGFFEGEGEFGAHBACEBH', 'DHCDCAEFFBECCAFGFGBB', 'CDCFBAHGDABA', 'HGBGGBD', 'DAHGBEDFGEAFEBCABFAE', 'GBBCFHHDCAGEDFDGH', 'HEBCAEACGDBCA', 'GHFBDDGGHBCAC', 'GHBEGEHAHGGAACEF', 'DHHHDDDGAFGHCE', 'DFAEAEBGGEGB', 'BBHHH', 'BHCHEAHEGCAECEC', 'GCCHHACCFDH', 'GHCEHCCDHE', 'AEGAEE', 'CDCBEBHBBFGFH', 'CDFBHCBAAGBCHDDABAFG', 'DCHFCGHHFBFEAHBG', 'ABAHGGDCHE', 'DFEBHGDGFEH', 'HEBDFEECFDBFHDDE', 'HGGFCHADHHAHFH', 'FDDBFAB', 'CBFCABFEBAEB', 'FEGHBFH', 'CAGFAHAFHHADEDDDB', 'DGCEECGGHFEAE', 'EBDAECBFBEFGEECH', 'BBHCFGG', 'GGADBAADFHCFDE', 'BHHHEG', 'DBHEABCFCCBFHE', 'FHDBAHBHA', 'AABABGBB', 'DDDHGBEDAGB', 'FHHHCDHAEFGEEBFCEFH', 'CGEAH', 'EHFDHACFADDDBACGGCF', 'CDBDCEFACE', 'GHCGFAHGHEGCFFHCF', 'BHFGCFCB', 'GEFACCFECGCECCGAGD', 'DBGDHG', 'ACGEAEGBA', 'HHDFHFAE', 'GGGECDBBFB', 'BAGGECFEGBCCFFHEAE', 'FFCCBDG', 'ACFDFGDECF', 'FACFAEFDGCBCHDEHHCGG', 'DDGDCHHCHG', 'GDCFHGGEBEHFGD', 'GFGAEBGHDDG', 'GCGECHACCHGA', 'HAGACABFECEGGEDE', 'GCBHHBHGGCCAEAECHFD', 'CDGEBHFDFBFE', 'CHHEH', 'AFHCHFHHHGFBFABDFCH', 'ECCCFGHEDDDDCGDBDFA', 'HDGAC', 'DGAAGHGEDEDFGA', 'HFDDDEBGGFCEFH', 'BBEBHBDBFDDB', 'FDHECBEA', 'BAHGFACDG', 'FCAHADCGGBBCH', 'HHCCGBCCAEBCH', 'EGCAGAHFEHEDGCFCEEGD', 'DCFAFEDAEG', 'BAHGGGHEEDAAEFCGEG', 'FAABBGHE', 'GCFGCBAFGAH', 'CDGDAHGC', 'FGECFADEGHDG', 'HHAAAA', 'BHDFBHAHAGCGCEAFH', 'CGDGHGFC', 'GECCCDCGDGBABHADGAGC', 'AHBCDECEDCHDGGADH', 'BBCHEE', 'GEGCACECECBFEFHGC', 'HFECDDFBHDABGHD', 'BHCHAH', 'DBEDDBGGAA', 'CEGECFGGBAAEAHD', 'GGDABCBAFCCDGDHG', 'DDEGDCHGHHHHCFDCDC', 'CHCDDADGFHECFE', 'EEGBBHAF', 'EDECDDEC', 'DDCFDHDEDDFE', 'HCGGBGHHAHHGFAB', 'ACDEBD', 'EADHBHDABACBCDA', 'DBEDFEECDEDCFADHCFFA', 'CAACFEDEAHEGADDAFEG', 'DEDBHDA', 'BDACHEAFAEGCF', 'CHFCGGAEFC', 'EDGFBDEHCEFHCFDF', 'CBFHGCBAE', 'ADBCFAHGEDE', 'DFFGCC', 'EBFCDHFBCFFAFBDHE', 'AEDDGEFE', 'BDGHGG', 'FDGHBHCDECBB', 'BGECDBD', 'AFAHBHBECHFHFDBE', 'HBGBABFBBCDDDCEGABF', 'AHGCFBGHFBEEGBBDE', 'HFDHHAE', 'FFCEDHBAG', 'GBEDFGCHFGECHH', 'CDGGGAH', 'EHAACADAFFEEBFAEH', 'BCAFDCABECDCDCCEC', 'HGFBAHEHHABDEHGFAD', 'CFFHFFHF', 'ABGDDEAH', 'BECHGCCHACHD', 'DCCFEF', 'EDCGADGFA', 'CHFGDHDAFGCACCHD', 'CAHEECBGDFAGADF', 'EHFCBEFF', 'FHDDHBGCE', 'DDBHBGCDGGHGG', 'AAAHABAEEEDCCCB', 'EGEBDECAFH', 'GDBEDB', 'BFDDDDEBDGGGFHCBAHB', 'DHGDBAGABECDDG', 'DCGEDCAHBE', 'FFEEBCCDDFBDEBHFA', 'BGEGCG', 'EFGBEEC', 'CEHAHCCFC', 'ADECBDHEFEFFEFFGC', 'HEGBDGAEBHDBECGCHAAE', 'CHEBGCDHCBACDAGAHEED', 'DBACC', 'GGFGEGAGEFEGGDE', 'DCBEH', 'BCABCHGFDHFGDHCBBF', 'GDHBFBHAGG', 'BEDGCHGGAAGABCABCG', 'DBDEE', 'BEFAGAGAHBFCGHGG', 'AFEDAEH', 'FGAFHFBABHH', 'HFEHCDFDBDB', 'BBEDECHHHHFFBHA', 'ADGDBFECBDFGEABG', 'BEEAEBAGAHCCHEHFHEBB', 'FEADFHEGGFFGAC', 'BGGCFAHDHBBHBDE', 'ACAHBGGDEG', 'ADHEBHAGDEBDEE', 'GEHEBAFFCD', 'HCCDBEBCA', 'GHDBCB', 'CCHADDBCCDAA', 'AAAEG', 'GADAHBGFAGG', 'GDHBBCF', 'GEHEECAD', 'HCEFCDGFGF', 'BFBEDEDFHGEFDDBDFGDA', 'GFCBAC', 'CFAHAAHEHHAGCAFABG', 'BHEFCDEB', 'AHBGEHH', 'GHECAHEACH', 'HEFGGFBF', 'CEEAEHB', 'EFCEFFBGGBHAECADCDC', 'CGGCFG', 'DAGAEFBABG', 'DGFCCCDCEAFCC', 'GECBCEC', 'CHGACHGADAGBGHGDEC', 'CAGFHHE', 'EBFCBAHFGFDAC', 'FGEFHEEHDB', 'CFAFEBACA', 'GHFHDEHACFCGFFAEGDD', 'DGDBECHDBBGAFCD', 'DHADEGAGFGCGEDHAAGEG', 'GCADHAEB', 'FGAHE', 'AFFGCEHGBB', 'GBDEBGAFEGEGDCB', 'ACBGFHAFBAC', 'GEABCFHEBHFEA', 'GHDEG', 'DFBDBBHAEG', 'GEGCBDAG', 'EEGHHDDEDFCG', 'BEBDAGBGAHGFH', 'FGEEBEGAG', 'BCHCDHCAEDGH', 'HDGDDFBABGECCE', 'FCCDE', 'GCFHDFFGCG', 'EFGEHBGDGGE', 'FHACDCDBBFEFCD', 'HHAAA', 'GABFBGDEF', 'CGFEGHFBHDF', 'GCHABDBDAEDFCAGHHGCB', 'FEEGEHDFEEG', 'GHAHAGGGCBH', 'CGGFFDDABDGDGFBHGFCB', 'ACHEFFDDEFHBFHGCBEH', 'HFGHB', 'BBEDFGGFFCFEFBDDDB', 'GDCEDAHDBDFDCCF', 'ECAAGDHABHFDFAEBDDBF', 'EHAEDCDF', 'CDHFADAC', 'FEDEB', 'DAHFGGEBBFFFDGCEGFGF', 'HCFAAFBAABBBH', 'BCEEDEGGDGAEA', 'DGGGACAADEED', 'CBAFBEHFCHAFFGFDDAH', 'DHAEDAFADEGCA', 'GAGHEFCHA', 'DAGCH', 'DCFEDCDFCBHH', 'EEHFGDBEE', 'DFBDFFDHCHBBHFGAHF', 'DCBBGGHACCDDAEGHFD', 'AEEDHGABH', 'FEDEGD', 'GHBECC', 'GDCGEDAHGDBHD', 'DFCFACDAEGFEGHGBH', 'EDGFCHHEHHEAACAG', 'CGDDCGCB', 'EBCFGFADHBAFGA', 'EFFBCCCCBFHF', 'FBDDHGEBEE', 'AHBGDAFADCFEG', 'BHFGFEFGE', 'HBABAHCDFHG', 'CDCBDDGEBCDGBEBFBHG', 'DBGBGFBADFF', 'GDADFBABEHAHE', 'FDBFE', 'FBHAABAHGGDGABBFGD', 'GEBHCACBFHHGBGADCC', 'CFEEGCBHHEFBDG', 'DHEFHCEGFHAD', 'DCBFCBHADHDCHCHEC', 'DHEGGEHCEFFEFEECG', 'DHAGAFCGACEBCDCGF', 'GHACGECFDBACBEGAGGH', 'CECEHCAEFEAG', 'GAGCHFB', 'EFCHBBBGEAH', 'GCBCBBACHDH', 'GDCDCCEFDCGGDDFAGDCC', 'CEDGEAFBDCBCHGFDF', 'HFCCBBBFEGGDH', 'DDFCCEFDGDGBHCGFGEGH', 'FFBFEEGAFCABDBC', 'EGEBGFDD', 'FFAHH', 'HGEACFDHBGG', 'DHGFF', 'BFAGEAGCB', 'BDACHHFDCACDHBAACFDF', 'AGCFHECAHFBDEEGAGACB', 'CCBGBAC', 'FAHGEFBADEAHBHE', 'GGGBFGBHBGEA', 'HDEGDFBHBEHED', 'AABFGGFDEHHDDEDD', 'FHAFBFD', 'EBCGAAE', 'EACEDCGCGDE', 'FBCFGCBBBHFEDAGAB', 'EBCDDFCHCCBEFBFDGEG', 'EGEHGDB', 'CEAACCGDCFECGCBFH', 'CACBHFEEDBCCHG', 'AHCDBEHGADDDEEHF', 'DABFEAECFB', 'EDDHBDGAHFF', 'FCBAGGAGDCGBGDC', 'FFDHFFFHBDBCGF', 'DBAFFGGEFHCBHEHFFFH', 'FCGFC', 'GAFAAHCEAHEGAE', 'FDAHFGEGFHEBF', 'ADADADHDGD', 'CGHFGBFH', 'BHFGBAF', 'HGGHGHB', 'DFEEE', 'FGEEDBBBHBGDFGB', 'HHBEGCFCC', 'EABEFDFEHH', 'HEEEEH', 'HGACFGHCA', 'CHBDCEEEGHGEC', 'CECGDHG', 'HCFGDDCDBHHBAHH', 'EHFFBCAA', 'ADCGGDCCHFFGAFFEGBH', 'EDGGDCEDGBGEEEEFGGA', 'GCFHEHCCHCCEEHFAA', 'HDAAHHCDBDCHCDE', 'HHAEBFFFEAHFCGGECFF', 'EGEBBCABCECGEDFDDGGE', 'BGHCAFCGAC', 'EFADHAAHEAHBF', 'HDAAFCCBFAEDGGGBH', 'HADHGF', 'GGFDBFFEFHEFGBDCBCGG', 'GAEFC', 'AGEACECH', 'DCACAGFAEAAGED', 'BEEBAEE', 'BHBBFCCGFFFFHFC', 'EDEFAFEA', 'DEDGFAB', 'EAGECABFACCFCFGAHAF', 'EGEGGBHFHACAB', 'GCGEFHAEFBFEEF', 'HHEBG', 'AHBGFFHCGAFCGCD', 'BBGEBGH', 'BBFCGAFGA', 'HDCCCCHCAAHDHAEAFADC', 'BADFFGDFGDAC', 'GEGFEBBAGC', 'BDGDBBFCFEHFCB', 'ECGHA', 'CFEFEHFEEHE', 'GFCGHFFABBADCH', 'CFEGEGDDFEBHFDHCCGE', 'CBAEEACHDHCB', 'CCBCBHE', 'ADGDCBHCDDGFBGDHGG', 'AGBAABDFCEE', 'AEFACFE', 'HEABBG', 'FGFEHCCACFFBBF', 'FDHHDGFDDCAAAHE', 'FGHDHFEFDAGGDHFHG', 'FAFHF', 'BDEFHABDHAG', 'AGBGADFECHHFGHEBHDBH', 'EHHFBGBDH', 'CEAHEE', 'BAACFC', 'GABHBBDEEDCDDFH', 'CEBDGHEAADA', 'DAFEHG', 'ADBEGDADA', 'HDBFCFABD', 'CEEHHFDACEA', 'AABBB', 'DFFGGDBFCGD', 'EAFGCDDBHABGDGHGDGDA', 'CHBGAGHBCFHGBA', 'HDACDCF', 'HCCHBGAEEGBEEGAHAF', 'GHGGAADHAHBACBB', 'HFHHCDCHGEFDAFCC', 'CHEEABCEHDE', 'FEFGEAHCEEDEG', 'EADEGFE', 'HGGHGCEAAFEFDEFBHC', 'CHHCHAEEFHEHDCGHHCD', 'FFEGBEEABAFDFDBCFAFB', 'CDEDADGDAABFD', 'ACDFAA', 'EECFFEDH', 'HGCGDBHDAFDGCCFGDG', 'HFCEDECCCFFCBEEED', 'DBFGHGFHFADH', 'CCDFBAEEBBGD', 'DAACDHGHCD', 'BCCGDHDBFH', 'GCEBCHHEABGFDCFC', 'FGFHFCAHDAFFBBAHAGHH', 'BBCEBFFDFCHHFACEDACD', 'ECGABGFCHAGBGEF', 'HGFECFHFBCCBGECAFEBC', 'DCCCCDHEEFGGEBBAAAG', 'GGCGHBAGH', 'BGHBFEFFAHFBHEEH', 'HHFDEAHAABEBFFDCA', 'AEDAAHEHCCCBHHCEGE', 'GBFFCEGCGG', 'DADDAGHGHAFGFE', 'EBHCC', 'AHEBFGFDG', 'FFHCACGEFGECFAHD', 'CCGGHBBHCCCC', 'BGGBDDHBBECHCFDGBB', 'EBEAGGHE', 'CAFFDGCCAECGBGBHA', 'BHAHHAGDEEDECHBA', 'HGDDFHDBBEDCHAEB', 'ABECF', 'CDDHDAFDBEHAGBBCCGD', 'DDFAHHDBAHFFBH', 'CGCBFAGH', 'ABBDCCCDDDGA', 'FBDECEGCAFFBC', 'ADCHHBD', 'CGHDGFGFDDAEFFFCBF', 'DBHCGFEDCB', 'HFCFEBGEHBFEDGGB', 'GHEBHGDHCAFBHH', 'ABFCCGAHBGBAEHEEAF', 'EHAAEHCBF', 'BFGAEBAAF', 'BDEABFADBDBDAGBB', 'HAHHEEHADGGBDGHEDF', 'DCCFAC', 'HFAAAF', 'EDGAHGGFAFCCCEBHGEBF', 'FCAECFBBADCDADFHEHH', 'HDEFFDGEECF', 'AEBCAHC', 'DDEGEBHFD', 'FCHEBCEGEGBGCCFD', 'BDCEEEFGBB', 'BHACFDGHDBGCDDBFH', 'FAADECHEHHHEFEHGGDDC', 'CDGCE', 'GDEFBEHHHGH', 'CDFAGEDGDDCEH', 'DEFFCAFAH', 'AADED', 'ACCDCFA', 'GECBAACCBHGFHCGC', 'GHHEBEBGECCBHEHGBAG', 'FACABBHCHEBDCGHGBHDF', 'HGDEABDCFDHEEDDHCEG', 'BDGGFHCHCFGGGCDDFHF', 'AHBGAEHA', 'GGAGECHA', 'BDCHCHHFFFCBFFDFE', 'FCFCEBHFBEFEEGEGBDF', 'DABCBE', 'DFFHFGAFBAHBCCAGCH', 'ACDAHDAC', 'CCABGDCGEDBCCAHBC', 'FAGBCFBHHEDBEHGCEBF', 'FCDEBDHCDHHG', 'FDHDHCFGEEEBGF', 'DGECACFDAC', 'GGBHEHABDDEA', 'FEAFGADEHGED', 'FDFADHH', 'HGDACBEFABHFFABB', 'BHHGCG', 'GAHDDFDHBEDCEBAGA', 'ECBBEDDAAFHFBEAEFDBE', 'CBDFAH', 'FFDDGCBHEGAGAECCGGFB', 'GBGEA', 'HAHDACDDCAAEAC', 'BFACGFEGEBEFAH', 'DCHDDDGCBDBBAG', 'EFFECAGC', 'GAHDD', 'EHADFAA', 'FGBFFCGEGBFG', 'EFFGBGBA', 'GEBAB', 'CDGBDHBBHDBDHA', 'DAFDGBBCBAGH', 'ABFDGEDBCGCC', 'EEBCDGDEFHBDDGADDBFD', 'DHAHGDEFCDBHDCBDFD', 'EHBCAEHFEEBHBCFGADE', 'HACBECDEHFDBACDGFGEB', 'GCCDDDBHAFHCB', 'CAEAEB', 'EBBHCEF', 'CFHFGDCD', 'DHAGECDHBCEDEHAAGG', 'BAFGBHBBAHCCEACEBFD', 'ADHFDFEBBEEBBGDDBC', 'CADGFADBFCBBBB', 'CHABGCEHBECHG', 'FAFEAHHF', 'FDFGAE', 'ACGGDACDGA', 'BFFCDC', 'ADHCFCEFDFFEBCHFADHC', 'GCDDBADBFDFACBEEBE', 'ECFGHE', 'GCGCDGFBFBBDBACAHGH', 'EHDGCCBFGBFHEFDGHFEG', 'DGABHBHAAAD', 'CEBGEEBC', 'HEHABDBADGFHH', 'GBGFBEBBFHADGF', 'EGBBCHFABEBDBHHBCFE', 'HFBDDFDCCDFGGEHHAA', 'CHAFAAGCB', 'GCDGEDHCHC', 'FAAHBDAHFCG', 'GCFEEEBFEAFCDAGDG', 'CDAGCDEC', 'EACEEEBDCCGAFFD', 'AHCHGAABCFB', 'FEHHDAGCEH', 'DDDAFG', 'FCBHEDCBFEEEBCCFFA', 'CFDAGBEFDGEG', 'GAEDAEHBF', 'EFBGDEHGFHBFEHDBEGCB', 'HHGBFGHBHC', 'EAGGHACFAFAADDCBD', 'GHDAHCDDAAHDDCDG', 'EHEEEAAHCHDCEFCBC', 'EGDHGDHHCDCDFD', 'FEEBCADHFHGGBEBBEC', 'FGDEFEHCDFHA', 'GEECG', 'CDEEDAHHGCFAFDDE', 'CDDCGGHBHDCCAABD', 'BADGBCCHEHDEDEE', 'HECBFHEEFHEGCCHDHC', 'CEDBDABEGDCCFE', 'AFAEEAGA', 'AHGHDBD', 'HHGDDDDCED', 'DGHEHADFGFHBGCACED', 'BFEHEFFBEEAFFFBD', 'DACHBDCHEB', 'CEBCABDCFDGCDCAGG', 'BGFABDGBABEBG', 'HAEDFFDA', 'AHEDCBGBDCBHAGFDFFA', 'FHCBBCBCGFBCEDAEF', 'GFEGCGGECCAAGDFCGHFB', 'BCGEGGAEACAB', 'GGAFFCEADEBCCHEECD', 'DEGACEDB', 'HDBGAHBCDG', 'FDGCDHGCFDF', 'EHCAEDFHFBACH', 'HAGDBCBCFFABGHFE', 'DCHDCHGGHCG', 'AECGCHEFFFAGEGGCHGDF', 'GABFHEAEFEADCDDEFHCC', 'ACGCGCHABHDAGADCG', 'BGBDDEGCECHCCACF', 'DFEDDGHBHCGGGED', 'GGDEDGFCDHDHEA', 'AHCBECAGEEFAGFFGHEGA', 'ACEHCFCA', 'AFCHFEBBFHGECEDDGHH', 'EDGCHFADCGBG', 'DEFEHFAHFABABGDEFA', 'FAADFEGEGCDADDCBG', 'BGCHCB', 'GEDBHBAA', 'DBEDCGBFBACDBGHHAAE', 'EGFGDFFBCG', 'DHGFC', 'AFEGGFBFGFFAFH', 'DEBGGBBCBEBEDFG', 'DCDBBDDCEGACCHCCD', 'HFGBHDECFHCFGAH', 'FFCFABBEDADAADEHE', 'DBCGGF', 'HGAGAGEDEG', 'EGDAABEBBHFACHEHED', 'FBGEHEFFCHA', 'FBHBHDCDCEA', 'GHHGGDBBDEDHFCAGEFCF', 'GCHHBCADHGHEFFFD', 'CABACEBD', 'GHBAGECGBG', 'CFGBHHEBCBAHHBBC', 'HDDHDFDFEBEGFBDDAHB', 'AGHDCB', 'BAAEAH', 'DFGGHAA', 'FEFHCECHDGFECBBBADFA', 'CEBFFFF', 'AADDAEGHFCHCFEHB', 'CCFHBCGC', 'CGGGEAEHEGHBCC', 'HBFDAGEGFD', 'HFBHGBFGCDFAAFEH', 'EDHAHAEHBHCFBHDG', 'GFAHBC', 'EGGHFDFBFHCHB', 'HEAEAE', 'GACBD', 'ADBDGBBBCCCCCBCCD', 'GGFBDABGCHGGCBE', 'HCFBC', 'AFDAEAHCFCA', 'CGBCAHBDG', 'FCHHAADDEDD', 'HEEBHAEEFBFEE', 'HGBEHHGHGBEBHA', 'DAAFBCCABA', 'HCDHBBDHAEGADGHED', 'GAHHDGAGDAFF', 'HFFABDAA', 'BBGBCFDDCDCA', 'HDGBBEHEBGEF', 'AHGED', 'BGEAEBGDBCFHHBF', 'AEFCFDB', 'GDCCHD', 'FCGED', 'HAGCAGCABADE', 'DBDHAEGHGGFAB', 'FFAGFDHFADEGBDCAAGA', 'HHDHHEECCBEGGEB', 'AACGBGCH', 'FCBBECDGECGHGG', 'EDBAAHEABDHDBA', 'BFHFFBAHDHHCCAADFH', 'DGBBHCDGBEFFDF', 'GGGABHFEBGHFE', 'ECAGFDBH', 'CDGFGEDCHHHEGGBF', 'AABGFBBFF', 'BHBCACDEGCBCGBDEAC', 'FCHCACFDFABBAH', 'CCDEADDEAE', 'HHFCBAEFCDDEE', 'EAGFEA', 'BFAAAAGBCCGHFCA', 'FACDGGEGDEGGFHDCB', 'GEDDHDG', 'FCAEEADAHBAAE', 'DEAHDBDCFEBCEHEDH', 'DGGDFHDBFEBCAHGDBAA', 'EAADDF', 'AGAGDADECFHCD', 'BFDEF', 'HEDBGGHCCECDHFHACA', 'HDFHAABAE', 'BHGGFCHCAGEGCBG', 'EHFDFFECEDFD', 'ADFDDECBAH', 'CGEHAGABCE', 'DBFEHABHDDGAAGAE', 'HCGHHGHFHAGHHFCGHDAB', 'FHEBCABFDHBEBFDD', 'AAFAFBAGEEECE', 'FHCBHB', 'HDGBBFCCFFFD', 'CHGDEGDCHABFCGC', 'DEBFDBGCDHCDFAF', 'FCAEAHGEFBAD', 'EDDAGC', 'BCAHAGBFEHD', 'CAFHH', 'AACECBGBDFBAEFGC', 'FGCEFEGCGF', 'HEEEADHDBDDBEBHCED', 'AEDFD', 'AEBDFGCCCCDFBECE', 'AHEHBEFFFFEHE', 'GEGFFFEACEADHHHBEBF', 'EDAFCBAGAFCGHC', 'BCFCBECEGCACD', 'ECEAFHAAAGDDDFEEEHD', 'DBAAAB', 'GCFGD', 'FEEEHGFAF', 'ACDAHCHABDGEFECAEAH', 'EHBEEFBHCEBH', 'CEFFHCEDHCG', 'BHCFBDEEGECDCBEHFCD', 'EBADFC', 'AGHCBCH', 'GHGCAGGEADFEAA', 'EAEEBDACGD', 'CHEHHBBBDEH', 'EHABGEBA', 'EHBHBHAADGG', 'BDGGEBCGBDDECBFCH', 'DDAAAGB', 'CHEAAFFDCGEFCEEG', 'DHDFBH', 'AHAEFDBF', 'CFFFBHAADCACEBB', 'GCHDBC', 'DAEAGAEBFHHB', 'CBHGEGFHADEFHA', 'FCHEHEECEHBCFGC', 'DHHAGEAGHAFAFCAA', 'BEHFECBCD', 'BBGAD', 'CEHHFCAABBB', 'CEBABBECGG', 'BHGBBDHGFHBBHGGEACHB', 'GCCCDGCEGBAABEC', 'HDDFGC', 'HDFDAFED', 'GDHAGDFA', 'AAGCBEBAHHECDDBFG', 'HDFCGBHCHDHEG', 'CDFHGAHFEDBCHAEHGB', 'CFFDDGAGGBABFGFBBF', 'ECFCEBCBDFAHGAGG', 'FHHEA', 'BEDGHGCCBHFCFDABBG', 'EFFGCBDFBDAEEEGGGG', 'EGEBFAG', 'ECDBEDHHAGACFCBBB', 'BACADAHBFFDFGFGCG', 'GBFGCF', 'DBEGBHBGHAADCCCDA', 'ACFGGBCFFCDCEFHGB', 'FGBBEBBCGGACBF', 'ACAHHGHFBAECGAEAE', 'EFDGBBEBHEBDAADE', 'AGFBGECEGDDHD', 'CHFBACGBABEE', 'HCBCDHCDFEFHA', 'CFCEB', 'ECEEC', 'CBHCBDEHECGBHD', 'ABBGGHAHEEFADEEDA', 'FFABFBEEDCB', 'CFGDDHBC', 'DHFEG', 'HBBHA', 'BAEBHE', 'CDGEGCDCGEHAEHDGDE', 'CEFACHFEFDGCEAGGCBG', 'EHHAAGCCFDGFCFHF', 'DBDFAGGH', 'FCEADGA', 'EADADHEDEBDEBHBBGF', 'GDDAGCFCDEACBBEHFHGE', 'FCGDE', 'ABFEEGH', 'CGCHBCGGCCGFC', 'CFHGACCBADAFFDHABEFA', 'AEDHAGFBHFEFEBFEDFH', 'HAHDEDBFCHGBHGFCBFBG', 'HABHAEDEFBABBHFG', 'AEACD', 'EAEHHHBADBGH', 'ABGGGHFBAEHGGFF', 'HCGBHHGDFDEBHEF', 'CCEDGGBGGGFGAEDCCBD', 'HHDEBHGAEEG', 'FHDHCHCADHFBCE', 'DGFBAEGFGEAHGBHCBGC', 'AHHEGFBEBHGFAFE', 'EFDBCDCDDGFCEBHDADC', 'DBBBDAH', 'BBEHDDGHG', 'DFADCEFGGH', 'GHDAGFHG', 'AADCDHECGFDAEECH', 'FCCEGAHCHHAAEE', 'CABCHCFCBFCBAF', 'HGABAGBCBAGGCCHEFDC', 'DAAABBAHCEGDAC', 'GHCDBDG', 'EBADHB', 'CADFEEBCCFGGA', 'FCCCGFCGAFACBBDFDBC', 'EDECDEDAGGGHDC', 'DDHDCFFGCGDCF', 'FDGAAEDEEEFBB', 'DADAAGG', 'FGAHGFFHDAGBCH', 'GCFHF', 'BFFFCFHC', 'CEAHHGFEFFGGH', 'CBAHAABBFDAGAHHFCCB', 'FEFEBBAGGBAGCDHFFHA', 'HHHHGFAHH', 'DBGBBACFFF', 'ACFEGBHAAFBED', 'BHDEBDAHDCFBFGCGB', 'HADBCCHHFD', 'HGDEEBBFFAGFGEBEGB', 'CFDFHDFD', 'GBGAHHCCGCDAHHDCDAHA', 'CFHEH', 'GGCBEFGCBCCCHFC', 'EBDDABDBFHBGGHHAFA', 'EADBEGGFHFFHAG', 'BGGGCF', 'AABDCAHDEDDCCFE', 'FDHCAHHD', 'ABADGGBBFHE', 'HFDAFEEFBBF', 'BDADFHDDEH', 'HECAECHABCCCBAAFA', 'EGBFFBECDHFGEBCF', 'AACCG', 'AEDCEHHD', 'FGACCHBEG', 'HFEHGAECAGHAECAC', 'AHDDADBFBHB', 'HEFEB', 'EEFCACHGCBCGHH', 'DGCFFGEGDDA', 'DAFADH', 'DDGHCCHDGH', 'AFHEGECBEFHDHB', 'BHHDC', 'HAAGBCGACFGADFEDB', 'FGAFBHCGAHFC', 'BGGECDDDGDBBFD', 'BGEGC', 'ACBDBHHEBF', 'EEDCEHFFABFE', 'BEBECGC', 'FAEBAADA', 'FHAGBB', 'EEDAEABDBAFC', 'DHHFGDBAG', 'BFACBBH', 'CABAEGDHHCDH', 'CCBHFCCDGH', 'FBHEHBG', 'AHAHHDCBHABAFCD', 'EDHGGDDGHEACGAAFGH', 'GACGEDEFGCEBBCHG', 'GHDGBBBDF', 'HGBHAECGEAHHB', 'DFHGACCC', 'BCAGEBGBEH', 'CFEHFC', 'GBFFAFHFBDDFDDCHBHBE', 'EAFFDEDEECDEABGABBD', 'CGFCDFHED', 'HAAADAFCFGBE', 'BAFEEGEHBECHFA', 'FFGAAB', 'DGBADBADCGFBH', 'HBGCDDEEHED', 'CDFDCA', 'HCGHFGCACBBFEF', 'BCFGAHCBACBCECAGHG', 'CGEGADGCFA', 'GFDBFFEFD', 'EFFEDABGGBH', 'EDHCGD', 'ADCEFADCFEAEBGCBHE', 'FBEEFDACDCAGBHD', 'HHBFFCHGFABCBCFH', 'HCHBHAB', 'HHHDDBGFFAAF', 'FFAGDHDHEBFFGGEGBAH', 'HACCG', 'CCHACGCH', 'EAGEFGDGGGHFDH', 'CECDCA', 'BFBGGCABCEBEHHBBEAGG', 'EDEDHCABGG', 'EHGFDBHDCBGCEGADHEAH', 'FFCHACAGHGEACADBEAH', 'FEFAGBFH', 'HBGBECCADFEDAFAGEDB', 'HGHGCGCGEFHABBC', 'DCHFGABDA', 'BDBAEAACGDHHA', 'GHCHEHEDECABFAD', 'HFAGBGAAEEECFACB', 'GFDCHDEDGHGBFEBA', 'AHHFBBHFCACEFDD', 'FEGDEFBEABHHADDDHEBD', 'EDEHH', 'DCECCGEHGGBBDBBHGF', 'EHDHFDDFGAFE', 'FGACDADCDGG', 'BHFGCGAEAHECAE', 'BFECGHBFE', 'HCBGEGBFGEFFGDGA', 'AGBGHGCFBFAFDGCEEGBB', 'BCEBDFAAGBEBFCECH', 'BCAGFDGHFHADCCAADDA', 'HDAFBBHDHGFCFEBFC', 'EHAFDBHGDEECCGA', 'ADFEHFACG', 'GBDEA', 'GDBCCH', 'CHGFBCFF', 'DEDGDDCCCCFCBFFH', 'CGAFHBECFF', 'DGGCGFDCDGAECGEDCFF', 'ACHHA', 'CHEEEDFBDBHHEAFEHF', 'DBBEAAFHEDCBF', 'HCHFB', 'ECEFGB', 'EHAEDDFEDCCCGH', 'ADGDDBCGEHEBHDECGBE', 'EGCDFFBADDEGEHCE', 'HFEHBGG', 'HCCBCDEG', 'AECHDA', 'DGCECGGEHFEA', 'EHGGDBECADDEFFFGDH', 'HFCAAFCDGHHC', 'CEDCHHGCGBHBFFDAEBB', 'HEGEAHCFBCFDHCHABG', 'HAAGGEGACDBEHHFFBF', 'BBBFGECBHFACFDFBDBG', 'CFBEBADHABGHEAHADHG', 'FEBACDFGBDBG', 'FFGHFEHDD', 'ECFAGCB', 'GBGBEBGGFGCBFFED', 'GFECE', 'GACACCHFFFGGFAHD', 'FDFFA', 'HHHHFGFHFCHDDEEAF', 'DFDACAG', 'HFEEFECEFDACFHABG', 'BABEEBEF', 'ACCGH', 'CFGDGCDCDGFFED', 'BGFDBHBAADDFDB', 'DHHAHGFBH', 'CFBBBBGCGADHGCHD', 'BGAHAAFACAECHDCADBF', 'CHCBAFHBFCAHFHDHA', 'HCDCAFDBAGCCAF', 'FAGDECGGHAFEG', 'CHCBEDFHCBAHBGBCCDE', 'EBAAEAHBADBAABD', 'AGEFHC', 'CACBEDCA', 'BFDBCAGBAACCBBGFFD', 'EGFGFAHCCFEAC', 'FBHABECCBA', 'DEGDDHCCGFCADECEA', 'DBGGA', 'GHEEBBAGBBABGE', 'CGDDEAACCGCAEGGAB', 'HABBADBHEHACDBGHGBC', 'FGDHBBCHCC', 'BABACDFEFGCGGDEBCG', 'BDCEGBDHEEDBDHHGDF', 'FCGBAAFFBFBBE', 'FFHBFEHFEB', 'AFCAECACCG', 'GDEGBABHBGDABD', 'AABBAEEHFHEAHCAGFD', 'GBDAEDHHA', 'CAGDBGCCEB', 'FHBDHABBEFCCGGHB', 'EGACGCAAAE', 'GGGBCDAHEAEAEBCCHHHG', 'DBHAFEBDDBEDD', 'DDCFHEEEHFEEHDBFDBE', 'AGDGCDBHAHEBADA', 'HGDAFCEF', 'AAGCACF', 'HGBBGFBC', 'EFAEHBCAAHAHCGFAGHAF', 'FGDHCEDEFAAGEHAB', 'DBCGEDFBEDCA', 'FCDCHBCB', 'GHBCABHGDAE', 'GEHFAADGBB', 'FFGACCBGCEBABAH', 'EEADCGFCBBGFFBBHEDEA', 'AHHDGFAGGA', 'FFCDA', 'BAAFHBBGFHHAHAHHDG', 'AFCHFGDACGHEBAECHD', 'AFAAEABG', 'BGDHFHDCG', 'ADAFDGCFHEEEDFGFECAA', 'DGECEBAGGBC', 'AFHDDDGABBGDF', 'AEEDAEEHFAGHHC', 'AHCEBFFA', 'HDAAFAADCGA', 'CEAGGEECEEAB', 'ABEFHA', 'ECEBAECBC', 'DDABE', 'GBGCBCCBCCGDBHEFDDFA', 'EABHEECHAEGBDBBC', 'HEBEDFDGA', 'CFCBBADCBBFH', 'EAGBFGFDEAGH', 'HAGDBBAADAFHGF', 'FDACEAFBFAHFAE', 'GBFEDFGEEGADDBBFBDE', 'GAEHHCFEFEHDADFBD', 'BAHBDAAFFCDFABFGDAC', 'BCADDEBEDFBGCFGHC', 'DCEBCEDGHCDDC', 'FFCBBHCGDFDBH', 'EGEFDBGBCBDH', 'BHHGBAFEBADHH', 'GFEGGDHAFEDBD', 'AFEDDE', 'ECAEBG', 'BFAGGADGFFAH', 'AHACD', 'DEFFAEDCCHBHBHH', 'EFHEHBEBEEHDACBFFEGH', 'FGBFDGEAECC', 'DBEHFFFGDEECAEADEGHE', 'FHFEHDADHEAB', 'GDEFHHHGD', 'EHADCAHBGFE', 'FFCGFGCHBHHAGFE', 'AGACABGFHECGB', 'BDAFHCAACGF', 'ADAFBGBFFD', 'EADFBGBEBCFABEFDFB', 'GADFDA', 'HAAFCFAAD', 'EFFHGAAHDBD', 'EEGGDHFAFGB', 'ADFBDHBCCDGB', 'FCEFHEAAEBEDCABBDBB', 'GADAGDGABCBDFB', 'CFBGBGEAGCF', 'GHCBDECGF', 'FDGGAHEFBGHFF', 'GEHHFCFBAFCBHHDH', 'AHFFFBD', 'DAGEDGECFDDDEDEBEH', 'ADDDBDHHFDABCACHCEAE', 'FHDHEAFHDAGGHHEG', 'DFBFDBCDFAAF', 'EFHDGAGBA', 'AGDAGBEHFBGCG', 'EFCBCCFGG', 'CFCDBCDEE', 'CBBFCH', 'HFCFE', 'GFAACFDCFD', 'BEHHGCCDDE', 'HADAAEEFEGFDHEDFDBC', 'DBGGEHDG', 'FHCFGF', 'ECHBHFBCFFG', 'HEHFAGECA', 'CHBEGDBHAECDDG', 'EHCAFDFBBACDGBGA', 'EGFEHCHB', 'EFDCGDAHCH', 'HECGFCEEHGACAGEBFA', 'DBFEHDGHAHAFFAAH', 'AHDBGFD', 'GDBAHCFCBGAABGAEHC', 'GDBBGEGBA', 'BBHHH', 'CBHCBCFCCGBHBH', 'HDCBHDEG', 'FCCAG', 'DEGHDECFAB', 'ECGBBBFGGADCACEHCF', 'FBDBAE', 'EAGDED', 'DBFECAEAAEFEBDBDG', 'FHGABAHCHC', 'GFAEEGDACHHAFHCC', 'FAGBBFHDADCEH', 'CCHCBBHFAAGC', 'BDFGFAGEDAAAAGAAFCD', 'FDHFBFEBDC', 'AGDHD', 'GBCFGCHGGABH', 'EDHCAGABEG', 'FBFDCEHFFDGCGBAGFF', 'DFAGGGACDAHB', 'HGGHHH', 'FCGDGE', 'DHCHBFCHDDGBCCFCABFB', 'HCCEAFDHGFHFBHAECA', 'CFGHCEHAGBEEFCA', 'FAHFFEFABE', 'GCBDHBACDCDHAHHHFB', 'CHBBFGGCHCHAEFFEAAF', 'ACHFHD', 'DHDEFGBDEBDGAHFA', 'CGGCHFEA', 'FBDHEEHBG', 'AHFDBFEEGDEGFACEDG', 'HBBGGFCBGEGAGBADCHE', 'BDGEFACBHDCBFHECCCGD', 'DEFGEGBFDBBEDEDFGGC', 'DGDHF', 'ACCEFBDGGAEBF', 'FAAAEF', 'GHDAGGFCBCAGGDAGBDD', 'CFGDDBGA', 'EEGHHGAACBAACGDAHHGB', 'GDDCBGHBBBFFGHADGGD', 'ABHGFG', 'FBBAEBFHEACABFDA', 'DHFBC', 'AGDGB', 'ADEBHACBFABCDDCDGB', 'HEAEDAEGEFFFFFEGCDG', 'GADGFHEHDGAEGADGBFBA', 'CGGHHHBDFCHCBHFEAGH', 'FEAHCCAFEBBCGHG', 'ADHEDHHH', 'HHBFHEDBEFCHGEHAECAG', 'CFBHAHC', 'AGEGGDF', 'AEAGAFAAGCGACEGF', 'CHABBHCGAED', 'ADFDH', 'AHGDFFFHBCFH', 'HHDAEHGGAAGHGFAC', 'FDDBBHEBDCFH', 'CGDHGFEDDCGD', 'CFGDBAHCHADDB', 'GAADE', 'AEBACCCGGHFBFF', 'GCCCCCHBCH', 'CGFGCHBFCBFEFDGGDA', 'CHFCHFGHHFGEFHBDHGB', 'BFEBGGEB', 'HEGBHFEECGCF', 'BBFAGEFDDFBCG', 'GHFHGGAHE', 'HEHCAAFDFAAEE', 'BCCEECFAADDFE', 'DFHBDECFCEFCDB', 'DDHCCEAGCBGHGHEC', 'GFBCH', 'HFCACBFFDHEDBCBEB', 'HFFABAFAEBDECGCC', 'FDGHGH', 'FHCAE', 'DHGGFHHHECBFDC', 'HDAHDAEADHDDC', 'HEFAADH', 'AFAECEBBD', 'BHCCHHBAHGA', 'AGHFABGGEHAGE', 'BAHADGCFEDDBHEGH', 'BEBBHEDCAFCAEAEEFGBA', 'BBADGFDCEF', 'ABEHHFFEEG', 'ADBGHC', 'ECBEECAHHHH', 'CFDBDFHEHGCACCBGFCGG', 'GHHGBGCBADHCAC', 'GBBAEHEFEFFFAHECGEEG', 'DHBCHFACACAFGBEGFF', 'EBAAGD', 'GBACFHBGHHBHGGBH', 'AABAC', 'ECFEDCGGC', 'ECDBHDECBEDEBGAHAGF', 'BGFBEFBBCF', 'FCHEGBHDBGFCDHDGG', 'HBADEDDEGABHAHAADFB', 'GFFBCCFBCBABDCGDGGG', 'HCADCAE', 'DHBAGGCHGFGAGH', 'ADEHEGF', 'BBDFHACEBFH', 'BDGCHDGAFCBAADDDGCDG', 'CDDGHFAGDGFC', 'GHDABFG', 'GGFEEHGFHFDFAGCCBB', 'FHEAEFABGEFFE', 'CCEEFAGDCFHDGBFDGEB', 'ACEDACEDDGFCAAFAEGG', 'GHAFFE', 'DGDEAHGHBBACDCFEH', 'HEEEECBH', 'FCCGEHABGBDAEDHG', 'ADFDCHBBHGAGBFEG', 'FEDDFFCGC', 'AGFHBDDGHECECFFDEB', 'GCDHEAG', 'HBDBACFGDBGEFG', 'FCFGDBFGC', 'FHGBHHEC', 'AAADD', 'BHDAAFDFHGFGCBGFF', 'EAFGFACGGCEFAAGFFCCE', 'AGHBEFEFGF', 'GEBEFECDG', 'FEAAEFAFHFEGDAGFCCA', 'EDCEACAEDCBBHHFEB', 'DHBBEHFGDEFHCDBEDBG', 'CDBAECBFACEAFGHDADDD', 'EAGDGFGHCBFEAEA', 'CEDECFCGCDFADHBEH', 'HCFHGFBAE', 'FCFAHDHDFDBDDCAEDAGA', 'GEGECGHHEACGHGE', 'HBDAEDECECCBCBHG', 'AHGBHFCFHGHGBE', 'ABFGGGFCDDCHBDAC', 'FAAABG', 'ADFFCHHDHFHCDG', 'HFCCCDGFGFHFEGA', 'EEGHDHFAFHFHAF', 'BGEBGFCEHEAEFAH', 'ECAGFFDGECDH', 'BCEFAGFBCAHDFCBDBC', 'EGGEEDFBFEFG', 'BBAECDGDAHEFBCFBBEE', 'GHFFDGG', 'BDFGBGHGDFABHABGHFF', 'BEBBBGBBGBCDCD', 'BAEBHGA', 'BACGGADEFFFEACB', 'BAHCDEFABFCHBAHGAABH', 'DEHEBCDAFEB', 'HBBAHDHFDGH', 'EAGBEHECDDGCHBE', 'FECGGBEBCAC', 'FAEDGHBGFDBFC', 'AGEHBAADGCHEEH', 'BGCDHCDECEHBEGAEHC', 'EGHGEGBEFFGFBCA', 'AGAECAGCDFGHDACC', 'BBBFHFBC', 'AECFGDDFBEHEEHHDFH', 'AHAHB', 'ABBFGBCBHGHHCG', 'EEEBCG', 'HDHEHEFBHBBED', 'FACEDAHAA', 'EBEHGA', 'AHEBFCD', 'ACDDHCDDBDAGFEFDDCC', 'GAACDACCAGFBB', 'DBAFBH', 'ADGCBHGBGCD', 'DECBBB', 'GAGDHFFADFCHHBFGDH', 'FGFGDCFAFBDAEH', 'HAEEAFHHABGFBHED', 'GBDBCADFAFHBDGCCEF', 'ECCCGCAC', 'EGHCDHCDDHHFAE', 'BACBEDACA', 'CHEHHAHAACDACABEHB', 'DHFEAAABFBBGGEGEFA', 'EGDAGCHHFHBBHF', 'DEDDCCHHEHBDBEG', 'ECDAEEDADHHC', 'FGBFGCDFHECBD', 'DEEHBGCCEFGCGDCB', 'FCBGEAAAFHBEHBABGF', 'GCAFAEBEA', 'DEHCGGD', 'EECEEFBFGBDC', 'DGGABHAEEGEDDAFAF', 'DDCBHFEFFFCHHFGHGFG', 'HDGHCACCGAACBCGEEGC', 'AACBCEGCCAGEDCA', 'BDHEHCD', 'FBHCAFFHF', 'HCGAFABADBHCF', 'FBHGHDFEGECHADHCFG', 'EHGBCEDDACHGFCH', 'FCBHHHG', 'GADBBBADDDGBAGBEEF', 'GEDBBGCGFAFEHFAE', 'HGAHBABFAFD', 'EAGDEECAADCDHBAB', 'HHCCA', 'EAHEAFHFF', 'EEDFBEDAA', 'CDFGHCCD', 'EFHEBBCCAAG', 'ADADAACBB', 'DDHHBCABB', 'GHBDC', 'CDFDDGCHCFED', 'EDFGFGDDCEFGEFGFDB', 'GECGDEHDGCFABCAFGCF', 'DDFFDHEAF', 'HDECGFACGFHGCCDG', 'DFFHECDEFFDCGH', 'EDCHF', 'HEDHGHCFDCDG', 'DCHGCBBFBHFDHDHHEEEF', 'CGDEFGHEEAEEH', 'CHEDAD', 'FGDCEBDECG', 'ACHFBHBB', 'BHAAGHDDDEDFEAFAF', 'CHEFAADCHCHEAD', 'ADGCACHDGHDAGDADFGGG', 'GBCHAHCCHFF', 'HFGBHGAHGDEDCCEA', 'BHGGB', 'ECFBEHBCGF', 'EHGAB', 'CDFBDHGDCHDGGCEA', 'GDFHHC', 'AFCEGCDDGCDGBBAADHCE', 'FBAFC', 'DHECHBC', 'FCECCCDABFGFCD', 'FEFCBGCFCCFBEBHFGBF', 'FBBGF', 'EDHGGBB', 'CGBDBGGHHHCH', 'CEFAEHCAHDHCBCDCGAG', 'FEFEG', 'FEABGFDAACAFEC', 'FDEADAFAAHCGDEAEBCA', 'CEDBHGFEEBBHGAEGED', 'CCFGDHAAGCC', 'CHFEDG', 'FAHCHEEBFGCGFDC', 'GAGHGBCCABHDBHHCAC', 'BGEDHHGFCEHGF', 'BAEEH', 'AEDHEGDAAGH', 'CCFABBFFADEFGFDEBGFC', 'BBEHCHFDHCGHEE', 'HDBEHFGBHAHBEBBBEHFF', 'BBHFGGHBGDDGBGEFBG', 'CDECCEGEAEBHFBC', 'BDEAB', 'EEAHAAC', 'BDAEHBADDCD', 'CDADGDHGB', 'DBADAAGGBGGFFC', 'DEADDFGEHFGHECHABGH', 'ADEEDFBCEBHHA', 'CFAACCHAFCAFCAF', 'AAAEDAE', 'AAEHHGCFAGHCFFAB', 'FCEDDEGCCH', 'ADHEFDCFDA', 'FECGFGCDEADFA', 'EFDCGDBEGHBFEHCBHG', 'DBDHG', 'GBGHEE', 'AAACBHHEBGEAFHEACHBA', 'AECDB', 'BHBGGCACGGFGCHBB', 'DAHAHBBEAHDADDAEEHAF', 'BEFHBFE', 'AAFFCAFHBHEHHAHCAAG', 'HGFEDBEHAAHFHBFB', 'BAGHHABADC', 'FEDDFH', 'ADACBAGGDGBHCHAGBDHG', 'AEDADBEEABDHAEFHHDEA', 'GHCBDGBDHEFDCGECCC', 'CBFACFGEFD', 'EDEEHCBDFBFABDFGC', 'GGFBAHFGBFFDBAGHCBGH', 'GBHAEGHDD', 'AAAEFF', 'BCAEEGD', 'DAHAFD', 'BBHEHGHE', 'FDCCAGAHEEFADHAFDH', 'DAEGEDBBFCGDGCCG', 'GHBHACBDGAEEGDEEDFD', 'AGABFAE', 'EACGBBCHD', 'ADEBDFF', 'AAHDHHGGAFBGHGB', 'GCAEBDCFFGCAGECFGDGF', 'HFGCH', 'DHGHHEFFCHBEGG', 'EADBBBDDACHFFEDFDBEG', 'HEECH', 'FBBHBGDFHEEEDHCHAFDH', 'CCEDBGDCDCCFCC', 'FGACAEHAEDAF', 'FFACDHCCFHBHBCB', 'EBCHHDDHDGBF', 'GHBAFEH', 'HEGEEEGC', 'DDACAAHBECBEEGEDD', 'EBAGGF', 'ECDEHFEBHBDAFFGBE', 'EEHBFDGCEGFDH', 'ECEEDEDFH', 'HGBEFHFACFEDHAFA', 'HGBDBACDCCFDFBACCAEF', 'FEDFEFCBBCEABBDG', 'CFFEBFAEBACDFG', 'GHAEBEBGFEAAAFCABC', 'DDBEG', 'EFDAF', 'EGCAH', 'EHAAB', 'FAADFAFEGB', 'EGDCDDBHFGDB', 'EAFHDDDAABC', 'GCEFDCGDBHFDBFAE', 'BGDFACGEBBFBADFCGHGA', 'CHACBHGDAFCGBED', 'EBEEGEBGDABDA', 'EDAADAEDDHHECCAEH', 'FBDFEGDGCHEF', 'AADDEDG', 'CDHAGCDDGFEA', 'EADFBCFFCHFDBHGEDAED', 'DGEGEFBBAD', 'FFDFHDEFDADCDDECH', 'DFHCCFAHFA', 'EAHGECEGHBDGAFDB', 'BBHDEEC', 'BHEEEAHDD', 'HAGBFEGHBBCFFED', 'DHCCGACBEBH', 'BCAAHABHCHFAAHGH', 'EDFDGBCEGCCGH', 'HCHDF', 'BCBFAHEBGEBDHBEGEFHE', 'GEBFCBDF', 'DEFBAHDHFHFFBD', 'FDGCCAAFBABEDHCFGDF', 'DEFBFHHEBBEB', 'CFEHAEBGHBDABCHHGCE', 'ABFDBEFABC', 'GDFBEDBAD', 'GCGAHF', 'HHADA', 'GDGFEAFFAGGACCB', 'CBDCGAH', 'GHGHCGEEDCBBFDFEFF', 'AHBCHHFCEECBBFAB', 'HFCDFCDGAHAEHD', 'GGGHGFCFAAGEEFBFBD', 'EHDHCAH', 'EDECGBFC', 'FDHEHDBGBFCECAFBGB', 'HABCADAFHEADFDBE', 'DABGEGFABB', 'FECDADAEDDGF', 'BBCEBBFCCFFGDEG', 'BFFBBDFFHCEBHFDEHE', 'FFDFBEEHDCCFAHCHHG', 'HAECEHDEGDADGGCBGBB', 'AEFHDFHFGCFBAFCDCHG', 'FCEHDH', 'CBGFEBFGHFCCHFAH', 'GEHEBBFHEEGAFAFHGB', 'EAEFEDGCHHBEH', 'DHGGHHAF', 'CBABGAACBBBGFHA', 'BGHBGHFABCBBF', 'BDBBDDFBFFD', 'BCCACCEAECADFEGFGE', 'GHHBCHBEBDDCABFEBCDB', 'CCGBFGCBBBEADAGGAAD', 'BCBHCFCEGCBFBDAD', 'DDBHGGCCEEHCCAGDE', 'AEABE', 'FGFAEDDGFBEBBDGEHHA', 'DDFDGEGAAEFEBFFHF', 'EECCBCEACCBHGHFGH', 'GBBFBAGBDDEAGEAD', 'DEAHFFCHHFGEGFECECEG', 'EAGCDAEF', 'EGDDHAFDGGGAFGGHFD', 'BGGDE', 'EFDFBCGGHCH', 'CHAGCFH', 'HDEBADBFAEFHEDHHDCD', 'HACGCFD', 'ACFCHDFBDF', 'GBHCB', 'DAFHF', 'FEFCGGCGBCFCBGFG', 'BDHFEAGFCDGBGCEBHBE', 'DGCHBEHECDCBAE', 'DBHEEHG', 'FACGHGFCBFFFEGFCC', 'CHGDFAFB', 'BCHGCEADFFCCCEHFAH', 'BEHGCHHFBCAFABD', 'HDGGE', 'HAAHEBDFHDABAGFDGFE', 'FFBFFC', 'GCDFDFBHEEBCDBACEDC', 'AECCCF', 'BAFBFCHCFEHFFFHBA', 'HFEADF', 'BFHAGFBCBHACAE', 'AGHHFGF', 'AFAFDGGG', 'HBFDBDBDDADEFEA', 'FGEEAAHECGCAEFCBDAD', 'FCCHG', 'CGBBH', 'HGDAAFFECFGAG', 'DGFCEHFAGBAGEAADHA', 'FFGFBBCHCEE', 'AGABHADEFHCAHDD', 'HDFEABDCFABEAG', 'DFDHFCACEDEACGDCCFF', 'EAGBGH', 'CADFDGABBCBCEFBGGC', 'DDADHFEDEBFFCFDDAD', 'DHADDGBDCHGD', 'HBBGGDE', 'CAEGABA', 'GDEFBBFBGHDHHEFCBH', 'AEDEDGHAFF', 'EBBCFHEHDGFDBBBGA', 'AACCDGGADBCDDAGGA', 'DEHHDECDECBH', 'AGHGDBCABBFAEEADDDCC', 'GFBCCDCDBADGEHHEHECD', 'BFBBCE', 'CGFFDECB', 'GCFCEHHDDCHHAHGEHD', 'CBAADHCHGCGDFHH', 'GFCGCAGEECBFHADHFDGC', 'FDFBFECHCAAAC', 'FABHAHFADGCGHDBDE', 'DHECCBHCDHEAAFAAFB', 'DEBFEHADAFGBCDGABH', 'HDFCD', 'HGDABFGFDDFF', 'GDAEFHGGECBGHEAHGGD', 'DECEGGCGAGFCFDD', 'BACDGCHHA', 'GGEHEFCBGD', 'CAGAGAHCFDBBDEG', 'EDGGG', 'DBHABEFAD', 'ECECEBEDFEAFADCEAHB', 'FABBCGBHEDFHGCFC', 'BFHCE', 'FEBGCCEBHBE', 'ACAHFHADFH', 'HBEEEBCDBEBE', 'BFCDA', 'HDBBGAEAECCFHH', 'EEADHCADEDEBGGDB', 'EGEGCBFCACGGHA', 'GAHFDHGHBFCHFCBDGCG', 'HCFEDDCB', 'BFFCH', 'FBFDACECBEDH', 'FCAAHEHDBBCGCEHFC', 'EFHBCFCB', 'DADACAHEFA', 'EGFCBADFGGEFCF', 'CBAEDDDGCCC', 'GAEAAGHDEAFCFA', 'DGHDDAFB', 'HDACFHEBEDDCHFAD', 'DEDAA', 'AEGCAHF', 'DGCFFED', 'ACADEA', 'DHCAB', 'HFDFHBCGGAEHFAD', 'FBFGFFE', 'GADGED', 'BBCEDFAE', 'CHEGCBFCGBAABA', 'BBBDGDGHDHDABCHHA', 'BAHGDBBHHG', 'HDEBEDEGFEGBDACD', 'BDHBHHDHCCADHBE', 'DBDBFDEEGDEGBC', 'FGGHBFHF', 'GCBBHDAGHAEDAEBFEABF', 'CCCCABDCGGGDD', 'EGHAEDFAA', 'CHGAHAHHDEACHGBBHA', 'EBDGBDFBCEHBEBFCGG', 'CDFFCAAHDFEBBCGCBH', 'AHHDAFEBCEGAAEEGFB', 'GEEEGDEHEDGEDFGBB', 'HCFHBGAG', 'GCHHDEADDGC', 'HBCFBFGHABHHHDFDEADF', 'HAAGHFGAAAGBE', 'HEGDEEFHAHGDDH', 'GFBABDAFHDDFFDE', 'GFADFB', 'BBGEEHCCAABAFCGDBB', 'CAHCFAAACGD', 'CCDBHFHA', 'CGCHBGGBCEDCDGE', 'GDHACAHBDBGEACBAECEE', 'GGAFCCGFFAEFGHEAAGDE', 'AAEHBACEDD', 'BFGBBGAECHGBHGDEE', 'DHHHCDFCFBDA', 'AECGFHBHCCHBFBBGHF', 'CBFCFFF', 'BCBAGFD', 'ADDCFHAFGDAFCAEHG', 'EDGECCCFFBAH', 'GFADBABEGFHG', 'CDDEGFBFBHHHDAHHGF', 'AAADGDGDDBEADE', 'DCGGAHHFCEFBGHDEF', 'ADCCB', 'DDDFBDE', 'GCEDHDDHHHAADABGCHFE', 'AEAHCAFFECAHHBA', 'CBFFBECHBBAAHBHACFBF', 'FHFEEAGA', 'FHDCCHHCHAAGBB', 'ACAEAFEBHA', 'FHBBFAHFG', 'HHBDFED', 'BADHGHCEFGHAGCCBHFAE', 'HEHFEDBC', 'FAHCEDABEAC', 'BGHEGEADBEEFDBBE', 'CEBHDFEEHBB', 'EFCHBCEEGGEGHEEEDAEA', 'BGDCFACBAFAFDACACHDA', 'AAECHGEBDHDFGDAFDG', 'DCBBFGEDAAD', 'HCGCGGBCCCEGF', 'GCEBG', 'ADHDHGBADHFGFHGCADAC', 'DCBFEHABDHBGEC', 'DEHEHBE', 'HACCFAC', 'BDFGGGBDEDC', 'FAGDEEF', 'DAFHBDGAAHE', 'HHGFGC', 'CFDGAF', 'BCHCCFDAEEDGECBGAC', 'HGDBBF', 'GGAHBCBBFFAA', 'GEFFBECCEHDECDCHD', 'GFBDFEGEGFCAEGD', 'HCBDFGADDED', 'GGHCDDBBFAEDCCDGCE', 'FAEGDFGBCG', 'AGAGEBEDBBHDGHFF', 'CAFCGDDGB', 'CAGEAEGCFEFCFCD', 'CHGFDCFEFEFBCDDEG', 'GBEADDGBBF', 'FHHEHDBBEBHE', 'BGFEEEFDHDCGE', 'HDEHBFBFDG', 'HFCDHCHCBGDGCDGF', 'FAGAFCFABBAHHEHCFCA', 'FHHBDFAFFFHDH', 'FHDFBCAEGDADGFACACC', 'AEGDHBFGABECBDHCAHCE', 'BGCEBCBDDDCDD', 'EEFHAAFHBGFGEEDBDHD', 'BCGDBEDDHFFEFGBGB', 'ACABEDAHDCAHFEDHDBDF', 'FCFHG', 'CGBDDDFF', 'CDBCEE', 'BFBHAGEADGGBBFBDE', 'BGFCC', 'EEDECCGCDFCEFFH', 'HDDFHADFAADECHFGHFCB', 'HCHCADCE', 'DACEGFFH', 'GBFHB', 'BFFGBEGDF', 'AAFBBE', 'CFCAHEAFAEFEBFHHFG', 'DEHEHHHFAFGGHGEE', 'CECEAF', 'BFDFBH', 'AEAHFAABHAH', 'HHAEDFCHHFDGGFEHEFEB', 'GAEHEEEHBBHGEFAHAHE', 'AACCDADGF', 'AGCDFDADABBDDBCCD', 'CDCHBBFHAEDCHHCBA', 'GHFCHBAFGCACEEA', 'FGAAAEG', 'EBBHHHGDFBHAGFGEEBH', 'DAGECEBBBFFBDC', 'AAGFFHDHHACDFHCBBHGB', 'DAGDDHFBHBC', 'DHDEEEEEBDCEGBFEDC', 'GADHGAFBCBCGCDEAGH', 'HBFEHAEEDGEEBDG', 'CHHECGHHCE', 'GDFAGBEDDFFCEGBC', 'FBCHAA', 'EDCBDCDHEBCGB', 'AAAAD', 'GHHBDEEC', 'GGGFEHCFEEGAGCHEBHE', 'BBCGAEFAGGCCB', 'GAHEDGD', 'AFFCBECHEGHHHCDFD', 'FGCFAFGEHBBHHHFE', 'BAFAGAHBAACDF', 'EEEEBAFDCFBEEG', 'EFCEGCAFACGACH', 'DDFFGHEBBDHBFBAABDCC', 'FCDEF', 'BBEBEB', 'CFBBFECFDA', 'EAHBECEBHCCDFCAGEADG', 'FDEAFDFCDEHB', 'EBEAGEFCFCBCDHF', 'GGGAAAFEBDE', 'DCCEGAGEG', 'FGBAFGD', 'AFDGGCAEHAHBAE', 'ADHDDFDBFA', 'AABDAFFCD', 'DEGAEGHBAHEEHCG', 'HEBFAHFBBCDAFGEDDA', 'ACECDHC', 'DGFDGADADGGFDGEAC', 'HAHEAEDGGACCBEHCH', 'GDBAGCGDABAFH', 'ADABAEHBEDGBEF', 'EDHCFBFDDBCAAEACFFB', 'DFEFFEFECDDHCCAD', 'FCBEBGEGAAFCGGACB', 'AGBFDGADHDEGAEA', 'CFADBEHDF', 'DFEFBFCEDBAHFFDEGHB', 'BFFFAFHAFGDC', 'FBAEHGAGFDG', 'HHFFEFAC', 'HHAEEGGHFFCFBDFDC', 'GAECBFDAEEGA', 'GHECFCBCCFDHF', 'EAEFDHADBGEFDCE', 'DHCDFAAE', 'DGEFFBCFFHFEEGBH', 'AFCDBHEDDEBDDCCGEC', 'FBHDFBFDGBFDCHBBEDCF', 'FAHBFDDBHAAHADC', 'DEHBAHGDHC', 'DADCFEAHF', 'EFFCHFGBEBEBAEGABFBB', 'BHHEAFFFFFEDAHHG', 'DDFBC', 'FAEFCBBH', 'DCCFFAHDHCFFACAGAD', 'HBECCFEHFBCCBBB', 'ADFCFDFHDBCHHAFHBHE', 'FDDBAFCCCEG', 'BHBAHCHEAHDHAEFFF', 'AFEHFFDEDGCBDCCAFHHC', 'FCAEHBDED', 'DHHHDFA', 'EAEDFEFBAHEH', 'GAAGD', 'CFBHBBADDDBGHAEDBDAH', 'BCAGDFF', 'BHEDAGH', 'BHHFHAAH', 'CHFGBDDCCHHC', 'BHEBHEHC', 'HAHGDF', 'HFCAAGGACB', 'GDGGBHCDBF', 'BBADFEDAAHECB', 'GEBEDBFACFDDFEGGGEC', 'CEHACBC', 'ACCGEBHDAHGECEAAABCG', 'ADAFDHBCHFA', 'BGCGGACAGEFGCBA', 'GHGAECCHBBCHCAFBF', 'GDHEFFHACHCFCCA', 'EDGGBB', 'CDEGHCBGA', 'DAGHF', 'FEBGGEGEBCGHFCFFAAF', 'BAEAADCFEBECBBE', 'BHCAHFD', 'CFEGFDEAEEBFBFDAAGGC', 'CBGFEBEDDDFE', 'BBBFAAABEBDHADBGFHF', 'AEFEEDFEDGC', 'GGCBFHGBHAFEDBG', 'CHHHHAEBDABFFECBCBB', 'CEEHHHABG', 'HFGFFGDCCDHAAAD', 'ADCHHBHGEGBFEDAC', 'FHGFG', 'CBEAFGHEFGHDCFAHEHHF', 'ABDDGCG', 'CBECAAAEAAAHBDGFEBGF', 'BCCHGFGDAEHEABC', 'DBHEECCEBFDFCEA', 'DBBDDGCCBFAEHHHF', 'BBHACEHBEBDECDCAF', 'AHHEFCD', 'FCCFFDECFBHBEDAG', 'GGCFEHDEEEAHEFHHCHA', 'DAGCF', 'CACGECGCGCCHDG', 'FHEGBAEFF', 'CGCBBBB', 'ADGFEAECBF', 'ACBCEACFDECEECAD', 'GADFDHDFA', 'FHDFBFBGDAHCFFFABADA', 'HHECGB', 'DBCDGACAHGGE', 'ECGEHFDAHDHHHEEDCHGF', 'FDBHCGABHGDDDD', 'DDCDAFFFFGAEAA', 'HDEFGGGFHD', 'CCAAHAHHEFBFDEBFBECD', 'BBGBAEAHBFBBFHH', 'DEBECAFGDDHBFBAAHA', 'HFHGHCEHBG', 'CAACAFHCCCACCFEAFD', 'ADGFEDAD', 'BEAFDDEHEHGD', 'AHBFBCEADADHDFEE', 'BEBEDABBCAFGBHB', 'AGCCAGADGHFHG', 'CDBBCFHCEHA', 'EHDAEGCEAHFBCFAGDGED', 'GDGHEDEAGD', 'ECADGHHHH', 'BDAFBBFHHCGADHB', 'ABFEFEHHDDGF', 'EBDGDGDDHE', 'HCFBADEDDECA', 'CAGDHAFABCAD', 'EHHBHGGDHDFDHCA', 'CHFGFA', 'ABCAFDE', 'EDEGHHEFDAEAGH', 'HCCDGFCEHEHHHGHFGGCB', 'AGCGGHFCFHHFDE', 'EDHFEHADCDDBGGE', 'CHEFBFBGAFCEBGFFFDCC', 'FFHHBDAFCHCEF', 'HAGDEACAHAHAD', 'FDFCGBBCBA', 'AHGDBAHGEC', 'EBFFCAHBACGGCFDHC', 'FFEBCDDAGCEABDECC', 'AHGBHFGCHBGCH', 'GEHEBBHEDHEBEAFD', 'HGGHGGEBCGDBHF', 'BFGCACFFDFGCADFF', 'FAGAFDFCA', 'BCAFADFAECAECAFCHD', 'DHGFGCEDEF', 'EDGCGFAHCE', 'EDHCAAGCEGBBFDEHEG', 'HHAEBABHD', 'CEGEEAEECEEAFFE', 'ADBFDAH', 'GEDAD', 'FEABABCAFGGCEBHFE', 'FBEECEBAGFECBGGDHHD', 'CCDDCDHCCFCFFFCEDCBG', 'DDBCAF', 'EBACFHACBDGDEAEGH', 'FGHGHBDH', 'BCEDCCAFAFA', 'GFEFCHFCGGC', 'FGEDCDHGEAEC', 'CCHCD', 'CEFAHHECGGBEDHABABAB', 'GHGDEDABFAEFDDAEFC', 'ABCACEAHGBCDEEHH', 'HGFFFGEBCHEHAA', 'GEHBDCGEFAHAG', 'CACBFAEAAFBEDDGHHGBC', 'HHBCDCECEEDDECCGHBE', 'GAHGFAHDC', 'FFHFAGCDBHHD', 'AGCGBBAEBGAAFDGGECFF', 'EFDDGHFGCFAFHH', 'CCHBCBACEHHDCCGCAHED', 'HBBAECCADGEGAAEHC', 'EGCEGGCACFEFCHHCCE', 'BHBGEH', 'CEGBDFEGDCGEGCFABAGE', 'FDHEDCHF', 'AFGGABDFHGGCEHDEB', 'FBAAGH', 'HBGDEEBCHFCFFBEHHD', 'CHHDGC', 'ECHHCEGAGECFCCB', 'CABADCDCAAHD', 'CGCGFEHEBCA', 'DAECCGHFHHBGAFH', 'HEGGHBDEEGFCAFHHHB', 'DAABCGDDGCFHEHFH', 'GDFBHHCGDDGGCHFA', 'BFBBAAADHGDFGFFBHGHC', 'ADEAAB', 'FAAGH', 'DHDGDDDDEGHHHG', 'FCDHCHBGGC', 'ACDFAEACAHCDA', 'CDBDEHEDCCEGCEHGCBB', 'FCDAAHAH', 'AADHGAFECDDHDCGBDFFF', 'DCBBHCCC', 'DBDEFGEFFCFBBHAH', 'BBBACC', 'CHHCEFCFBCGDACDBGEA', 'FDBEEDHG', 'BDAHHCFGBFECF', 'GECFFFBGHF', 'DDGDEGBDAFGDHFDF', 'DAEBHBEBCEHBHA', 'HEEDEHBFAC', 'BBHHA', 'EHHFGAECBFFECBGA', 'DBGDHEDEEGHAFEDA', 'FCAGAAHC', 'DDDDGEHCGAGAAHEHE', 'ADHFEDEF', 'AGGHAGGDGHA', 'HEEDFGAHDDADHFHBBAA', 'HDBEC', 'AAFGCBFBGGAHEG', 'ABGEE', 'EECEAHCDAEEED', 'BHHCDDFGFGEBHGGB', 'GBCHHEDECEEBABDDDD', 'DGDCCEGBDFHHHBCDB', 'GGDCGEBEBBDEDHB', 'HACAGAG', 'FHACDGHGFGG', 'HEDEGHEAGFGFEHCCC', 'HHDFEGFAD', 'CAAGHHCAHFGHC', 'CFABE', 'CHFEEHHBHCH', 'GACCGFEGHDGEFACFAFB', 'DGCAEHCAEDAEC', 'DBAEBCCG', 'GGDBFGFBEEHF', 'ABDCB', 'AGFBBFGHDHGBDFDEC', 'CAGGAGCHECEHHFDDG', 'BCAGAEHCHGEECEDG', 'EDCGBAEEEHCAEF', 'HEEBDDGDHCBGCEHF', 'BFDCDEFGD', 'ACHFABECGCBDDGEFDGFG', 'GHHDEDB', 'BGFGDGH', 'FAEACHBBEGAADHFBEGDB', 'DEECG', 'FAGGBDCBFDAHGDG', 'FBGCFACDEEACGADCG', 'GFHDAGFEFGB', 'FCEEEBECBDDBFGE', 'CCADECBGHDACC', 'HGAHEEHBFFD', 'ABHBDCHHFGCF', 'EEEABFEDHFCE', 'EBCAF', 'ADBAGHG', 'GAAAFEBFAHHED', 'EAABGBECDFCAEBGDCGDF', 'BCGCGDBCHHHFAGHHGD', 'FEDAHHE', 'FGBCDABHBHGDHBEFGGH', 'FGBBAFCEABADAFCBEHA', 'HDEBDFCGCF', 'AAABBHACEHAE', 'DHGEH', 'HHGEEFCEEDGHEEECFCH', 'CFAFBGGBDAGA', 'AHGGEACEGHFBCDEE', 'DADDGDADCA', 'ECCEGD', 'FFBGC', 'DGFFFDDC', 'AADFEEFBGC', 'HDADCEBGACBBE', 'FDGDDHBACB', 'GDAHFEBDDFAG', 'EFBBEAHEG', 'GDEGGBGAAAFGBF', 'CBGDDHACCAGGDDBCGDA', 'DHFCAGG', 'ABDFC', 'ABDHE', 'ACBHHFADGACB', 'CCEHBECEGHHGFDD', 'ABHBDCECBHBHH', 'AEBGC', 'CHAFGDBCFFAGHAH', 'CAHFEECBAFGCEDCB', 'BHEFBFCHAAC', 'GDDCBEB', 'DBACFFBEABAABAGE', 'EEBGCFCHDAB', 'FADAGEACBAGEFHGDG', 'FFBEF', 'GDHGCAAHADDFGAF', 'CDEDFDCGFE', 'AACHFFDFBEHBABGEAH', 'DHEDBBDDDBGECFFFEGBC', 'BBDGAHBEG', 'DBDFABCHGEBHGB', 'ECBGBHCGCAHDFD', 'CBGAA', 'GAGCCFCGEGAFADGF', 'GHHGCHGDFEHBHGCHGCGA', 'DBDFAGEFFBH', 'FAGAGG', 'DDFBB', 'ABBFEF', 'AHGGDCE', 'ECHCFGBDEFFEFFHE', 'GCBEDCHECEECCAHACDH', 'AGFHCCDGE', 'GBHFCDHHDCHAA', 'AAEBBBCBFGDBB', 'BDGFFG', 'BEBCDHE', 'ECABG', 'GAECAGCDEADEG', 'CHFCDCADEFCAFCGFBHE', 'CCFDGEHHCEADBBF', 'GBFCCGHCEBEHHBGHEGC', 'AACEEBDGG', 'CAFFCFGEAAABHCACH', 'EBBEDEHC', 'HAEBD', 'AGBFHBABEBHGBDBDGCGB', 'GDDDHFHGGDEBACEABGFH', 'FDBEHEC', 'CBHAEDEFB', 'DBFEACGCB', 'CDACEGCCAAHGBACDBGF', 'GCCCADECFDAHGDFBD', 'HCADAAEBBEACFCBFCED', 'HGEEHADBDCDEBA', 'FAFBEG', 'FEGEBGGHBF', 'EGFAECGG', 'CDDCGACH', 'AAAHDHECGHAC', 'FEGBDGAACFGBHDFAHAH', 'EDHAFFFAEBAFFDDECFC', 'HDCGDFDCDEAC', 'FFHEEEHGHHAE', 'BCFAHCDCCGEDEHD', 'CCEHACAGADGDHBGC', 'EGFBGCEHAEDGHBGCE', 'HDDHFGEDFEGHFD', 'BBEAEBGDDHEFBHEFH', 'DDEACBEDFFCG', 'EHGECCGHACE', 'FECCGFGDCHDGADAGG', 'BEGBGAFGBGBB', 'CBDEAAACEFBAGFGH', 'CGEGCCGEEFFDGDEE', 'HCGDEDADGCACAABEHG', 'DFDCDDB', 'DBFEBDFAH', 'DGGFHFHAAGGHCDDCADDC', 'FEDFGEEFHFGHGDD', 'FCGBCFAHHEF', 'DEDAC', 'HFHDDCEEHBFCC', 'ABFGHCFBHBB', 'FDCGCAEA', 'CADFHBAADEFAADHHGG', 'GABHAAFDFFAHGFBG', 'HBEEDDHC', 'HHHEDDGHDFGEHCHHAFDA', 'AEGEGAHBCFGDAGHCHA', 'DGBHHFAACF', 'CDHAAEC', 'AGCDHEGDAG', 'HFAFBDAEBEAGC', 'AAGEAFHEEG', 'FHDHHHAHDBEAAFC', 'DACHHBGDBBAFAHHG', 'EBCBHAEFHECDCEGACC', 'HCHAGAADEADDAHGGDDH', 'ADABACHEGCACH', 'EAGCHGDEHAAAFECAEBGC', 'HGDFDDGEHHAABAEAGD', 'DBFCAAFAGFBBGGBH', 'GHGDBABCEDHDDCAFDBGH', 'AHDEGFHGEFFA', 'GDFDFCHCHDAAEGHHCAH', 'CHCFAHGEHADCEGB', 'HDFGACCDBCEBEBFCGH', 'GBHCD', 'CFFEFFEF', 'DCHHBCFA', 'BEBAHBE', 'DDHAHBADHA', 'ADGCBFDHEGBBAG', 'EBBDAFBBCBHDEBECEDH', 'BBDDAH', 'CFDDFGCGE', 'AEAEEAEEAHDDDFEAFGCH', 'BEHGCEFEBC', 'DFHCECGAGGBAA', 'BGCFDB', 'CAGBFDHHAADEF', 'EHDEEEG', 'HBBFE', 'FADDGHDHB', 'HGAAD', 'DFFDBCDFCGGBGHG', 'GDHGGFCCBGDFDGG', 'AGAGCAGCDDE', 'FBHHDCFGABCC', 'CFGCBAAB', 'HFGHBDCDDGEFG', 'GAEGDDGAGGCEAA', 'ACAGFFHCHDGHB', 'EECAAGFFGGAFBHEGCFEA', 'HHFGFDABCBA', 'AAGFGADCEA', 'BHFFEEF', 'CHACGFHEG', 'ABBEACAGGFBBADBEH', 'GACGAHAHECD', 'GEAAHEBHEHBGHDCEH', 'HDHFGFDHD', 'CCDCABABHGBFHCC', 'EHBBBACA', 'HBAACECGH', 'BFECDBEHGFCFEHDEHF', 'BEEACGECDACDACFEHGAG', 'CCHEEA', 'BDDAGFDHFEHEAABHFDG', 'DCBFEGGCG', 'DHFGFHHGCFAEHGDGDGBE', 'DGCDCHB', 'GEABADAECAFDFDBFDC', 'FEEEGCCDFEG', 'AFCAHDDCEEEDE', 'BAFEGAAEGCFFHEEH', 'DHFBFCHCEECEEFAHBDC', 'AEEFDCFAC', 'BBFBFBDH', 'ACCHDAGFBDGHHBEHBCGA', 'DAACHHDFHGE', 'DGCCFDDCHDAHCBAE', 'BFABFBDHD', 'FHEBFDCD', 'CHGCHB', 'DEBFD', 'EEDFHEH', 'CHBECGDHHFABABECFA', 'AHGEHFEBEHFGBD', 'FHGDADCAHGEHFBAG', 'FAAEDG', 'AFDADGDHAGFCCCHEB', 'BBEBBFCBEFBFBADECFFH', 'CABFEDFABACCHADEGAEG', 'AABBBHADFBBHADBEG', 'CFHDAAABHGAADH', 'GGFGABD', 'AGCHH', 'ABHAFFHGBCAEGHFC', 'GBDDFFGBHBCA', 'AFAEDAHEBAGBG', 'EBBGG', 'FDDCEBAAGEHA', 'AFEBHCCAACHHAEC', 'FHCGGFEAGGBCEBF', 'BDCBBGBBFEAAD', 'ECBBG', 'DAGAGDFEABEAA', 'EDBFDEHGA', 'HGAHCDBFFAFFGCCCDE', 'EGGCBCDADAG', 'FDACEBBBBCCBDGDADFBA', 'DBEDECC', 'BHDHHEAAGAEFDF', 'CDGDDGEGDFFFBB', 'BGDFDGBECCGGHHHACB', 'DGDADBHGGF', 'AADGCBBB', 'BABEDEBF', 'AFGDHHFACHGECFBD', 'DACDEDDCFDDEH', 'HHBAD', 'FFBHAGEAEDEAHEDHFHEE', 'HBGEHCAGBDBGBBBFGB', 'FGABBCHEFAFGBFD', 'DGGGEHH', 'GGCCFHACABHFABHADD', 'GFCBCGEFDGFFDFGBBDG', 'EAFHAFACGGCEBA', 'GHGFCAFFBGABHE', 'DBHHEBG', 'FGAHGFEEABABHFGA', 'ADCACDD', 'CBEEDBAFDBHADDAHGBFE', 'HGHBBCHBDBB', 'DGHFGHFCFCD', 'BDAAAECEGC', 'BDEHCCBGHB', 'CEADCE', 'FGBDCBGEGDH', 'DBAGECA', 'GCDBH', 'DCGFCDBEBBDFDG', 'FAHEEABABHFCABGF', 'FFDEBCECFEAGEFDDE', 'CDBGEDACDDFD', 'DAHGFCAAHBGAH', 'GECEHGEADGBEG', 'ACDAEHAFCDEGBAFBG', 'GDBEDBHHHFCAFCHGC', 'ABGAAGEDG', 'BADCDGCGFEFCBACGADCG', 'DCGHDADABBFDEHAGGDB', 'BCBEBGAEGF', 'EFDBEEHFCEGHEC', 'DAFHABDHCBHGDACGC', 'BHAEFDBHCDDDEHGGCF', 'AFCGD', 'BBEEABDEG', 'HEBGB', 'GHHFFG', 'FAADBCDDHBHAADAEG', 'EDCGCGABFBF', 'DGEEGCAFHFF', 'DABHAAACGF', 'GBDCEHFGAFBDHB', 'EHGHFFGEADGH', 'AHEGHDCGHFBBHAHC', 'ABDCFF', 'GHACHAFGBBC', 'ABEDCCFECHCF', 'HHCBFEDGCAAAFFEEEGBF', 'AFFEHGACGEHAHBBD', 'FCGEEADEGHHAHGE', 'EGCADHHDGAC', 'HGHFEF', 'FAFCECDC', 'CCGDBFFDGBFB', 'FFEBABCCCEBEBAC', 'EFBHEACDDAFFAHEGDA', 'CCAFHCHHCGCFDEHFD', 'AHDDEGDEFFBGDGCE', 'FEABAGCF', 'CDGEBGBECGCDGHGEBC', 'FHHCGHEBBACC', 'DEGDH', 'DCBAHGBD', 'FCBFAEACGEA', 'GFHBHAFACCF', 'ABEGAAHHGFDAAFGGFFG', 'HCDBEA', 'EECDAD', 'DDHADGHHAABHCB', 'EBFDF', 'AHFGBFFBEFHEDG', 'EFGBBHBBDFAAGC', 'CADCHADHDCACADD', 'DFDBEAC', 'BHEFAGFGFAG', 'FDCHHCAAHABDHDBBEDG', 'EFFCC', 'HDDFCADFCBBDBAAFCGDD', 'FEHFADADHA', 'BGDCGDCDABDGBGH', 'EHGCGFGBCGGAB', 'HHHFCBGACCFFFGFFCG', 'AAEDCD', 'AEHEHCEDBDFEDFGACA', 'HGECBAGEAEFDHFABEF', 'FEBABGFCDEHBCFAHHFB', 'AFCADBDDC', 'CEFEDEDACEAAHCCFB', 'BGHHBFFAAGEACBACGAD', 'AACEECHHGDAEHBB', 'BABCBBFADBB', 'FDDCHCAFFE', 'HEEFCDHDCDF', 'HHFBECCDAHFH', 'HFBHBFBGHHEHEDD', 'DFAFDGBCGEBFDG', 'CECEEHGBCEE', 'AFFCBGG', 'HEBDHBAEG', 'ECBCAACEECAFGFEAF', 'GEBEACFHAGDBG', 'AGEABADEAEAEBE', 'HDHHDHADCGAAHB', 'DFABFGE', 'GFFHEBDBCHHGAHFD', 'GHEABC', 'BCDBHFDDAGBBCEGA', 'FGCBAHDG', 'EFHAC', 'HBGABCDFBGHHECGDBG', 'BAFFFFFBFAEB', 'FAAGBBGEFHAHECGB', 'BEHEFHEGDDCC', 'ADBCFCGEAEFAHFHHBDGE', 'DCACBCFADHGH', 'DGBBHHBCAGG', 'ECCAHHFG', 'DHFDBBHBF', 'BBAEGCADF', 'FDEDBHFDD', 'CAGGDGEGGHE', 'BBHHDDDAAAC', 'FHDCCHCEHCEAEDABB', 'ECGBDEDCBHBCACEGFF', 'CCHEBCCCCFC', 'DDDBBCHH', 'CGBCBHE', 'FFHFADBBFDHCDGEBD', 'AGAFACFGHGHB', 'CCDDFAACH', 'HABGCGAHBECDBFHEGBEB', 'HABAGACD', 'AHFHFH', 'DHGGCABGDCGAEDGGE', 'DBGFCFGFFFGAABH', 'BEBHHG', 'AFDAACBBBHECHGHEEBHF', 'BGHBGFFAHBCGCBCC', 'HCHHG', 'EAFEEEEGEAHGB', 'EBHBBDACHBFCGAF', 'FFDFCAECCBBAHAAFG', 'FGFDFBFHG', 'HFBDAGDBDHGA', 'DABEBFDCCDCEEHA', 'CFGDC', 'FAGCAG', 'ECAFGAEACACHEFAEFFD', 'DDFAHAF', 'GBBEGA', 'ABBHDHFG', 'FFDEEGCHAAABGBGG', 'BBFGAACABEBCEBCBHGDA', 'ADEDBGAAHAAB', 'HEDAABEEFFFG', 'HAEGFFDCGHEGCGDEFDFB', 'BEBBCBEDGAAH', 'GFAEGDFAAB', 'BDCCF', 'FGDBAGCBDFAECBDC', 'GADHFBBABBFHAAAHH', 'FEAGHGC', 'BGAFEFAFDAC', 'ADGAEEAGFBFA', 'BEBDDDGCGHFFGGBFCFFF', 'CGFABGFEHEACFGCE', 'AHFDDCEEDDDGEB', 'BFHGHBCGCHFB', 'AACAD', 'GGDFBHGEAHBEECGDBHDC', 'GFHBBBGCHEHAFC', 'EHCGBHEF', 'HDBDEGDAHBFD', 'HGGDCH', 'FHDFABB', 'DAFFGHDEC', 'EDEBECGGBHBFECAD', 'HBHGFCCGGBGC', 'DBHGE', 'FAFEBBHFEAG', 'FFHFBDG', 'GBFDAGA', 'DFDCHDCH', 'ECCGACDEFECHH', 'HEGHAGFFHBEHD', 'HEHDBFFHBEFBDCCCCC', 'FADAGBGFEB', 'GGCFB', 'BEFDHHHBECH', 'FEEHFHHEGCDBDBDFA', 'FDFEFEAADGCAHABGFAFD', 'BBFBEFDEFGCB', 'HFFAGBEADCCHBBAGB', 'HGCBEFEHHC', 'BBHDDEDHBDFGCBFEHF', 'DGBADBFGBH', 'CEFDGDHAFBAFAGBHDF', 'DDFEGBCGEEBEAF', 'DAFDGGC', 'GDBHCFFBEHHF', 'DEHAGDHFDAEGDCCBHGH', 'CEGACFDGHHHHGCBD', 'BGEEACAEEAHCEHCDE', 'FAHGGBADDBC', 'DECDDEFHEDAHC', 'FAADCBGFFFBEHCHDEEHC', 'GBDDACDDDFDBACG', 'EHHDAGDGEAFB', 'AEADBGGCFDC', 'EEHDDEEFCDCAFCD', 'GFADFBEGEBEBEBGDBBEG', 'DCBDHFF', 'EDEDH', 'EFHHCHHGBGABGEAHEBA', 'GFBDDGFGDGDB', 'AGCCEBFHABFAFAGE', 'HACEAH', 'ABDGBCHFBEADEGFBBF', 'BFBCBHDDCCHCABFDGGD', 'EHFGEFFHHBGFHDHAA', 'ABCHCE', 'DDDBGFBECCCDEEGCFCDA', 'GFHGEGAACCAFEDABBFAC', 'BDHGGFBHDDDEADEFGG', 'CEBGHBHGBF', 'EEHCEAH', 'FBBHCHGFBAG', 'DFEEFECBCHG', 'FFAAHDCBGDEDBCFCG', 'AHHAG', 'DBCGGCCGHAAGAHGADBD', 'EAGHGC', 'BFAHHEHCFB', 'EDEAGGEEHECA', 'HCBHEEFDCABFE', 'FBECGGCDACFBDAGEGHG', 'ADCGFDCFBE', 'ECGHGCBHAB', 'BFGED', 'GDHAD', 'GHGBCAFBDB', 'HFGHFEGFBEGCFBHGCDHD', 'HGEEG', 'CGHDEFCACHHBGCFADHHD', 'EAGBFHGBDBGFAFHFF', 'CCHEDBHDABDF', 'DAGCGEHCGADEG', 'CEBCA', 'CHFHBDBDAH', 'BHFGGGEEFHBFF', 'FBEAFBED', 'FEGBBGCDACBAD', 'EBHCHEACDFGGEACDGGFB', 'BGGBFA', 'AEAHADFH', 'HGHFDABGCECBEEFFAEF', 'BHGBGGCCGAEEEHDEH', 'GAHCHDAGAHEBDACHBGA', 'FGFEBBDEEHHBADC', 'FCFABEFBBGDBGDFDCGBD', 'ECDFDFHFGEB', 'AGDDHGHAGFEGCBCD', 'FHFGHBHHDFCCCBCBCFD', 'EHADBFBHEHDAHGHDB', 'GAGHG', 'BAFCEDAHCDHEHAHHAEH', 'HEGABFECHBEFBAF', 'FGBEDEC', 'EDBBHFHD', 'HHBFDEGBAEAEHE', 'FBDDBCBGBHHHCBD', 'EEEBAFGDHCADHHAG', 'CECBAHEHDEAE', 'AFDDFHHGB', 'EGGCDCFCDDFDBDFBG', 'DAADHDCDFFDF', 'BACEFC', 'HBFDCBCDEFFCFDBGHC', 'HFADHGHGH', 'HHDDEBA', 'AFDACAHB', 'ADBEHDBFAADHGHGEH', 'FHEEEBCEGFFHEDG', 'EDDDHDBCFD', 'HDEDEHADEFCFGACGBCGF', 'ABFHHAHGAG', 'EDABEGFEAGGB', 'CAEDGCBDCHDCH', 'GFFABAFC', 'FEGDHBEBAGFEGGGCAFG', 'DFHDEFGCCHBD', 'BCDFHCAAHBBAB', 'GHHFDH', 'HHHFDEEDAFFFBDG', 'AGEHFH', 'ABFDGDFBHFEABDFHHDH', 'BCHHDBDHADD', 'HHDBEHGHCGGEGBBF', 'CGCFB', 'BHDBCEFEEECHBGD', 'CFFGDBBHGHF', 'EDDCB', 'HBFDBDBFB', 'GDFGGBAAFGBCHFBAAF', 'HBHCCGADCFBAEBFDFHDE', 'FBBGABAFBFC', 'AFEABACGEDFAAEGDG', 'BGFGBGE', 'ADAFACHHFFFAGCHHDGF', 'DEBCH', 'HCCDGDAHHHCCHEFHEC', 'HGADGDECGEH', 'FGCCGGGFCEEFAHDHDGF', 'DBFDCHDHHG', 'GEBHCAFADBEBEGHE', 'DGDDFDACHACACCC', 'CEFGCCDCGCA', 'BCCGGC', 'CHFAHBGAGBDEGA', 'EBEEGHDGEA', 'DCDFGFGFFDCCEGAFBEF', 'HHFCABDFBCGABH', 'DGCDAGCGCD', 'DBAFADH', 'CBDDEHFHAHGGAEDCHDEB', 'BEGDGAFBFDCHCBGE', 'DDDCFBCABAAHHDEECHB', 'DDHHACBDCDAHGEGDCEE', 'DEGBFGHDHBCDFB', 'FCGAH', 'EGGAEEDHDHGF', 'BCBAA', 'AEFDHHABCAH', 'ACGAHFFFFGGHHGGBGEB', 'EAEGHGGHDAFBDDCHDCE', 'CGEFH', 'HCHEHFEGDFBFG', 'FAAGA', 'HAECAACDDFHFGHH', 'GEHHAG', 'DCFDHAFHB', 'GBCCHGFF', 'FDHFDCAFCDEAE', 'EGABBEGGABEDAF', 'GAGGEAEEGCCC', 'GEHCBBEFE', 'GECDDACBFGCCFEFHGGA', 'BHGECGCD', 'CDBBDFEBABEBDADHHFDA', 'DHGEHFHDHCDFCGDHBAFD', 'DCFHHAGHDA', 'HDGECFFBF', 'FCCFDEGGFDDBHAFF', 'GFBBHG', 'BBAECDGCCG', 'FFEEEAHBDGEBDFGHHGA', 'CEABDDHDBDEA', 'HEEAAGFCC', 'DHEBADCDGHFECEDCG', 'CAECGDEE', 'HDFCGFDGFFFEBBHBDA', 'CFHDGEEC', 'BFBDAGHCEGDFBCA', 'DBBBBAEFBAFFGBA', 'CCDGFB', 'EHBABEADCBGHF', 'CADFBAABHHEDGFFDE', 'GFCGHHC', 'EBBEBFHFCA', 'DFBBHEDCCHACA', 'AEHBBCEGBDC', 'HACDCHHCH', 'DDCCHDBEGFGDDAD', 'HFDCCFBCFEBHCHGFGGA', 'DGDEAAFBEGBBGFHG', 'GDFEHDEFD', 'DCHCH', 'FACHDE', 'HCDFHHDDFGHGBDFCD', 'BABAAEFHCCFCHFAGC', 'HCEHBCDFBHFGDBEBFEC', 'GFGAACBHGAEB', 'DBFGBHBFFCCEA', 'BBBBFGFFDC', 'BHGDCHFBGGHHGECBE', 'CHHABACFDBAHEEFC', 'EGADBE', 'BAAAEGECHDDDHDCGHBE', 'FBBBCGED', 'DBEEHBBCHEEEEABEEH', 'BABGGGHBFDBCGCEFFHBH', 'GDCHFAEGH', 'AHFCHFHBFFAGDGGE', 'DDADCHGCBAHBHHDHHDGB', 'CFGCCBBDC', 'BBEEBGFFAHBCDHH', 'ADFGGEBDADBE', 'EGCECGFAAGGGABADF', 'EHDECBAGHHD', 'FBGFHE', 'FGDFHHHDB', 'BDBGBDAHEFGGACBDAF', 'CDFAGCACAD', 'EACEGHFGBFAFGAGCHB', 'EDAHBCFD', 'BCDCBHGCG', 'ABHDHAHBDFCFHCFE', 'AAHAGDCBGEDEAGEFGEB', 'CCCAAGCABHABHGCBFECC', 'HHDGCBEDBHBAAAHB', 'GAGEFAFBCAAC', 'BGHGAFDBDHHEGEBCHE', 'ECHACBHGAAFH', 'EDBFDAADHGBECBCDACFC', 'CDCEDBAAEBGDDEGG', 'HEACBFBFA', 'HHAHBDDFCHDFD', 'AABFEDBDBABHABEGCFEE', 'AHHFFGCGACFHGGG', 'EFEAHDEBCFEBFFEEABFE', 'AGFGFBBEFDHHCB', 'EDDGDAAAGA', 'ACECHDGCABA', 'CFFHHEFEA', 'GECFBEAC', 'HGDDEHBFCFFCHGEBFC', 'FBEBBBH', 'GEFDCGEAFCEF', 'GFEEABECECCBBAAFGAE', 'CEFGCECABGGAH', 'DCGACFHEEBCCHAGGE', 'BDHADAEBGDDCCCAAHH', 'EABFBABDACFEDBCEH', 'BBEEEDDBBGCFEFEGB', 'FGEGDEEDHEACFEGHBGBD', 'HHBEDEBCCGD', 'CHDHEGHEDGCGAAEFDF', 'FGGABGHDGGDCA', 'EGBGBDGHCDDE', 'EDAACBEAEBAFBHEGGBHG', 'HDDCDBFHGCBG', 'DEEDAEAGACAGBEECHCC', 'HDBBCGC', 'FEGAAE', 'BBCGFAGDADGE', 'BDEAACBGC', 'ECHBABHFADEEDAHGEAF', 'FECBDDBF', 'GCCFFDHCGEHGDFB', 'CAAADAACBBFCCBDHD', 'AGCCAFAEH', 'DFCDBGBGFGEFCDEHHCAE', 'BBFFG', 'HFHFEBBFEBDDCGEGAB', 'EAADFAEAHDCEHAHHDEGH', 'CCCDCHGCBCDDFEBHBD', 'BBBDGCAGEEDEB', 'HHBGCACAH', 'BDCFFEFCGF', 'DCHHHGDHH', 'GFHCFEAFGCHFG', 'DCEHBCAEHGFA', 'FAHCCEAGCDDHCDACG', 'CCEGBFHAGAHA', 'EEHAEFDCFHC', 'GECHDCGFHAFDBACAC', 'ECEHFHHGEDGB', 'HAADHABHDGDDECCGFB', 'HBGGEHFCEDAG', 'GCCACBBFF', 'CGDDDFCFAHAE', 'DEACHFFHCFFAHDFC', 'DEFECCAEHFCACBGFA', 'ECEHCGCHFACADFBDHH', 'BHADFC', 'DFGCBCGHHF', 'HBCBDAGHHBHGDEDDFEE', 'DDBFAAADCDDB', 'FHCCGDH', 'BBFAGHDDHFBEDHADDH', 'AGDFGHCFCBECHAFHEDAE', 'FBDEEDEHGDDGGHDG', 'FEHFHCAFDBCECAHHEHF', 'FEACEEBAGGCEA', 'ECEEBHCDBGAHBCEFEAC', 'BEEHHCEBDD', 'BGEHGEHBCAHGHFBEH', 'AHGGGEHACFH', 'GEFHAFHHGABF', 'AEBAAE', 'AFHCGFECEBCADB', 'BEFHCGFBEAHAHHDBDGA', 'DAADB', 'EHEADEEGGEAACF', 'FHCFBCDFBBBCAAEAGCH', 'AEFGDFFDHHHDBCCAG', 'CGAGCBFADAAFCCDA', 'GBBCHHHHACGC', 'DBGDG', 'HFGHFDFFGAHFCAEGDHAH', 'DDHCFEGCBABEHBF', 'CDCDDHFD', 'BDABDCHDB', 'EEDAGEEFAHE', 'BACHHAAHE', 'HAFGDAFEFFHH', 'GDFDEFCGCCDBHD', 'FCFBF', 'ABGADCDHFB', 'AACHHHGDEDGFDG', 'FEFFHBFHCE', 'CDFHCHEAACFBBBEGBHDC', 'GAFEEDGHDBC', 'CEADFACEDHHFDHGGDHDG', 'AAGCEBG', 'EHEFEFCAHFCFHDCCF', 'CEBAGCHDHD', 'BCHABDECHDFDCDGCA', 'HFGEEADCAGCECEFHGFD', 'CAGHEEDFCBGDHCG', 'FFBDFH', 'GEAEFECDGFHDAGFADCG', 'GHCDEDGAA', 'FHDACHDFGEDHBDBHBBE', 'AHHHAFC', 'CHEDHAGEA', 'DCCBECCDGHDHDBAFCG', 'FGBHDDGDGCADGHBGEAD', 'GGFGDGECACEDGH', 'AAABB', 'CHGEGBA', 'CDEABBDDGC', 'EADDAEBEHEG', 'HCEFCGHFAEHBCCC', 'GEDABB', 'FCHGAAG', 'GEHBABFCFCBGGF', 'BFEGGHFFGDG', 'BHGADHBGFAAFABGGABB', 'ABFEBHEHHDE', 'ABHCFCGCDHBBADHAH', 'GAHFFBHEGEFCGGGADCHG', 'CCGGEFABA', 'ABHBDEECCECGGHFHHAHB', 'EAFCBEEHHGCFF', 'FABFDHCGHBFAEEGFB', 'FGHHADBEABHGF', 'DAGCCEGCHDBHAAACB', 'CFCDDFBGCGAHGFEGG', 'GAEBAB', 'DDEGAGGACDCHBGFHGB', 'HBAEAAFFHHCDFBGF', 'EDHFBDEEEHEBCHHHC', 'GBBBCHA', 'FFCFHFGBGBEEFDCAH', 'HDFDDEEDFBBDGDCH', 'ECCEE', 'CCCCAEADACFF', 'DFDGEABBFGDDCC', 'DCHDBGGDAACGDEGBG', 'AGAFFDHFGHH', 'DAADAHCGDBFB', 'EACFFBEHDBBAABDGECAG', 'CGCFHBFHEAGFDBEHHFC', 'GCBCBCF', 'AAFEBFAFE', 'EEHHA', 'FEAFCBEDFDHA', 'EBAHCDDBGBFE', 'HHHECAAAEGBBCADGD', 'BCADCFFHBBACAG', 'FGEFBAG', 'BCFDEFBBCBC', 'DDGHBBD', 'CGACEGAFHHDBHBGHEHEB', 'GFGAFBBHABED', 'AGAAD', 'HEAFCEDEFHEECFEHEFG', 'GFAGBBFEAAFCFBGAC', 'HADCA', 'EDADGHBDHDBBFABAEEF', 'FABCEGGAADFCDCHFED', 'BAADBFFHEBGHEEEBH', 'BCGBHFCAGEADH', 'EHDBAFHG', 'ACDEFGHBAGDHBCCDFCEH', 'AEHEBFACAG', 'HGFFHFCHDEHA', 'BBCACAEFFAGAAFGG', 'DEDCEHAGGEF', 'DHDGBGCF', 'EEEGFADADF', 'FDFFEEH', 'BGBEEE', 'DEBEAHAEBBHBH', 'CFHAEGGD', 'FEHFBCHEDBCEADHBHFCE', 'BECCHEBC', 'GFFHDGDCCFGCCFDFGB', 'DACDCHAHHEAA', 'DBEBDCHCF', 'HFBAFADBHHDDADBGCC', 'ABAACHBCDDGABBGD', 'DAHGAGCDEFFAAGCADG', 'EEHEEDCHFHEHDFDGCEG', 'GFGFCGBFDFEC', 'BGABGBCAF', 'BDBHCBCCBB', 'DFHEGBGDGAEGEGGFFDB', 'BFFDEFCEADEHEBEH', 'EFFAGABD', 'EGADCFBB', 'FDBCEGHDDFCHG', 'GHFEHGECE', 'GHFCACCCBEDADCD', 'GFFBFDCEDCDAHF', 'AFHABHCHEECFGDAHB', 'HEDHGDFBFAEAFDABAAB', 'HBCFFGEEAEGCFDHFEC', 'HDHHGAFCFCCAAHFFEGF', 'BGABFCAFE', 'ABCFCEFDDBDCFECHHCGD', 'HFBECHCHBABG', 'BFCCDGGCEB', 'BCHDHDGAFDH', 'FEDAFHBFBACDAADAB', 'DHCDABCCGHFEEBBDBCAG', 'EGEHBDGAF', 'FCFBDBGEECHBCDEEF', 'BBFHCGEDEG', 'GHFHEGDCDACFBDA', 'DHGEGBBDFHBGCHEGCHFF', 'EDEEEBHHAFBB', 'AGBAABH', 'DDDGECEEHHDHDHFAA', 'BBAHEFEFAD', 'GDDHHHE', 'FAGDFFADGAEAAABBC', 'AFBFHFGEA', 'EHBFECCCDCHCFFECGE', 'BECECC', 'BFFDBFGHEFCE', 'GGDHBHHDAFHACAE', 'DABCBFHB', 'BGFGGDGFADB', 'DCBAAHBDCCHGG', 'HFBAECBHD', 'GACACAFFBD', 'BEAAHHBAA', 'HEFEDD', 'FBHBFA', 'HDBDGGEGAFEGG', 'FGDDFDDEF', 'GHHHEBADBCHGAH', 'ACFCAEDGDACGHGAEBDD', 'DAAFDG', 'AHGEHFFGDH', 'CAHHACEF', 'DDFAFCDHCFEFHF', 'FFEHFAHCBCF', 'ADFBDFBHBHCFBCABDH', 'CAADCGDHCHGDGBDGF', 'CEBGFFDDCGFBE', 'HHDEEHFCEECDG', 'GGBAADDDGBEHGEAGBCFG', 'CBCBEAFHFBFHEHAHH', 'FEFHFDGADHCEFEBEHE', 'BECAHFBDBBD', 'BCHGABBAGGAFGCGEEED', 'BFHGEEB', 'CEBCAACBHBCBHFBBBGBE', 'AGEHHADBAGGBDBD', 'ADECEHDADHFCBGGD', 'BEBBBDE', 'GCCBFEGFG', 'ADCHGCBDHGFFFC', 'GDGHGBFAGGFG', 'GEAFAGAFBEAH', 'CECDBCDECFG', 'HBCCEFCHCFH', 'BDEABBHDGHFFBGFCBHEB', 'HADDEEGGEEHCFBACFGHH', 'DFBFDHDEDF', 'FGBDABGFDDFAACABAGB', 'BFDGDECEECHBEHB', 'BDGHAEDEEBEBCGFCEE', 'CABGEGCHCEEB', 'ABAABGDEDDF', 'CAHEGCF', 'ECCFFGEDBGEB', 'DGGBHHFHFBHDHHF', 'AGEAFCCAFCADAEGCDCCF', 'HBDCHDHEGBE', 'HHAEHEGCGBFAEEHBACGF', 'BEBAFFHBGD', 'BEAGDHGBGBFEF', 'DEGDEDDEFGC', 'ACGEHHEDHCA', 'HGFHEAHDEAGGBDDGC', 'HEAECECDHHHH', 'GBEBD', 'BDHGHF', 'GGFBGDHBDACE', 'DHHGCFGEHDDDFEHHAA', 'HACDDDAFDBDHE', 'GAFGEDCBGHCGDGEHD', 'FDDCHFFCG', 'EGGGHFD', 'EADFGDDGFA', 'CAHAHAFCAF', 'DCHGAFGCHDBCADHG', 'CHADCD', 'EGADGCFBGDBCFHFAA', 'HAHAFGCDFBCEC', 'FGFGDBEABC', 'EHHBFGGD', 'HFACEBFDADH', 'GAAFEFFEAACAHDHHDHHE', 'ECEEHCAED', 'BDCBFBDGEDHDEB', 'DCFEDBHCFECDGG', 'HDBFHAABA', 'FDGEFDBGCBDCDEBA', 'DBDDFEEHBFFC', 'AAAHDAAACBEDHBHGB', 'CCBFADDC', 'HFGAFHBADAEACAGG', 'DEAHGDEEFEBCECAAA', 'DADCFEBFB', 'GEAABEGH', 'BHHDEBGADBEABABDG', 'BGHGD', 'HHBADBAECCHAFCFG', 'HCCGHHF', 'HGGAGGAFGGDABAGABD', 'DBGEFAAFDAEAHBHCBGGH', 'CAFCECBDDCGC', 'DABBBEBD', 'EBHHCECFBEEFFDFADGFD', 'ADCDFFDEBAGBBCAC', 'AGDEGHEFDCB', 'DBACHHFHHCEG', 'BEHCEFBGA', 'FDGGDHFGDBEC', 'GHFDBBHADFGGDGBGF', 'CEDEGDB', 'HEDCGAECHC', 'BHAEBGEH', 'EFGDD', 'CHCEHFE', 'DGEHFCEGFEEGDDBEAC', 'FFEADC', 'FCDAEF', 'HCCDGDEDAHGAHCE', 'ACGBA', 'DGDHGEEFDDEG', 'ADEBDACBAH', 'CEFADEECEAG', 'AFBGAEGHADFGGGCH', 'GHCBACEBAFH', 'AGEFGECACCFGFAHEGH', 'BCBBECD', 'HFHBFAHBFFEF', 'ACFEAECEAD', 'DCADC', 'FDAFEDEDHHH', 'HGDCDFFHCGA', 'DFFCGEDBHHCGAGC', 'EDAAHEC', 'CDGFCDGC', 'BDACEFHEEDEBHDGAAE', 'GHCDACEEAFHBADD', 'DGHFFCFEDBFBFA', 'EHAECBAFCGCEB', 'AAGDABHBAC', 'CGDDB', 'CDBCF', 'CHHCDEECBGCEDAGFGD', 'FDAFHAGDCHDFHGDEEEGE', 'CECHCFDC', 'BGABFGHECDECBGCA', 'BGDBHCFACBFGFFDF', 'EHGFEHGDGBDGGHGEF', 'GGAADDEBECCAGHCCA', 'ADHEHGCFDHF', 'HHEHEGBAGBCABCAHAHB', 'DHABDCFCD', 'HGBFEHEDCGFBACBABFHG', 'GGBGB', 'DEGBCDCHAHAFGBF', 'HACBGHHBABHFGDC', 'HGDFF', 'GHGBD', 'GCCAEHGE', 'ECDFHCE', 'FEABAFDDGDCAHAFGG', 'EAAHH', 'EEHHABACHDBAEAGEDF', 'EGHDA', 'CGFBCFHGF', 'CCFGFDGGBF', 'HHHGEGGABCEDCGCCEFHD', 'BBHFHE', 'HGFFACHAFCE', 'HEHEE', 'CHDFGGGC', 'DBBEBA', 'HBHACHBEEHD', 'CGGDEHBBECEHHE', 'BFHDGDA', 'ABCCBFG', 'FFDFHHACHFGGH', 'BCGADHGDHEDBAAE', 'DAHAEHCCGFHBAAFHDHD', 'CDDBFA', 'DEHFCHDFACFGG', 'BBAHFGDBCFEAEAGDEH', 'ABFFCHED', 'BGDHEEEH', 'GHHHGDHHCBGEHBEH', 'DHGGGD', 'BECGFBBGCCHABEB', 'DCFFAAAAGHD', 'ACGADG', 'GHFHDBCCCAEGHHH', 'ADHHACBGHCACGCFEEBD', 'GAABAFCDAAHBFAG', 'GEAACEDFCED', 'DGDAFHA', 'BFBDABEFBGGE', 'DEDCCAHBDDHBE', 'GACDGFEAGD', 'DDBHG', 'BBHEDAAEEFFHBAEF', 'BEEGCCHHAADBH', 'ECCDDEFFFDDBFD', 'CBGHAG', 'HGCDGCGBAH', 'HBFDDBCHCHHGEHEDBF', 'CCCBBDBFBEGGEFB', 'GDCFFDFE', 'HFDDHGHGDBHA', 'EHGHDAAC', 'ECDEHACCDACGCDEEGAHE', 'GABBFCGH', 'HEEAECDFE', 'FADFHDEGADGBFGBFBGH', 'HECHCDGHGAEGHGGGD', 'ECBDGEEBAEDEABF', 'CDCGGDEDDGEC', 'FEGDFBAAH', 'CHDEFFE', 'ACBFEABGGAGHB', 'FADHAGBDAEAHDEHF', 'AEFDGGFHGGEHBHA', 'CGCBECEA', 'HBHACBFBDADHGBCD', 'AEDCC', 'DBAAHEGDFHDCCHHAC', 'BGCFDEFHD', 'EFDDCB', 'FACAHGEBDFGC', 'EBAABBCAFAADCBF', 'HABFGEFEGDA', 'DDBEDEDCFHHCGFCB', 'ABEDFGCAFH', 'GGGAFHFFA', 'DBCADGADFBGGBH', 'FFHFBGDBEFBAA', 'EBBHCEEABADBDCDC', 'DBHCDDA', 'HECDBCHADFAF', 'BBAEEACHFHEGCF', 'DCGHBEEFGBAAFABDEEB', 'ABHGACG', 'GBDCDCEBCGDBFA', 'DBADDABDCCHFEGBDEH', 'CBBDHFFCFCBHDFA', 'BGHHECBB', 'CGAAEHGGCCBC', 'BEDEDHBGD', 'FHEFBBGCE', 'CBEDDECFBCBGBCCFHE', 'GEBAHGECAAGGFDGACGHB', 'BAEGBHAHEDG', 'AEEEFDFFGBBGAGDEBACG', 'DBBCADBACFEBEFAHF', 'DEFGGEACDHE', 'GBBAHBAHDBFCHCDBHF', 'CEEGFF', 'AABEGDCHEGGDAACH', 'HFAGEGFFHCEEGFDCCFC', 'BCEHFGACGAFBFBAB', 'DGFEGFGGBBAAEEGDABGF', 'DGBGFF', 'GFADDHBEDDCEE', 'DBHGDCDFABAGEFFF', 'BGBBBGDHDA', 'EHFDFAHFEFB', 'BGAECAFFGFACED', 'AFCHEHFFCEBGGCA', 'ECHEADGCAHEAABEABG', 'HGEEEADDHFGCGEE', 'GCCAHGFC', 'CGCFHGBCACHAHGCG', 'FAGADEFDDDGGBC', 'EBEHAGGDDCEFE', 'DCFGEB', 'AAEGHDDFHDDGDHFE', 'FBHCGG', 'BBBDCEGCCEGCAGCD', 'GDBABBGGBFEFCCBCD', 'ABDFHHHBHHDEBGF', 'CHDDFCF', 'DFFGE', 'BDCBEAAHFBHBBDGGDAHA', 'DECCCBFFG', 'BDGECBAAEHEFCCD', 'CHHAFCCDFBAFBBHCFF', 'DHAAGC', 'EFGBGEBDABHCFFAF', 'HBECEGHCGGDDD', 'EAHAEHBHCEEBCE', 'ADHAGBDFDEA', 'GAAGBCBBHAAGCEACGBEH', 'CBHHEGBBCFCFABACHAGD', 'ECEHFGHD', 'CHABGEHEGE', 'ACEHFEACEB', 'CHCAAD', 'AEEBCECEB', 'DDGFGGAEEHHADCADBAG', 'FHFDBDCBABGDBFDBG', 'DECBGCEDCADBBFBGHH', 'GDACFG', 'HFCEHBD', 'DEEDEBBDBFCAGEDGCCFD', 'EDAFHDE', 'FBGCEGAEFAEBFABB', 'HGCFBFDBABA', 'HCHCCFAECBGEGBEAG', 'HFBBFFGHBEFACH', 'FFCDAC', 'BCGHDAFB', 'BBDEGAFFAHEFAE', 'GEHGDBBAGGCHBHE', 'HBCGFHCHAFBCGBFG', 'DEGHGHFCHHAC', 'EHEFH', 'FGHEFBEABH', 'CDDAHDFEDEFBGFFEG', 'AAGFBEBGGCB', 'BFGGBEGBC', 'ACGHFCAGHHBABBHD', 'EHABCGBHFFHHHCAFECB', 'GCDBFDFGBABAAHC', 'DGADFHFADCEAF', 'DGCFACFBEDAFGFGC', 'FBBGBAFCAEHHAAABEACA', 'ABABCGEFDEDEG', 'AEGHFBFCH', 'DDHDAGHG', 'EBFCHBGDH', 'GBCGHAC', 'HBEAHBECFECGBDFDBFDF', 'HAAFEDCHB', 'BGCBG', 'DFAGEAHECEBHAE', 'DFGHBCDCDDFAF', 'ABHGEDEGFFBCFDAACBAF', 'CEAHDFFAFCACDFEBGGEG', 'HCCHHFEAECBBGBGECBH', 'CCADAHDHADEGHH', 'AHCGCG', 'AAFDACGBC', 'DBACFGDHGD', 'CDCCEDHGG', 'HCDEBAGCG', 'CBGGHBAAAGAC', 'AHAHFBBFBGHD', 'FFDEACBBDGAGFB', 'CDBGGCEGBCHCEBD', 'CHHACFBFGAHHCAEGF', 'CDGAGBFA', 'DBFABFBHGF', 'FFFEGCBDFGBCBBFG', 'DBGDEGECDHHFBHHC', 'HGAHBAEBHBEEGFCCGG', 'FHDEADHCCEEBABFF', 'DCCFFDDBCGADEDBGC', 'GBABCAAHBBAGF', 'EDGHAGGAEFHCCEBDBBB', 'GEFFDCBHEGCDDBGFH', 'ABGCFG', 'GDCGCACGACFA', 'CBEHECFAFH', 'HGFBEBCEADDCA', 'EDAHFEAEBHEFB', 'BEFDHCD', 'DDBCFGCACDDDEEF', 'GBFGGHHBDFFACGHGHDBF', 'ECFBEDGBGFAFCGGBHBGE', 'GDEAGHDEHBAACC', 'CEFCBEEDBE', 'HEGBEGGAAADFBCEAHB', 'HHCFFHAGCG', 'FFEDEBGHEAHADE', 'DGBAFGFDBDFAC', 'GFGBGHAAA', 'CAAAFDBECHG', 'EAAEAAC', 'AGAFFHGBGGHDBB', 'EEBCDEEDH', 'HGHACEHAFGEC', 'FBDAC', 'DCGED', 'HEAGCHBEFFGCGHGBH', 'HHCGFAEEDCAFAGABFCG', 'AAABGAFHFAFG', 'BHFCDCDCFCGA', 'FFFDGAFD', 'HGCDEBCH', 'GGFBHDAFFAGB', 'ECDECBFGCADCDAHDC', 'GEBBDHBGEGGDGGHGF', 'HDDBBFGCHC', 'AGCGECBHF', 'DGHADCHCACHAGA', 'HCDGBEEH', 'DCGGDHHBGG', 'BHGCHFBCCHDACCHE', 'GHBDEAFBEEC', 'ECDFGCBGA', 'CBHEEFGGCEHDGGDCD', 'CCGBHECECBCG', 'GHFEECB', 'DDHDBFEGCDDG', 'ECHCHCFGDDGBF', 'HHGCHABGFBAADEFFFBB', 'FGECB', 'BCBDAEGF', 'DGBADCBFDGDAFDDFEDG', 'EAAGEDAHH', 'GECDAAAD', 'FBECHDEAHB', 'FDABGGDGFGBEEGAGE', 'GGGHAFDGHFHBACD', 'FEDEGDFFBHBE', 'DFHABFBAH', 'FBACHCDG', 'GFFHGCEE', 'GFHCGCEEDACG', 'AHABHHGGDABCGGED', 'DCHBE', 'EBEBBGFCHF', 'CFFBHHBEAGCFCCCAHF', 'GCCFFHGHDEACHF', 'BEAFHBAD', 'DEBEBHA', 'ECGHDFFHADDE', 'EDAHCEBDBDHCDCAGAHAD', 'GBDCB', 'ACEECH', 'DBCEGACF', 'CGHEDGDBGDGECBBEHF', 'HAGCFHADDFCHAH', 'FCFFBFECH', 'ACCGFDADEAB', 'GFBCHAEBHGGF', 'GFHFBECCCBDHCFGFBGFD', 'GGGAADEACED', 'HGDBF', 'BGEBFCDFBFHHBGEG', 'AGBDGAHGGCDFADEH', 'BHECHBBCAADDHGBEEFAC', 'BEAACHBBBCBGBHFAHGH', 'ADGCHEBCHGFGEHFFD', 'HAAFDFECBAFAAEDD', 'ADEEEEHCHEDDBGF', 'CHHFGAECFDGAGDBFHAB', 'CAACFGF', 'BGFEGEFDEHEABHGC', 'BHGGHDGEHEBDHFGDAABG', 'DFGBBHAFCCEFFDDEFHBC', 'FBFFCHEHFDFGAGF', 'DEGCFFHCBHGDDABHEHF', 'CDEHFGHEFBFBDDECA', 'FEEFBCBADCAEAGDF', 'BEGDGBGFADE', 'GEBCAAEEAHCFAEHBAADA', 'GFCHAGAD', 'DCDDFHAF', 'DCFHCBDABH', 'EFCGDGGDGBCD', 'GABDDHBEE', 'CBGBD', 'GBEHAHH', 'BEDCAGHCHE', 'AEHDCCGGECHEBFADDB', 'CBDCBGG', 'CEDHEHFD', 'EBBBFHGBBADCHEECEFHD', 'HGCHGEFEBCDECEA', 'EDHBFFHD', 'EEEEGCCHCBEA', 'GEHFGAAFCGFEEFBFFHH', 'CHACCADEBBCEF', 'BHCHBHEFHBDFFEG', 'CABGEDCBFCFCDDEAEF', 'GDBHFDGEGGDABEHBGHG', 'DCDCG', 'GBDBHDH', 'DGGDACCGGCGEDCAGCE', 'EBDHBC', 'AHHCHDADBBFBB', 'GEBDC', 'BAHBGCFHGHGDFFGFHGD', 'GHCBFCEFG', 'BGGCBGH', 'EFEBDE', 'HDGGHFG', 'HDCBACGAFHGHEAFBCEGB', 'HGFDEE', 'HBBFCCCA', 'EBGCBCGBFAFFFE', 'ABBCHFFDACHCCEB', 'HFHDFECGCGCAHGAA', 'FECCFEBECEC', 'BGCAHEDB', 'EFCHFFACEFBEF', 'BCBBEEEA', 'GDHCADCDFEAEDHFDGCHA', 'BCGCDDAEAHAFBHDEAE', 'DHGDHHCECFAGEFHEFGB', 'CFHFBDGHAAHDBFFCHFEF', 'BFAFBECAEFFDFAEBC', 'BGADE', 'HAADGABFGGHG', 'DBBDCDG', 'EGADEAABBGBDDD', 'CGGBHBBEDAEGGCHH', 'DDEHH', 'ABABH', 'FAABCACDFCBBDF', 'DCHDFCHCFDEGECH', 'DFEHAHGDB', 'EHABHGEHABBFCHBFH', 'HBDCAHDHHDFHGCEABGDG', 'FHCBHGGDGEEH', 'EGBEHHFFEE', 'GEEBBEHDABF', 'AHDFHBCHEDFGBDGGAEFG', 'BEHDHHFFABAHDGBA', 'EHHCDFDDDEBAAGGFFBG', 'FBEBFGGHEDCFHHG', 'BDGHFHDFHBCHDBGFBFC', 'CADGFEFBEHHCFGDE', 'HCFFAADBCHCHHAHBHDEB', 'GAHCHACADCEAA', 'GEDDFGBFADEBHBHCB', 'BEAAEBBGBH', 'FGFHG', 'CECGDAFEG', 'BHCHBBHDCHAGGB', 'AFGBAA', 'GDHGHAAFDFDEFFAEEEA', 'FFBHBDDBAEBEFDCAFF', 'GBEGEBAGBB', 'DCDAADGDCCEBGEFFHE', 'DEAGBGCCDCCGDHFCBF', 'CEEFGBEHAFAGFDCD', 'BCFGDCEDC', 'CDGDHHH', 'HEECAHFDACFHHC', 'FGDHG', 'DHCBFDFEAEBADDFG', 'ECFCFCAEHGDEDDGH', 'HBEFCGGECABB', 'GFFGAGDBHHEEE', 'EFCHACBEEAGBFF', 'GGHGBDAAECACEE', 'BHHDFGCFHHECBFAFAEFH', 'AACDGBHA', 'FGHFHAHHABCHBEHD', 'GABEDEBCCDEAAGCDFH', 'AEFHGGE', 'EFBDHFDEFF', 'CGBEDAEDCFEFFADC', 'EFDAHGGEAGGGEDAB', 'AGCFB', 'FFHHHCFEBAEEACECHGHE', 'CHFCAFDG', 'DCCADAFABCHCBEFBECHA', 'FBHFDCFDHDFEBGBH', 'EFFCGHEAGGH', 'EEFFDD', 'DEABGDAGDA', 'CBGHGEF', 'HGEDDCDGDDECE', 'FFDDBFCCAGHHDF', 'ABFCHCDHHCGAFACGHCAB', 'DGCBDCBFFHBCHGGCBCH', 'BDBCD', 'BFHCGCACCAFDGEABF', 'HDDEAA', 'GFBCBCBFHEEHDCFAHGEA', 'AFFDEEHCG', 'ABAAEGHFCHHAA', 'HHDCH', 'EHHHFGEBCDDF', 'CHABACFADEBGCEACAAAB', 'AEGCHBGGGHBFFACEGE', 'FDDFEEGHHAGCDC', 'GHAACHHCDHFDHFC', 'CBFACFGBFCFHDFBC', 'AHFDGCADEEEG', 'AHDBHFHFHCAHCDH', 'EAABD', 'GECDBEEHFF', 'CDDCCBGCBC', 'CECGCHAFC', 'FCBEHCCEBGHB', 'DCGCFEGAAA', 'ABCDHADCEAG', 'EFCGHBBFBEABEABDBC', 'BAFBFHGEFHDAGHA', 'HFGACBDDDB', 'EGBAHAEABCCFGHHHGB', 'GAGDBGFEGCE', 'GDGBCBHAHEEEF', 'ABEEDFCG', 'FECADC', 'DAEBDBBCFF', 'FFBFFFGHFEDAEDACDH', 'ACHCDFAGEABAEBDDGGA', 'DEAABBADD', 'FGHACCGGC', 'GHDABAHB', 'ECHDFDDBADFBAG', 'GHHHBFBHDFHDEG', 'AHBHACED', 'AFHHFEBB', 'FAEAGFECFBF', 'BEFHHFFEGHCAC', 'FCFEFHEHH', 'HDHDHHCDFEEGCECHC', 'FEHGBCCHFEED', 'CBDGACBFGEBFDBBEAE', 'ABCCCECEEBEDEFGAHG', 'FCFGCHCHDDBFGBGEDE', 'EBGBFF', 'ADFAC', 'BCHBDCB', 'CCAHBFBFE', 'DFBFAECB', 'BAEAAHFABCFHFGDHGF', 'HHEHFDGDAHFHDDBEH', 'EGGDBDFFEBFBAA', 'FFHADDGEDDEAFHB', 'AFAFF', 'DDGEG', 'AHAEBDDFHEED', 'HAHEHDCBHHHCGDA', 'BHDDCEAF', 'BCFCGACHD', 'ADAACGFBABBDC', 'GEAGCCACCEHC', 'GDDHHHHDCEHHAAHBA', 'FHFGGBEDC', 'DDBADBDH', 'EGCEDGBB', 'EFHGCCFFC', 'GGEFAGBH', 'BEAGFFHGBGFGGFAGGCGA', 'HFHCEEBEDGECH', 'EGDFHDABH', 'FAFHH', 'HGCGFHCFGEFFFEDCDACD', 'DADBCBCAFEACACAGHH', 'EHHADCDBDAEBE', 'EECFDGGG', 'GDCGDHBHDH', 'FBCFCHBDEHHBHDFCH', 'FDHHDEADFDFCFGEG', 'BEGDBGABBACGEECCF', 'BAGCHDCDBDEFGFCCE', 'FDECFHCEHEFCEAB', 'FDHDEAFBDBEGFFCCGD', 'ECFBBCFFBHED', 'DEGCAABDGG', 'GEHDBFG', 'BDFEHECBGEEHBHDDBE', 'FEAFFG', 'HBFAHDDGCGFFHFCHFA', 'FHHGEEGAHHGFAA', 'AADGDHAGFHHAA', 'DDFECHEBBEHAFHABEGAH', 'FGDHDCFABFBCDBCF', 'BDFEEEEEEBBBHE', 'CDGFDABDECCCHCFCGHD', 'ECDAE', 'CBHBHEFCADDEFD', 'FDDHHGDD', 'DFHGFD', 'DCDFHC', 'DGACHCFBFGBHGHH', 'GEBAFDABBHBCCD', 'FDBCHHDGEEDDH', 'AFGDCBHGBEFBDF', 'BEBFEACDEDHDHABCG', 'CBDFDGFA', 'ABACBHAH', 'CEHFEFHCCCDDAGBCDHF', 'DEFBCDDCFCBHBAHEBHBC', 'CFGHAD', 'AGBCHGCAAGBDGCF', 'EGADB', 'GADCCECBGAE', 'DGEBBGHE', 'FDGHHGDHCHC', 'GCFAF', 'AECCFGDAGBHDH', 'FBBCFDFBCCGHACFHGH', 'FEEBDGDDFDHH', 'BGDCBABBCFCAGEFEHEA', 'EBHDCBAAGHFGGFBB', 'GFFFFCDHEDGDBDFA', 'BGCDABDCCEHAHHGE', 'FBDGEEDGDCA', 'FDCAGEABBBHAEFCDCCA', 'DGHFFFCCCABGACABFH', 'BAFBAAHG', 'BCEBFFABHGCFEDHGHEFG', 'BCCGAHE', 'HAAGHEHHHEBGAGGF', 'FAFFFEAFBHEHHH', 'FHHCEFFGDCAAFHG', 'HGCEDACEFBDCBHE', 'FFCFBG', 'HADDBDFGCD', 'ECHDHGHEEFADABC', 'BHBEFGFGCFDEAA', 'HHAAHDG', 'FDHAAAAHGDHDCE', 'FDBFBDCFEBEHGBCCG', 'ADDBDFCDBBGABABC', 'ECBBAHG', 'GACDDDHAAEDAFD', 'EHEFDEBGEDCG', 'ECAEAHCBEBD', 'FAHEBECCG', 'BCEFFGCEEE', 'AEAEHDEFBCDCFHHD', 'HGABCDCEHAHGCFFBA', 'ECCHHE', 'CDCCFFHGDHCBFCBE', 'GAFBGEHBB', 'FGBFDH', 'EECFGDGHFDB', 'BBABCACCB', 'BADDAGHHB', 'AFFABEBGGECECDHCFAH', 'EECBE', 'AADGGAFHH', 'BDFEBGCFCG', 'GBFFAEBCBCDAFCAF', 'DEDFAHDGAHAAHBGHGAGD', 'FBCEHHFHDBBDD', 'AAFCAHBGBBHCHBEEBC', 'FDGHGDHHDE', 'BFDAGGG', 'GECFDEBHC', 'BBFAFBBCFGHA', 'CBFDFHBBHCDCHBBBCDHA', 'DBADFDGBCAGCAEEHHAB', 'GHCGBE', 'ABBGABE', 'CFACADEFFGGADHC', 'HDHCEEGCGF', 'AGDHEFGBH', 'FBEEFHHEHA', 'DEHCHBAEBBAGCBDFDGD', 'GHFEEHBBHHGDDHBBB', 'GBGCBBBHEDFFCC', 'GEGBE', 'EHBEABECEGBDGHFACFAB', 'GHDAHFEDBFCDFDADEGD', 'CFFABDGFDDFFEDADGDA', 'EEHFCDEHHGFAFHE', 'AGGFE', 'ADECFDADABCDGGGGF', 'BDDHDA', 'HAAFBDDGDBCBBCECDGF', 'AADHFFCHHFHHBFABCCGB', 'HCHDAG', 'AABECCFBBGDGD', 'BAFGEHHEBCBAACEFEGGE', 'EEFDH', 'FBGHEBH', 'HCBBEGCDG', 'CGCHBFHFFCFDEDC', 'BDBCEGHECCAECCD', 'ECCCFGADEGADADF', 'FECFGAGGBCCGDCEDA', 'CDHBFGFAG', 'CHGABHBBEAFAAGADB', 'CBAEGBGEF', 'FBFHFHCHDHEBFAEBCFD', 'FCFAD', 'DCBABEH', 'DBHHBBGEHCABDFHBC', 'FDFCEAFBH', 'BHEFDEFDEHABAFF', 'ADHAHEBHDAGCABH', 'EGEAHFFEC', 'AEHCCCEDD', 'EBGHEE', 'FECFCFFFFFFGB', 'HADBHFFBEBHHFHDA', 'CCEDFABGDBC', 'AAFBEHFBHDGEFBBG', 'GEDFFAGGHGEHABF', 'GFEGBHHDHEBGBCA', 'CECHAAGF', 'GEECDCABGFCDCDEDDB', 'FGBDHDACHGCFG', 'EFEFDHCBAF', 'FDEEFGGCEACEE', 'FDAHCCACBAGCBF', 'BBBGEAEAEHBA', 'GEBGHDADABCFCFFFHH', 'FFEHFA', 'HGFFAACEDGFFDEGBDD', 'FFEGCAEHCFBFAAFAEFB', 'CAGAECECBDAAFBG', 'DHCHAAABDAHFGDAAEF', 'HEHDEHBCEDBH', 'HDBBAAGHCHGAFAG', 'HHBEEH', 'CBHHFFHCFHFBCEAEBGDG', 'EFHABGBAEGE', 'DCAECFEAAGD', 'DEHGHEGAFAAEABDAB', 'EDFAAACFGEDCDCDBAFE', 'GFHEHBHEECFBGFHGBCF', 'DBEACFDGEAHCE', 'GBEFFCHHHHBCB', 'GEADB', 'FDGFHEDFBFBEDAC', 'DABHFBFFADFD', 'GABECEBEBCDCDFGHHDE', 'FAHCAECAECCGCH', 'AEADGHGFFBBH', 'GFEEGBFCCFHBFCGFHAAD', 'FFFAHDEFBCBCGEB', 'EAFEGGDEGA', 'DEHCDCEBGB', 'ECBHDHDCCBCHADBHFGC', 'HECFBEBFGFBH', 'FGFHGAD', 'DBCCCHEABADEGHB', 'GBBGFHGBEFC', 'FHEAEAHCACEHDEA', 'AEDDHCGEADHAABEG', 'FHGDAAD', 'GACEDEBHCF', 'DHCAGAEHEEFFDCGBFE', 'CADEDH', 'EEHAFGECAAAC', 'HAAAEBHDCA', 'CEHCGCDEGHCHA', 'GGGHD', 'CCGGG', 'ACBFEEBEH', 'DBHFCC', 'CFBGEDFACADDEGA', 'AHEDHAHHBHGH', 'GBHEAC', 'CABGCEDBBB', 'FDFFCBCCAGECDHH', 'BFEDG', 'AACAAHEHAEF', 'AGDEBB', 'EDBCHCEDEFCD', 'HCFGBABAEHHA', 'DADBDDGHBBA', 'CBFFBHCEFEAAFA', 'EBADHHEGFCDFAGE', 'FHCHBF', 'FCCBBEDHEA', 'HHHACEDGHAEBEGDEEGD', 'CEDCECDGA', 'BDEHBGEFCGCBAHFCF', 'ABEEDDGHBCGFHEHF', 'BBBGGH', 'HCCFBHGHAH', 'EHBEGGFHHHFCCBFA', 'DHDADEFEH', 'EEFHCCDGEDAHAADABE', 'DHGAACHEHB', 'GBEFACHFABB', 'HAEFDCHHDH', 'HEGGAAGA', 'ADACGGCBHEGDFDEA', 'EDCBBACFCAAGFGHCCAA', 'FBHAAHAEEB', 'AEGCCFHCFEBHBEEABH', 'EEEABCCGBCDCF', 'GEFCBHBFDDCDGAG', 'EGDDBEADHDEC', 'EAGDF', 'AACFECFBFB', 'BEGHA', 'FCCGHBHE', 'BCHCGBGABAHDCDAFAD', 'FFFEE', 'CCCHEEFGGFEG', 'AHGBGAEGGCGAFFEEHBFH', 'DCDCEHBHCCH', 'FBBFGAGGBFH', 'DECCEC', 'GECDHAFEADEEHAAGD', 'CABFGDCBHEEADEAFADED', 'FCEBCGBDEHBHDEC', 'BCGDDA', 'HFEECACBGBBCHDDFEEEH', 'HADHDBFCCAGED', 'DHHFFGAGEDBHDCCA', 'ECDAEDCHGDECBEBHBH', 'DFAGCGBDD', 'AGEGECBFH', 'BDEHFADFGFEGA', 'HFDBHC', 'CGAHCCBFFFFFBGDDGCB', 'GBBDFAG', 'GHGEGFGBFFFEBHCDH', 'EECCDBFABGBBEFD', 'HGAHAHGBFHHCGECD', 'AECBHDDAEFC', 'GGBCGCHGCACFDCEBEB', 'BDABDFFEF', 'DCGGCEDBAAFDDHD', 'ABCEFGBECGBAGDEAC', 'EDCACABGEDE', 'EGEDDDDGGB', 'BGCFFDCADEHFAHDHCAA', 'GCDDGAEFDBBADCGFHBBA', 'GBBCFEGBBGBHEC', 'EAEEHDBGGEHGH', 'GCEGFEAADCBB', 'BEFAE', 'FCEHBHEBCCAEGCBHEHA', 'FDDBABFAHAAHB', 'FCCFFF', 'DHBABABFE', 'DEDFGFBEBBACEECFGAD', 'BDBHAAFAHAEG', 'EFFGECDBBAFADEFB', 'BACFHCCHH', 'CDECDGFFD', 'BGDHGGD', 'AEFAAC', 'AEBDGFAGEGHCHGDEHGA', 'FDDFGBBBDBBHAHGHGF', 'HDFAGGGCDH', 'BGHBHBG', 'FFDDC', 'GGEFDHB', 'GFHCHCH', 'EACACGBGBCHECAF', 'BCCAGFDHDF', 'GGEDAHAGDEE', 'EDCBHHGBBAF', 'BCDABGCBGFAEAFGHDGB', 'FFDAECAGABFCCCBFDFF', 'ACCCCBGFHAH', 'CAFABEHFGAFFBDAEGB', 'EACDDEHACEF', 'CCDCGFDEDBDGACHDHBFH', 'GCBHBEDGFHEBD', 'EFFCHDGFBGHFAG', 'DEFEDCEBFHHGH', 'FDECHFFBEFFFHEHGE', 'GEACCDCAEBHCEF', 'ADGFFCGG', 'FGEHHDBGD', 'ADBEGBFBG', 'CFBEEEFFH', 'BCFEFDAHF', 'GBHBDBDEDG', 'HGAABB', 'CFFFGG', 'EGBAGHGCGAGHDDHH', 'GAHBFFADA', 'AEHAFBDFAHHH', 'DGFDDFBDAFADDCACBBDH', 'DFGBBFBGGBCEFBFCDEGF', 'FDCFHGDADF', 'BDFDHCABAEBFCHCEAFG', 'HAFHBDDCBACHCBGCFE', 'FBDECEGFCAECDCAHDH', 'CBGABEHDC', 'ACEAADC', 'BFAACEGGDGH', 'AFEEBHBEFHEFBDDD', 'DCFFDFFFFFAEGG', 'GFFDFBAFDHEGHGADBEFC', 'DECHHHDAHFHCCH', 'FEFHFFAE', 'AGCAFC', 'ADGCCCDDAAABGBHFE', 'HBGECB', 'EHACEHGFFDAGGHB', 'DFGDFFGCHCG', 'AFAHHADBHFCFGB', 'GHFACEADCHDBAEHB', 'HECFDB', 'BDHBCEHFBCGA', 'DDGFAHFFAHEDD', 'CAFBBHAFHCD', 'GFCGBGD', 'FBEBBFH', 'FCHADAG', 'AGGGEEGCDCEFCCEGBG', 'AFADGEEGAFECDDGGG', 'AFGCBADEGEFBBF', 'EFCHBEBDDGF', 'CBBFHHCFG', 'FGGGB', 'DHEHCCAEFAGFFE', 'AFEDE', 'DGEFCHHHHAEBFHEGCD', 'GGHDFGHA', 'AECCAGCDACABEFHHD', 'EBFEBGCB', 'CDBHACAHFB', 'GCCGFGABDCCEGGEH', 'CGEBHBFG', 'HHDCBADDGGHFAHCCAAG', 'ADDHHF', 'EAHBBHHHEDHHCF', 'EECGDAHB', 'BFHAHFBHEBFCCAGADGH', 'ECBHDHHHGHHAGC', 'DEBHADEHHEBAEH', 'BFAGFEGCAFDBFBEHAHB', 'CHDDGCHGA', 'HFGDFFHGBAB', 'HGEHCDGHGFGHGEGBC', 'HHBEHEE', 'CEAGFHDGFHCGADHA', 'BBBBAFC', 'EDFEG', 'CBBADDECGCBE', 'HCGGCD', 'GAABADGCCBCGCG', 'FBHDHD', 'BGDAGCCGFHAHG', 'CFAHBDEGHH', 'ECGGCAHGCFCAFHCFFE', 'AAHECEEEEC', 'GFEBF', 'AGBBCCGFCCE', 'FEFDDGGED', 'EEDCCDGCCCH', 'CBAEAGHEAGAHAFH', 'DEFHGHF', 'BAFFHBABAGDFHGHCBGAA', 'FECAACHCHDGDCADEEH', 'DGFHFHDABGDBHHHF', 'EHBDDEECGG', 'CDAEFAEED', 'HBDFC', 'BHEEEGHDGBHBGBAEB', 'GFAHHFHCHDC', 'BAGDHABADAGFCFGG', 'ADDFFCDEGHCEE', 'DEBFG', 'DEDDDC', 'GCCCHBFDE', 'GEGGEFECAEBHF', 'EACAEEBEFBFABF', 'CCABCG', 'AHBCCAHGDEFCCAAC', 'ABAFFGFEA', 'DHBHBGHCGCHAGHF', 'FHFFFGBHACAGFGECE', 'DHHCBHEHAADFFHFG', 'BCGDAADBBACGCAACFB', 'FEGEEHDGACHFHCCFBDGB', 'CABCHFCDCFBDA', 'HACDADAGEHBFD', 'DCFEBCEHFCAABABEAGD', 'FHEHHHEGHG', 'AGABFGHAGD', 'EBGBACEFACEHGBBCC', 'BBABBFDBGEDGBDFEGADA', 'BHADHGE', 'FADBBBEFEDGCCEAHBGB', 'FBDBCBCG', 'GDHDFGHFBGFGCDH', 'HHGGDEEGGGFHAFEHA', 'AFEFEBCBADGEHGACD', 'CAFDHFEDFAEGBGH', 'ADBFEHACGFFG', 'GHHHBEFCDDACFDCFFB', 'EDHGAHHAGDFBC', 'AHHDGCHCBHAHGFAFGH', 'DBAAEDEH', 'FHCDGFCE', 'EDGFBHCBCEAE', 'FFCHHHAHACC', 'HDFCFADFHABEAGADD', 'ADCDFAEHGBAADEG', 'AADBEBHFECCG', 'BBCHCDFC', 'GGBCEAADADB', 'ECBFFADDB', 'EHCCHFGBAADH', 'CFHGGCADD', 'DDBBHEEG', 'GCDBFDECBE', 'AAFCEHEBAHBCHBBCDFHH', 'HDFGEDB', 'BGDDCACEBFFEDGBEG', 'AFHEGFBGDEBHEBAD', 'CEHHHEFCAHBC', 'AACHAGCEEDFFAEFG', 'HCEEBFCDFEFEFGECAF', 'ABCAEEHBACFFDBBDCFBH', 'DHEFEEGEECED', 'FBEHGGDBCGGBC', 'DAEECCEAAADFCEAG', 'HEGFCEDECA', 'HEDECGFG', 'AGEEH', 'HHDHEHGAHBBCDCFEBCGD', 'DBAEBCBCGEBDB', 'FEABGCCFCDEEH', 'EDFAFEEGCBAAAEEBGAA', 'ECAFDGGFCAA', 'DAGDFEGDDCEFB', 'AHHDEF', 'BGBHCFGACCFFHEHC', 'HGGCAFEEGADDFFGBBDG', 'EABAAAB', 'FEGBAFABFCHB', 'BDBCHBEF', 'CCBDE', 'BHACF', 'EFADG', 'AGEAGAHEE', 'FDDHGEGCGGGCGDGF', 'EAABGCEF', 'BABGFGGCEEF', 'GAAFABG', 'EAFCFEBDEGAEAHC', 'BDEEBEGBHADBEAABH', 'HBGDBHGAEGGFEADHCBB', 'ABEHDHDEFAEC', 'EDCCFDFCFHFAHC', 'DCGGHEGHD', 'CHDEHDCGFA', 'ECFBFGAEBAEBBHHEGADE', 'GFCGHHAFACEHAAHGAADD', 'ECECAH', 'BDGCD', 'BECHB', 'HGBFCEAH', 'HFAGAEHCAFDAFHCAA', 'EFCFGD', 'ACGEGGHE', 'GAHFAGEDFDAFBBDFHCAB', 'HFHCGFDEACDHBAB', 'FAHAGHCBFBBDHCBGCAFD', 'ADBACGBFGAHGEEDA', 'CCBBGGCGAFHCCDBBEAC', 'AAHCGEC', 'AEAGHADDGEBFBDCBFHG', 'CCFDDAGGCFH', 'EGCEAHB', 'BDHECCCBDF', 'AAAGCE', 'ECECHCB', 'GHHECBCGFHF', 'BFCEHCGACGA', 'CGBDDBB', 'EBGGBAHECEGEGADB', 'DEDGD', 'BHGDDGGHDBBFF', 'ADEECEHFEEFAAE', 'HCAFE', 'CHDFGGFGEHAAC', 'AHFCCACEAGFHGDBGGCB', 'HDECFBGADBFHEHFDBEEG', 'FFGCEFFFHBHBF', 'DBGBACFGCADBH', 'GAAGHFDAGACFEB', 'BBDBACFHDGBGDGCD', 'FGBHGCEBFCECDG', 'BFBAGHGFB', 'DGEGCA', 'CACFDGFDCDGFFHCHBD', 'BADGHBEDCFHDEEEFHHHB', 'CCCAADABED', 'DHDEECEDDCCEDED', 'BFADCGEGEBFDD', 'FBFDDECDFDCB', 'GDBHCF', 'EHHBHEACGEHGAGGE', 'DCEACFAHACCHBGHGCBHC', 'CHBDGE', 'CGEHC', 'BCEGCDA', 'EDADECGEFGFEGGE', 'HHEDEHBD', 'FEEDB', 'AHDHDFBADABFAHDD', 'GGFAEAE', 'EDFGEGBDA', 'BEDDA', 'GHHHDECAEGBBFBAAA', 'FCHHEAHFBBDHDCBEAFG', 'BADBHEFEDHGECGBB', 'GBHECHGHFFCECCA', 'DGBDECHBCD', 'AEDHAEDHEFBAHCF', 'FCBFHBBAAHEFEAGAACCF', 'BBCBEBFFECCFFAAG', 'HDCDBEFEHHHCFB', 'AGFCE', 'BAHFCDDEBHC', 'DFFEFFEAECHFCHEHE', 'CAHEAEGCECFF', 'AFEFAEFAFHGHE', 'EDECEGGFFAGGBCFH', 'CBGHACAHCEGDGGA', 'ABGFED', 'EFBGGDDBGEFH', 'CDCHCAGHBDCBDFHAHH', 'BEHDCEHGDHG', 'AFDFFCDGA', 'FGGBEFECFDEGG', 'FEBGGBHCEHHG', 'GAHAADABEHCD', 'FFHFCHFHAG', 'BEGGFGCBGCDHAGGBGF', 'HDDADHBGCG', 'BEGDBAAGCGHA', 'AGBGFHDBGEEEBCAG', 'CHFBFGBCBFHHAEG', 'DEEFAHBAHGADGFHAAD', 'DGFGBDGHAGFHADCGCF', 'CFAHBAHCFHFBADFDDD', 'GDBHGCFFFHF', 'AFFABCFGBCHHEDEFCD', 'AHFEEHHA', 'GFFCCAEACHHFBDEGAAD', 'EDDHGEAEECFCEHCFHCFE', 'CDDEGCCDD', 'GEEHFDFBHGECCB', 'ADHCGBD', 'GEGADDFAABCHGHDAFAAH', 'BGHFBCCGAG', 'DFBCAGHAHBHFCFEEAC', 'DBEGGC', 'HEAHEBDGBGEBBFA', 'CFEEE', 'BBCDFH', 'FGBBAHFAFA', 'BABCCGHDBCGHFHE', 'GFCBF', 'DFHHDHGEDAH', 'FFAFCFGDBHHGBBEAHAAG', 'ADACAHBGHECGHH', 'BBGHCBF', 'AHFHGFF', 'CHHFAFHAEEAAFCBBGB', 'FDFFH', 'GEEECCEAFHFCHHC', 'FCEHBEAGDFFGCHFGB', 'DDGADGAEAHBHFGA', 'DFCDBBBGFAHEG', 'CCGHCHAFDFAAGFHADGBH', 'ABHFEBEBEDB', 'GCHFDHHCBEECGDGHF', 'AGDEHFEFA', 'EGBBHHBADHDFCCDECH', 'CDFBACEAACEAGCBH', 'AFHEEEDAH', 'BHGGGDCAAABHAG', 'ADHCD', 'GGEFAEFDBCGDDFCHCD', 'BBEGFGFHEHCFBFFHDBCG', 'FBFDHGFDAH', 'DBABC', 'GBBDAACFADACEGAC', 'EDCFHFGHAAECCBBB', 'GACAFH', 'EAACBBHBAGAFEC', 'AGHFGCGFGGEDHECAFBBC', 'CBBFHFDAFHDGDCEGB', 'GCDEGAFFBBFHADCE', 'AHDGE', 'EFAGBFAFFH', 'AAFAB', 'HFCECDFCHFCAHFEFGA', 'GECHDDFBCGCB', 'EHFBEBGEG', 'HACDAFADAFFFFHGEB', 'AGFHCFFFEEHGC', 'HHEGGHEHAAEB', 'EEDFAHCBDBAABBDH', 'DBCEDDBGEBA', 'HADBADDDDHEAACE', 'GFFGADGDDDFDADBBECF', 'CBHGDFDHFAFBA', 'BECHBHFF', 'BFGFAHF', 'BGECFDBGEAF', 'DCFFGBBEACHFBAFFHDD', 'DDEHEBHFBH', 'HABHFDFBA', 'BCHDC', 'BDHEHEFACGBHFFCEFC', 'DFGAEACA', 'GGHDFEAFGHFAAAGFC', 'FECFDHEEBDCDEGF', 'CAHCDFDBGDHAAGEHCHF', 'BHAFHEFADHEHFCBDC', 'ACHDBDGAHDECFDFEAFFG', 'GDFGCGA', 'DGEABACHDCAAEFEFHHB', 'GHCHGFHECAF', 'GFFFCHEEBA', 'EEEDGAHCDEAAACDAACGD', 'DCCFCEAHHBE', 'HCAGD', 'AABDF', 'CDGAEE', 'ECACEGCGG', 'GFAEHECDACGCBCHAGFD', 'GGHAGEDEBGGGABDDEADH', 'GGDAFFECAFBHAGDE', 'ECFCFEFCDBADBEGEBBE', 'HEHEBCFBFFH', 'EFBDBA', 'FBFECCCCGHAAFEG', 'HGABGDBFGAGADBHGHGFE', 'CEEGDG', 'FBEDBEABHCBDAAHDHEHA', 'DFDGBDDFCAEAEAEB', 'FCGHBFADFBEHHB', 'EGHAGC', 'DFHDGE', 'CEEGCFDEHEDBFCD', 'GAFEAAHGGAHHEGDHBA', 'FBGDBHAEBFBAFG', 'DDGFBAFEA', 'DHBGHAEGEBFB', 'FFCGCBFABDGF', 'FEBHFDAA', 'DDAEFD', 'BAGCECAFAFGGGGC', 'ECABAGFEHB', 'GBDEBBDBAEFHFDHCGB', 'HGGFADGGHDBCCHFHDA', 'CHHHFEADBFBFGG', 'HHCGBEDBDGFHGGAFFA', 'GCBGHAACBFEEAEBADB', 'AFDFBBCCEEBGCFHADAHG', 'BHGBHFCDCBED', 'BADADDCCAADDBHFCH', 'CFGBFAFBEEBA', 'FHEHBCHHHHCFFGB', 'EFHCHAACFHEG', 'HCHBCGHGGDBEDEFF', 'AFCEGACFDBGEDBGFC', 'CGCHGGHC', 'HGDHCACEGDAEBGEEEG', 'BCHCEFDB', 'ECAABFAHDFHBFCA', 'BBFGHFADHADAEA', 'ECEGEGDBFAAGBAAGBB', 'GCCDHDDDDGEDAACFC', 'EHFFGB', 'EBGBFCCCDFAAGHE', 'EDEHG', 'CBECA', 'EFHFABHHHADCCHDBDC', 'GDDGHHCFAHCEB', 'BEDDEHG', 'EBCAEFGBCEHEDCGDCGB', 'HFCCFCDEDHBHFHAG', 'FBAEBGCFEHBBHCFBCGBC', 'HBDEDB', 'ABEEFD', 'GDBBC', 'HAAEEFAEBBCCDHAF', 'HBCGGCBDFC', 'BBFHBADFFADAHBFEBEAB', 'CCGGCA', 'BCGGCEADFDD', 'HAEFDADEHEEBGHDEHBAF', 'CHHDGCHGFFE', 'GGCHCHACHFGFFEDBC', 'AACDFFAAAACEFGGBEA', 'HAGABADHHG', 'EHBHBEBDCDAHCEDHA', 'GFBCGACHFH', 'EEACFA', 'AADGGDCFAEGGFEADFHFA', 'FDBCGFDGAB', 'FEBHACDECFD', 'HADADHFGHCBE', 'EHBAFHBDDEGCAGEFECC', 'DBDADEGAAAHECCD', 'DGGFDDECDDH', 'CBFAHFAGBEADC', 'CGADBGGHGHEBACCE', 'CECHAB', 'EBFCBFFEDHCEE', 'EACBABF', 'ACCEABCHC', 'CAGFADECDD', 'BEBGADADHEAF', 'HABAFEDBCEDFFBEFCBA', 'DBECDHFACGACHDCCDFBD', 'GAFFCGGAEDH', 'HCCFAFFACHBHAGBGA', 'ABHEGEEAD', 'GEEFHGBD', 'GFGFHCGEDB', 'HGDEDHA', 'DEDHHBDGB', 'GFAACDH', 'EGFCHGAFDCBAFBB', 'BFCDD', 'HBFFHCHCHAGCCCGEC', 'HDBABEGDHDDFHGDF', 'EAACEAEHCBACCBBCAGDB', 'EBCCAE', 'ACBHC', 'AAGEEB', 'FEGCCFFBFCG', 'AEAECEEEBG', 'CDFGDCHAHH', 'GDFFFFF', 'BHHGBFGHAFAEEHG', 'CGEDHH', 'ECEEHFFECCEG', 'FECEGBFAEB', 'BHDGBGABBBHHEBACBCCD', 'HCGFDECFHBECHCCBAHAA', 'GDAHDBBFFCGBEDACBB', 'HACHDAFBEADGGAE', 'CFEAFGFAGEADEBAABFE', 'GEBGBH', 'EDFBFBFAGAHBADFFBGCA', 'DDBADEDCGFACAG', 'CGAEHACDFHG', 'EFECGCHAEGHACFEEBEEF', 'HCAEGEGBGHE', 'FFGDEGDG', 'DAGBGFBDEFHF', 'BEDFGDGHBACABGGGBFDE', 'GFADBBABCDDBG', 'AGCBEABHDCEFC', 'CFDBC', 'AGEEFBCDEA', 'DGFAECFEDEAAFGAGGBCE', 'ADBEEHE', 'HCAEDDFEFE', 'BFBDHDEBGDEG', 'DCAHEAFGHHBDBDA', 'BHHBDDH', 'HGFEEHHHGBCAAH', 'CFCBH', 'DAFHBDDDAHGCBAGBABC', 'AFBDACCFHCCCEBFEBADB', 'FBADGGCHAFCEHBEBBF', 'HEBECAFAAECGGHAAG', 'CCGEGFBHADA', 'HFHABG', 'ABDBEDCHHECGFF', 'HDCHDGA', 'DAGACBDHEGEHAEDF', 'GFAFGAH', 'ECHFHAABCCFFCCFGFE', 'BBCFDDBEFGGHCBBDDBD', 'FDEAACDG', 'DDBHB', 'DCAHFGCHBAFH', 'AGCEEEGDHHAAG', 'ACDEDABEDDD', 'EBAFCHEHFAEGDDBFF', 'HDCHF', 'FBEHEHCAFCDDEE', 'CGAEFHDHCGAAEF', 'CHDCE', 'BEGGAGHEFDEACFCH', 'AGEBAHECDBD', 'AAHBGDHHB', 'CHFGEBBGEDBDGCFEF', 'EDABGBFFEGFHEBEDD', 'EGAHAEDFG', 'HBFDBFACHD', 'EBCAHFAEBGGFHBECFF', 'EGDHHDGEEGCAG', 'DHDGHEDEFDCBC', 'AHCHDEDCHCDCHHB', 'HCBCH', 'GFBCDE', 'DDFFHE', 'DFHBFGEDHEHCDEBGB', 'DECEA', 'DADDDA', 'CDACCAC', 'HBDGCCBDGEEDCHBHGEBA', 'HGHBEACDHDCBBGHFDBFC', 'FEHFFGDBFCD', 'GHHDFFGBCHADGH', 'EFCEBGFEHEEFGCG', 'HFCFEBBBDAEDE', 'AGHHHAACDGA', 'EBBEEGHAFHHFHHC', 'BGCGFDFHDEGF', 'BGDFDHCDABADABEF', 'DAFEHBDBEHF', 'HDGCFDFAEGHEABFB', 'CGACDBGECBHGGF', 'DDBAGHGDEBCCEDAFHDG', 'FCECEAG', 'CECAAECDBBCBFG', 'FAEECACFH', 'CBHGCCAAGDBDGHCAD', 'CDDGCHDADAHGB', 'ADGFABEFCE', 'AHABHCF', 'CDABGBA', 'BDFBCBDGCHFBED', 'DGCEECFFH', 'HHFAGA', 'EDHDFGABBFA', 'DHAAEGAC', 'ABGCCHBEBEDADGBCB', 'EHCBFAEGHGDB', 'FBDGEBBHEC', 'HFDGCBDHBAHGCDE', 'FDCEBGHGABEAC', 'HBFFE', 'GEFDBACGFHFDEBGA', 'BCAGGH', 'DGADCBECGBBEFF', 'EBDDFH', 'CFCDFA', 'EGEEEABCCGHBECB', 'FHAAGBAFEEDADGBGDEA', 'CAEDAB', 'BFBDCEFECCFAAFFHG', 'BGHCBHFEC', 'HAHFAFBCCDFDCAF', 'CCCGAH', 'GHCDBGEDADEBGAF', 'FBDGGEDAAHHB', 'FEBHEGGEFGCGHFEFA', 'CEBDCBGBGGACAC', 'HBBHFEDDBHDAGFGDFCFD', 'EEAEGAAGGGCH', 'FHAAHAHACC', 'AHGACAEEAEGEHEEEGAHG', 'FGFBAECECFABFFFG', 'GFFAGEACGFBBDF', 'EEDAFAED', 'HFDEEGCBEF', 'AEEAFBFCGFFBHBEACDG', 'CAFFBB', 'CGAEGDHGEECE', 'FBFHGGBCEG', 'CBCACFAAGCED', 'GFBHFA', 'BBBCHFHDA', 'BEFECHBGE', 'DDDCGBD', 'GBFHBABDBAAH', 'DGGBFDGADAGFDEFFBB', 'EGGGDHAD', 'HBHFFDHCFHB', 'HDHCHBHDCHBC', 'HDCBAFAEFEABAEAD', 'GFGDECFAAAGBAAAFGA', 'GHFECC', 'BCFFCFCDBDBBGEG', 'FEBAGFEGCB', 'BCFAEBAGGB', 'BEDCEGFADFFEAFEA', 'CBCBGAFDAEECH', 'BHBEDGHEFEEE', 'HCHCBECBDH', 'GBGEAFCGEAFCEFEHH', 'AEBGADAAFBFECGHFFFH', 'HAHEFBGEBGF', 'CCGGH', 'AFBGHGCGHHAHBFGDADG', 'GBBEBAEDEAD', 'FHFAHH', 'CDFACA', 'HDGDEGDHDFCBACFFAF', 'BBHCADE', 'CEDBDHAH', 'AGHBCCEGDEBDDAD', 'BCFGGCFDCEFBBAC', 'FGDGAAGFAFFFEHDEBG', 'FFDHDEEDHCAEBBEA', 'CHGEDHAAEDBAHGGEBH', 'EHDDB', 'CAGCDFFGE', 'CGEFFGGFG', 'BBABHABFACDGBD', 'AEECAGAEB', 'ACEADDBBHAADDDEHFA', 'CHGBC', 'DDDBA', 'GDABBBEGAB', 'GEDHGHAFDADAGHECDFFB', 'CFGCG', 'FFEGHBGGDHCGEGEEDA', 'DGFEADGCEAC', 'EDFFFEEBFAD', 'ADBGDEAABDCDACCDEAE', 'ACFFAGCCEB', 'GAGEF', 'DBHCDACCGHHGFGFDBF', 'AFFEFHGGADFAEA', 'GABCFGCFDG', 'FAGEDGDAE', 'FFDGHBFEEB', 'DFEFGDGBAEB', 'HDGCCBBCBECHFDEEHB', 'DBCDEG', 'EBFAEHDFBCGHBA', 'ABBGDADAHF', 'CFDDDFBAADDFE', 'BFHBFCE', 'CADEHGFDGBFEDB', 'EGFCGAGHFEAFG', 'GCBFFCGCGDFACFDACECG', 'DGEBFHEDFBACAHEDAHFH', 'AFCGEGGBBDHAGDACD', 'HADBGFGAFGEDGFAGCH', 'EGGGAGEHCBCDHADFEEH', 'AAGGEHECDE', 'GHAEBAHFEAHDGBFG', 'BEDGAEHDACFDCF', 'GCBEF', 'ACGCD', 'HAGFAFHAHABBEHGBEBHC', 'EDFCAGDGDB', 'EAEAFHAAGEDGDCF', 'AACGCHGGDCAGHEA', 'DHAFDGCBFFEABCFGE', 'HBDBEFDFEAFAGHHHHCBB', 'GAEAGEEFDGHCDDEDF', 'CCEGFFDHEGEAEBCEFAD', 'GADAAEGDEDGEBFHH', 'HBHAHAGBGCDCGDCHBG', 'GCFDEBHEFDGAHADCAFEH', 'EDFAAACEDD', 'FDHAHDFCGDA', 'GHAEFDDADACDB', 'AEACGEGFBGCDEABHHCAF', 'CAEBAADCDEEFA', 'EEFAECB', 'EAECEGFEBC', 'GDDBECCAEFGDBACCCAG', 'GBGFHBBADDCHHGCCAA', 'CFFDFED', 'BCAACHBGDGBFBGC', 'DBDCCAAEDBD', 'HCHFFFGBG', 'DHAHHBHDFBHCEAF', 'ADDAGAEFGEH', 'EDAADBFEDBADEECGHCDD', 'BEAGHEBDCCACCDHAF', 'EHADAGCBABF', 'FEHFGBAHBCDHAHBEH', 'FBABBBE', 'DEEGA', 'AGADEF', 'ACEFCDE', 'CBHGCG', 'GDCCDG', 'CFGHADCHAGDFFAADACBD', 'HFDCDFHFGEAHADDCEHA', 'GBDBGFHBH', 'EBGDCBADBHGGDHAAB', 'GEHFBCEGAABFGEFDEH', 'BEHEDHEFB', 'EFFGEHG', 'CCDGHBEABGECEDBA', 'ABFCCCF', 'FBBGFFBEEFBEDDCB', 'HBGHFFGDFCFC', 'FAFFEHHAF', 'EGGDE', 'FEAHHBDAEEFBEFDBE', 'EBBAFA', 'CFFBGABBEFHDABGFFA', 'DCBCCEGB', 'EGBEHD', 'AGBDGEHEHHCAFADHCGGG', 'HHHCBD', 'CFCDC', 'EFHAFFEBEFCFDHCH', 'BBBCACEDDHGBEACB', 'CFHDEFBADDBB', 'HAFAGGEDBDDCEDEABBC', 'ABAEC', 'HCDHCEEEDFCGDGGGGHC', 'HBBGBDHEHEEHHDAEDF', 'CBHFHFCAE', 'BCAEDGCFC', 'GFFBFFGCBHEB', 'FFBAGDHDAAEEFHFABE', 'DGCFH', 'GFFGEFEF', 'AGHBFCEHCCDBBDGACFEC', 'GAFFGACAGBBHFDCCAHCD', 'BFEDEHB', 'EDEHBDGHHF', 'FGDHAFAEEFFGFBCECDAB', 'CBAAFEHD', 'FEDBEBBBFAAEFEDCD', 'HEBHEAGHC', 'DBHGFGGABACG', 'DHFGE', 'DFDFGA', 'DFAHFAHEDDB', 'AFCECDDCEACDAEBGEG', 'HAAFEEED', 'BEBADAHCGEBBDCDB', 'BDHEHAFBFEDHEDGFFCCG', 'DDBBAABFCCFH', 'AGFHGABBEEGFGBEGEA', 'DHGHCBBEFFG', 'FHGEADDH', 'FDBEHAG', 'ADAEGABHADBDECEGD', 'BBGAEEBEHCCCCFBHFH', 'ACBHECFG', 'AHAECEGBAABBACBGDGC', 'FECGHAGDFEFDCGGE', 'EHDFBCCEEHA', 'FGGHDFHHEEDCAEDAHHFA', 'CFFEFDDFECHEHGH', 'EDEAEEBBHHACGBCDE', 'EDACBCGDACHFEHA', 'BAAHEFFCBD', 'DGCADFFCCHDBDHEAFF', 'CGEHDBC', 'CCGHCEDHAG', 'GFHEBC', 'DECGDGHDFFGFGCDAD', 'AFBGDGEHECACC', 'AEAAFFEGHBE', 'CADFFAGBGBAEDAGBCGAE', 'GGHFBEAA', 'FAEEB', 'BGHAFBHFDC', 'AFBCCGHGAFDBGEHEEECH', 'GFDDFCBDCFGFCE', 'BCHFEG', 'AGBFDCCFDCABD', 'ACEHCF', 'EDCEDCDD', 'EAAFBDEHDEGG', 'BHDHGEBEDDEHDCDGGB', 'CDFFGCF', 'EBGEBAECAHHCHFDG', 'FBEDBEBGEHDBBHEF', 'CCHFBBFHCDG', 'BGAEGACEEDHFEFDH', 'BDDCEH', 'CDHCFDFHFBA', 'BEEBHDFGCEGCEDHEFGFC', 'HHHBFDCDCBEECDEFFAC', 'ACABGHDGHCFAFDEC', 'BBFACDEAECDDCBGHC', 'EEFFEFAFEDGEDFCC', 'DGDDEFDHDABHFAHG', 'HBCCFDFHDHDCEAA', 'HGEFHCCDHFBAFDCGBDGF', 'GACBBBH', 'FBAADCACFCDGFEDFFEAD', 'BDGBBH', 'ECGFBFAH', 'HHBEGCBBGFADHBABHCGB', 'EBBHHGBAEHA', 'GBEFDGFHAAFBBC', 'ECCGBGEHHH', 'BHDECHDGC', 'FFDEDBH', 'GGBHCHAH', 'HHACDED', 'EFEACDCBAGGCEBHDBBCG', 'GHFEBDADHC', 'ACFGH', 'BGGFCDBDEEE', 'DHHFDCHFEAACAFCBF', 'EDDGEBEHFHHDG', 'EBFEGF', 'AHDDEEEEHBHDECFD', 'CGEBHCC', 'GBAHHH', 'CDCHCECGBABBFE', 'AHHHDADHAFACA', 'FCDBBDCGHGA', 'GFDFCDDCCH', 'FCBABFHG', 'EHAAE', 'GGADFGBEGCAAFA', 'AGFGBFBAC', 'HDAHDDAFBFFAGAADHBF', 'HCBCEEADACE', 'FBDBBAEBCFFFGGBFFGGB', 'AGFDHGDCACB', 'GFGAFBGBAEC', 'DEGEFDCECAEGBBEGFDHH', 'CHGBHBGBFBGBFHDAGF', 'AEHECBEDFCFBCH', 'GGHDBHGBHHDFA', 'DHAFGHF', 'EDEEBHFA', 'GEBGHGCGBDCGD', 'AFDBFAHBHDDDEE', 'EEHDHDFACGHCFGCHCDEE', 'BEBFEEDDDCABFBADDFEB', 'FFDAH', 'HEAAHFADD', 'DBAABHFAAGHCH', 'CAHFGBCAF', 'CBHECEACAACCGAEEECG', 'HBBCDABFADA', 'EAEGAAFCBDHCA', 'EBDEBEHCEGEBHCD', 'BCHBGDEDDGB', 'DGGGCBGGAACACHGG', 'CFHHEEEBDAFGGCA', 'DEAFCCDDCBE', 'EEEBFDBDFACCFHDCA', 'DCAGECECGFBEEDBAGBC', 'FHHFACBBDEFDEDE', 'BBHAFHHCCEE', 'GEAGCCGFGCDBGAFEBECD', 'EFCAAHHEBF', 'AFFDCDABBDAFH', 'CCDEGCGAACBACFEEC', 'CHHDABBHEBDA', 'ACDAGAHECFEGDDEEA', 'GHBHFBGF', 'EAHEHBDGH', 'ADDDEBA', 'FDFHAHCGGDAGGDAGF', 'GCEBFFBAHHABC', 'FEGDCCDEFGBGAHHHEECE', 'CFAAF', 'BHEBD', 'FGACCBBDGGHBEGAAAABC', 'GGDFDFCC', 'ABCHDBDGBAHEBBCDBE', 'DFGBCHAEEGHGEGF', 'BEHFFEFC', 'CBEHHFFCBGEH', 'FFHDAEACBBFGGEGFCGH', 'DBEGDFGDBAEE', 'DBBHBBEBFH', 'GDFEDFCDD', 'HBEECGECFAFACH', 'DCHHAADDCEAHHAAEEFF', 'CDGBCCBGHA', 'BEGCHADAGBBHG', 'AFADGGBGAFCBBBDFCBE', 'ADEECDHGDDFCFB', 'DFABEGCCBGAA', 'ABHABGDDDDDACEEHBGH', 'GCEBE', 'HDHHDDCBCDCGFH', 'ADFFDFHDGDFBCF', 'DFGBCFCD', 'BBGCDDCFFCECG', 'EECGBGCAGAAGHHHAADB', 'BEEADCHFDDCBAAB', 'HGGFFBGA', 'EBBGAFAAEED', 'HAHFGFBGDDABABADEG', 'DDDABEBGBFB', 'EFGBDC', 'CCEFDBB', 'FGBDCEFBCDGC', 'CGHDBBFHGGBCCHFAHA', 'EHHCFDCADDHHABDCG', 'HCAHHGDEBAHBGC', 'DDFEHCBFGBCAHGF', 'BDACEAHABAHFGEHBDF', 'CHBHEDEGFFFHFFECCCG', 'EAEDFDE', 'FBGHCCGCBHBHFHHHHBHH', 'DHHDDGDFBGGEHAC', 'ADHHEFD', 'EFHFABBDDHBFBFEHDDDG', 'DDDDHGFBEC', 'AEEGHB', 'CCGAAAGAAGEFEDAFDG', 'HHCEBBFDCHHBG', 'ECBHBBFEBHFFA', 'GDECHGGHFBE', 'GFBEACFGAFAAFH', 'DEFGHA', 'BFEHFBHAGFBEH', 'BCHHDFDHBADECGEFFCCE', 'CBHEDGDCF', 'ACCBBFHDDEBCHEEA', 'EHGBFH', 'FHCDEBH', 'HDCEAADGBCCEG', 'CDDDBGCFGFHH', 'BEAADGHFCFBC', 'DDHGHHFDHHFFG', 'FAAEABGA', 'EDFGHCDGDEACDGA', 'HDHCD', 'CEFBHB', 'HAGHBFBACFG', 'AEBGACFDAGDFDFBDF', 'FCBHBDBGABGBHEH', 'EEEADGCBFFBBBA', 'EAGBFCAAHABBCAECB', 'BFGBECHHFDEFCD', 'CFHDCBEDDEGBBCHCE', 'GGEBGEGEGGCGACFBAFCC', 'BGDCDDEAEFEDCGECD', 'FAHBECFBFAHHD', 'EBAGHAF', 'EHBHBBHGFCEGDA', 'BFDFACEHCEFCD', 'FGGACGECHBDHGCBBCE', 'BBHFBFDGFHHCCEED', 'GFHAECBFHFHCGBAG', 'EDBEEDB', 'GCEECECCCBEBAA', 'DAGBCEHFCDHDFAFDAFBG', 'BBCEEEHHAF', 'FBBGECDEHCGB', 'GAGBHFCCHACBBBAEC', 'HGGFBCCAFHBCEGEGC', 'FDAHHAHADDCFAEHDAG', 'BFGHFDBHB', 'GHFGABGBFCBGEECGF', 'GDBFDFCGH', 'BGAEDAAADDFDB', 'BEGEHDDFD', 'EDHEAGHDDD', 'FCAFHGADACAD', 'ADBCEFEDCEBGEBD', 'HBEEFBGFG', 'FFHBECAHFGADBDBDC', 'AACFDAEGEFBEDFAFEGB', 'GHBFCHEA', 'EHGHBCGCDAEFHGH', 'CAGCFGEHCFAAFEG', 'GBDHBADGDDB', 'HGAGH', 'BAFDA', 'CCCABAEDDBA', 'AHCDCAGCEGEHEBB', 'BAECFGDHCFBDGGGEDA', 'ACHCBDA', 'ABEHFGDHHGBBEHGCCGD', 'DFAFDHCFCG', 'AHBBHAGFAHF', 'EEHHAFCCAGFFCHAB', 'EFDFEDCDGCFFHDCGE', 'BGFFE', 'DDAABBH', 'FDFCABAHABAA', 'GAEDC', 'AFGFC', 'DHGAFECEFBCCCDG', 'CBAECDHHH', 'HBFBBFGFAAADAFAFD', 'GFHAECCHE', 'CFGGFHEDEGBEGBHFHH', 'FECGH', 'BEGHA', 'HEDGDAE', 'AEEBDEDDHHBBGFFCCCC', 'GFHGGABFHDFDG', 'FFCAFH', 'HACEDEFHBEEEGGBG', 'EGDEBFDEDAEAEEEFCGDE', 'EGCGHHBHA', 'FGHCCHGEH', 'FAAGBEBGAGDDCBH', 'CDDBDCBFGGHFCE', 'FFEDBFEGDC', 'CEDHFGFCFCHAHC', 'GEFDBGDF', 'DBEBACGDCCBBCDEG', 'AAHGABCGFDDCGFEAGB', 'BHEDEHCDBECHAFDDHEFC', 'EDCFHDFAHG', 'HBFHDG', 'EDGDEA', 'GHFGEAAEDEAAGHCC', 'GEBHEC', 'GBCFFHBBEGEAB', 'BDDACDB', 'GHBDFBBGEDDDC', 'CBFHCGFGGBCGFH', 'BABEFBHBHDEADFGGH', 'ECGADDGGC', 'CCCHGEDEAGG', 'HHGGDFDEAHHF', 'AHCEBFFCGDCCA', 'DEDCHHFHEHGGGBCGHAG', 'ADCDBH', 'ECGAGDCDBADD', 'AABFHHBCEGECFEHAGCDC', 'GEFAFE', 'DFGAHEDHGDEAHCCBHBC', 'CGHAAA', 'DGGDFEC', 'DHHDADHGDDD', 'FFACFHDHGC', 'BCCHECFEFCEDHBDE', 'GGHCGFBGEHGBFE', 'HHFBGGCF', 'ECDCEEGEHDFABHEG', 'AHGHDGEDABHGGDEAEEBB', 'HCBHBB', 'BCGFGC', 'CAHGAFADDECGFCGCE', 'GGDAAAACHAEBFGDDHF', 'BAEGCBHEHCFHDGFBH', 'DCDHDAAGCGHFEDEEBH', 'BDFAGGDF', 'CHDBBBEHAC', 'EEDDGACGAF', 'CCBEDC', 'CBDGFBHACCFAABADGFBE', 'EEGDFDDB', 'FEEEDCBBABCFCBHEDBF', 'DFEHHHDBBGGBDC', 'FAECAHDDGC', 'CHAHEHGCGBAEDHAEB', 'DEACHBAHBED', 'DBFGHFGFAEHFGEFHACE', 'FEACHFCDB', 'EFGEDABEEAEEBCFAE', 'FBGBFCGCCFABAHDAH', 'ECFEGEHGB', 'BEGHFHFHDGEACGFECCF', 'HHFHADBBDBEA', 'AGADCA', 'BGGCHFEAHAFFADF', 'CHBBHDBEH', 'HFGBAHFACBF', 'ACDBDDEEEDAADGGBGD', 'ECDCFGG', 'ECGEBFHGHH', 'DAFHDCHBH', 'CFFCABGBDACDDHHDEB', 'HAFABDDFDHFD', 'GFBCGEHEAFBGGHBFGG', 'DCDGAHEDDBABCFGEGBF', 'AFHHCDCFHFFCDHGC', 'CEGHHCAHGGHCA', 'ECCHBAFCGFBB', 'HBFFFDBDBAAAG', 'DEHAEDCECEGCHDGBAC', 'EAHCAA', 'ADAAAGGFCDECDGFDDE', 'FGCEFDCCCA', 'DEGABEHFBBHD', 'FAEGCHCEHBCEBHEDGGE', 'FFEGF', 'HDEDEBACFDECCGF', 'ECEGEECDABGHAAG', 'EDGBFFACBFDA', 'EHDFBH', 'FBHEBBFHBBA', 'HDAHEGCE', 'GFCEHDG', 'HGBGFCAACCEGFGGHGEDF', 'BGHGCDBBD', 'DCCFCGB', 'CBFAGGCEGFGCHHCE', 'AEGGBG', 'GBAECDCG', 'EGDFGCDBDCF', 'BEHDEGH', 'HAHEFFHHAHD', 'BEGEG', 'DHBEH', 'ADBEGCGFGH', 'DEHHGEGGGEHBFF', 'AGGFEBFCDBF', 'BDAAHEAGHBGDAH', 'FBCDBEBGAGFGAGFDA', 'EHGGGAAGHBCFHGCHCCE', 'FGFGGADHHBDGGECB', 'DAEAGEDBEHGB', 'AGEFBCDFACAGCDA', 'GECCHEDDBHCBECB', 'BDCAGDGHD', 'DDHFDFBFAAAEGDHAG', 'AFACDGB', 'HHFCDDBHCBECF', 'FGEEDHBHGF', 'EFHDDGH', 'FDCBHHGDCGGEHB', 'FFEGEEDGBFDCCHFCCG', 'GDBDCFHFHHBBCF', 'DEGCEFCHHDHGAHEFAD', 'HFHHDCFBCHH', 'DHBFHGGBGDFAHDFDDCHB', 'BEAGAFGBECBAACBGFA', 'ADCBDFDACBHAEDFH', 'CEFABDDFFAGEACFFGAC', 'ECCHHBE', 'GCEBAHB', 'BEABHBBBADAHCFEC', 'GHGEABEEAFFC', 'DEDEGCFFCHAEEG', 'BGGFGAAACAHECG', 'DBGADDD', 'AADGDHFAGC', 'DBHDDAFCCGBGCHEG', 'DBABADACGECAAAEBBCG', 'EHACFE', 'DCECAGFHCCABFE', 'DACDD', 'HAGGFHDCGGAAFEAF', 'ABFBF', 'GHEHFFHDBHCFFDDABH', 'ADHBFHDHBFFHFHFB', 'BAHEDC', 'HDAFHFCAD', 'BCGEDDAFAGDGDBC', 'AGCBBCEGFEDDHFGEF', 'AHGHH', 'CCCDCGFBGCEBDEEAHDDB', 'HCCFBBDHEFAB', 'EHEFGEAFAFCC', 'BHHAC', 'DEEDGEAA', 'BCGABGAGFA', 'HEEECHCEFEDDHGG', 'EAEFBAEFAH', 'FHGACDDFFAA', 'DHFEHAAABDBEGGEHFD', 'AGFBG', 'HACDEFGCBEHAGFCH', 'EHAHEG', 'CDEFAHDGDBHB', 'DHHFHBAADCAHE', 'FFEGCD', 'FADHCDA', 'BDAFBEHDEHB', 'BFGBBEEBABB', 'EFAAEEDFGEAAABAGEF', 'CCDGCBHFDACDGAH', 'ABCGFEGEAAA', 'EEDBDCBGHBFDHFBHEDC', 'HEEBHC', 'AGFECBGFBFBECDHBEDD', 'CDBBDFAAFBFGCDDD', 'GDBAB', 'AFAEFEGCHEADGB', 'AFHDBCEBGEDEG', 'GHBAEFHGFFD', 'HCCGBEDG', 'CABBFDFFEHGDBEHCBB', 'EBGGGBCHEABDFA', 'AHAHACFAHCAAB', 'AHDDADFFHCDEDGCHC', 'CFCAA', 'EAGBBACABEHBAEEDC', 'HCCCH', 'AGEACD', 'AFFHDBFCE', 'BGCFFCGDEHE', 'EGBGDAB', 'FGFABDHFBD', 'CEACFCCDCCCEEFAAABC', 'HDCGD', 'HAAGDCGCF', 'BEFFDFDFCHBBGFDFF', 'BDCHDCG', 'CEHFECFDGAA', 'ACGBEHECHCGHBG', 'BADABACGCBDD', 'DGACFD', 'BDCFCHGBBGABAGAF', 'HAHGAEFGDGCBDF', 'AEDCBAGBGFBGHHFCDBA', 'GAAHFABBCGB', 'GCHAHAABDG', 'EADHBBCAAFG', 'BDGAFFFHGDDBFFH', 'GCGBABAFBADHCFEE', 'HCHFCEADEAD', 'HBHHEFHCGDBEFEAAEGC', 'EDBCGGEDHEHBAH', 'GBGGACEBAAECA', 'CAGGFEEEFDABAAD', 'EAGAHHFGC', 'HDFBHBACHDCBAGDADCHC', 'BBFCDAAHDEGFCCHHB', 'EAAFDBEFGCFHBF', 'FHGFHBAAGACBADEHEH', 'CGHBFDEGEEFCAGGEAHFC', 'AGCBGECGC', 'GAHBBAAFECECBCEE', 'BDDAGAEAHEEGDGEAEH', 'BFCBBHBFAFDFBE', 'EACGBCA', 'BBCGGHGAEFCFACEA', 'EAAGFBDA', 'FDCBAEEAFBBBBFC', 'GCAFFGBEGG', 'FHGDBCCCDAEHCHBDFC', 'FFGAEEACDCACBB', 'AEBBFAAFEHHBDAD', 'GEDHAFCDHB', 'EGHEFGDBFAADDGGDHAEF', 'GEGCBBGCFFGAEDGDDE', 'BCGHEFBFFBFCGCFCF', 'HFGGHH', 'CDDEH', 'DBDABGAFBCAFHGFBBFHB', 'HFCAGHA', 'FDBGHFFBEBBFBFD', 'FFBGHHACAC', 'CHBFDACDDBADCCEDDD', 'HFDDAHBAEDB', 'HEAEHGHDFGD', 'FAHDBCCHBHAD', 'EDDAEAGGGBH', 'BEGGAADHHAEDCBGHB', 'EGBEDAGE', 'DGGHBBDGFHGEG', 'CBHBDAHHGH', 'BDCHC', 'GGEHEFEDBEHCEDBABFDB', 'CCFEEEE', 'FAHAHCBFEEACGEHEDCDA', 'HFFHCCEGCCHAFEED', 'DCEDDBDHAAAHE', 'BGCGGC', 'HDCAAFECFDBDEBCDGHGA', 'BCDGCEGHHEAHDHFAGDB', 'CBCHGAADHACBCDBCE', 'ACGDEHAHCBFFFC', 'EADFFBADAGDEHBBHED', 'CAGCBADFGDFHFFHEHE', 'FFAFCBBDAFC', 'EAGDAGCGBFAAFFGFEBE', 'ECCGAF', 'DCHDGDCBBHCAHFCE', 'AHCCHAHGEHFBFEDGFCF', 'CEDGDDEBHEGG', 'HHGEGEECBBDCDABE', 'DAAABDAEBGHA', 'GDACFEAHFEG', 'HAFFFEHA', 'GDHFBGGHFECACDH', 'GDAGCCGABF', 'GBAGFH', 'DDADEBACBCBDBHEGB', 'EEDFAEDFCDEDBECCFC', 'GDHHGEECEB', 'CCBCCCEDFDEGCFE', 'BBECGEABHAGEDA', 'HBGDF', 'BFFAGGDCGAHBFAGAFGGE', 'GDEBFAGDBFGFAHGHCFAB', 'EAAAEBHCFBABBBACA', 'FFFEGA', 'DCGCE', 'DFBHHAH', 'EHGDHG', 'GAFBAGAFDDCHBBEBF', 'FBHFAFCHE', 'ABBAEGAGBB', 'CDEEEFABACGAHHCHH', 'FGGFHA', 'AAGHGBDCG', 'ADGGEAHBCEFAFDAHGB', 'CCGCHFHGEBECDGBHFF', 'EAHEGCCFAHFGA', 'DDFDHGECDBHHCAC', 'AHHCFEDHAFAADAAFBH', 'HHCGF', 'FFGDAE', 'DAHFDHAGHBCHBDHD', 'EBCCADEF', 'FFEFBDGEBDFGH', 'HBBHGCEEH', 'DGBEBCAB', 'HBHHHCHHFC', 'GHEFBHAEBFCEEDBGGDG', 'ECBAFHDG', 'ADABHGBECE', 'HGHBFGACFFFCECBBHB', 'FBHCEEADDFDFCAGBD', 'ABCFADHBABDCAFH', 'BBBCACACDGEGCHD', 'EGHHDCACAHGFFCAHAH', 'DEHFBGHHCDHFEBAA', 'ABEEFGEBBDC', 'GBEDEGEDEGDGEGHCE', 'HDFCBAAFHBAGEAHAAF', 'FECEEFHHDGDAAE', 'ABGHBFECECDE', 'CHCCGDAEHBDD', 'CEBHGAAGGBGACFGCHFFD', 'CHEDEEHCFA', 'HFCEFCGE', 'BFEBDHBBAACAHGEHHGFF', 'CAHAEGHAFACHEDDFF', 'BGCEA', 'AECDAFHFHF', 'FCCHB', 'DFFHFBHDHAGHEBG', 'DFCGE', 'EBHHCECFDGBEFG', 'CGBFAE', 'CEEHABGEHBCDGACFEC', 'DEBBCACFF', 'GAGHDGEDGGGGEGAGD', 'AEBCDGFAB', 'ACGDGCGGAHAF', 'CABFFGDGAA', 'DFBEGC', 'ACBEC', 'AEBCD', 'CBFGCBFCGEAHHAEHD', 'AFGCGFGE', 'DADBEDBFAE', 'ABGDEF', 'EBDHAADE', 'HDFCC', 'HFEBEHHBHBBHAEEHFC', 'FDEAE', 'CDCFHGFDAADBABAFE', 'FGFAGAABG', 'DCDCF', 'CHDGBDABF', 'FABGBFHDEBHEGBH', 'FADDDF', 'FDCBFHGD', 'FCDCEDCBGBBF', 'EHBBBGEFGC', 'BCBCBCDHGFADHB', 'FBBDEHBBFECAAFFHAB', 'BHFHACEE', 'CGAEHEHGGBECHHEBBB', 'BEEGCFDHDB', 'FFBACBE', 'FGDFE', 'DHFGBHDFD', 'HFDCDFC', 'CAGAGG', 'HCEADEAFEFFGGFBCFABC', 'EABEFDCEHCHBFA', 'GAHBCEAADBCDBCA', 'AABBCGEAAD', 'AGDAGDCADFDACGFHAGB', 'GAHAGAB', 'DDFDDEAEHEBBE', 'CGEGAG', 'EDGAFCHFABFDFH', 'CFACACA', 'ADBEEBFFEF', 'EFEACCHEEGEHFDGBDBC', 'BGAHEEHDEDH', 'CHFBFHFHACHCF', 'ADHEDDGBGDBFCF', 'GCDBBFHFBHGAEDDCG', 'GDBFCEBDCECHEDGC', 'EAAGDBCEBBC', 'GAFBDEBCHHAFECDCFFG', 'DHBFABEGG', 'BBGDGHFBH', 'EDBGDCBGCABAA', 'BBGEDBBEGHAFEFGDGFEG', 'EBEACDAFGAEBG', 'DFHCFDGBBHFAEFEGDBDA', 'CFFBHAD', 'ADDEDFE', 'CHGEFEDBGHFCHBBAG', 'ECAEE', 'DACEEAHHBDEAGGD', 'DFEEEADCDBHAHG', 'BAHCBBEDHHF', 'CCAFADDDHF', 'AFEBEBADEBDFFDGFDFGE', 'HFEAFABB', 'GEFHDEFHGBDA', 'EGFCFBFAGF', 'FHAFECHCHDFFCFAGC', 'CDAGCFF', 'GFGHGCACCCBG', 'CFDCCFDFCBHGHDCCFF', 'BGDBBDHE', 'BBEDAHFCCDFAGFH', 'BGGGGH', 'BDBGGBFHCDEBDBAGGD', 'DEHFDHDEBCDFCGBGCGA', 'DBAHEDDGDDFBGHDED', 'GHDHEEHBABHE', 'FGEEEHBDEE', 'FDEBC', 'DHCADHG', 'CEGCGCGECD', 'CEEGCDBGG', 'ABDADGDDBFEBGCBH', 'FCADFBECBCEFBDEECBAE', 'HGHFHEBGCGGGGCD', 'AFGACDBBCC', 'ECCDBHHBABCGAGCEGG', 'DCGEFAAFDABHGHH', 'GBEFABBG', 'GECED', 'AGGCHDEBAFCBHBBCD', 'FHDACEFH', 'AABCFDBC', 'HHDADECHDBAGBFBFGD', 'EHDECC', 'EDCBFCHAAHDDCDB', 'DHGABHDFCHGAFC', 'DDEBHEHGEEDAFD', 'HGBDHCBHGHCDGFDBD', 'BCEGGGFEBBHHGDB', 'EDHFABHADCHHH', 'CFDGADBCCEBHEFACCCF', 'EBDFBCBBAFBEDADG', 'CFAEGEEFBGHCCDAGFBG', 'GEBHGEFDHGDGH', 'GGFEEHBGCD', 'HDEGCEAEECEEEDEHEBFE', 'HABFFFDGAEGCAGBDDAFB', 'DHECFCFHE', 'BDEDGCCGHGGEBDDGGHG', 'CAABAAHDAAFHAF', 'BCGCHCGH', 'GDAGBDDGBDDEECBBE', 'FGGGABFD', 'ECHHHGGHDFBCCHE', 'FDEHGEEEC', 'AGACDDEDDABEB', 'ECFFEFBCBEFDE', 'BGGDEHGAHFCB', 'DAHEFCEHEEEFGGFED', 'CEACAFHCDFCCECBCGF', 'BACHDHCE', 'FECEADEDAABED', 'AHGCED', 'BBDBGDFAGFFBAFF', 'CCHACCAGHFBBFE', 'FCDEEFAE', 'CFDADAFGCCDABCCC', 'CGHBGFADDEACAHFADA', 'EABGHFEBGGFHHBCFBEGG', 'GHHHDACGDGCADFAD', 'DFACFAEF', 'HFFHCBDBH', 'AGHCAF', 'FFCBBFDHDEDCBDE', 'GBHGFEA', 'CHCBHC', 'FBFEBAHAE', 'CBFHEBAFF', 'EACGEBBBDCDGG', 'DFDAFGHHFAGBGBHDF', 'HBDEGAE', 'ACBGCBHBBGDCD', 'DEAHAHDFCC', 'BBGEFBCECEGACDGEAE', 'FDGEC', 'DBHGGGB', 'FGCACCDGECCCBEGH', 'EDFHDGBFDFCDGB', 'FGFECHFAH', 'BCCGDBGH', 'EFGAFEGBCHFFBCB', 'CDFCADEBHFECEGABE', 'BDCGFBFF', 'GHEBDFAGGFBEFGEC', 'CDCDF', 'FEFFG', 'FBAEEFADA', 'GHAGGEEBCEEGHAG', 'FABGEAAFE', 'FHDDDAGEBDGHCG', 'HFGCEADGE', 'BHADA', 'FCFAFHCB', 'GGDDCFHFECH', 'DGGCGC', 'CBEGD', 'GCDCHHEGGAAEADEAEGHA', 'AEFCAAGBGAEDAFBFABDF', 'FEHAGEAACBBFFDGBCA', 'BBGFFGEFDCHEGCCG', 'AGGHACHHAEDDB', 'HFHFBHHDG', 'BCBHBFDAAH', 'CFCCDEHGACAE', 'EEHGCBDACB', 'ECBGFEEAF', 'CFGCAADC', 'BHFHHDHD', 'ABEAGD', 'DGDEGEAGAEECDF', 'HABFFBBCGGCCGABEA', 'GFEEAAGCAABBEHA', 'FFBCCFFCFFGDHHG', 'CHCGHBHDACCFFADAH', 'CHGGFHGGFBDGAF', 'BHAAFFGFCD', 'CCHCDDDEBEEGB', 'BEGDGFECDCGAFAD', 'BHBEG', 'ACFHFGDFBD', 'AABHAFFACFFGFHAFG', 'EBDHFFGGE', 'HCGEDAGHFGFHAGGFHBD', 'BFEHBHAHGDA', 'FEAEGEGCEAEC', 'FBDCEEGF', 'CAABBCEBGDEGFGHDAHFF', 'FGGBCCABHFECHHEGBEG', 'BEGCEDCDBDEGGGGBAHED', 'HHBCEDGAF', 'BHDHFBGCH', 'AHBDECCBDHDDE', 'ABEFHHDFACFGDDCDBFE', 'CBFDBHHEGC', 'EECAGDACFAH', 'AHDCCDFBHCEAH', 'BHFEHDDEDCEGBGHAE', 'BDHAFHGBBDADBEB', 'AFFEADAEBFBDGDHAE', 'EDBFDEBAEEABDDA', 'CEBFDFDHEBHCGBAAEA', 'DHBECGHHEHFAEBEGE', 'CEBEGCHBBDEAECGBFFED', 'EGCGDAFGACBBGBFFADDC', 'HECEABEDCDEFH', 'AGAAAGCABBGGBDF', 'BEFCC', 'HGBEABFCBFGHG', 'EEHBHHE', 'FCGHBDHEAABBDCDGEB', 'EHCHDEDAG', 'HDBGFHECDGFBEBCDDHAD', 'CDGEFEGB', 'BGBGFHGG', 'ACABACA', 'GACFEDHCGGBCBCGGHE', 'HEADGGB', 'GHFGDABHDGEEB', 'FBFDBEEHAFH', 'DCFCCAHDCDEFH', 'GCHABCHCGGAGBCGDCC', 'DEDHBDAEHCAHABBH', 'FBHDFBAEFECBCAGFF', 'CCAAB', 'DGBGDHDEHG', 'GCHGECAGGFGDBAHFED', 'EDBAFGAAEGACAHGGHHFH', 'BDGCACEGGABDHBEEFAH', 'DFEFCDBFAFCA', 'EGFDFEGFA', 'HAGGGCCCGG', 'FCBHFEFCEBHEBFCFEHB', 'HFDEAGDDEH', 'FADCEFDCEEAFGGBDE', 'BABCHEDDAAEEDGBD', 'DGFFCAFD', 'HABDCEDFCBHECAHD', 'CEEAFAHGBAHAHEDHHCEE', 'FCBBGGADDBFGFHFGGFA', 'HDHEBAAACFG', 'HADEBHHBFCAECEFDGG', 'GHGADGDFEEA', 'GHHFFAHCFC', 'GAAAABBAHFADA', 'GDBFGFAC', 'DDHDDCEAEHCGDDG', 'HDHEHBFDCECA', 'CHHBHCAAEEGDH', 'GEFDEDBDHAFGHCEDH', 'GCFCCHEE', 'FAEAHAFHGCCCBHGGDBD', 'FEBAFE', 'HFFGBAGBDCHDECAF', 'FDHAFF', 'EAHFDFAAGB', 'EFHDFECDABHCBFA', 'EHHFAEHBBABC', 'GBGEGDC', 'HDGCECDH', 'FEAFCCHGHAACDFH', 'CAGGCEDCBDF', 'AACBFFCDCBDDBABHFDF', 'FBBHAABCBCAFECCDDAG', 'ACDEBHGHDACAA', 'AAECC', 'BDGEHCDHECE', 'CHAGAAHHA', 'BFBCACF', 'GHGAFBDDHEAEEHABBHC', 'BHDGCBEGFAEFBBCBCG', 'FFDBHAAEHEDFC', 'BFGEAEHDEAHGHHGA', 'FBCGCEDCCGEHAHFBCHG', 'EBGCECEDCEAFDFFGH', 'ABDHBAEAHAFFGEEHBE', 'ABEHGCFHAGDGHEE', 'HECDDBBBGDHFGGF', 'GACAEBBH', 'CCGAFDEFFGD', 'HBFABGAFEFBCFFCAHD', 'FDEEBBCAAHCAEBEEG', 'FBCHG', 'GHEAEGDE', 'DGEBCDAFFHEBGFBCC', 'ECEDFDFCHFDFABAE', 'EEGDGFFAAHDDE', 'HBBGGFBGDCECBAAHE', 'EDCHGEDHCAAGD', 'ABDEHDAADGAHBAFAE', 'BFDEAE', 'GGGAAECECDCAD', 'ACBDBDDHFFDD', 'GGDGBACECGDHE', 'EDBECGHBEEDHED', 'DBHGFHEDCAGEHGDCGBD', 'AHHHGGC', 'EADFGEBHEF', 'GFBGCHCB', 'EDEBAFFFDFHBABFHGA', 'FBFEBHBFHHAAF', 'BGGBFA', 'EHBFBADFAGEEHFG', 'GDFGDAH', 'CBDBDEFBEFACFA', 'CGGCGFFH', 'CFAFGBACAAFDBGGHBFG', 'GEGBHCDFHCECCH', 'ACBHGFBAEHEHDCCBDF', 'CHDCFG', 'DHEBADAEG', 'EBHGC', 'ADGECHCEGEFBHACGEHFB', 'DCAHHFFEACDHFDGE', 'AHFADGD', 'FHDDBBAHDFCHH', 'GADAE', 'AHGFHBDHEFBEB', 'HHGDHBDHH', 'EDDAB', 'FHAGBEEFHGFFAGGD', 'BAHFCGGDAAF', 'CCHAFBFDB', 'EGHABHFGBGAC', 'AGDGCFAGBFFCA', 'BHACC', 'HCFDBDGGHC', 'AFEABBA', 'HDGHECEBBDBDFB', 'CEGHAFGF', 'FHADGGAGEFFCAGDABD', 'BDAFHEFHEGCFEBECB', 'FDAGGAFDAEEHACAHACC', 'BFFCFHAGDFGBHFCFBHH', 'HCDFBDBGC', 'BBECBA', 'CECCAGDCHACEHHBDGAF', 'ECBBEDAEDB', 'BDBCFFDGHE', 'CDAFFHFADCDE', 'EEAECBAGHCA', 'GCEDH', 'CFHCAHDGF', 'GFFAEBGEHBBEDHE', 'HEDGEFEHDGDDC', 'GFGEBHBE', 'CCACDCEEEB', 'CABCD', 'FHBCBAE', 'GGBEBFHHHHBCDABBAD', 'EDFGDCEGECGGHBFCE', 'GDBFAFGFHBGBEDHCDFBC', 'BBHHBAGGADGFF', 'DDCAEHDDEFDCAHCAAAE', 'GHCEHEGFBBEGABH', 'GBHEFF', 'GCDGGCHE', 'HBCCCCFGBHFBC', 'BCABFCDEGFDEAF', 'FGHDGADCGAC', 'HBDCCAECEFFHGFAFGA', 'EFEHED', 'GFBFHE', 'GEDGHADCCH', 'CBBDHEABGHE', 'AHHEGHGGECEBABBBAEF', 'HGAABCDEAEBCFEEEBA', 'HDFADHFGBF', 'AAEGFDADHCDCHCDHHG', 'FDEGECDEBD', 'AHAHDGEFGHAEA', 'GDGAFDDG', 'CGCDAGDGHC', 'BEBGDCBEHG', 'DDEEFGGABEAADDAHB', 'AEFCEAE', 'AFHCAEFFHADEBF', 'GGCDEEDAGAC', 'DHDFCEF', 'FEEDFBGCABGFCC', 'ECBDEGCCBAFBH', 'AEHDBAEGFHGBECDE', 'CBCCCDECGDAHDADHBA', 'BHCHE', 'BBBEFHACFCA', 'BEFFEFEBADCBHD', 'DHDHAGAEDDFGC', 'BHCDBB', 'BFFCGAAFBFF', 'DHBACC', 'HHDDAADFEBFDADHDG', 'AGDBHEEH', 'FFGGDGGEGFCEHCGBHDGC', 'FGHHAADGGGD', 'EBHACGAABFFEECCEB', 'FADEFCH', 'EFBCGC', 'CDCAGDFCFEEF', 'EBGFAA', 'HDCCBEDGCAFGFBEGEEAH', 'AHCEEHAGD', 'FDBHDAEB', 'CFGEGBHCCFCACBAGC', 'DHAAADHHHDDA', 'HAFCGDGB', 'BGEFAGBBGFEAEF', 'BCFECEFGG', 'FEDFACEFEBGGB', 'ECEBFCHDFHHBHHFEAF', 'EBFCGGE', 'BDGGBDAC', 'EGECHFDH', 'BCBBCAGHBFGBEHBGD', 'EEAEDHBHBCEEGG', 'BCCGHDBCDDF', 'GGCBCBHCFGDEAEH', 'EBADFBHAAHCF', 'AGGDCFABCFCEEDCDCHC', 'GGFGDDFADAGAGDGEADFH', 'EGFFBHEEE', 'GHFCBGG', 'ADACEHDFA', 'EEAGECADEHDD', 'EFBHHGADEGEGEG', 'AEEGGCBFFEGDCEHA', 'ECFGBCEAFDFDDCE', 'BABECCAFDGGGADAC', 'HHCHHEDCA', 'FEFDGC', 'CGFHBFDAGFBHCGCEBGE', 'FEAGAGDFCBBCDCDFDH', 'HEFBDFBCBEHFCFDFCCHH', 'HBEADGBHG', 'CBHAHBCGFDCFDFHCC', 'HBDDGADBB', 'CFBHHHDDA', 'AGBBCFCGHHDDGF', 'FBEAFHGHB', 'CHEBCHACABEFDGDCGFB', 'BHBFC', 'EECAA', 'HCAEBDDBDHBDGAAHG', 'HBHEHDBHHAADBCEHDCHD', 'ADGBAF', 'HDDCA', 'CGFFEA', 'AGBFHBABADECEH', 'AFEECEEDBD', 'DDEDA', 'AHEHDHGECAFGAFEF', 'HGCHGHGECGBDCEHHFF', 'BEBDGBDCCGD', 'GEBGCEHGCEGC', 'CEDDFCEAC', 'GHHDEGHEEDA', 'CFHDFEGHDGFHDDFG', 'DHEFEG', 'DDGGAD', 'GBADFC', 'BHFACBAABBHHADA', 'HBHGBE', 'FAGDCG', 'DEHEHADBBC', 'BGEEEEAHHADDFEHDAC', 'FFACFB', 'EAHBHFDBAHGDCEAGHBE', 'EHEHCAEA', 'DDBAHDAFBHHAFECACAC', 'FACFG', 'DFGDAGCGDDHAE', 'CBHCEC', 'FFAFFCFFGDGDDCA', 'DGFACFDA', 'HFAGCAEHGFH', 'BEEGFGGEFAACHBEGHADA', 'DFACE', 'BDGFA', 'ACEDDCHE', 'DCADABBHEC', 'EBCFCGCBED', 'ABBCBBADGBGFEDFGFDGE', 'FCEDCDEDHBGBBGFA', 'DEBCHBECCBEA', 'EGGADDFFEA', 'HHADBGEEGBBDEBFBGAE', 'DHHGBCGHGEB', 'FBDBAEAGAAGADEBADBH', 'ECDAFEFGACBBAHEADAD', 'AAAAHHHCEF', 'FEFCHGHECECGABEGE', 'EGBFCHDGHBFDFDFAFGAD', 'DBGDFDGF', 'BGBGCAADGCGFEEBGDDD', 'DHGEAAH', 'AHHHGBAGFBBCF', 'FFDDDHCD', 'DFEEHBAED', 'ACGGDCBE', 'FEGBHCEBDADBA', 'DAEFGEE', 'DEFGCEEHGFDHAGDGEDF', 'BBECGEECF', 'EAGFDFHFCDCACHBBFH', 'BBCCDHEDFBBGGBGEA', 'AECFBGGFBEFFEBHHH', 'DECHA', 'FGGFCE', 'HEAGHHBG', 'HFEEBAHGEEFGB', 'ABHFBEGDHEFAHAE', 'CHCEEGHEAGACFAHDCAD', 'CBHAEFFGCAFDGHEFBAHF', 'HDHFDAACGE', 'DECADDBA', 'ECHDAFAHBEADGBG', 'HHDGGEGHACCDFCEGGG', 'GBEHAHBE', 'BDEAHEHFDC', 'DBBEB', 'EGDCABHHCFEDBGADFHAH', 'DFDDFEFDHFFADDGC', 'HGBAB', 'CEEAF', 'FBHFCEBHAEDCGFAGG', 'CFCFFDD', 'GEBHCEGAAFFA', 'AGHDGEDF', 'FBEDGDCDFE', 'BHHFDB', 'HHACEDDFCDCGDDFCDHAA', 'CCGGAHGFHDEDFHEC', 'EDFBBCFDEBEEBGDGFHEG', 'FDHAF', 'FEAHACGEDHHEGBGHEEAE', 'GEECBAH', 'AGHHGGC', 'AAGFBABGAECBB', 'FDGEACGFGFCFCH', 'CHHEABFABCFEDCAACC', 'GAHCEGAAEAHF', 'GEHHADAHCFAHBC', 'ABCAB', 'DBFBEBGCGCBEDAGDGD', 'HGGHHCCA', 'DCBEHGBAFFDHCDDCFD', 'EEHFBEDAEHEECHEB', 'GFFADBEBHBGGCCDGAC', 'GCGFCDFFHCGCAECEHE', 'CEEAAEBHBFDHDBDA', 'ABEGBEGG', 'DAEDEDBAFFBE', 'EDCGHAGCCHABB', 'DEGECEACDFEGAHDDBCFH', 'FFEDAAAHB', 'GAAFEDBBGFHGHFFECC', 'ECBCB', 'AECACFBFGGFABCC', 'EGEGDBAHFDH', 'FCCBCADB', 'DFDCCBFAFBE', 'FFEEBAHFECHADBADDEDA', 'CBCHEH', 'GFBEHAAADCBDFBED', 'CGHGDHFGEDGBCAF', 'GFGDAFCAFFDBFB', 'DAEGAAAGFFDHAFFHHA', 'BFGHC', 'GABAFFFDCHE', 'BAGDGHHEEAA', 'EBCEGDDDHCFCA', 'EFGBFBG', 'EGHDEEHDACEDBGFGEC', 'FGECBGHCAAHHH', 'HEBFFDB', 'FAADFCBHFG', 'EEAHCBFCABDF', 'CCCADCCBCD', 'DHHADGFD', 'BDGGGABDEACBACG', 'ECCCDCCEHF', 'FGGAGAHBDEFAFAAFFG', 'ADHBCADHCGEBBBBCFGB', 'FEGEGDCG', 'DBDBHBBCHAHECH', 'BHBHDCCD', 'AGCEFC', 'BHFFAEFFAEACHBACD', 'EEECAFAGACGDCDA', 'CCDGBEBFDFFEHFFG', 'CHDCDDDBA', 'CDAGHGCDEDBCCAAEAEGE', 'ACAFGHFGDEHHFB', 'EGBCGEBBAGFEDDCCBHG', 'CAAEGC', 'ADFCHBGCEHDC', 'BDBEHB', 'AEHEEFBH', 'CBEHGBABBBFEGD', 'FEBADA', 'GEDCGEFDEFDFGG', 'GDEGFEFDGBEBADFDGHD', 'BEHACEEB', 'CGCFEGC', 'FBFGFEEEAB', 'BHEHCFEHDDGE', 'HFHFEECCBAECDF', 'HDFCCCADDACEEGADHE', 'FCGABECC', 'CEEDGFCDECECCEDAACD', 'FAFDA', 'AEHEDHDBAHC', 'FFHGHAEGE', 'FDEGE', 'FCBEGADCCDDCEHGB', 'GGHFCEF', 'AGEHGHFHEBGA', 'EBGGGAHCGCD', 'DACDAEGBGHECDCDDDEE', 'GEABHDBCFDBDCG', 'ABAFBFGGE', 'FHBGEAGCBAFBH', 'HDGDB', 'CHHGHG', 'CDBGHFEBAFHCHBAECGHC', 'FFCCF', 'ADFEA', 'HCBFGEBBHFHCCFFCCDG', 'ABBGEFGADEHBAHHGA', 'BBHFGHGFGAB', 'CFGCEEADF', 'CCHBCHFDFGHD', 'GHDAGEFFECHFDGHC', 'GCADCDCGFHCCA', 'CCDEHHFHH', 'GHGEACE', 'CDCHBFAC', 'AAFCCEBHEFDD', 'HBEFAGHG', 'ADHEFG', 'HFDEEGF', 'HGHHAEFEG', 'HEBBCGFBCCBDGEAEGDEB', 'CBCEEFEFGHEG', 'BHDFHBFGAFBBGAG', 'CAHGEB', 'BDFCHHFCHGBEDGDBA', 'ACFDHE', 'ADHGHGFACGEHCFFBFGB', 'BHCACACBBGBBHEFDEF', 'CFFFEFGFFABA', 'DCABBHEFGDGEBGE', 'EDGEBH', 'CDCDEDDBADG', 'EGEGHH', 'CGBBBGBDBEBHBGDBE', 'DDDGA', 'CEGBD', 'DHEDHDEGBBBCADE', 'FEEFFGDAAAFAAAFB', 'AHGDH', 'BDABHGAFCEGEA', 'CGFDCCCAAGGBABDGGC', 'AHDFHCFGGFBFCG', 'GEFGGBFBBBHGHGCFHFD', 'GFGFE', 'CBFACAECBHGGDGDBHECF', 'HBGFFFDECDFDCGFCCE', 'BEACGEDEAABFGEG', 'HDGGAGFCABBCEBAEGCE', 'HCDGGAC', 'DCDEAFEA', 'HHABDH', 'GCAFDDFECECAADAAEFD', 'CCCBABDBDHADFBC', 'FGACAEHCG', 'GFGHEAHBCEEFH', 'GEEDF', 'ABGEBGCACBEGFHHH', 'HAFBEBAEAD', 'HEFEFEDFBGHFGCHBDA', 'GHHDGBEABEE', 'GHAGEGGBADFFEBGHDFBH', 'BFCGCC', 'GFGDCFBAFGACEHDEGBG', 'AFCHH', 'FHEBCECADFHFFH', 'FCGEEDA', 'CFFFGBBCHGEGE', 'GAGHHAEADAHDDBFCC', 'BGHBEBDDAEFBC', 'HCDCFFEDCHEFHHGE', 'BFCAHEDHHBCBA', 'HEBDAHDDAGHCEDC', 'HEHFBBEDD', 'AGBGGEG', 'HFEDDGHDGAEEGBEGH', 'CDFFEC', 'FAHHFGCDECBDDH', 'AFHCAHDGGAFE', 'GHHAEBDEC', 'AFHGECFGFAAEGFCCF', 'BHBCEADCHGGD', 'ECDFEFCDHEFDDHDGDFH', 'EGBDGGAEABCFBHHB', 'BAHEADHAFACFEFHDFFG', 'ECBHGFEFBAGBGDG', 'EFFGCDCGDHE', 'DFEBGDGAEDAGBDDBCA', 'HECAEEBGFBGCBAH', 'CGHHDCCADGHHEGHDGGA', 'FGBHGHGGCGFBFDH', 'DGHDFFDFCHGGFFACF', 'BBAGFDBEAAFHGDAHABDA', 'CFBHDAFGEAGFFCCBEFFD', 'FGCHECEHF', 'EFACFE', 'AGHDBAGBEHAHFCBCAEBG', 'ECHHEFCGHGBCFBAAD', 'GAGHDCAEFEAAEH', 'CFHEBFFHEHDC', 'EABECFAFGEHDBDBEFAAG', 'HCCCCCEFEBFBG', 'ADGGDFFGGEDCF', 'BFDEBAEGE', 'AEHFFABCDGHC', 'FAGHF', 'CBCHDDBEBCGHDEECFAD', 'HGCFDEFCAHFDB', 'BDGCEDAAFCCBEFHGCH', 'CEAAFDGHBHBBHGBEGDAA', 'HDADDGBCBCFH', 'DACBDGAEAEB', 'AHGGEBHBG', 'EFHCBCFFEBBBA', 'GAFCCAAADAFCE', 'FCBBADFFG', 'HDDAAHFAHBHBEAFCF', 'ABHDAEACHHCBFAB', 'EFFBBH', 'GCAAAAE', 'GBBFDCABEFG', 'HCBDBHFCGDHGEGBFBADB', 'AAEEAACDCHD', 'CEHGCF', 'FEACGCHHEDGGDC', 'HADFGHHFDGH', 'BHCHH', 'FEFHDACFEGEB', 'GGGCDHHGEF', 'DCGDBEGBBAHADBFCE', 'EBHCABEHDHGGCBCBEAHB', 'GCAHAAABHCCFADDDD', 'EDGDHEGCFD', 'BFGHHFFFBHDFGABAD', 'EDGGBFDDGH', 'CAFEBBA', 'ADGEDDAHDCE', 'FEGHDEAGFBHFFHFF', 'DCCHCDC', 'ECAGGB', 'HBFHH', 'BCGDEAB', 'FHHEAAFFHBABE', 'CHHFCHHFCCFFCHCGA', 'HDBCGBAHBCFFHAGGBHGC', 'DBCAF', 'HEEHH', 'GEGCFFCBFBH', 'GGBDDADAHA', 'HAEGEHGEDEHFHAGCDGCH', 'FCAADGAAEFHGCFBHGBA', 'AECCGACB', 'HFFGHG', 'FGBHFDABDAECHC', 'FDACC', 'BDGFFDBAGGGHC', 'CDDAEHBBCE', 'HEFHHEBAGEHFCEEGF', 'DHCEFBDDFBFFHG', 'DCHCHAADFDHBBCDFCE', 'HAHFHDGACDC', 'HBDAABBECDDCAEBG', 'FDCFBEHECAFBBGGFCDB', 'EAHABEA', 'FCGHBEBEF', 'DCAEABEAFEABGCGHHBA', 'BACBDGDFD', 'FBAHDAHAEBHFCDCAGGF', 'CHHHDBGADBFFA', 'GEEEAEEEGFBAAFFGGG', 'FAGGCCEBCGFCD', 'GHGDAFACADEDCD', 'FDGDFFGEBDAHECA', 'BDHBEEDGCEAGD', 'GACDAEGECEDEBHGGD', 'HBEGHGEE', 'EDFEFG', 'AEEBBBBFD', 'FCEDAF', 'GBAFHAFCHAGG', 'AHADDCEGBADAHHGCEF', 'EFFFFEEAHEAAAECHCGB', 'EEEBCBDCEEHCAGEH', 'AADCC', 'HADEGGECEFBHHBEE', 'BFGDCFBEFHHGAFFEGAB', 'CDADGDCCGDH', 'ECECCEDA', 'GHFFGD', 'ECCBGCEDCCFEFG', 'FCCHBDF', 'CGCCFAGCDBAHBFBCF', 'BEGBDADAGHGGABCA', 'HGABCBHCCBHCEGFFG', 'BAFBBA', 'EAHFFGHFBFFBBCCHGG', 'FHGCB', 'ADGBHACGHEF', 'GBFHFGE', 'EGECBH', 'DBEBHFHEBHH', 'GBGCBAAHCGCCHB', 'HFEHECCAFDHAACGDCFE', 'EFCDFEHABEE', 'DAFACGDBFDBEFHFH', 'AGFCH', 'CEECGFG', 'HDHFGHCEFCCHHHCB', 'DBEFHHGDC', 'DBEAGDGBHEFAHC', 'CFACHFCGDCHAHBECFBEA', 'GHDDBAFA', 'AEDFHEBFBGBECFDGHF', 'HCCECC', 'FCGHDEHFDAEFEEGGHFG', 'HGFBHBHBHDEFEDDFEGH', 'CGDDDGEFC', 'CCAGEAECEGAADGHFDG', 'GFDDFF', 'FGGEAAFAEEEHA', 'FDGFHDDDFCCABGCA', 'HGCHGBAGGGFED', 'ADBHGFC', 'AAGGFBEEH', 'EDFCHBCDCAEBHDBCADED', 'BGAHGC', 'ABCFHAGHEEFAEDH', 'FCGFDEHHG', 'DAEADDBACFCCCBECBHF', 'HBBHFCDBHD', 'GBEDGGAFEBEGDFFACHG', 'AHBGAFGEACBHDEBEGGGE', 'BFDFHED', 'FEDDFDEADEDCEHBDGGHA', 'HEHFBAHCGDHGHBEDABCE', 'GECECABAHBGEGEGHBF', 'CBCGGBCEHDFB', 'FDBACBF', 'DEEHGEDDFCABBGEDHHF', 'CDEHBFHDDBAFF', 'DFFEEBCEHAF', 'EAAAFEAE', 'HFCCBABDGFGDBDACHC', 'FEHHFGEGH', 'EGHCBCHFABFHGBAEAF', 'EAEDDBDEHGF', 'FHDGDGBDDBDHAFDB', 'BEBCC', 'EFBDE', 'GCAFG', 'CABBDBHEBBHCHGGAE', 'EHHAAEECGEEHGHHGA', 'GGGGGHDCADFACGHABG', 'GHBCHGDAGFGDHAHBDGBH', 'EEBBDEGAGGAAEHBGBH', 'CHFDD', 'AEBBFDEEDGEAGDG', 'DGGAGBGHA', 'CCBDFCDDCDG', 'AHCBDHHEAD', 'GEABCHCCAFAC', 'AAFBH', 'CEBEBFHCECCDA', 'BAADFGCGADGFHEHBG', 'HDCCHFEBGFCFBHBBHC', 'DHECEGGDAEHG', 'EAFFEHEGAEGDHFBFFFH', 'CCECGF', 'DEADAFFFCBGFFD', 'GHDHDEHCEHCHBHAHDGGA', 'CEDACDEDECAG', 'BABADFDBCDBHB', 'ECCAHDCFEAFGHBFDABE', 'FFAEBCHGEEDDHGFBECG', 'FFBHGBBB', 'BGDAB', 'HGBDFHHDCHCGGBGED', 'BEFBF', 'CEAEDDGCH', 'ACCBF', 'GEDDDAA', 'AEEADEFCGBADFGHGFD', 'DGFGGAAH', 'DCEGDECEGGDCG', 'CFGFAAAGGDGACDGBHADF', 'AHEHCFHBFEACAGEBAEEB', 'DFCCDBCEG', 'BBBECAAEAAGBA', 'BAFCHABCHAFDEBECEA', 'DAEHDFHCHCHHBFEBCHCH', 'HDBADAFBHDBDFA', 'FAAHBEBHGECB', 'DCECDEHBDCFHEDCCABE', 'HBBHHAGECEFEHDHBBD', 'FFDEABDCFGDEHFHHGC', 'EHHHDGBG', 'CBFCAFGBCADCEADAF', 'GCCDFGAFBEEDH', 'FCHHAGDA', 'BCHCGHBBBF', 'DDCBF', 'BAAACACCDGGFG', 'HBDAEECGCEDFEDACAC', 'GGCHDFA', 'DBHHAHG', 'CHDEDHDBHHDHDFC', 'EABECDEFCGGDGBBDB', 'HGGEB', 'GCCBEFHBBFHBCADHGDC', 'AGEAA', 'FBCDF', 'BDAAGAFBEHBBCHEACFG', 'DEEHGCFCAHDHDGEGFGC', 'EDAFABBHAEHCFAG', 'DDCEBBDGEHECH', 'EBEDDG', 'FGAEF', 'DFBEFGFGFGF', 'FFHFBHFGCEDGDF', 'HEDGFAGHEECEA', 'FHDCHDHHHBHFE', 'GDBEDEGHDHEFGCF', 'FAEABBFFEEEF', 'EGGFFAAHCECEB', 'GGHGCEHEABFGECFAGCG', 'GAEHFHABFGBAA', 'FGABFDHGAHAFACCDAFB', 'FGFHBCBFHHABCDEDGAC', 'CHADBECDBGEBF', 'BADHGCCG', 'GGHFDGFEGBDEHFHDAD', 'GHABBBHACAABDG', 'HDCBCEECE', 'CFFCBGA', 'DFHGGECHFFDABCGGBAC', 'EAGFDGEE', 'BFCACGFFGBC', 'HDGCCHF', 'GCDBDGHBHBGCCCGE', 'GHAGAGCEEDHEBE', 'BHBFHA', 'DEDCEBEEEFFCFHFBDFH', 'ACHECBEDCHE', 'CGBEAHFADBBHCHCEHEH', 'EHBEDHHCEHCHGBEFD', 'CCBFECACCAHADEHDEGDE', 'FBDGAFAAAEEHHHCF', 'GAGCDDDFAADAE', 'FAFHAFFHAGDCFF', 'DHBHABE', 'HDADBF', 'EFCDEHBGGDH', 'BCDDGGHCCCB', 'AEAFBB', 'DHADCHCCCFDC', 'GDBCFD', 'CGBDDGDFGD', 'AHGAABHCFHCBBBEHHE', 'AAGCADD', 'GFECFDFDDBC', 'FBBDG', 'GBEHHGHFCCGG', 'CBHGCDAEHABEAD', 'CEECGEBBEEABDDHBGAH', 'CFACFCGEGAAAGBG', 'FDBDGG', 'GEEBHBGHEBBGGBFCF', 'FFECDHGGFAFBDDAHHA', 'CBEHEDFDDAGHEBGCBB', 'DDADCGADCADBFF', 'EHHCFGABDG', 'HCCGBAFFA', 'CDACDEBHFAGEHDCD', 'DGGDHACFCEGFCE', 'ECDEDGCBAD', 'AEAFAGADFEGDFEEHAHCG', 'HEGCACBGGDBFGEFADE', 'HFBAAACDF', 'GBGHDAEEDEBF', 'FFHFCFH', 'CGACHCFGCABDD', 'HEBCCAFBGADFECFFFEG', 'GHDAHEAE', 'HHEEECHBGBAA', 'BAEFAHBHBDBABFDD', 'GGFCBDEFEDCBCCA', 'EFECDEEABHHFCAAEDDGF', 'HGDDGADGEAGAEGADFG', 'ACEAEABFHHFEEFHGBDBC', 'HAFFBGB', 'DDCDDBHDFEEGCDCGFB', 'BABBFGBHE', 'EDFCAGCECDHCC', 'AFCFFFBGGED', 'EAFCCCF', 'BDDHAAB', 'AEDAHECHGFFABEE', 'AHEGDHBECEGGEFCAG', 'GBDGGBAEAAAE', 'BGEFHCCAGHAEAEFHHF', 'CFEHECAEEAH', 'GDGDCGEGCHDCFGH', 'FACDBFFFDCB', 'DCHCCHBBFGCBDAEHBDB', 'HCHGCEHHCCE', 'EHDAHH', 'FFGCBFEDDGCFDHDD', 'BEBHDFAAGHB', 'BEABFF', 'ECGHCDE', 'FCDBA', 'ADFDEDHEECDDFBHCE', 'DEAGBD', 'BGEHDFBBAGBBCDCFAGAC', 'DEFBHHHEHGAFD', 'BAAGGDFBHGGDC', 'BFAEHCADAE', 'EBAFA', 'GEGDGGFFCBEEAGDAH', 'BHFEHEEGBDHDEEA', 'HEGEFGAFBEDFCEBFF', 'AGBDEGCGBHBDCDA', 'GAFFGGADCB', 'BFHCABAGCHACCFDBHDC', 'DDBAFABGFBB', 'BHFFGAGAH', 'CDGFECAGACGDDGFDBC', 'DBADFGBDEB', 'DBFCFHBEAEDCAEEGH', 'FAEDDF', 'HACHAGFEDFH', 'AEBHAHFAB', 'CHDCFCACCHFBDGH', 'HAHDFH', 'BHCADFBCAFAHGCDD', 'EDBDFDBCGGBFBEHCCEBC', 'GDAEFAHEBHEFAHGGACHE', 'HDEHHHGB', 'GCCGFF', 'FCDACFGFAG', 'FHHGAEDGHEAEEGFAC', 'AACGCABGFBCADBGD', 'GDFAGCBAG', 'CDBAH', 'AGEAA', 'HCFAAE', 'CBEDCHFHHCGEBECAG', 'ADECGDDCHFCHBBDDBB', 'BEFHAEDAFCHGAGFCGC', 'DFDHECEBDGHHB', 'DFBFAGEEH', 'AABAEDEDBDE', 'CHBCGBD', 'BGDDGF', 'GFGFFDDFGEG', 'CGBBEDCGDHHDCE', 'FCCGEGDAEDGDDFHDAHGC', 'GHHHHDDDGC', 'FDEGAGHCDE', 'EBAHDCBCDAHF', 'AHCBBFFCHEDGFHEGA', 'CGBAEBFGDHHBGDACC', 'GEAAFAB', 'EEAECBGGDBHFB', 'FFEBEAFGAEECC', 'CCCAHFEGEFAEEDF', 'DEBDEEBADHEEECH', 'GGBDEAFHFHGDCEEHCEE', 'HDHAFDH', 'BGGABHDADAEAHGEED', 'CCEACHHBHAAD', 'HHCFHFDFCFBBFDFHCBA', 'EEFGCBFHA', 'DGEBCDFADA', 'HBBBAA', 'GCHCBCAFABHCADADFEAE', 'DCBAEDBDAC', 'DHDFAHDDFG', 'DGFDDHEFECFFHDGCFG', 'GHBACBHECEA', 'DAFHABHH', 'HEFFCEA', 'AFCGFGGBFAGGDFFDGE', 'HAGDBGFDDBDBDGBGEDEH', 'BDBGGHFD', 'DEADB', 'HEAEEBDEHCAFABAEH', 'FECCDDGFBGCDDHCHFB', 'AHBHDFFGCE', 'HCCBHDHB', 'AAECGHBAHH', 'FHFEDAFCDAFEHAF', 'ABGFFGGBGGG', 'ABAGEEECBEB', 'DGGBGAFF', 'EBCGBEADG', 'FFAGBCACBGCFHBGD', 'CCBGEFADAFDGDBHCAA', 'HFEBGHHHDCGHHBF', 'CBABEAFEH', 'FDGDHFAHAFGABHCEADA', 'EECBCFCH', 'CCEEA', 'CDACECEDFH', 'EBDDCFBECCHFGGGBGCD', 'GFFCHA', 'FEFDGECHHDBEA', 'BDBDEEBBE', 'EEGAE', 'DDFEFDGCHC', 'FGDFGEFAB', 'EAEAB', 'DBCCAECDFCH', 'GBDCEFBBC', 'GEBFBCFDFHHFCBAB', 'HFHHCAGHGFEBBAEDEF', 'DHFHFD', 'GFBBDAEBGDHC', 'ECHGCDAADGH', 'BEDGG', 'GDGBHBHHHCFGDGEB', 'CEHCGBFACDFHCBH', 'CEFEAGH', 'DEGDCBFEDFGH', 'EHFHEHHCGH', 'GHADHFHDHGBCB', 'HHHHC', 'AEGBFGBCBEGDE', 'CEBDEHFEAFGCCFGEHFF', 'EGHHDAEH', 'EBGHCFFDHFDDFEHDBFBG', 'HGEFCFEEA', 'GDECFBEDBHF', 'HBCGEA', 'FHGFHCFDDEFFFBHEHGE', 'HECBGFEG', 'GHGFADCGAFGBCGADGA', 'HCBBBBCD', 'GHDGDHBGBEEFEGGGBAB', 'HBCABCBHFHCDE', 'CHCBCADGAFHF', 'BABDDEDHCAHAAGHGAFBD', 'AHGGHDCBEFEGFB', 'BBCGAAFEEDDFBHEAH', 'CACAGEDF', 'BGCBHFBG', 'FEADGAEEAH', 'HFGDCHGCDE', 'EAFCGAGB', 'CEAFGFBACEEHDAACAHF', 'FFHGCGBDEGAAG', 'FAHGDCFBFCCECBFHBDBD', 'FBADFGHDBBBBFH', 'EDHFGE', 'HCHEEHDCEFGBCFDAFAH', 'EDEFEEEDGCGCCAA', 'BFFAED', 'EGEHBHCHFBCHCEAEBHH', 'GDEDBEGDGGDHHCCAA', 'FCFGDEAFFAEHGHB', 'FAHDCGGBEHGGGDC', 'FDDEHDBHBFAFH', 'FCAGCF', 'GFABB', 'HBCBE', 'AFCEGBABH', 'FBACAA', 'FHEEH', 'CCEAGDFEHBGG', 'CBBACG', 'BHHCFA', 'CAAHGBCGCCDAFBB', 'GACADAEGHGCFEE', 'BAHHHABBDAD', 'FCCBAGHGGFAGCDBABC', 'DGFEBFFHABDBGB', 'BDAACHAC', 'HAACBDGGBEDGDC', 'EGFGCECGFBBFBAFB', 'FABAEGHE', 'GDFFBAEGBGEFFB', 'CEFHHHD', 'FAGEBE', 'GGFBBAFD', 'BHEDFGCDHHD', 'FFEHEDAABHHACBCGGBG', 'EACGHDADCHCHDEDDEDC', 'GEBBAHEAEAGDGEBFGG', 'ABCCDDDDAFEHECHAGDGF', 'EDDCGDEAHAA', 'AAHEFACBGHGFHHEDHC', 'EBAEFCGBBFBHEC', 'FEEDAFCGHHGHGF', 'AFDFEGEEB', 'ADABGCHEBA', 'FDAAACEAEEDCGBG', 'EHGAHBCDAHACHBEC', 'AAGDDCDHEA', 'GHEHGAABDCHBHH', 'CHCEHBBCHDED', 'BGABGCBEEEAGEHD', 'HGADFDAFBAGH', 'FHHGDGFEABGFCHDCADC', 'BBEFAGEDF', 'FBHFGDDDEHBAECEAHFCD', 'HFFBBDFEGFCDGH', 'CDHDADHFDBH', 'DEGGAEH', 'CAEBBBCHFD', 'HCGACBB', 'HBHEH', 'BBAHHHEBFA', 'GBAHAHDFCGFAAEABAEA', 'FFEBDFHGACDDCAFCHDBF', 'FFCEA', 'GGFGDG', 'FBGGECC', 'CFBBDGADBE', 'GCEHHBAEGCDEGBCAFBBC', 'CCGCGEBACHCHCCHGFA', 'EGEEHHACDCEEFHGFD', 'DFHGGCGEFHBEEBDAG', 'EDAEAHAEFEFCAD', 'EHHAAHGFGFCEAFDH', 'HCABHCA', 'GAABHH', 'AGHAHFGFD', 'BEFGACHAHDADC', 'HBDHBCHHDGCDGGGFFEH', 'FHCHAACHFGBDCHD', 'HFFHHAAHBADCA', 'FHAFABFGFGGGAEF', 'BBBHDGBGGFFEA', 'HFHBHEFCEDBDGEFDFB', 'HBHEGE', 'DHGHDAEDGFGFFG', 'BBFCGE', 'FFCCHBDFHGGH', 'FDEHFAGBCHC', 'EHABECHDH', 'CGEHFFHHB', 'GEDGHCGDDEBEE', 'GCAHAHDAAABBH', 'GECGCGHCBFGAAFC', 'DFDDFH', 'DFCFEGC', 'HAFGGBC', 'BDDEFBDACF', 'BHDHCEDHH', 'CADBDECCEAGD', 'EHBBCEFAHEGDAFCAD', 'CEGFHEEDGDHGACF', 'ABBBABFEHEHAECE', 'HFHAGGEFHD', 'DGBACGFHBF', 'EBFBDDEGBADFGEC', 'FFCHCDEDCGE', 'HFBADE', 'EBCAAEG', 'GDAHFCDBFFFDFAED', 'HEFBEFEA', 'GEGCGGG', 'BEACBAHGFDGBBGHECHB', 'BCEGDDAHDBFDECA', 'BHFFAG', 'FACDABAFGCDACB', 'FBHFDCCEEC', 'HEGBFHAHFHAHBDACA', 'HAEFHDGCE', 'HFHAACGDEAABFEAGEEHG', 'HHHFBGBADGEHBBBEF', 'HAGBADBDFBG', 'HGCBEFFGBFFEFHHGADE', 'AEAAHA', 'FHDABFCH', 'ADGCCHHGGAFD', 'GBHACEHGBCHE', 'BCBHDDDE', 'HDFFGFEFEFEEBDBCA', 'CHBDHHFBCFGFFDH', 'FBFADBCEFAHACGBAEFB', 'DAEGDHGHHGFFBCBA', 'DEFBC', 'AFBECHBFGFA', 'DDCCFHCGFHEEGCFADB', 'FECHADAEE', 'FCEGFHAFFGADFFGBHAEE', 'DEAAEEGFBCB', 'BHEAHGCCAFCFFBHBG', 'CDDEAFAHCEGEBC', 'FGBDAEGA', 'HBBDAEFHEFFHH', 'DBDAHGDCBDAHDEF', 'BBHHECGDDDCBACFAH', 'EAADGECFBBHDEA', 'DEDBFFHGEECGG', 'CDFBHFFBCFCH', 'CDECADDGEDC', 'AEBGEDEFBFEHFEHAECBA', 'DADAHE', 'GCFBCGEDEDFAAFGDDACA', 'DCGBECCDCDFHCEAEDEBH', 'HCGHBEGGHGCAHBBEFEB', 'FFHGHBCDDAFFCHF', 'GHBHHBFHA', 'EGEGDABEBAAFFAH', 'EGGEFF', 'HDCECD', 'FDACEBD', 'BBAFADHAAGH', 'BCDGHBGGAHEDEGDH', 'FBGDBD', 'HCHEAGDBBCCDBEHGE', 'ACEGAAAB', 'CDEFFHADACGEADHDEDDH', 'AEBHGHCHBGGFFFDGGG', 'EGGDDCDGE', 'CBGCEAFG', 'BGFBAA', 'EFABHDHGD', 'DCADCAFFDGAAEDBFCH', 'BGGBGCGBCDG', 'CGHCFHEGBHDHGED', 'FACGCGDCFDECGEHEDBC', 'BGEHEBBAHCFFAGEBCFE', 'EGDFAEFBD', 'GACAEAFEGDGG', 'AEFBEHDCACF', 'GDBFHBHDHFAHDG', 'FFEDCCH', 'FACFEDDHGGBBG', 'GBAHBFHFABBAFCEFGGH', 'HFEAAECBGBEFBE', 'ABDGDCDGGE', 'BFGFGHEDC', 'DEHGFCAG', 'EADBEBCBAGFGEFCC', 'BDCDFCHBAAHCAF', 'HDCGFEEFBDCHBHC', 'DBEHGABEAGBDBHEDG', 'BDDDBAD', 'CCFABDDAAGAAGHGCDEG', 'FGGGGAHFACCBDD', 'FGGHBEHAF', 'FEGDCEFDGGDFFFBC', 'AHHCBCAFHFGG', 'HGEDHDHGADGCCDFAHGB', 'GGEBFCFH', 'AAHHEAAHECFDEACGCCDG', 'BFGBHHDDGBDA', 'DGDAFEAC', 'HHGGACBB', 'FHBFDG', 'GEABAECGBFHHAFCB', 'BEACBAFBCAFDBCCF', 'DGECACBBFECGFFECCF', 'CEBEADCAAHH', 'CEHDFCHCCGGHADEAHD', 'FECAECCFHFCGAAADFAGC', 'FBDFDHHBBDB', 'GGBGDBCDBACFEFFDDBDG', 'EFFGGC', 'FEHHGHG', 'AGHCFHFFGHHHF', 'HHHCBCBAECFGG', 'HGGHDCCCFHDA', 'AHHDEHCFCGAEADEBG', 'CEBHGGGDFDACBB', 'BHEHBGEHGFEAGDCDAEA', 'DFAAGBBGHAC', 'DFEBFGADB', 'CEFFFHCCA', 'FBBCEFFCFD', 'GAEDHEHDHGDF', 'BFHDHBAFGGBCHF', 'CEEFCFCCEEEFAAD', 'FHGCDECGEC', 'EECHBABHHGACB', 'BHBFAADGHE', 'CCAHGHHCCE', 'HDDFGAEDB', 'EHHFAHCFFBEHACFH', 'GFACHABDHA', 'BBEGHHDG', 'BCAEAGGCACEFGCEFEH', 'FHEFCGFEHEB', 'CFFGGEFAEHCBGD', 'GCHEGHE', 'BECEAG', 'AAAFEDCHEAACFCA', 'FGGHCFDDDG', 'CGABEBBBEFBCFCE', 'GHFGDGDEAH', 'EEFABHEHBBCB', 'GGGCDDAAHCBBDFDCDFBA', 'FEEFAADEHEAEEDFBE', 'HFAHFHFGBG', 'GCBDBHFDFECDFEGBEBCF', 'ADFCHHGCEEGFDDFECBF', 'HCGFBCADHADCDAGEGF', 'AACACDECHGFABEEEC', 'EADCF', 'CEHCFGEBE', 'DFBBDHGFAADFBGB', 'ECHHCDBE', 'CAEAAEBGAH', 'ACFHDFGFABBE', 'HGGHFBAAGEDBGB', 'DCABA', 'GHBHBDCFDGGFA', 'HEFDFHEA', 'BCBHCCCFFBEAFEA', 'ECCCFBAGFFHDGDBEFHB', 'BDFDABGHEHEC', 'BEHFFAFFECBHD', 'BHBDAEBCFE', 'DBEBEECG', 'HAFAGFHAFHEHFDA', 'HGAGABFFEFFAAEGCCFBG', 'FCEGHGGEHFCAGBF', 'ECFEHEFEBGGGADGEC', 'AEDGC', 'DCFCHDFDDFEEFEC', 'FDDHHFCAF', 'CFEEC', 'EDHEGB', 'CGDDHAHFBHAFDGE', 'CGFBBBAEBHGFFBBG', 'BGADBH', 'CAHHGEHAHEFFEGB', 'FBHGACGCGFGAGECD', 'BCBAAEGF', 'BAACHEEEGDDD', 'HGFBADB', 'DGCADEEFFDDCDFA', 'DAAFEAAGEHAEHGHHCGEH', 'GEGCEHBDEFHDEDEHFGEF', 'DAAHCBAEEDCHECDHBCG', 'ECABFCC', 'EBFFEGFDBFF', 'CACBGCFB', 'DCFACHGHGD', 'DDFDFBCFDCHBFBCC', 'EHGGEBHGD', 'BFCDEHBDGEHA', 'HCBEGDEEB', 'HGDECGDAAFD', 'GCAHGCGFBGDHAGGBBAA', 'BFFGFGHF', 'FCDGFGFAACFHDDHHFHC', 'DBBDGCCHBDGHGAA', 'GDCECABBAFHFFFFBBF', 'FEDECCADDGDADHAAHEB', 'AEFHFF', 'CBABDCBAGCEBBACHDH', 'BHBFG', 'AAGBBBGCDH', 'EHCHFBG', 'BDADDBAH', 'DCHHHAEBDHBDDAHAEEAB', 'AGHHHCFDGBHFAEEFHDA', 'GDHFEDBDHEDGECGG', 'BHGAEEHCDAF', 'HAEFCCEFCHD', 'DCAFFHEDGHAFCHG', 'BEFHHCADAHGEFCGECBGG', 'HACHHBFFHEEBFBAHGA', 'CDFFAEHFADABGBCACGCH', 'AHFACE', 'GAGBDCA', 'GDDBHAEFHHBHCHDEA', 'CACBBCDBG', 'FEBBBHBAGFGAGA', 'DGHAGBDBGBABEC', 'HHEGABHCDHGFCHBBDE', 'GHEAAGGABFDHEBFFBGG', 'GBDHEAACEADFCCDDAFF', 'FBDGEHGEDFHGCHBEAGEA', 'HAEHDDCAEABFDHGG', 'BHHGDHB', 'CBGCHCDHGHH', 'EEFDEDCADCC', 'CGBDBAAHDBGAGEDBBFE', 'CEBGDCDCFFFEEGFF', 'GAGCECGGEGA', 'FEHHFCCECHABGGA', 'ECBBGGFFECDHEDG', 'HHHHFDFHBCHAGEHGHC', 'CHEHEAGGG', 'AFHEDHDGDBCDAFDGGBBB', 'EAHBDAFAFDHHDHHGCFAB', 'FCABBBG', 'HFFGBAHAG', 'EFDEDHGHDHCAGGAFAH', 'EEGGGE', 'ADGFAA', 'GFHFAEDAFB', 'GGEBF', 'EDHCGDAH', 'DBGHGFFA', 'CBCCECBCGDCDCBFBCDA', 'ADDDFFHAC', 'FGGDHDCAAEGBEGH', 'HCCFEBEDDCFCC', 'GGECEFAF', 'CACAAHCBBEHC', 'AAFHCHAFDFABFHHCGBG', 'FDHEBDHAFGB', 'HAGEDAAD', 'HCEEEGHHHE', 'DDAGFGGFHHFBC', 'EDHBDBDFEHE', 'CGBBDADFGFBGAHFD', 'EBEHHB', 'BDCCDFBCCDCDAHDHB', 'AFABDACGDDHCH', 'HAEBAAEBCAD', 'FBDHEBGEAEHGAFCA', 'CABDHF', 'BGGEHBBHCH', 'ABHGEAAAHGHGFH', 'GBEDBDGBHHBEBGDGG', 'AAGHHFGHEB', 'CHAEFGBADDBEGEDC', 'GBACE', 'AGDCDBECFGEFFEBB', 'DAHAF', 'BDDDFHABHG', 'HAEBEHAEAAE', 'AEEGGHAFGGAEFGH', 'CAEGEBGH', 'EHGBFCAGFGEBA', 'HCGBBCFHE', 'DCHHAFBCADEEEBFEGEED', 'DGFFHBHGGA', 'GCEECBGEHBAHDFFFBHC', 'DBFDAF', 'HDACDHADHECDFHBADF', 'DGAGEDFEBHFEAC', 'FAFBEEAHABA', 'BDGHHDDDEBADG', 'HAFCCADCHDCHDCAGCE', 'AGEGGFHFAECH', 'ADHECDHEAFHG', 'DBCHDDCDFHABEDCBGGDC', 'HEGEEBADCDFHH', 'HABHEFFGEAGDBHADBGFF', 'GBFGFDA', 'FCHHHEAEABBFCHBA', 'AHEFHBH', 'FAAEBDEC', 'HHFEHHB', 'DCGCEC', 'BAHBGGHCEEGD', 'EFBDGEEEAHFBE', 'HHHECFFGACBHHFADFHBF', 'HCGFF', 'DDHEGGEAFHCBA', 'CAGGEEC', 'FEAAC', 'FDBHDAGEBEBAGAA', 'GDBABGHEGACHFF', 'EECBDCCEGBHFCFCDG', 'DFEDGGCCEAFFFAHEDFBH', 'CFFFHHEAAGAACCBADDG', 'CCBBGCADEDDFG', 'HAADAEB', 'EDGAFEHFGHCHDEH', 'HECCFA', 'DEBECDEDDGA', 'HHEAF', 'BGGFHBDBHD', 'AGFGA', 'ECEBDGCCHEHBECAGBEA', 'AEGDFCFBDCBFABFHFAE', 'BBHAAEGAHFECDHHCGFA', 'BDGDGHHEGA', 'AGFGCADCGCHGADGH', 'FHHEFHCBFCDACBDCEGH', 'EDBGDBHFFG', 'CCBBGGGDCFFGHG', 'CHHHGDHGAEEDED', 'ADBCGGGCCADDEGHDAD', 'DDHGDDCFACDGEBCFF', 'AEDDHBEFHDBFDC', 'CBAGEHCCDB', 'EABHABEFADE', 'BGBDBEAHDHHHGF', 'DFFAGBBCFFBECCECCF', 'HBAHHGBDFFHE', 'DFGBDABEAECEBAH', 'ABBDHBFAB', 'CFEEAGA', 'HGFAF', 'DDBGFADBGHHDC', 'GFEFHBEDFCG', 'EABEGGEDDFFFGGDGD', 'AFAHBCAFGGFA', 'BCCGDBDDFB', 'GGGDDEFGFA', 'AAEDCGADEAHHHBGEEBH', 'CCADACFEG', 'AFEEFGAACC', 'EEGAGAD', 'CGCHAACF', 'FFFEFGHGAE', 'CBAECCFEAHHHGCGHBAF', 'ECBEEG', 'GGHCBCADGCBEDAACDEE', 'AFFHCBEFEHDHGCBDFHF', 'FCFEGHFBEFDGACGAC', 'HDHHGGAEHGABDA', 'HFCFAFE', 'HAEBBEBAFDAHB', 'AEBEBC', 'FHGCGFH', 'ACAEFGEAFH', 'EFFDEFEH', 'HCCGBC', 'GGDAEBFBHD', 'DAAHF', 'ABDHFBFGHBHFHDBGDBDC', 'DHFCGACAFEHA', 'CBEABGFAABD', 'FDBGHDGDEADFHCD', 'HHFDDBFFACEFGEAEFDGG', 'FGCGFH', 'DCHGBEFEAGGFG', 'FDGABGGGBDHA', 'GHEEEBHGECAH', 'GDGAHEC', 'ADCAECBDGAEBAAAAHHEB', 'FEBECFBCHCDEDABBF', 'CCADCHDAADGFCCH', 'FFCGEBGEBE', 'DEFHBACGBA', 'HDCEBHDF', 'EADGCBDBAAAAC', 'FCHFCHDGCGDADDDED', 'DAFGAA', 'EFFCGDFHFCBE', 'HFGCAHAFCCFB', 'HBAAHGGHFAEH', 'ADFHGDGHEBCEFHH', 'CECHECGAHCD', 'FBDCCEBFEABEE', 'AAFHAF', 'GBBCBDGGGDDFHADF', 'GGCDBEACEGABAEAB', 'BAAFCDGFFHEDAC', 'CCCFG', 'BHADFCHADCBBG', 'CEEHBAGHBFGGDAFHACGG', 'BEBEHGFHBBGGFHE', 'HBHAFEFHBBFGAHDGEHH', 'EAECEFFBGDHDCACBACHH', 'ADBGFECBGHCBD', 'HCDBAEFEBF', 'BAGFAFACFDHCE', 'DHFDCEFEGGEEGFC', 'BHBAFHFDBEFABHBG', 'EEAGHGHAAFGAEEADGD', 'CBGCGGCBFCHCC', 'GDBFFFBDADHDGEFBHFEF', 'ADHECEABGEF', 'FHCGCCHDGFDEEEDA', 'FCDBGGCGF', 'GBECDC', 'BHBGFFHDG', 'EAFFADAFGBEHAABA', 'HBGCEFDFEHDADDC', 'DDEDFDF', 'ADFBEBFHBFGGHCABGG', 'FDDFDBBAFFFDAGBD', 'EAEAHEFB', 'ADCBGBFBDHCHBFBHHBCC', 'EAHADAAGFB', 'EEFCCHFAEBGFBF', 'DFHBFEDDAEHHG', 'BBEGDDAB', 'EEHDGFBGBB', 'ABBDGBDFCHCFF', 'FBFCCFDA', 'AGBDF', 'EFHBGDABDAADBFGGDB', 'FAFFBAGDH', 'BFDCC', 'HDABAFDECEGAEFFE', 'FEAGBEDGFHBD', 'AEEHDDCC', 'AFBBHDHAAGGGAGHBCA', 'FDCDBABDBGFGAHH', 'CCECFGECFGEBDCD', 'ECHCACGGHAFHEEGGEBHG', 'AFDEFFCBD', 'ECBCBDA', 'HDFHCAAGFCDAEGCG', 'HCHABACBAAHHGHAF', 'GHEHAGAEBAEAHGGGF', 'ADAFAACBEDAGABDBACBE', 'CHBGBFH', 'BBBBFBBCAFEBCG', 'DEHBAFHCCDDGHCAGG', 'GAFEFAFF', 'CGFAACBFEBGDCCACFDHH', 'BBADFHBE', 'ABCDBGEC', 'GGHEDHEHBDACHHBD', 'GEHBAGBCCAACD', 'EBHFECACBG', 'FHHDABBFCBABE', 'DEDHAADAEFFAFADDHEH', 'FFGEDAAFEDCD', 'FDGBCFEBDGFGBHGGHE', 'FHHAEFHCEBBEHEHH', 'ABFED', 'BBGFHCD', 'CHFDA', 'BCBAAAGH', 'EEHAFGGHBEHH', 'FBHBADFBGGDHHGBCDB', 'HDGFBG', 'DEBGCAACACEEGBACFHHB', 'CFHCBECHDH', 'DBDDDFAHC', 'BEBEHFFBFF', 'BCEHFBECFHGG', 'GCDCHDDD', 'EBAHGBFECBHHCA', 'CHCFEDCFHAE', 'GDDEAHGF', 'FEGCGGCEEEHGDCBBA', 'FHGDFBD', 'DEHABBHDGBAADAH', 'HEGEFFBDFDHBEADE', 'AFDFD', 'HBDEBDAH', 'HGFGAD', 'GGEABD', 'FDGCHHBGDFFB', 'GEGHDEGCEDAG', 'DADBEBDDCHHDEEBAHHCC', 'DFADDGFAGEBB', 'ADGEFFCEBHHB', 'HDBBBGCDAGBDAA', 'GDBFAHCGCDCCEF', 'GEFGBADGCEHH', 'DFFABC', 'GBBDEEFHDBGCG', 'ABAHDFHBAFGABGBHGEDD', 'HADBADC', 'EAACAC', 'GAEHFAEFFHE', 'GHFFCGAEGBFFB', 'DBHECGDFAG', 'CEDCEFEEDECGDBFBEGHC', 'ECGEEHFGGHHFAEC', 'FAFGHHAGEDEFF', 'EEDABHHAB', 'ECFCHFGGGGCFHGHHCG', 'FFCEFFEBEDHEG', 'BECBFEGEHGBFGH', 'GEGHGCFCEG', 'DHEEBCDEFGHHDCCBCGC', 'HDCGGFDEDBEBGFBACCD', 'BHAGHCGHGE', 'FBAAFEFEFH', 'GBGDDGAFEBHHC', 'GBAAHFGAHHAGEAG', 'CGCEGDGCB', 'GDDGGHDHCHFDBEACFB', 'EBBACCDAABBAGEHHAF', 'EDHEFEGAACFHEDC', 'FBBDEHGGFCHH', 'CCHFDEEGGF', 'CHFFFCHEAH', 'DHCBDBGCEHGA', 'HHGAAEFAGABGGFD', 'GEAAFCF', 'AAHCHFDBGDG', 'ECEEBBHHAHCDB', 'FBAFCGGGAFCEDCBEGDHH', 'AFAFCGFA', 'GFFEHBEFHCFCECCDBFH', 'GCDEGDCC', 'GCBEE', 'DHFGBCCCFHDCFDEE', 'DABBAFHGCEBEBHHAB', 'DGABDCBECBBCBDGCBF', 'GBECFGFAG', 'BHFBCEEFGEGGBA', 'BAHGBCCGAGAF', 'EEEFFGBCHCB', 'FCHFG', 'CDCAHC', 'AEFCFHABGGEBBDGF', 'CBAFAAEAFDHGBAGGGGA', 'HACCGCBFBBEDHFGEG', 'DAAFCEADDF', 'ABEGFHEDDBEBCDA', 'HBAABFFDBGDAAADHG', 'EDEBDH', 'FDBFEGGHCCEDADDCDAGC', 'BAEGAAFDH', 'AGCHFDCEGBHCGEFFEAAE', 'HHCHHECEC', 'EFBDBCDEFAHGECBDHCHD', 'CCHFHGCDHADGDEB', 'HGBFAFBGFHBGEGGGFFHD', 'BACBBGFHFCEFEHEE', 'GFGABDCHH', 'HDCAHFHFCAEHHHA', 'GDAGEDCFFDDFEHBC', 'EAHGBGC', 'ABCHEDGCBFCDE', 'GFAFBFAECHEHCG', 'BDCCAHGAEDBDABEADCE', 'HFEFECHBGHDAEGHD', 'FHGFHFE', 'FAAAGFH', 'GGCHHCC', 'HHEBAEADDGFHBCDD', 'BHDFADBC', 'GDGDDFFDDEA', 'GEAEGHDE', 'ADGGGEHFFFBHEEDH', 'GGADFEGHHAGDDBG', 'EEHGGFF', 'HHHBHBFCBAHDBBFA', 'AHHACCACEHCHGAABBCF', 'GAFCEBAG', 'HBHCGECGGCFEFCEAACB', 'EAEHEDDFH', 'DAADCEHGGBBAH', 'FFDHHBDG', 'ACEHBCAHHB', 'DHCFBEBFHBCFDBE', 'BEGDHBBGFEDCBAECGADH', 'CGHGDDHFAFFHHFAB', 'DGBGCDCBFEAA', 'DAHHBCDFAH', 'FGCBEGEDBHFFCA', 'EDDGHGBEDBGCDHHBA', 'GFGADBFGBFHEDEAGCDE', 'EADHDCCDEGABAFFGECBG', 'CEFGBAGFBDBF', 'DHCHCHHDBGAHDHFEAG', 'HBEHDDHFFGCA', 'CHAHHHECADHAB', 'CEEDHFB', 'FBGEHFAGGHCAGHGGGGD', 'FFGGDHDFCBGEGEBAE', 'DGCGCABFCDEABD', 'FAAAEAH', 'DBAFECEFAHFGFFCDCEFA', 'FDFFGAEHE', 'HEHGHBCHAAGHBEC', 'DEGBEDECCFFFD', 'GCEGHAGBFABDAEDH', 'CCFGAAHBCCCEDFGED', 'CECEAHGBBFADHCACD', 'FBEGDF', 'BDBGEBEBAFCBDHDFGCG', 'BEFBDCCEHFBBEBAGCABF', 'DGCAGCCC', 'HFABCCAE', 'AGCGADFBAEGGAHDBDCAA', 'HDHCHFDDGBCCCBACE', 'HCCCBC', 'DEHGAHDEFEADEA', 'CBCAF', 'CDDHDDBFGFEBEFE', 'EAECGCFC', 'ECFHABA', 'GBCBGE', 'BDFDADDBGEABFABACA', 'BEBFAGB', 'EFHEHDGHBDEHCDG', 'BCABGDCHAFCABE', 'GHBEEFH', 'BGCFBDFGDHGH', 'GADDCHG', 'CFBCADFEGCCF', 'GBABEG', 'AEEEBH', 'CCCFEDBF', 'DCACHHHFBBEDEEBHEFE', 'GFBBGH', 'CAGHECGBDHACF', 'BBBHDHBGEFDCBGEA', 'BAACCHBHBHDAFF', 'FFEAHGFGHGB', 'CFBGCDHEE', 'FBAEBADEFB', 'BDBDHEDBHDAHGGE', 'FDHHEBDAEB', 'GEBAGHHD', 'BDGBFEFDDBCGCHFHEB', 'HCBFFHEABAE', 'EAAAACHFAA', 'ACDBEEBBGFGBAGDH', 'BECBCACB', 'HGHCDBB', 'AGGFGAEDACHFHH', 'CCADFF', 'BFFCEADHCHBHAGBAG', 'GGEDEGHAAGHDGF', 'EFBHB', 'HEBCECFABAFCFBAFEGGA', 'GDDGB', 'HDGEHFFEGBE', 'DFGHCAFF', 'BHBEHGGCGDGG', 'AHAFCABAB', 'CHBEGGBFADGDGEHHF', 'GBBFCAGEFEBHFEFH', 'DCCGGACCDFD', 'BACGDEAHHC', 'EHABAFGCBHBEDAA', 'DCBDCBGDHEBHGADDA', 'BDEAGAGHDCGFHEFGCH', 'CDCHGFGECFFBABGGBB', 'DCBCADBEHCGHBED', 'CFFHCBHADEBFEDAAADC', 'EEGABFAGEEFDEHHCH', 'FCHCEDCBDDHGFDCGBBC', 'HBFFDDHGEHFCHCEADC', 'FACFCBDB', 'CFBFHAGHBEBGF', 'FCAADDACHBGDGECCH', 'AHBGBDCC', 'HFCEDDCFDD', 'DAFHBGEDBEGGHCAHCB', 'CAGBFH', 'BCBFAGBFBDACBABDGE', 'HABGBFFG', 'HHACFHEDGABBFGCBCBE', 'FEBBCBBGGDE', 'BEAABA', 'EFFDEE', 'GHAEEFABHCCH', 'EGHBEHDFEBAADCH', 'BDAGEABEGDDF', 'FDCFAEEBECHG', 'CACBFEBEFH', 'HFBEFCGG', 'GDDBDAD', 'DEBFECECFHHDE', 'ACHDBGDHBGA', 'GBCGHBAH', 'GEDACFAEDBEHCCCHFC', 'EEDHFBEFBCGEHEFDBF', 'BBAEFHCFC', 'GEHADHA', 'ECABBAABAHHGGAG', 'EBACBGEBDAAFDEGHDDCB', 'FBEDADD', 'ACGHCEAEGB', 'AAHCDEGBHBHADGAABB', 'HFFHHBFGEFCA', 'HEEEDBBFCFEBCDAA', 'EGHHFFAFAGEAAGHADG', 'CHAHCDFEFHG', 'EEDACEFBGEGAD', 'CFFHAACFDBAGDH', 'BEGCBBGCBFDCAE', 'DAHHAFCC', 'ECAHEABF', 'BEFGDAC', 'HABHBDA', 'ECCCDAGC', 'HHBCCDDFH', 'EEBCEGHB', 'ECDCDFH', 'CFAFFCDGGABCBGGD', 'CGHHGAACACHAHA', 'GADEGDBAGCGEEBGHFE', 'FHGHGCDAGHCHAGAH', 'AGHEHBBDAHHEGF', 'CCCGGEDFBCCBCEC', 'BGAGHBCGH', 'HDACHGDBGFGAG', 'DBCDBFAEABGGF', 'HHGFBDEAC', 'CADEADHBD', 'DDHDHAE', 'BHCABD', 'GHCFCBDBFBCECHG', 'GGHCAGDCBBHDFHB', 'EADDAABCBEHBBFGD', 'DAECEBBHBBBDBCGGBFAF', 'EHBEAHGGHAADA', 'HFFFCFGGFCHG', 'CGHHFAE', 'BACGGHDBADDBHC', 'DBGDG', 'AACBDHGGEBD', 'AGFDEFDGGHD', 'GGGDAFHFHADB', 'AEEDBDAHE', 'HFEDAGAFD', 'HECCGCH', 'BBDBFEAFDGDCGGAADGF', 'EBEAEH', 'FACHEFCGHDDDDGGDCEBC', 'CGBFCBBCCBDEFBDCHBA', 'GBGACHAGHHCH', 'DAFBGHABEBDFCEAFFG', 'HEHAAFBAAEEADBA', 'HGECBDFBFCHFHDFCB', 'ACBDCHHCDDBHHEGFCH', 'EHHAHEFFCHA', 'DDBHBBBGCEDCAFBAGAE', 'EDBEDDCCCGEDACFC', 'HEFFBCGC', 'FDFEBCCBGCFHEBFHGCB', 'DBEAEAHGG', 'DACAGFGDHEHFECCB', 'ADDGECBFAGFE', 'AABHCHFHF', 'CBFHAEEFBABE', 'CHGECDEHBHE', 'FCHDHFGBDAGHECBBAC', 'GEHFDGF', 'HHABGEGDABBBG', 'FBHDFEHHGCBBEHEEHGGG', 'HAEFBDDCBGCHBHEBCAE', 'DCDBHC', 'FBBACHCHCGBEHEDFBCGB', 'HAGEHBHEEGFGE', 'HHDHAAGCBE', 'CBACAEFHDEHBA', 'HBEEABDB', 'FADEEDBACACGGFD', 'GBGBCFA', 'DAAACADGDECCABDHG', 'DEHHBGHEDDHFEFB', 'HDACFBGEGGCHGEED', 'CAEDBAGFB', 'FBEGCCBEEDFHGGEDHFE', 'HFEDFEHBDGE', 'BGACBA', 'BEGCCCAABEGAFEDECAEG', 'FBBGCFADEBCFCEBDCAC', 'EGGCHA', 'HBFCHBF', 'HGEGHCHADGDDDCDF', 'EAABGCHEEBC', 'CBECFC', 'HFFDAD', 'BGFAEBGE', 'GGFBDFE', 'CAGDBFDHBGD', 'CHBBGHEBCCEE', 'HGEFHAGEGBADEHHC', 'CAHAFBA', 'ABAGBEBFAD', 'BBFDCHCGH', 'BDHGCFBECADGFGDCE', 'EFDBEGGFFE', 'BGAEBDGGCAHDFCHF', 'FEAFGFBHDDDAF', 'GFFBCHABHADGEDGBCCF', 'HECGBCAAABHEDBDAFHEF', 'HABHDEHDFABBHHEBA', 'HGEGGBHFCFDHHHCCHB', 'ECHGCBDCADGCCED', 'CFBDGAEEHGCECHHGD', 'EAEAHECCADGCDAFCAAE', 'ADEFAAGHGBDDBDHBH', 'FGDFEGHADEHB', 'BGCCEAGBDFHBFGCAH', 'HDABHAHDFEDEDCEDF', 'BFCHBEHBBEE', 'HFGGGGFEHBAGCGDG', 'CDDGECDCHG', 'BCCGCH', 'HFGEHFEHHGFHDFFA', 'BGAEFEAAHBB', 'CCCEECG', 'FDDHGCFH', 'FFBECFGHHEBDDAH', 'FEHFDB', 'DEFAAFDBGHEDEAHHEEE', 'GHGBFFGEDHBF', 'EEFEDCGFFFHCH', 'DDGBCBDBBEBGB', 'HHBBCBDECCBFACDBDG', 'AHFHEHDDFE', 'GBGDCHGFAGFAEFAEBA', 'ACBCDAADFAC', 'CDBBEHEB', 'DFGECCFBEAABEBAACFAD', 'HEDFBEGHB', 'CABAHHAFDDA', 'DEGDH', 'CCDBEGCDADBCEFC', 'BBHABDAAB', 'BEBBFGBAABGGBBDH', 'CCBFDGF', 'CEABEFBDFCFAD', 'FFHDAHF', 'HBBADDFEAFGCEACAHACB', 'GDGDAE', 'GECHCAEFDFDGBDBABEBC', 'HHGCACHDADFFGF', 'HGHCCBBDGGGADCD', 'HBBHACHBBEGGBDBHGAD', 'GFCAAAFBCAEGDDCEEDG', 'FCBHE', 'AHEDGGHBCFEHGB', 'CFGHHAEGG', 'EEFBBHH', 'GBBCGB', 'CHABBFAAHGEBABBFE', 'FCEBAEFGEAGEGAEGCEAC', 'CDGADEFC', 'ABEFHDHECHDFGCCHC', 'BGHBDHEDFGCHD', 'FCCFEGEAECFGFHD', 'HCGBFHEEDDEE', 'HBHHFCDG', 'BDCBHGDFHDAB', 'BBCBDHH', 'EGGEGBEDDFBCEDE', 'HDHBBBBCAE', 'EHGFHCFGAHDGFDAFFEH', 'FBEFBHCHAGCEC', 'FDBHEC', 'BBGGHH', 'GEGGFEFFHG', 'ACECBBCBAHEDAHBE', 'AFGEEBGBBGEAFCHFD', 'ECEGHFHACCE', 'HDFBBEGHDBD', 'DCAHDHEAA', 'ACGBBFGBAGHHFCHHEHD', 'EBDDCHGDFEB', 'CEDCE', 'EDCHDCGEFFEABCDFEFB', 'DHBBGHFBFAHBFFFABFHA', 'EEHAGEAEAHDEEFGD', 'DFEGACDEBEBDDBEBE', 'FCGFFBAAGHH', 'GHCADDDAHH', 'GGFDECEDBHFCEFHGAD', 'ACGBHFAHDC', 'AEHBCDACCFAC', 'FGEDFDFEAEADHDEED', 'EEFHEGGEEEEAC', 'AACEDHEGHCFCFA', 'AHCDAGFG', 'GBBHF', 'DCECFADEC', 'BBBFBFFE', 'EGGFEBGGDCFGG', 'DGFBDBCBFHADAGCAFHHB', 'EFCBAEHAHHDHHFF', 'BCHDGGGDAD', 'EBFBBAAA', 'DFAFCFGFFBC', 'HFHDEGEDDAFADEDCBBAF', 'CHEDDEGDBDEHCFA', 'AEHGBCBCDHGEACAE', 'DEGABFB', 'FDCBG', 'EFFDBFGHACAEAAD', 'HEHDH', 'DBBGB', 'FGCCEEBFBGABCH', 'CEAFC', 'CFGFBEE', 'CEAHHDAHCGBGAFA', 'FFHBAAGEB', 'HHFCHHFDEBB', 'GBCFHHEHHDAAEHBFHEA', 'AAFBGBGGFFFEAFHEACF', 'GAGBGEAHDEFEE', 'ECADEBHDCEAAGA', 'HBBGECFBAFGHHED', 'DBGHCCBCABHEDADGAH', 'DCDGGGDFFAHACHBECAC', 'FDCHFCEBGGFEHBEDE', 'FAECAHDHDG', 'AAADEGCCBHHFGFACHGF', 'BFEGAAFH', 'FGHEADCGBABH', 'DGEBBFAGFDDD', 'BEHDHAFFEEADAHC', 'BGGAGHGDDHBECD', 'ABFBCFA', 'CHGHGCFD', 'BBBFCGCDEBAFCGHACC', 'FGBDFBFEFEEEECABHBB', 'EGFAEHHEGFEFHAAACFA', 'DEGEBBCGACFFF', 'ABBBGBHAHGCBGAD', 'HBEBCHFDFHGC', 'CFBDACAFACAF', 'DCHCFHEEABDCCAFGBEGF', 'AHFHBC', 'GBEDHDDCCGEEACHA', 'HGEABAEDB', 'CCCEHGHHHCHFDAH', 'AFFGDGHFGDABBH', 'AEHGBECHABFAGDHCHDGD', 'CDCABBFHEGCHBG', 'HFGAFHCGEGE', 'DHBEHAGF', 'ADEEAHBDEAAGHADAHFFD', 'EEGHH', 'CGDDEGGCAAF', 'ACDFEGFEH', 'AGBFF', 'DEFFGHE', 'CHAEBA', 'CDEBCCGHE', 'DGHGBEDCCEH', 'GDFDHEHHGFEHCCBEEG', 'FACEADFAFCCECEBA', 'HDHHBECEGGGGAGF', 'AGEDFGDHBF', 'CGGGEFCFGHFCDCAD', 'DBBCDE', 'BDFHFEAB', 'BCHEDEECGEFDEHA', 'EBHFH', 'DDCCADHAHAA', 'AEBAHDCCBGBAFGGAEEG', 'GBDDFAHFAAFDBAGG', 'CHCEBEFGAGBBCFEEDDF', 'HFGCHEEGH', 'DEBFBADFFCCAH', 'AGHGDGFEAHBCCFFD', 'EDGDEF', 'GBECEGEFGFD', 'FFAFAGF', 'HAEDECHGFAEAE', 'BAFEFGAACEACDDEBB', 'CCBCBCGBGHCGEBFBGEAF', 'FBEBFACBGAFHG', 'ECAFA', 'CGBGDEDACCEFHHDBE', 'CBECFHBC', 'DBHCGBDDBEDH', 'BBDFDDGG', 'CFHFGGCEFCAG', 'FHEGECFBDCGDG', 'EBCBHFHCBBHFGAAABA', 'CEDBGG', 'FEHGFCABDBD', 'FHFCAACFEC', 'BEHBGEHCAHCBHD', 'CAABBGGEEFBFB', 'HDHBECABEHDDF', 'EEHCAAACEDCFF', 'FBFEDHE', 'CDGBCABEFG', 'GFFADHBDDACFHECAHDGC', 'HDBFGHBEDDBEGFEC', 'GFAEHFEGCAGGBAGBFAB', 'ABDBACADADFHFCHAEEH', 'GEGEAECFEEFEEBFH', 'BFFFDDBACG', 'FFGGEGGCHFDFFH', 'GBDBFGHGDDFDAGADBDD', 'GFAEBHH', 'EDDCFAHEDCFHDHB', 'GADFBCAH', 'CHDBEBBDAFBFGHDCCG', 'GCBCFCG', 'DGCDGFEDBHFFBDH', 'AEFHHDDGGBH', 'BDHACHDAH', 'HCDDHBAEGBFGEEDBABAG', 'HDCDBBHBEGHDDFBHACE', 'AEAGDDE', 'AEGDAGCBDFEFEAGEHHDG', 'HCBEBFFBHAHCAACHEHG', 'HCADADGAEEEHCCDCCBA', 'EBBACDFAFBA', 'GHACBBFBHADHDEB', 'AHAEG', 'EGGBAGEBEBACAGHDGB', 'FFCDFHAAFFHG', 'FAHDEAGHH', 'HEGECBGACDDDDABFCHHC', 'CDADFEAHEGH', 'CDCCAEG', 'DBHBDFCCDAGC', 'CHEECFCAB', 'DBEEBF', 'BCHFE', 'CFCECFBF', 'FAHBGADFDDEAHCGFBDCF', 'FGBDHD', 'GGGDGADFCAEECHGCFFA', 'HGHCFBGADBABBFBBHFB', 'HEDCEG', 'ECBEHBHEECBBHADFBC', 'GHGBACGBAFEBDHHHEGAF', 'GDDBAFFBFGBCFBCFC', 'HGAGBGGBGBECCFDH', 'EHDCCDEDD', 'AACAHHBDHACB', 'CHBFDFAB', 'BEABGACFGDFC', 'BDHBBAAE', 'GBACEHCHGGDEG', 'HADCBG', 'EFCFAEEE', 'GBDEHEAG', 'GEBABHHADHABGFHG', 'HGDADDCGHCCDGCADEA', 'GCGHBGHEFFC', 'AEADDDEBFGCCHECEAG', 'CAGFGGFAABBA', 'HEAFG', 'HEFBHCAGBEHDH', 'EAFDHFHBCGBHCGCHEHF', 'HAEAGDFFBFCDBGB', 'DEBDCHHCFDAHGEA', 'BCDDGEBFCHGAHBBGBGFC', 'EHHGAEBF', 'FHBGEAGCDAH', 'FDCABFACEGHCDF', 'EFAECBBCGHHAHHE', 'DFABBCGBHCFH', 'CEAAHHDGHBGB', 'AFBAH', 'CEAGCHAAFHAAHCGAEGBB', 'HEGDHFAFDEGB', 'AEFHABFFCCFDEBAFHCDG', 'EBCGBBAGHBGEAHDE', 'FBDEDCHDAGGBADDCEDE', 'GCBACFBFGFEADFA', 'CBCCB', 'HGAAHDHDGHHCFDH', 'DCADFHDGBDCGD', 'FGHHBHAHCBCG', 'FHFCABCHAD', 'ECCBHEBEFHBEFEGBBCB', 'CBEAGCEDBBHCCAB', 'DDBHCDBHDEDE', 'FBEFEAHBFF', 'FGHEDABE', 'ABHCBBCB', 'HBCFDEGCCEAAGDFEG', 'HDHHHEBAEFADDEBEE', 'GFDFFEBHGGHGGC', 'DDDAEAHHCEA', 'CBGDCGB', 'BDAFDFA', 'BAFAHEGCBEC', 'AEAGGEBFAB', 'BHEGCDDFEGH', 'GHEEHHEEBA', 'FAHGA', 'FCAAG', 'ABDBFBDCAGFCHCBBEAG', 'DEGECBHDHECEDCBHEFFC', 'DGGHGCHABB', 'AHDHHFGDGGHABAG', 'HBGEDFFBFFBAAHCDCDH', 'GCABFEGAE', 'CGGGF', 'CACFDEFBDHH', 'EDHAHH', 'ABACAADD', 'EDEBADBDFGHEHABADHAC', 'CCEDFCHACBAFEH', 'DCCBBCEGF', 'CFECHHEE', 'HFEHFFCHGH', 'GFFCDCEBDBBAAFGBCGA', 'AFBGDEGDFCAHAG', 'FGEGCEFGGHEEECE', 'DBEDAABCD', 'EHBBFGBGDGBFECDACGHD', 'FCDBBFFCA', 'HHACGHGHG', 'BAACEBGDFDHH', 'FFGEABFEAAHDEHACFDHC', 'DFGFEABG', 'DFECFABDEDB', 'BGBDFEGEA', 'ECAHG', 'FBGHDC', 'EAEGHDHFACFGEDAGHFB', 'HCDGDHBAFGAEGEDDHG', 'CHEGHDABDBEBEBDG', 'BCEGADDGDBAEHBFB', 'BFFDEFEBHCFHGFHCCDH', 'FGDAAABC', 'CBBHHEDFAAGCFACBGB', 'ABCHFBEDGAGEA', 'FFGACF', 'CDFFGFFEEACBFHFDC', 'FGFBECAACCDBFBGEHFG', 'EBHHBCD', 'CBEFD', 'CEGEAEGHDE', 'DBFEFBCEFAEFAGFB', 'DFFFABDF', 'EBCEBEADCCGGDCHDG', 'ABBCCHBACACDFA', 'BEHCADG', 'HFDBGHB', 'FAGEBDHECBFCFGFB', 'BFFADAAHF', 'HGCBGFBHCEBEEGCFBDCF', 'EFBAH', 'BCGDDGDHEG', 'EDGEHAGAFFGECHCF', 'FBCDCDDHADG', 'FBADFGGDFABADBGE', 'CGFGBEDA', 'HECHFDBEDDC', 'BHFBBDHHBD', 'EDAEGDBCGAECHA', 'EFBDHEHEGECAGAE', 'FHBCAHDFCBEDGBGHHFHE', 'DACBCFHHEFGE', 'ADFFAFCDCCHAAC', 'EFBAGE', 'CFFFCCDEGCEFACD', 'AEHDDEDGGCCGBD', 'AHBAHAGDFECBGEH', 'DDHHADC', 'HEDBHCB', 'ECFFCHGBEEH', 'FFFHGBGH', 'DGFBBFGEFFCC', 'EGBGCBFBHB', 'EEHHDB', 'GCEDB', 'FHHFGGFDC', 'HFHCEH', 'HCCAFCAFEAHDDGHBBDFE', 'BGABBGFGHAHGAB', 'ACFEGBCBEGBAEEGEBGAC', 'CDFCDGAB', 'DBAHHF', 'ECDDEGDAEFFHHAB', 'CBAAFECAEAFGDGC', 'CFADFAHE', 'HFCEBBHCFEACA', 'EBEEEAACGECBGBEEAGCD', 'BGDCGAFHC', 'CECAEFGFAAGHDCA', 'HEHFECFGGBDDBDECB', 'DHFBGDAEDFCGAFC', 'GDHFGDGCGGF', 'GAACAHHCDACDDGEDD', 'CGEAGCAEGADHAAHDA', 'AGHAGGFHBGAD', 'HFBGBAAEEDGAEEECGAGF', 'FGGEFBFAB', 'HCDFAAEBBFFFDDGAD', 'FGDFAEHBG', 'FDDHFDAG', 'GHBDADBCBBH', 'HEBCGFGHABEDGDCBCBBF', 'ACFHHEGDEHAFBDCCEFH', 'BEGFCD', 'HDGBHCECHH', 'FGHHF', 'HAEEAECEBH', 'BFDCGGBFGB', 'BBBADHAC', 'EGDGBAEFDGDEDFFCEC', 'ACEHFFDHGFGB', 'DFHHGHFHHEDDEGEGB', 'DBHCCFADBGCAGEB', 'GHAEBGAB', 'EDGHDBFEB', 'EDBCA', 'FDGBBDFBCHFBGHEEADG', 'GADEFCEFDGGFFC', 'AGDADCEFBDHDDCCHHFC', 'ECHBDCEBBEEDCCEBABEC', 'ADCBCCHHHFDGEHDB', 'HABCGEFE', 'ADDFDFEGBDECGF', 'HHHDBFCFGHDBEBEH', 'CCGCGBAFF', 'EDCGHHAGBABDHEGEE', 'HCEDDGG', 'HHHBFGCH', 'EDAGECEEBBADFG', 'HDBCGFCHAEFDBEFCB', 'DDEHFFFDEBBF', 'GBEGGCDBHH', 'FAEHEHCHB', 'FACCFADDCBCFGCDF', 'GDDCCHGHF', 'HGAADACFB', 'GAGAFDABBGAGBFFEAAF', 'BABACCHEADBGGCFFBACG', 'HEHHCEBDHCADC', 'BAACCC', 'FFCGFGEHEB', 'EFHHFBCCGEHCA', 'DEFHFDACBFDEC', 'ABHDECCEDC', 'BEAFFGEHHDCEAFGEDAAB', 'GHAECEEHEGGHBEECF', 'DHEHFDBGE', 'ADACCDHAFDGCEE', 'CHFEBCDFGBD', 'FEECBBDB', 'ABHFBHGEH', 'GDCFFHDCCBDHDF', 'ABFECBGGDAB', 'BAGGFDAEHH', 'CEHEDCDDC', 'BFACA', 'EHEEGDFF', 'FEHCHAFAHDFCH', 'CHCDHCHC', 'EHADGDFDCEABABHHHCE', 'GGHGBAEBEEHBECDFG', 'CCEABG', 'EHGGEAEAGHEBDFE', 'DBEBFEAHADGADECGBEH', 'FAGBFEEBCCCHBHCEFG', 'DHDFHHHBFHDCEEB', 'HFDFGDF', 'AGFCHHCEA', 'BFCBEEAHDEGHC', 'GAFBEDGHADCFHHH', 'CCAEFFDFDDACECBB', 'EBDHAA', 'FECDCEH', 'DHBHCA', 'HFBAECHHHABCCFAD', 'HAAHHACGEBBGFHEAAF', 'BCEFCAGA', 'GCCBFAEHAC', 'GDADGBAFFCABFCFBD', 'AAHEBEHF', 'HCEFGEGHD', 'DCCGEAGDGHHDHADAGHE', 'GHEHEBG', 'BHDCH', 'DDAEEFFEBHFBFGFCDAH', 'DEEDFGBAFB', 'EFDHGDFBCBDCAABCBHH', 'CBEFFCGHDCFFCC', 'DGACGFFGAGA', 'FGCACADBDHGFECBH', 'BADACHHFC', 'HBCCF', 'FHBCAF', 'BHGFDB', 'FHDGGCCAAF', 'BGACHFACCH', 'HBGCGHADHBDAFCHG', 'ABBECCACCEDBAAG', 'DFEDEDFABHAHEF', 'GBEFEEEEDHCBAH', 'FAGCCF', 'HAEEEBEDG', 'GDCFGHFBGBAEFDFFH', 'HEEFAHF', 'HHCHEDFGFFECGFCDFH', 'HHHGDAEBGHHBBGBAGFD', 'BDGAHE', 'CGBHCGBBBCCGDGH', 'ECAGCDEBGABEBGEE', 'DCGCEE', 'AEDEA', 'BGFHHHDFGHG', 'BCGFGE', 'HHABDFEEFBAB', 'CDDHCBEFABBBAHF', 'AGCBDFC', 'HAHCDBBEFCFAGAGBEEFG', 'DFGEGEFFBBDFHGEHGA', 'BGCHCA', 'HCFCDAABHFDHDAAACB', 'GFCCFAFEFGBAD', 'HCGCHFCHHCEDCDE', 'DFFEHBCEEDCDHD', 'BFEDECDDHDDEEA', 'BBABFCHEBGG', 'GGHCFCAGGHHAFECAD', 'FHAGAGDDFABFFGF', 'EGAFFHHBCHBFAGCD', 'EEHHDFCEH', 'BCGAEGGHGBEHAEBF', 'BBDFBEGGFGAEGAHDE', 'GGAHBCHBA', 'FHDGHGFHDD', 'DEACAFGCBCGD', 'CAFHAFGBECABBECCCEA', 'HBGAFBCFAG', 'CEHGHCCGE', 'AGDCEBCCBD', 'EDEAHCCFGBEDDEEF', 'AGDAGCBCGDGDEGG', 'DGABDGFDAG', 'GDABBFBACBACFBDE', 'CDDGGBFHGGCEFHAC', 'HFCAHGCFCBCEA', 'DCFBDAGEAGCHGDAH', 'BCCFED', 'FBBCGGEBCAHAHACG', 'AGDADE', 'HBDGBGFAGCDGHGD', 'FDHADDAG', 'BFBACEFGE', 'CEBAFCB', 'GGDHGCGCFGGDBCF', 'GBDHCEC', 'BACEACEAGCBGB', 'BGCAHB', 'CABDHH', 'EBHGDBEGAADCGFAFBDFA', 'DDECEFHH', 'BGGGDBBFFCFAH', 'FBAFCCEBECBDA', 'FCBFCAAFBEHEACFG', 'DGBGCFF', 'CHHCEHFB', 'AAFDGBGCDBDDGB', 'HECDABGCHFGDHDFGFB', 'GFFBADDCCFCBCF', 'CAHBB', 'GBEBCBFHH', 'AFFAEGDFBFEBB', 'AEGADGFEFEHAHFGEA', 'ABDBABAHFEGGDHHHF', 'DBBAFBC', 'CHDBEAHEHAGBEG', 'GFCFFHCGAGGC', 'ADFBEEGGHFEFEG', 'GCCDGHGH', 'HECHEGC', 'EDFFBFGEE', 'DCDDGD', 'FHDHEDAFHBFCB', 'CHGBACHCGFFEAEAD', 'EBEHEH', 'CCADF', 'ABDEH', 'FDECDDDBEFGAGDFEDCCH', 'HEEGHFGABCEDFAH', 'GAAGFB', 'ACGDDEH', 'DEEDACEDDBFHHBFEFEC', 'BGFBHF', 'GBGCADDFABFEDEF', 'FHDGDCCAH', 'CAHFHFCABAGHGG', 'ECACDEB', 'EHAHAGBAAFABHDAE', 'FGDHCBCC', 'EGECFFBHDD', 'CAEDAEEAAHHHBAFGCE', 'HABCCACDGHGEAAGFC', 'EGGBHC', 'EBDBBEAGFGCADABFGGF', 'ADFDACFBHAAHCBFBGCC', 'FBABFAEEDCF', 'CABCDGFCHEFEDHGEEH', 'DADGE', 'CHGHAEABHHCGCFDAG', 'BDGCCAACDGGG', 'HAGCEAGAFDDGHCDHCCHF', 'EGDEHEHBDFHH', 'CBFBABEEE', 'AFCHBEH', 'HEDECBGHBDBC', 'DAGEBACFECEFEFFFF', 'CDEFEFHDFDFEHCFB', 'FAFDAEDAEBHBFFB', 'FEEGBDDAEBBF', 'AECDHBHE', 'HBAAEFDBBEABEFFABD', 'DDEFEECFC', 'AAACBFGEGCAFFAHG', 'DFGDAFEDGCFDBE', 'DAFFDHFHCFGECFEAHE', 'HBHFDFCHAHGFADDBEFF', 'HGEACBFFCAFHCHGEB', 'HEAFBCF', 'CHFAE', 'CADEADBDHGAEFADCCD', 'AGDFGBFCDGCE', 'CBFFGHABA', 'HFFHEBHAFECDDA', 'DGEBCCCFBACGCCCBE', 'GDDCEFGD', 'BBFHAFADFHCBGEBD', 'FDADDA', 'HGGEHDBBHADAGHBC', 'EFAGADFHAAGGC', 'FBBCCGDCGCEH', 'GEDDBDD', 'FGAHAADA', 'ECGBFDGBFBHDD', 'GGDFGEB', 'BBCBDG', 'AGCGABHA', 'BFAECGHGGEFEA', 'GFHCACHCCACC', 'DACCADCHDAGE', 'BHBCECBCEAACHGBA', 'EFHABGHFFEGBAHDDEACG', 'ADGFHDADFFEAGD', 'ADEAFAHFCHF', 'GGCGC', 'DFDCDGBCEDGDHDDFHEGB', 'FDHBBDHFDBFHDAD', 'HDFEE', 'FFEAGABEGEBCHBG', 'HBEFGADDBFDFC', 'EGADADHBCEHAABBBHG', 'FHFFGFFFDDGCCDFEBDBA', 'FDHCGDABGHFGF', 'EACBHEAEGCACBBAG', 'FGADBDACAFCBC', 'ECFAAA', 'FGAFHDC', 'EHADEG', 'AEDGCGCGCHAEBFEDDCDE', 'EFCHEFHBFDFGDA', 'HEEBGA', 'BCHHFHB', 'GFEEDED', 'AGEDGFCD', 'EGGHCBDACBEC', 'EEAFDFEHBAFBAABHAFE', 'AHDGCDEC', 'CFDGHBFCHACCGDCAHFH', 'ACHGCBBGBHBHFCA', 'HBBDHCEE', 'GFHEFGCHEEHAGF', 'CHFFBFHEAFEDHEDD', 'EFFHHAF', 'HFHCGEFEFFFHHBCCBD', 'BCGEH', 'ECCGEE', 'EDAAAAGADDAAHBCCFDD', 'AHHEBG', 'GCAAABHBCADECFHE', 'GFEACDCCBBCGDF', 'GFGEBBFAFFDHFDDBCEFD', 'AHBACEFFHEH', 'EEAEAECCHEE', 'FGFBEFFGDEDFBCHHCH', 'FBEGDFCADCDD', 'CAHFGGGDFCEHFH', 'HFECAGDEH', 'CAHCAHFAHABBEAGHDHH', 'BCHGEGBDHE', 'GGGBBAEEHFFGB', 'CFADHGACEA', 'CHCBEDCFHDD', 'AECBDDAHFHAFDBHD', 'HBGDAHFDD', 'AHHAGFAACEEHFC', 'CDFAAEECAHDBEFCAECEF', 'HFFFHAHA', 'FBHCDBDEGDBFEHHHDDFE', 'CAEBDBHD', 'DDEGDBCGAEGHCH', 'HFFEDDBACBDDBDBDEH', 'HHCHDBGFH', 'GADCHEDBEDHCDEADAG', 'BFABBEBEBBHD', 'GEAAGEABHCGCE', 'HFFCCBFAADFGFHF', 'CBDABGAGEBD', 'CHFABCDCHDCGEAHGH', 'BFCFBBAAHFGH', 'DGCHDADEC', 'CDDEDFFBADD', 'CEAHH', 'BDHFEEGAFFAGA', 'GCDGHDCA', 'BDAABGHFDGEDDGAD', 'BAHAH', 'BDCDGEBHDFHDBEFDDG', 'BAAGGGEFCDBFEG', 'AFDHFDAH', 'CBGDHEEDGFFBGBHCDDF', 'FHEFCFBDCG', 'BAAEDEDFEEC', 'HDHCHH', 'FEDDFCBHHHFBAAGG', 'GFEDFGAAGAEG', 'GCDHDBHG', 'ADDFABBADFH', 'GHAGBGEEEDCBFHHCHD', 'BBHFDHHBGHGHCCGFEF', 'AFEHBA', 'CDBFDCCGDDAEGDCBFBHD', 'DCHCAAABADEEDEE', 'DDHFHHCHHAHGHFEGCAA', 'HCAGEEHBEAFAH', 'ADHABAAEE', 'FHCBGHH', 'FHCBDFHDDHCHACDAEBAF', 'GFHBCGDGGBABAHBGBCEC', 'HBDFGEEGBCGH', 'BHBHAABFGAAEF', 'FEAHH', 'FEBAHCACCHFGFBCH', 'FACBFBFDECFHD', 'ABFGAFHBEA', 'GCAHDBEDCECAAGFEACDF', 'CBHAEGGDDEGDDFHAEAG', 'GDDAGFDDHECABFHFBBD', 'HBCBGHBAAABE', 'HHDBAHDADCBFDGHD', 'HGFEGDFCBDBABAC', 'FEBDGBB', 'FEDACEDD', 'CDCHCDBDGF', 'AAAFDFBCF', 'BGAGAEFHBCCEGHE', 'CEDHFDCDAADCHFE', 'BHCGBECFFAFFDGA', 'AFADGAHHHECCEDDBEACD', 'GEBHHBHBADCB', 'GEECFGGFGAFDEDHDG', 'DDGDHFDGFGCEDCHEDEGG', 'GFHACBEBACDHHABGGCH', 'EBEAGAAECHHGEEGGD', 'HEDAAABGCCDCCH', 'BFEBH', 'GDAEHEAFFFHD', 'ECABA', 'BBGAFCDECAGCGHE', 'CFHBHCF', 'DADAEFHCADFHDDFD', 'CCFEBCC', 'CBEECFABHFCAFF', 'AHHHHF', 'AEFFCEBGD', 'GABGGFFBCBFEADG', 'BHHBDFBHAFBHBH', 'BDAHHD', 'HFHFCH', 'BABAGF', 'HABHCFFHBFHDGHDBAE', 'EGHAAAHBHH', 'AEDAGBCH', 'FCEBE', 'BAGHAFCGA', 'FEADGEAGFHGBFDAGE', 'DHGFHEE', 'EBFGDAGADH', 'CFFHDFBHEACADFA', 'ECHBGHFGDABGEBH', 'DHEBCGEEE', 'CCAED', 'ECFCDHFFBA', 'DBBHGHDGEGEDCCAFEBEC', 'DEHBDHFFGFABHCHEB', 'GFGEHFDEFAHBHHEDCBH', 'AADFHHDFBCAEFAGGF', 'HGCFH', 'DBBEAAFDGBHAAEDCCBE', 'FBFGC', 'DDDAF', 'EDDBEEFGGDBAAAGCCFGD', 'HBFCDBGAFD', 'HEDCHDAACA', 'GDAGHEHAHEFHHGEDCCG', 'FBEBGCDEDEHBEDDAHFD', 'ACEAHFEH', 'CCAADHFFHAGDDB', 'BBGEFAH', 'FDAHEAEDFDCCE', 'DHADAE', 'FCBBAHGEFFEFCFBA', 'AFBHBHCCHHFB', 'DCGAHFDCAFBBFBCAD', 'GADHBAGACECEFFEH', 'HHABDHAFHFBHEB', 'ADFCAGCGDDH', 'HGHBGHACDCFDBD', 'GAHAF', 'HCDEBBCB', 'CGAEFGDFECAEBECB', 'BCBEDGCHGAHBFDG', 'EFGEGHACF', 'BEEFDBBDAEBHBHFABF', 'DCGGDDCEDCGHFCA', 'GGCGHGDFFFDHGACGF', 'HEDCEECHFBHCECDADAFH', 'AHHGBFEFABEB', 'GDCEAEGGFADGFFFAFCEB', 'GHAHFCFFHFFBFDB', 'CDFCCGDAGHEHHDD', 'FFGAFBH', 'HFCFEGBEFFEBHC', 'FHGGGBHEGBEBBFCGH', 'HGBEFAG', 'HCBHABHC', 'GBHAE', 'FDBBFD', 'DFHHB', 'HHDCDEEFD', 'BBEGFBFAADBBH', 'GFFHB', 'GHBAGDFHBAADBDBDACCA', 'GBHFG', 'EDCHCEFAGBGCCEFBEGHA', 'BECFCBEFHDBHDGHAHF', 'DDEBFHGDACEAEHFD', 'DABCECACF', 'GDGEGGCB', 'AABGF', 'HFHFCDAGGGDEC', 'GDHDA', 'DACBABGC', 'CDGCDEHGHD', 'BBGHDAH', 'CDAAE', 'CEDAHEAGBEHBEFHGBECA', 'CCCCAHDCADAFG', 'GFCEFHGEGHBF', 'FGEAADBAADFBCCCEC', 'GHAHAC', 'ACACDBDDHABGCCH', 'GEDGDED', 'CDHHBAGFDGFBABGCD', 'HADACAG', 'BDCCEGGCECEGCDFAGA', 'DBGCGFBHEFE', 'ACFDACHGCAHEH', 'BGADGB', 'BGHHBAHDE', 'DAFEEFACDAGFGCEFCD', 'GFFEBCCEBHFEFDC', 'CEGCAGBFFFHHHBHCCAAB', 'HBFBCFDFCDEBCGHBDD', 'ECEBCB', 'AHCBD', 'BAGHAEDABGFFCFA', 'BDEBAFAFGBEDFADBBG', 'GGDCBAEF', 'EEABEBCGB', 'DCCCAECBHECEDCGEF', 'GDGCAGDFEAGEGHEAH', 'FHBADFABGFHH', 'EFCDGBFHB', 'GGCDDBCBGHHDDCHCF', 'ABDCBC', 'ACHGHBHDECBHACCDDHE', 'DDBBHEGEFFG', 'DEDABEHDGCB', 'FHABCCAGHAABFGEA', 'CHGADDCCEEDFFCECB', 'FDEACDFEEBFDEFFDEH', 'HEBAEBHHFBACBC', 'EEGDBAEAC', 'EBGCGFEBD', 'GFAFEHEGDABAAH', 'HAHFCAC', 'BEGHFADGFG', 'FEHAAGCHEHGGBAD', 'DDBDHCFBACHF', 'HHADHGAFFBCEEGD', 'HCBGEEFEGHH', 'GEFGFCDEEH', 'HGFCEB', 'GGBBEH', 'FDEECFADHEHBFDFC', 'DGCBCGCFEEGAE', 'GAEBBBHDACFGCA', 'HCCDBGEFHFDHFCB', 'EDCEBDHHCAAEE', 'ABABDBEEAHCAAEH', 'ADAGDHCBACFDGDCB', 'DAHBGCAGEEEG', 'HBGBF', 'GBEAFA', 'HFGBAE', 'GGDDGC', 'FGBAFC', 'CFAHCB', 'GABHGACFFGGEDBFBGH', 'DAEDBH', 'DBBHEBDH', 'EHAGGGCFD', 'DCAACDHCBCHCHA', 'HDAHBFBHECEEGDDB', 'CCGDFB', 'BGEHEFB', 'HFHDADFGEAHCA', 'GDGHE', 'BFEGEFHAGCDGABHFFAB', 'ADGFBABDAEDHCHHCD', 'EBHBHCGHACAFBDE', 'GEGGAGHFCFGFHEEGDHDC', 'GAGHFAGADGFDEH', 'CHEECA', 'CCCHGHHBEDFFA', 'DCCCAC', 'AFFDCAFFFD', 'ECGHAAGCGAGBAFAB', 'ABBHEAEBCEGG', 'EEAAFEHDGHEDGBAFF', 'CCBFCCDHBC', 'FFEFADGEAFHB', 'FGHFBE', 'CHEEDAFBBHEFAA', 'BACFBBBDHBAGFFEBHHBA', 'GEBBCGAEEDBCH', 'GDADEF', 'AGGDDDEFEGFCHB', 'GDFGFGCHGAEEEDBHDH', 'CBCEADFDFACAAGFA', 'DHFHADAGEAEHEHDHBH', 'HHBDEDCFF', 'GCGCBGGFEGBF', 'HCEAFAAEFFCE', 'GHHADAFGHGGAGEDCDH', 'FFHECBGEBFCCDDH', 'EABBDEF', 'AADAGGGDBDGCEDFGCG', 'DBEEAAGEABGFGEB', 'GCHEFBGGAEABDDDG', 'AEEBFEDGDHAACD', 'FFAEEDDCEBDDH', 'CHBBGAABCFAG', 'CHHEHECADFBGEGDG', 'GFHBHAHGBHAG', 'FFFDHDHGEHHHDHFDCDBA', 'BBBHEGDEBHADC', 'HHCECFFEFFC', 'HBDAGGBEHEEHG', 'BDDDBBCGCFHGF', 'FHHCABFABHEFHFGACDFH', 'AADDFEDFDBGACBEDG', 'EABGECEDEEF', 'DFABBDECAAFEGBA', 'CGFABCCBDFGBBDACCD', 'BACCEHFABBDC', 'BCCAGHBA', 'FAFHHBFEGDFCHBH', 'AAAAFCDEAE', 'CADBBDGCCBFBDFCHDB', 'HBDFEFGGEBEGDFDHDGAC', 'DBHCCGFFBCEEDHCF', 'AAFAD', 'EGCFBECAAEDDCDDDBFDE', 'FAGGEHGHCHF', 'DCDDCCHCAHHFEAD', 'CEGCACFDGEDBGGH', 'EDHHEBADH', 'BHBFAFDDG', 'BFFDB', 'DAEFAAHBGGCFGEB', 'FAEGGGH', 'EHHACHBGEB', 'AAHHEGEBFEGBDAG', 'EGCFAEABDBAAD', 'BDABH', 'FGGBECHECEHD', 'ADAGDCCA', 'CGBFGDEGDAH', 'AAFAEBC', 'CBDAFEGEEGGBCAED', 'EEBHDBEGHAEGGH', 'EHBDF', 'BGHEFDDBHADCDCBGC', 'HGAGDBHABCFA', 'CGHEGBDHFGHEC', 'EEFFCGABEHEBHGEFFGGH', 'ACCCACADEABHFBGH', 'HGAHDCB', 'EBADBCHFHCBF', 'CCEAHBBFGHHBECEDAA', 'EFEBCHDFD', 'CCECAHECDDHCDFAAH', 'ECEFAFFFCCDGDEH', 'BEFDBH', 'BCGGFCC', 'EBDCDCBCCGFHE', 'CDHFECEGFDCGGAFFAF', 'EGBFDHCDFHHBHDABEABH', 'EHBHACEDAHFDBABBFHB', 'GGBCFH', 'FABABHHAF', 'ACBEAGBCCFFEGDEDDB', 'GCDHBFEHAAHE', 'AHCGCHGAHEGCDCEFA', 'DADFDBFCFEDHCBCCFHCE', 'EDEGCBCECFABGHB', 'BDBEGDCFEABEHDGEFB', 'AECFGCF', 'GFCDFGAHED', 'BGAFFGHEHGEDHFHFADAA', 'EDGGFCFAHEFCACBGF', 'FGFDACFHAFD', 'CAADDAGDB', 'ABAEGEHEHEDCBBB', 'FEHCFFHAGGHEEG', 'FBHEABBHBG', 'GFFDFDCCFFEED', 'BADFCGAHH', 'AFCAE', 'FBCFE', 'AEBFBADHAFECBGEFAEHC', 'BEDHHABEBDFHFEHDHFCA', 'CDDDDFGGBCDHEDEABAGH', 'CHBDCEFGBBCFBD', 'HEBFHHEBEFBEH', 'EBGDCEGCFEDCF', 'HGBCFDCHAFDFABABCGBG', 'GEBCGF', 'FECEBBHCHAGH', 'HBEHBDGCEHGGDGHEE', 'EDGGAGAFCEHDB', 'CCFBGF', 'HCAEBGGBDFCB', 'FHAGBAFG', 'DEFGDFFG', 'BFGBEBHGEFHFBGD', 'HGGFHHFGDEBFH', 'EFBGEADC', 'GABHDGDDEDEFDFG', 'HBCGBHAEFADFGAEDA', 'FEDABBFFBBHFEHBH', 'FDGGCBE', 'DFEEAHGCFAHE', 'EDHADEEBDFFCCHDBEEE', 'CDABBDCHAFBAA', 'DAHCHGAFFGH', 'DGDBABGAEECAEGCBH', 'AFAHBHBEBCHFBCDEEH', 'AGHDEGEHGAECABHFHFD', 'AAHDDBEGHDGEHFEDFGFB', 'GCFEAGFCFBGHAAH', 'HBCFBAFBEGADHFDE', 'GAHHBHAGFGDGHGEBBAF', 'HDDGCDFE', 'DDBEBH', 'HBFCHEGBHGFCAFAA', 'HFBEDBAFDBGDAGGCB', 'CDCDBGDHBCEHDACF', 'ECAFFHDABEHCBCG', 'CFEHBHEAFFEFDE', 'GCHHHFHFGEFBHGFAD', 'DHBGEGGBF', 'HBGACBG', 'CAABBGHBHDHFB', 'DHFFAHBBAGFEHFEBF', 'EEFDFFFEBHE', 'FACADDHAFFAHAHF', 'GHDDAEBAGDDFEHDBE', 'BEEDDACF', 'BFGCAFGCEDAFDC', 'DHFCDBB', 'DECCABBFGCFGGFHAB', 'FGGHABAHCABDDDACEBB', 'ECDEFCCGADGBE', 'HDGEBB', 'EHHDGEDAHCCGEDGBEHH', 'HGABABHFDC', 'CHHFHDFHECF', 'GGAADGFAGFABADEBF', 'CHFCBDBBBDCCBBEGGA', 'DFCDBHAEGB', 'FBCDDBFHGABFECHADBGF', 'HECFFCHEDFFEH', 'EBCGBFGHHH', 'FHDGDGBDBFCDB', 'CEHFGCFABFGECDGCEABG', 'BACEAGEDCCCFB', 'CHFGHEHGFEECGHFGHHA', 'HCDCCCECD', 'DBDBGBHHEFE', 'AFCHBEFGBEACD', 'GECHHEDAGDGFCHEBD', 'CEDGGBCCCEHADHG', 'BAHADCDB', 'CCFHGFHABBCA', 'FFBACCDEBFFGCAGHA', 'GDDBADEGGEBH', 'HAHHAFDAFCCAD', 'FCCAAHBHEAHA', 'FECABEDDHCFDBE', 'EABDACCFDAHC', 'HHCBBGFFBGAGAHFHHCC', 'HAGHGAED', 'GFAAHGCA', 'GBHDEHAGDHDBBBEHH', 'EBDEGEDAEFEE', 'GCFEF', 'EDDDAGAEEGGDGC', 'DAACDHG', 'AHGCAHCFEHDEDAFAGEC', 'GBFEBHHBBEDEAHEGE', 'FBHGEGGGA', 'FBFFBHGBC', 'EHDDBDBHFEHEAC', 'FCCDHCAHG', 'FEDBGDCG', 'EAEHGBHG', 'HGHHBFDBAD', 'DGEHCDADH', 'CGADCCGHGDECED', 'GBEDAGBHFHCG', 'FEGCEABCCFBHGCCHGGGA', 'CBEHEHHB', 'EDCEDDCFHCHF', 'FADCFGECBB', 'BACFGDD', 'BDACEEHEHGEB', 'AEDCHHCFBBDAFFDCDBH', 'DDHECBDCCBE', 'FBEGEEBFBGGAEACCADG', 'EDDEBHAEBGHBAFG', 'CBEBAEEEBHEE', 'CBDGBE', 'CDFAEGEEACDFHGCBE', 'DHGCFDDFABFDBFCGGCE', 'CFFBBHGAFFEECHHB', 'DHEHACGBEDBCDCCF', 'BFAFGFCCHCDFGEEGHA', 'HCHBDAAAHHHAB', 'CHAHDHHEDABFHE', 'BFFCF', 'BBBDEEEHAFEEFHCCHF', 'ADAGFHDCGCH', 'BDDGAHEHAEFCAGBCG', 'DBBEFECGG', 'GHDAHCHEG', 'CFEDBFBAFEDHAFFHG', 'HEAGBFHAG', 'BCGGGBFABCBHC', 'FFCGDBBDBEEHCFEC', 'HAFDC', 'ACCDECGBF', 'ADAFEBECHBGB', 'AGBDDBBGEFHD', 'BAAAEEGHHGCEFFDCEHEF', 'FHDCAADACHEBGEDFHDBC', 'DEDDEGABHEADEHA', 'HFFHDGHAEE', 'DEFCGF', 'EDAAAGD', 'FEDDDCEAB', 'DFABEHCHEGEEDEACF', 'DCGBEDGBGEHE', 'GCHBAFFAEFGDGCHBBHE', 'DDDBF', 'HAECGC', 'GAGEHDH', 'AEEFHAHHCEDEAGEDFBEA', 'DDCFEEGCFBCHCHGC', 'DEHGCDD', 'HBAFAHB', 'AFEBFEFDHDBHCDEADGE', 'HGHBHHDHBACDFAGHA', 'EFFFFHCD', 'EEFCBBFEEBBACHHCCFCE', 'EAHCCG', 'DCAFABBABAFDHHF', 'FHDAFGCCDAEGEHBHGEHC', 'FEGECHEHACFEGDAB', 'DDDHBEC', 'GGBHCBCHEHHGHGACDD', 'DGGFBAEBAD', 'AHGEDEBDHFH', 'FCHHBAHCEBFH', 'EGHEBBEC', 'EDFBHABEHEDCC', 'ABBBFDBFEECAADEF', 'AAAGCBBFH', 'BCFEDEEEADAHEEGDACC', 'BFAAADHHGEAHGGHB', 'AFCGGH', 'FFAAECFFACBC', 'AEDDHHFCEFHABGHDCHF', 'AFAAEHCHFFHABHED', 'FGCCGGABE', 'HCDDFFFDHHBGDABEEGDG', 'BADEHFAHD', 'GHGABHHCBDH', 'BBBEHDHGGEBABFEEFCC', 'AHHEEHBEG', 'GFFAEADCGAHGGF', 'FAEGGFDC', 'CAGDAAAGCE', 'AFEEHG', 'CCADCCGBG', 'DEGBG', 'GBDCDBAHGHHEB', 'FGEGCFD', 'CFAHHDFBHECEEHAC', 'GCAFHEDDGHCDF', 'DFBBGBDFDDCEDCCEAC', 'GBGEFFFEDDEH', 'DBGHFHHC', 'DBBCBDAGCDBBHAH', 'FBGFDFGGFHDA', 'DCBECEBDDCCDFBH', 'EGHBBCH', 'CFHABFABDEHGCA', 'EBFEBHACEDBGCCAH', 'GHHAAGHEBGGCCEEFDDDG', 'BHCEECAHCABBGFEEAE', 'DBHEDHFEBHFEFBGAG', 'FDCBCDBGDDBFEEHH', 'AEBBHFEEB', 'HDHAAAHGGBG', 'HDHFFEDCF', 'DCGFBCAECCAECHBAFC', 'CEEADHECGFGGEBDHGE', 'ADEBEHEGBFHGGHCGGD', 'CBHDDAEEHHBFCHFF', 'CDBGFBEHFADG', 'BEDCDEDFD', 'CFBDFDDFDCDDEE', 'DGEDBDDDHHCCFFHCCA', 'HCDAGD', 'FHHAAA', 'CECDBGFBBFBCAEEGFFB', 'GEDHDEDGD', 'HEHFHCCDB', 'EFEGDDB', 'CBFHFDC', 'EADGBACFCGHDCCCD', 'EAHECE', 'CBCAADGAACDFADFDBD', 'FCGHCGGCHDEFCEA', 'EDBGEDFEEAH', 'BDCGGF', 'EHFBHGECB', 'BBFEFGBDAGHCCFGBGFFC', 'DBHCEAEBHBBGGHHD', 'ADEGHEEGDDGBEGHAFDFD', 'EDDGFFDGCFHCEBFDBFE', 'BEGFCDDCEBGAGCAEGFCD', 'FHGDCABFGGBGEEBCHA', 'DHAECHFAGGDGEAA', 'EBGGAAHCBHC', 'ECFDFHDGDAFEEAF', 'GBCCEGHFECABHACHGCEG', 'CHECEBDGFD', 'AAEFDGEGAHCAAHFGH', 'EGEDFGAHEGHAD', 'AAEGHG', 'EDAFGFBBEE', 'EHHEFAHHBCCFDDGBF', 'DGBAAECH', 'BGHHG', 'BCDGHCHBBBCEBDDHEDGF', 'ACEHE', 'ACDAGDGDDHCBFCA', 'CFBFEDBDEFBHBCHEAG', 'GEFBHBC', 'CDGBGBEBADC', 'CGHCBBDGEBDHFFCHE', 'HCCAGCFGBDDACEDGGD', 'FBCEFCHGEC', 'FCGADHBEBGACCBA', 'DHFADDDH', 'HHEAHCGBFHHHAHBGECGE', 'CGFGHDGBCGEBFBEBA', 'BFHHCADFGDGC', 'EBAEHACEHGHGAFGCFDAF', 'CBGBFAFEGB', 'HHEGEHFCFFC', 'BGAFGC', 'BFGAADEDDBFH', 'DEAEAEBFDFDDFEGD', 'HFGBFBDE', 'CDDFABBC', 'BFBCAFCCGACGCDC', 'DCDGHDBBDBBGBFHG', 'HDEEDGCF', 'HDCHFCDDDFFDFGCBA', 'CBEEAGDDGCADCG', 'BGEBEGGHGAFHE', 'BDHABDHAAFCDGDABFHEE', 'DBCBB', 'DHFHBHEA', 'CAFBDDBABGFCHCDF', 'HDCGA', 'HGEBCFFECDDFCBFCHG', 'FHEHCHADEFEHHHHEHBF', 'CFFCFCGED', 'CACEEEC', 'BEBCBGCGCE', 'CFAAEFDE', 'HBFBCCGBADCGAEAEFFEA', 'DGGHHHCCBAD', 'BGEEEFGFEHDGBHABFGF', 'FFHDEGACHD', 'GABCCEEBBBBD', 'CHFGADBGFH', 'FCBAE', 'EABHBDHFAFGDCFDCA', 'FGGCFHHDF', 'DABBFBBBAGDECHE', 'DGCGABB', 'GFEAAEBD', 'ADBAEBCCDGBG', 'GBFAAHGHGABE', 'FDCGAG', 'CDGEBABDABAHEECH', 'EHFDHDCAGHGHHDCHAD', 'GEGCFHHBEAHHDD', 'AECFGBDHGAGGGHFHCHCF', 'DDDAHGAAEDAE', 'BAFFGHHFHCECFEE', 'AABDGGFFGEEFCGBCEB', 'GADAHCBGBHEED', 'HEEBFAHF', 'DACAGGDHBBB', 'GAHCADEEDHCD', 'DHAGAADBBECBHHAH', 'AACHFCEE', 'BEBEDDHGGBD', 'HHHDGECEEFABGEC', 'EDGCDFGDCF', 'HCGCDABBDFF', 'HADFDFFFEAHFCC', 'GABBAAFFAHF', 'EEFACDF', 'BAAFBGACCBCFEDDGDC', 'DBDGCFFEGHCAADBGHGG', 'CGHDHGBDGGHB', 'AABHDAGDHDCADFEHAGH', 'BCHFHFFGEBEDGAFE', 'ABHCCDFCCEBDFGH', 'AEGBHC', 'GEEGBC', 'DBFBFFDHGHEAFHGED', 'HACADBEHCHBACBBBCH', 'EGFGAHABDEFGAG', 'DAAAFACAB', 'HGEAA', 'CHBABGBB', 'GDBHE', 'BABEAGDACBGDA', 'DFAEAAAA', 'DEBDGCDHCBGHGDHFBBGH', 'ADHAEEACEBFAF', 'HAAGCBGHCAEFDBHE', 'CDHDCBEFHADBHBGAEC', 'GEHDAGHFCBAE', 'AFAEABECCH', 'BGGAHDFAFA', 'EHEEBFCG', 'HADCHDGHFFHCA', 'BFHADDCFEEHAHHCHDGF', 'FFGBGCFDEHE', 'EDBFCCDAH', 'CADBCGGDHFGHAFBACHAD', 'GFBCAA', 'DFEHDABEGFCGDCBDCDH', 'BGBBDAACBGBACFF', 'EADFFHDFBBCCGHFH', 'ACDAHDFHBGBFGAHBHCD', 'CDFAFFHEEDBDDGG', 'BFFDGBAGHEFADB', 'GGGDDCADBEF', 'FFDHHGHDBHDHF', 'FFACHCDABCAAHEDFH', 'FCGAFDFHDCGHBDECF', 'HBDDB', 'FFBBH', 'BDGGBBGGDCBBADABEBHB', 'BGGAAAACHGAG', 'EAECGBHGBBAFBBCDAFGC', 'HEHFFAHH', 'CAAFGCHGGECFGDB', 'DGHDBCFHHEBHDEC', 'DFAGEFAEEHGHDE', 'FGEFCDDFECE', 'FGDFCA', 'CBFFDEFCGGECCFFFG', 'EFBHBBBCBGB', 'GHEHGHFEGBADFH', 'DDECCCDDCFCBHBGDBFB', 'CDGBFADFCHHBBCBAFC', 'AFFEFBFEEHDCEHBEDF', 'HEEFEGEGDHAEEB', 'EDBAABFBCDHBAE', 'BFDFAH', 'BCFEHF', 'AHHDDDBHCDHCBAE', 'ADFFGDBHBEEAFBDDD', 'BBDHE', 'BFCFGBHHCF', 'CECFCE', 'BFADHHCFHAGGEHFF', 'DGHADHGGFABCDDEDF', 'FHDDCHAGFA', 'HEEBHABBHEACBBFAAA', 'EEEDHHDFD', 'HAHBECDFHBEFHEFFEFA', 'FHCCHDFGDDHFDEBFFD', 'BEEHDCFFFGEAABBB', 'FAGFCBBDAACA', 'AGEAEGHCCH', 'BCGAFGBEEFHAFF', 'BGGBFEACFGCCCG', 'CGHFDADBCEABGBHHCEA', 'HGEDE', 'EGCDBG', 'GCHBHAEHG', 'EFFCFFCGAGFAGACAEFDB', 'DCAHBGECEEBHAHGE', 'BCBHDDBEHHGBGHDCEG', 'EABCEFCEDBF', 'HAFBG', 'EBEHGGAEDBGEAEEECHDE', 'EDBAFHAAGBACDBDHB', 'DDAAGDHBF', 'HFDCHCBCAFGCBAFA', 'FEFEBAA', 'BBCAFCDEDGHEEFCHCDDC', 'BACGGGFBEDDHEEGCB', 'AAEEFGGCBGAGCBCDD', 'AGEAFHCDECA', 'FBHBEEEBAD', 'FGEBDDDCHGCADHGGEFBE', 'FGGAFCHCDBEE', 'FHHBBEFHECBF', 'GHDFGAAAC', 'FBADCBCFDHFFDGC', 'HBCDBF', 'HAFGBFCCGF', 'GFADAG', 'HABFC', 'AEDGGHHFBDADGAGEC', 'CECHG', 'HAAFHA', 'CEHACGAF', 'DAHCBDE', 'EDFFBEGFBG', 'GFGFEAHEHADGDGADE', 'EDGHBFE', 'ABEGBBFDBAEC', 'BBEBB', 'DFFCDCAHCDA', 'DCABDBDEFAFF', 'AECHHFH', 'CADBBHACHBEBHBGHFA', 'CCDFEF', 'BBGGEAEFDDDC', 'HDFAGHHH', 'HGCAAEBFFCBBAGEGCEG', 'CCEACH', 'EFBHFCCGCDABEEEE', 'ECHHDE', 'HFBEF', 'CFCDB', 'GEGEDHBGB', 'HDBABFCDEBEC', 'EAEAABEGFBHBF', 'CBBCBACBEFDD', 'FBBHGEEHFHCFFFEG', 'DBDEFE', 'DAEHGGECDCDHDH', 'BGEFD', 'GGEAECFGDA', 'ACABHDDGC', 'HHCHFFFGBDEAHDAB', 'GEFGE', 'CGDGBHDBFHA', 'AHFEFCCCEADHGEACDADE', 'CCHFHBFAFB', 'FBFDFBEACDBHBDG', 'BGCHDBCHBBH', 'ABHADABCFHBCAGFFGH', 'ACCDEHCFGEGBBHDHF', 'BHHDBB', 'HGHAHHGHGBDCF', 'DHBCHGAH', 'BACGAHEGEBE', 'FEDDFEHAGCEBHCD', 'ABDGHA', 'CBEBDCBBDCECA', 'CBDHEHBDHCABDBGEFGCE', 'DHEHCEGFCGGE', 'CDBGGDFFBEFAAACBBGE', 'EHCDDFABAEBGBCBF', 'DBDCHBEE', 'CFCBAEEDAHF', 'EFDHHFDEABGD', 'CEHHCAEECGBHCDEH', 'CCEDB', 'HFAGCAD', 'EHBECB', 'DGEBFDGHACAB', 'EBADAAHCDHCDG', 'DBFDEDCBBH', 'ADHACCFFCEC', 'HFHAFBEG', 'DAFDAFBBBCFDFCD', 'EGFEHFABFHHBACABCDC', 'GGEFBEBDFA', 'DCBFBHCABBBCGCDFDA', 'FHHBCHDHAE', 'HHHCFDD', 'DGDEEHBEAAB', 'BHEGFGFBE', 'FHGFBHED', 'HCBDABFGDEBHFB', 'AFFHBHEDGHHHEFCHF', 'FEBEHHDAADAA', 'BHECEF', 'EGDGGFEFGGCGEBDGE', 'EEGDAC', 'ADFACHGEFHEGFGGGD', 'CAAADBFFD', 'FCACDEFAAGHDGC', 'HCAGGGH', 'CDCAABBAGFBDDD', 'HAHCA', 'HEABCDHCCCEAD', 'DFHDDEHCCF', 'GEAFBFADCHDA', 'FAEHCGHEHCEBCFBHHC', 'GHCEDBA', 'DECAHH', 'EGHAHFDGGB', 'CDACFDGFEDEFDBCHGHBE', 'EBCHBADEBDDGHHBGB', 'AGDAGGF', 'AAHBAEBHCED', 'ABGHCDBBHGDEEGFFHGDF', 'FFAFDCABFACFCBHEAHAE', 'FFFFHFAA', 'EHCBGD', 'BHFCEHADGBGGDDC', 'GHEBAFGHB', 'HBCCBEHCACGAHCFDBD', 'EBHAHGADCE', 'HBAEFCGCCDFFGED', 'GEFFCCHACEDDDC', 'AGBDDCHGH', 'CACAGDAHDABCCGFAEHFC', 'HDGGGFFFE', 'EHEEBFDA', 'DBBHEHAH', 'EAGFAFAGDBAD', 'BDGADABCFGBDGCGEDCB', 'GFHFFBGEBDBBF', 'EBFAFCECDBE', 'GAFFCBB', 'FEBHECGBDGCGEA', 'CAADGAECGC', 'CCDBCGDAFFAAFBD', 'EEEBFAADD', 'GGHEADAAB', 'ACFFFECD', 'BADDAEGFG', 'DCCEGHBEHGDFDDCGFEC', 'DBAEDEACGEHABEABDHB', 'EDDAGFEABBHC', 'EDAEEDGBDGFFCCCBECFC', 'HGDDCAHE', 'EEFEADFDGABDEABEBGH', 'GHAFABAEF', 'FCDHFA', 'AGEGAHGGGEC', 'AHEBEGCFHBDG', 'GADCABFAEAECHHB', 'GBCEBDGHBH', 'BEAGEABBDAEBBEFCEEGF', 'ACFAHHGFFDCGBAGGEB', 'AGAFCHGFDGBF', 'DCHDGFF', 'FGDFADBCCHAEAGGA', 'CBEDHDFEGAAE', 'GDDCFAABEGD', 'AFGDEBGAEGEEDF', 'HDCEBBDDHHCCC', 'DDDFDGFGHACAFFAGAFEE', 'FCDHGDAGH', 'HEFGFFFDGBEGAFE', 'GHEEAGA', 'CGBBCDCCH', 'DHBFAFCACCEACBCCD', 'ADADF', 'HCEBCAAGADBGHG', 'HCAFHEBGGCFFABHGGABA', 'GHGFDEHEFADCDHADAH', 'AAHBEBHE', 'ABDAF', 'GAHACHDEE', 'GEEBCB', 'AFGADGDDGGBEH', 'HFBCGDGCDHDCFDDFFH', 'CGHHGHBABC', 'FDDDEAAHEFDB', 'EBECBHAEDEAADG', 'AFDDHABFHFEBD', 'FEHGGECDHDDHBF', 'AAAABFBHDADHFGAC', 'FGCHFAEHA', 'AFHFHECGCFAGG', 'BGGCC', 'FFABFGGHCCABBHA', 'FCCDBGCGABHAHEE', 'CGDAGE', 'BBABFDFC', 'BADCHBEBHFDAFABGCCD', 'FHCBFGDBDBFCDDFBCAB', 'GHFEFFE', 'DHGAGECBHEH', 'GEEGDECACFDHBH', 'HHFBBGBGAFDCAH', 'CBAEAGGEAE', 'AHCCAF', 'HECAHABAFFEBAHGGDC', 'FHCFCBEED', 'BBCAGDBFHHDDGCEGF', 'ADCHGBD', 'EEFGDGCBHDFGCFFH', 'HBBHDB', 'ABCHHBHAECD', 'DHAGDECBHCAHGEDAH', 'FEFHBAEFEAAFDGCHDG', 'DGFHA', 'HFGGCEFDAFAECD', 'ADDCBFC', 'CBCHGADBF', 'DGBCEECDCFBAG', 'GHCABBBHHAHAGG', 'EBDEDBFBHDAD', 'BDDBBEHGGECFC', 'HCGFCCAABEACFHF', 'BGDBDCCEFCFHDAB', 'BEFABEFDFGGHCCE', 'CACFEHFEHFGDA', 'GEABA', 'BGBGCBAADCGDFAEDHDG', 'FBGADHACEBDCHA', 'HFDHEB', 'HDCDADDGHGGEEGFDEG', 'BAEHEGBBCCFBDGCF', 'FDBGHFA', 'BABCGEAACACDBGBD', 'FGFHH', 'DGGCBEDA', 'BFGHGEBBEDBEBFAAFCEC', 'GHEGHHHBBEGBBGEAEFBH', 'FFHGDDDCHACEG', 'DFFCEFHFEDDFCFEAFCA', 'BBBGDBFGAA', 'CGACBFEHGF', 'FEBFDHCDFCA', 'CDGCFDCBFDCHHDDACAD', 'EBGCBBEB', 'HDHAG', 'CHBEDFDGFHDE', 'FEADBHEBGBGDGED', 'CHFDDADAEEEAHFED', 'AACAHBCAHFGCADFAFADC', 'CECGFDACFHCAFBB', 'CBFDFBFBADCBH', 'HCAGE', 'HGBFCEGDBFBADFC', 'FEBGCACBB', 'HFCEAH', 'AECBFGBFCADHAGEH', 'GFCADAAC', 'HGHHDCGAAAADHFH', 'HEBEEEHHFDBEABG', 'EFAGEEDACHB', 'DGHGAHEGBECFEDA', 'BCBHAHF', 'EAEDHBBCCEFDGHGH', 'ACEHABFGFAGGHHDG', 'GABHCHACGAHCDC', 'EDFEHBEDDEEFGACEG', 'HAHCHFDGABGBHEC', 'HHHCAGCGEAGBEE', 'EHGECDFEBC', 'AFAECDC', 'HAEBBAHDHED', 'CADCHGD', 'EHDCCBDHGA', 'CCECE', 'DFAHFGDEECFEFACACF', 'GEECDEF', 'EDHCHCGHGBG', 'FBCBGDBGCBD', 'EGFFGDEAHD', 'GDBFFADECACAA', 'GDFAGECADGABAABHBDGC', 'DDFCHEBBAAC', 'GFFFEGDGACEAFHEEFE', 'FFCEC', 'GCDCDGHCFBAE', 'CHGDGBBDBGFEBBBCEGE', 'CBFBAABBHBD', 'AACFD', 'DEDHFEGBGGDDABFGAFCH', 'AFBBFGBCBFFCCGB', 'GGADDFFCFAGBDEBHFFBH', 'CDHGGBEEBCEFGG', 'CGFEEFFBABDCHECCGGFF', 'AHBGCEDBBBBDCFA', 'CACDDGAAA', 'HBHBECGCD', 'DFCFFBFAAHDFF', 'FCAEEABCGEHAE', 'CHDEDDFCDBHBHBAEGBC', 'HGCFECGDHDBED', 'CAGHG', 'HFFBFECBBFGCHEEFC', 'HCGAEFEHHAFBBDBGB', 'CGGHBBDHDHD', 'GAEGBDGGFE', 'ECFGADDBDAACHCFDAAG', 'EDHBBGDEAGBDEBDHFD', 'BACDFDHCECDADCHDG', 'DHCACAHC', 'ADEDHHGFD', 'FBBADDHC', 'DBEAHEFGFDBCE', 'DGDGH', 'FEBCDEHHHFACAGDFC', 'CGAAFHHD', 'DGADAHEFBHCFDEHAGHDG', 'FGCEEHEBADECHHHCEGD', 'DFEDFHGBA', 'HCBGCBAEDDGH', 'FBFGDFHDB', 'DHBBDG', 'EBECCEC', 'CDECACCCH', 'GHACHGDBGBDHCDGBFBBF', 'HHBDGCHGBE', 'GEEEEBFGBDGBCEHGAE', 'EFBGEHGCGEB', 'DCBFAA', 'HACAGEFEFEAG', 'BBGDBAFFHGCFGCFBE', 'HEFDADHDHGHHF', 'GFCFFFCGDAB', 'AHAHEFEBGDB', 'BEGGAGAEFE', 'FGAHBAEDBDCGGFA', 'CEBGCEAEEGAAFCCG', 'BEDEGHBDHGHBGECEGG', 'EDGFBDECA', 'CHAEADBEAEBDHEBFBFAA', 'DBCAAHFBHHCGBHC', 'FDDEBFBFF', 'ECGACAFDGADC', 'FFHCFDFGFEFD', 'FHCGHBDDHCAHAGAH', 'CBHDHCHFGFDCGCH', 'HFBGCHDFDAAE', 'BHGEHAEEHHHAHC', 'FFEDDHFHBFCCHC', 'CGEFBFBCEADFGEEH', 'HADEHGCGBEHEGAA', 'GAACDADFBHACAABABAAD', 'EAADGCGBCAGDFF', 'GAAAHGGAACFBD', 'EFDEEBFBGAFHDGBC', 'FAFFDCFBFFHFCBB', 'CFAFDABDHFAFBF', 'FFGFFBDGDHCABG', 'BCCHBFHGHGFEAGHFFEBH', 'FCCEGEE', 'GHABECCBB', 'FBBGFFB', 'FFFAEBA', 'CADDHEGCH', 'FHCDCHCGHHDHFD', 'HDDAGCEAFHBDHB', 'GBEBGBDEFEDGFGHBEF', 'DADHEGADGEDDBDGFAHHC', 'DHHDBFDHBBBCGDBAA', 'CDACBEH', 'GEHGEHEFB', 'HAHCFFCCFABEEDA', 'FGECFHGFGFEHFDAFBC', 'GAAEACEGCCEBB', 'EEHAHHHBEHABGCCCFBA', 'ADFACFF', 'CCBEHGHGBEAAA', 'EFDDBECAEAGE', 'CBAFBGFEHECBHB', 'AHGFDEACCDFEDGBCHGBC', 'DDGCAAGGDEHA', 'GCHCGGBFB', 'HECCAFCDHFAFDA', 'FCAEHAGAEAGH', 'BFDEECCGHDAE', 'HEFCCBFHFBCEDAAHF', 'DCCBDAHA', 'ABACCFAHGFDEFAGFGCG', 'CCGBFHBBBFCFCFGF', 'AHCAGGGEEGACGD', 'FDFGGHFCABBGBAHDECEB', 'BGEGEGFHDDCGG', 'GDGGEDE', 'BHAFFCFFAFEHEFGD', 'DBCFGG', 'CFECDAHD', 'CAGADDDCA', 'AFCCGHFEHEE', 'HCBAFFCE', 'GGGBHFBAFEEH', 'ADBFBCGABHFF', 'EACDBFBGAGAAAH', 'AHEFAHD', 'EBDBGGCACDBHHCBBC', 'EHCCEGFC', 'ADDEBBHCAHACEHFBHBC', 'BGEHFGEGEABC', 'FFBGHFHBEFCB', 'CEGHGBEFEDEBDHB', 'ADAGHFAACDHEAF', 'EFGHG', 'DBBBHDEF', 'GEAEHDFFE', 'AHAHFCAFEABCEEE', 'FCFFHFCCGFFAG', 'EDFFACDBGCBHBD', 'ECFCGEECACGG', 'HAACFHBBA', 'EFGEEHEBGDGAFGCH', 'HCFDAA', 'ECHDGEECFFGAGDGB', 'FEFCDDBCEFEA', 'DAHAFDHED', 'EGCFC', 'DEGEEEEBHAGC', 'BCEEGBG', 'EBDCBHFFHHAA', 'ACHHDBHDDB', 'HGBBACCHHGBCBCEAACEE', 'BBCEGFBDAEAFDBDFADGC', 'BCBGEFGF', 'EBEEABHECCGCCAGCA', 'ECGGFBDBGEAC', 'EBAAACECDAF', 'EFDCD', 'AGGFHGCDDGGCDEDHFEC', 'BFCFFDGF', 'CEGABDCFCFDCCDHCH', 'AAGCDDHEGFGCEGGCDAG', 'EADBCFFBHBDAACB', 'HHBECAFBCCBFAA', 'GDBHFDABEE', 'EGBDBEBFBFGEGH', 'DGHEC', 'BEGBA', 'CGABBHCH', 'FCGGGBEEDEHABAHGDHE', 'EBDHHAA', 'AEBFFAABCEF', 'FFAGBFEEBBGHDHDEHBG', 'BDHGBC', 'HBCGBEDDBCGCEGBCGFF', 'EBDCBBCBCEFGCHCH', 'FBEEDGGFEDFG', 'ABEEBFEECEEFHFDAAG', 'GEGFDFHAEBEGFAGCA', 'FEFGFDHFGDDDFG', 'FGBBDEBFEDFBABBE', 'EDHHGBFEDCCCGBG', 'CHGEDBFEC', 'AAHBGBDHBDCEDBH', 'BFEDCAAF', 'DCDBBACCBCAAADAAFF', 'HBBFFABBBBEGD', 'ADDGEDAHHBF', 'CBBABBEHCBAG', 'DHFCH', 'ECDGBDAB', 'HGDDABGCBHABACDHAHCA', 'GFBFBEGHGGC', 'CFDBGBECDGDACBHEB', 'GDEABCAACGAB', 'CFBBGFHDDACFA', 'ACHHHHFGFBGAADFHF', 'AFGEHAHAHDAFEC', 'AFHCBDABGAEGDEACBC', 'DFCDEACBHCDEEA', 'FEGACEGAFHHEEHEGHFAC', 'FAHBEAEFGCEEHDF', 'CCFAEEHGC', 'FGECDEDEGGFGE', 'AHBHBEBDBAFDCCBF', 'EECHCHFDE', 'FHHGEEDBBECHFFDEBDG', 'DHFCCBEHACG', 'DGGDH', 'ECGBADAEBB', 'EBGCADAFDDBCFEBDHCBF', 'FBGDEAAHCEHFCFHAFBDF', 'EBDBBDBDFDGCDGHCAE', 'CECECFCADGBADDC', 'HAFCBAABD', 'EGGCHDFECFC', 'CGEGDFGEEAEEGGDAB', 'DBACFEAEFFCFBH', 'BBHEAEA', 'HGBAED', 'CDFDFFAHDA', 'FEEBCBFH', 'HEBAAAAD', 'GBHFHG', 'HFAHGCCGD', 'BGBDHEH', 'DADCHAEGHBHCHDECBFGG', 'AHAFFHDBEAGABECBH', 'ECGCDCBAFGDGEE', 'BDFHGHBCFHBCDAHE', 'DEEBFHABHD', 'ECCABCBGFHAFD', 'EGCDCA', 'EADCDCCEB', 'EDCDDAEBFAGA', 'AEHHF', 'CCEBFHBCFBEBB', 'CGDCAA', 'CCAHHECBFED', 'GFCCFCCDAGFAHAFDEDC', 'DBFFAGG', 'GDDCHFCCGCBFDB', 'ABGBBAAGCHGCFHCC', 'FEADEDDHEAFE', 'EFHFGDEGHHACFABHAEBG', 'GFHACDB', 'GHBFEBE', 'CADABECB', 'HFBCAEGDDFEEHDCGGB', 'BGAHGEGGCFAEFCEACC', 'EHHHBBFFDHFDHACDGD', 'FHGGFFGACBDDFB', 'GBGBFBHEEHCDAF', 'HEBFGAB', 'DBHDHAECBG', 'BECHBDCEAHF', 'FCDDAHCDEFDH', 'BAGBBGCBBEFD', 'BGDBFFBDGHEECAEFBC', 'HDCAHGFCHFCGFFBA', 'DCFFGFHGFHAH', 'CFAFBCBHHBGBBG', 'CDAEECECFDEAFEFHG', 'ECDBG', 'ACDAG', 'EBHAFHCBHEFFCHFFFB', 'EACEADDCD', 'FCHABBBADEDG', 'CHEABDFHF', 'CBEFDAEAH', 'EHDFHDAEBAGDFHFB', 'CBHBEH', 'GCGFBGBEFAEAD', 'DCHCFGAAGCACCBGC', 'GGHDBEHH', 'ACHGB', 'DBFCEGEEDHC', 'AHDDFHAG', 'CGAHEFAGBFGHFHFC', 'CAHFGEDEGCEHDBBFECAC', 'HGAEAHHDHHDFHDB', 'GBGBBFAFBCAEEFDHBG', 'CHBGECGCE', 'DCHHBFGBFEDGAFHCG', 'CAFBHCEACBBGAAH', 'DCHGBCBDGEBFBD', 'DDFFCAGCC', 'AEDEADHGBFCEBDGA', 'CCACFFDE', 'CDFGEDGBD', 'ABEGDCABFDFDAHAED', 'DHDHDDH', 'FCFGHAECDEEFCFF', 'BFBDFBHHBDDAAEEDBBA', 'EECEHAGBBCAGECAB', 'CGEFFEH', 'BADDBFHDBHCHDG', 'CCBGFDGFCH', 'DFBFHAEBDGGAADEBGCB', 'HAFFCFFCEACGHECB', 'CEAHGGAEHBEFHF', 'EHDHBF', 'FGAAHECGFBFFGE', 'CBACFCFDCFCB', 'GDGDEAAHGCHEH', 'HDFHA', 'DAEBHCGCDCEGCFCAEC', 'CDDHCACGD', 'GGECDHDFEB', 'GHHFHBGFFBEFDGG', 'CGFBFEGH', 'FGHBECBHDDBFHBEAH', 'GDCFECBGE', 'BGAABCFDEBCB', 'FCDGAAEDGHEEEGBHHEB', 'BCBHBCACDAA', 'HDDGGBCBEFHEHGABHGAA', 'CGGADAEGFHFGHHFDADCD', 'HHCCDAGGAB', 'CFDBHF', 'GHEFECFE', 'ECHGBFGGEBHDAHCBG', 'EFBGECGCHF', 'EEDEE', 'AEADGGDBFDFGGH', 'CDBHBCBHB', 'BACBCEGCCCHFFB', 'BFEAAEFCBCDECBEA', 'CFGEAGAHGGCABGDGDDH', 'GGACDCCAEG', 'BCDGA', 'DEAFAFHEEDHCBECGFDAB', 'GAGBDABCD', 'DGGEG', 'BEEGGFDEABFHHFG', 'HBACBAHECFBAEGGE', 'EEGHGBDDCBFHADBCCBG', 'GDGDAEEGDHDGGADEDGGD', 'EFCABAHE', 'EEAGHDEECEEDHBFDBD', 'GAHHDAGABDBFEBEAFBB', 'HFAGEEGFDEF', 'CEGDDBBBACEC', 'GFDCACCFHBCBEBAHDHEG', 'DDHDAEAHGCBACE', 'HGFBABDFDHFEFA', 'AAGGBHCGBCFECGBGAEF', 'FGGDGADHFBDGCGDA', 'GBHEBEGAHA', 'GEFFCAFFEHHHAE', 'GHDCC', 'CAGDBBDCF', 'DAGHCHBDB', 'BFFEBAHCBCDH', 'BACHHGHGFAEDGFHAACEF', 'EGEHCEHCHAGGAHH', 'DBGHCHADEGFGFGGGH', 'CDFCDAFG', 'FAAAEAADBEGGCHCCHDDF', 'EAGHAFCBDGFBBGGBC', 'FBDEFECHAHEC', 'FGFCDBAFFFB', 'ECGHEACFCDGH', 'HCHAEFABFDAFEGCA', 'GAAGEFBDDHAECB', 'EAFCHEAAEHACBHDAGDD', 'AFGHFBGBHFCFCEC', 'BFACDAHGHAAGBAHCAE', 'AEADFGDBDHGGFBHCG', 'FBFAHEABAADDHFH', 'BEEDDEDEDEEACDEHDHBG', 'EBAAE', 'ABACHBDHAAGHDC', 'AHGDDHFAEGECEDEDBE', 'FABFDAAHEHDB', 'GCFDGAHBHE', 'HGCEFBFHDHB', 'EGFDCDEFEAFGH', 'FFHFAGA', 'BADEFBB', 'EDCAC', 'DDGBBEBH', 'HBGFBHGFFGBGDHDDHAC', 'BEGHHHBECBHDAGGA', 'GCAEAACD', 'GEFGEADACEFBEBCCFFB', 'FBAHDEGADHGCAHGFHC', 'CCHCBBGFEHHG', 'GEHDFDBHFHA', 'DFCHDEHFEDEHFFGH', 'FAHHGBHHBABHCFC', 'EEFHGADEFBEGBBG', 'HCDCBACHEFEAADHDFG', 'CDBEHGAFADEHEFHFDEBE', 'DHHDGAHHBFEGEEBHCE', 'BDHHDBBBGFDDDF', 'FCAED', 'ECGAFGGDFHEBECEBA', 'FEDCACHHEHAGGBCAAC', 'FBGEDAFEDHDGEE', 'HADADGHD', 'EGCDCEF', 'BBHHGCBHHABEBHBHEAD', 'GCFEFEBHFEGGDD', 'BBEGHC', 'HBEAD', 'FFFDG', 'ABGGG', 'DGEFEEHEADHEDFFCCAGE', 'HEBFHFFDABCDBD', 'HHDBBBCF', 'FEFEHFGBHG', 'HCFADEEBFBGACGB', 'FGGCAHEBFDAGBBBBC', 'HDGAEAD', 'ECGFBEACAHHB', 'EABHEFFDGEHFDFCG', 'FFFEEGFA', 'GDCHBHEHDHCHC', 'EDDFGFH', 'DCGGEHHHGEHGEHA', 'HHEBAFGCCGGGEDADAHD', 'DHFDEACEHGHC', 'CDAHFFBDFFGCHHCDAHFA', 'BBDHHGAHC', 'AHHCFDAHGACFF', 'FCAECGGFCECEGADGGH', 'BGGAFHDGDDHADFGCFDC', 'AAGBGFGGAHEGE', 'BBFEDHCHEH', 'HDCHFGGADCEEAC', 'BGBFEFHHFF', 'EDFFACGH', 'EAFDBCAEAABAEAB', 'AEBFDECDEECBEBDCDHB', 'BEDCBCDAFEFAC', 'CGFFBBAH', 'BGFFDBC', 'GAFACFBEB', 'BCCCFHE', 'HEACDC', 'FABBFBFBDGDDACGDF', 'HFBFAAFCDFGF', 'DEDAFDEABHCHD', 'CABBFEEHBAH', 'GEEHDEGF', 'EDHADFBHECFE', 'DGADD', 'FFGBDHC', 'GEGDGDHADACFHA', 'BFBGBFGAAAHAAAFABAGC', 'AEGHBDFFABDEFGDA', 'HDGDECBGCEDBAFHAB', 'CCGFD', 'DDEBABD', 'FHGGGHDHDACCGDGCBH', 'FCBBHGADHAHECGD', 'DAHGFAGFAHDDBE', 'ECFBHA', 'DHCEGFBGDCBD', 'DCFDBDCHGEAAAFF', 'EAHACH', 'HAAHA', 'CGBBA', 'HHDEHH', 'CAHCHBDDBACFAG', 'DGEHEEHHEHBBEGHEGBC', 'DGBGEAFBGHDDBF', 'CFAGEEDACDDHEAFFG', 'EAABCBGBBEEBFHEBGGG', 'CDFCFDG', 'HGFEADHC', 'HCAFFAFBBACEHAFB', 'ACDHD', 'AFCGFEDDBFBFFCBB', 'GEHDDCEEFDABAEC', 'HECBHDHDAFGCGDA', 'BBAECEACFEEHFG', 'HCBABGHCAFAABDGHDACF', 'GGAFEDFEEFFBBGFEBHAB', 'CGDHFADGHHG', 'EAFDBBEHDDCAHEBGEH', 'HAAHEDHBDHAAFBAAAHC', 'FCGHEBBEGHHDHBBGHDE', 'DABHHABAEBACCDEGD', 'FFEBAHCHCAHCDEFH', 'HAGCBABAFEA', 'GGDHAGGABEBDABE', 'CEEHCDBBG', 'GDGEBD', 'FBCHGGCEHBGAGADGDGD', 'BEEGGBCFHFBFHHDCFGDD', 'GFAGAAEFECDGCAG', 'HBDDCH', 'CCHDGCCFCFEABAEFHF', 'DGFACBCDCBBACFDC', 'CBAFGHBECDBAFBFADH', 'HAHEEBFAEHDHEHEF', 'FBCFECFHBFBCDG', 'HGBFFH', 'FHHFBDCEBED', 'FHFDAADHED', 'BBFBBGCDDGB', 'FDCGGACGGCGBDGGDF', 'AGHFCFCFC', 'FHEGE', 'AFEHDGAHHCHEDFBFHCCH', 'AGDCCCABFEAGH', 'DFFBGDHHD', 'AEHHGBGBEDHE', 'HGEHDGDHF', 'AACBFFCFFFAFADBFEC', 'CBAFGGCADDFAHEF', 'CFAEDAEHHGGHHDEA', 'DCEBHBHAH', 'ABEHFCACHF', 'GHCHEHGFFCGGFD', 'ADEFBBFD', 'GGCDG', 'DAFDDEFFGEABEFFF', 'HHDAA', 'DDBGC', 'CCBEDBBBDDGBE', 'FCDFB', 'GECHDAHAFBCF', 'HEBAAH', 'EFACGBDBDFCFADBA', 'GDEHGBAFEBDDFFFCFBHA', 'DEEHCHFGCHBFBDFADC', 'HGHGEGFDDACC', 'BHGGFAECHCEAFBFFFB', 'FDCAACHBBBACHAB', 'HCGDBDBDBBGFAGF', 'HAAFDHGHBFEAHE', 'HFFEE', 'CDFBAHHB', 'HGEAGEBBGCA', 'DFEFDCHEEAFFCFEGBE', 'FDGAHCDHF', 'ADCGAAAGEDH', 'EHGGGGEHHDACEAGHCAFG', 'CEFDHDEB', 'AHECCFHFGEGGHFFHCFAE', 'DFHEEFCHACGHFGBGEDCH', 'EFCCGEFCDAFFGDH', 'BGHFD', 'GAECHCED', 'HFCECDBFEC', 'EHGFHAHCFGDDBCD', 'GFGEED', 'DEBDGDFE', 'FFDBGFCHCAAGC', 'HADBABCBFDE', 'DBHBCG', 'EFDHGBEEFCFCDHDDAB', 'DDEABHCEFE', 'FDGEHBBEDGGAFFFE', 'AEEEGEBHHAFCCA', 'GGHCGDAHAFGDHHF', 'CAHGBDFHFDAH', 'FCBDDHED', 'GBECCGDAFBFHGHHGDF', 'CCEHBHFHCGECCFCFBHCC', 'FGHCGEC', 'AAEBCHGEDFDGGEDF', 'ADCFAFGBFDBDEC', 'HFGDCG', 'DEGHHC', 'EEHGGCGFFHA', 'AECEBCDBECBDDEFHD', 'DFCGFA', 'DEDEFA', 'FFEADBBDFFG', 'GBGFD', 'DHAHBDGHEFHBBGHA', 'AFGCDGFFF', 'DEGGFF', 'EHHADFDCEEDDBADG', 'GDGEC', 'EAFBFHEBHADAA', 'BCHEGGAGDGBDCHC', 'BGGFGDABFFDCCEFDB', 'AFAGEGBHEDBA', 'ABAHDCAAADDBDGCAG', 'BEEDHAEFE', 'GGHGAABFGDCCFDHHDH', 'AAHAEHGGH', 'DGHGBE', 'CCDFCHFAACHB', 'FAGEGGCAHFFHBHABGGB', 'ECAHGBBHGA', 'AHDHG', 'EDADGDBBADHH', 'GBEAAHHCFFD', 'GDEEAAF', 'DAAEACGBFFGF', 'CFCDGCDBEABEHFHACF', 'EBCCABA', 'GHFGACHHFAFFGHHEB', 'CFGFBB', 'FGAFCGAAEFEGC', 'FHHDGHECGCFAFDBH', 'FEFBBGFGHGGCDGGGFG', 'CBGFFB', 'AHFBAEAEE', 'DFEBDACFBDG', 'AHGECAADCGEAFBE', 'EGEEHDEAAFDACCH', 'CGDBBGHCCC', 'GABFFDFEAHCEGHGBGCBF', 'GCBAGAACHCA', 'HABCH', 'BFFFBCDCB', 'GDHAGFAAFBCGD', 'AFEEDHFHDEDHFH', 'EBFHGCDB', 'HCFBAFAACHGCECDCAFE', 'GAHHAABEFCB', 'GHCEBHEBGGBCFAEAGCAG', 'HAFABFEGAFHCBEEAFB', 'HFFGHFFCEAACDEDGHEH', 'HGDGHCFGFECFFADHAHCD', 'DEEBHEDFF', 'HFCBCAADHHHBDCFHHAA', 'FABGFFA', 'BADEFFAABHE', 'HEGGCDGCGDCA', 'EFEFCFGFFAAAED', 'BEFAEHCD', 'GHCEGFHGEFBGHH', 'HBFHDCCEG', 'HAGFEAAFCECDDBGCDG', 'HABDCCGAHGAEEHCGBD', 'HEGBHHCACG', 'BHGDAGHBEHDFFEDFAE', 'DHFCFDBDFGDFGBHBCAF', 'EDHADHDFGEBBGCBDACBH', 'GEBAEACGGGEAF', 'FAADFGEGHCCCDDHEC', 'GFBEHGCHEB', 'HDBCCFHBFEBHEAFA', 'HGGGBBDDFAGHEFEDHHED', 'EBAHBGBCEABFB', 'AABHEACFHBCAFH', 'FDEFHE', 'HFDDAEAD', 'HCEFFCGDFCBAGC', 'ACGCH', 'AHDFBACHAFDBB', 'FGCCDHFDC', 'GDCHEDFCHBACDGBHHGDB', 'BDADCCFADCHHEHFCFCD', 'EFGHBG', 'FFCEBHFEBFGH', 'CEBAAAFCAECAGHABBFF', 'BCDAGA', 'GEEBHAEGBEAFDHAGCCDH', 'ECFDD', 'EBDAAAEAFFBBHHBHF', 'AACHBFDHAGBDBCCHDG', 'FCDFEBGCC', 'BGBFFFGGEDBHFCG', 'AFBEEGBAA', 'FDDBHHGGBE', 'GAEHGFAFACCBADFG', 'BHBGGFHEDG', 'AGADE', 'EDCEHHGHBCEBCEHDGCHC', 'FDAGHDEBDEFFCEHDD', 'EGFHABCFFD', 'BGGCGDAHHFHHEHAHFA', 'GFHAGBGHCDBH', 'HABDBFAFAADAAGH', 'DGDCBCAFAHGECCFB', 'ABDHCHBFEFGFAH', 'CGDBDCGGHAC', 'ADCFFHCE', 'FDECAHFDCFAAAHEAH', 'CEAAGHAFCHGAEA', 'AHBGF', 'HBBHGHGHHGGHB', 'EBEHECCDDBFHBCAADCA', 'FHDGBADECCDACFCF', 'ACCDCEDAAGGEAEDC', 'FADFEAHHA', 'AEHHAHCFADBBDCBDD', 'GCGCEHC', 'CAGGADHHEGGGDGD', 'FHGEFCEDEBB', 'GGDAD', 'AEBHCEBCBGBH', 'HEGFEFBCDFBGECH', 'DGCDHDH', 'DEFCEEBBGHH', 'AABECBGAHH', 'ABFBCD', 'DFGHCEBEFAHEAD', 'GEACHACGHABD', 'DGBEE', 'GGHFGDAF', 'HABFBEBCHDAHEH', 'ADABC', 'AFABAFGFDFGBHHECD', 'AAFAHCFCDEHAFGBE', 'AGCBBEGFBFECGFGGAD', 'CAHEAAHCGAFCBCDGG', 'EGHDFBAFECBEBE', 'GDDHGBAHHEFEAGHFHCC', 'CDEHFG', 'DBACDB', 'AAAHDBEFCDHBDAEADB', 'AGFFBFBAGAGGEHBAAC', 'DCEHCFADFGADFFEFED', 'FCBHBEFEBHB', 'AHCAFGFEGDEFBC', 'GGDHDGHAGBHHCB', 'DAFCCDDAAHDCGAHH', 'EACGADHEBBD', 'CABBBHCGGGHGGFFEHF', 'HEDDHBAB', 'ADBCAEHCA', 'GAFCCCBHA', 'AAHGECDGCDFAAAADEB', 'CABECBBHFECDFEEH', 'DACEAAAHFBDFCF', 'EFDFGDFCAFGEBEGEF', 'DHBFFEDECBHEEFDHEEH', 'FHBEBABDCDGDBDHHAC', 'EFBAGGFC', 'CBDDHABFGEE', 'DHAGFHBCAAEHH', 'BDFEB', 'CHGFBEFFGHBGEGFD', 'GAAFHADAHFGBDDHDE', 'GHDDGCCAG', 'BCGBBACGDHFGDGC', 'AHGHACHFHDECHAEH', 'ACGDBEEHBEFACDDBAAFF', 'AFHCG', 'BFAHH', 'BADCAFBBGE', 'BABHEABHCGCBEBGHF', 'HGFADGHBAAGH', 'CAGFEHEFGG', 'BFDGGEABCH', 'GDDDADDHFEHCG', 'DAABDE', 'HDHFAAAGEHEHFG', 'BDEBEEAHFBEHBHHBBDHA', 'HACCEHGFBDCEAB', 'EBEGFDFFAH', 'CBAFAD', 'FGGHEHFGF', 'FDCFCEHACBF', 'BACHEECCCADAFFDHA', 'GAHEEHAGCGFCACFC', 'HCGHC', 'GGBHCBD', 'DEBADAEFHFB', 'ACEDH', 'DCCFHABHBBCCHBDCDFGB', 'EFDAEACAGACHF', 'ECHDHCEHE', 'DFEHFC', 'AGCCAEH', 'HFFDFECE', 'BCFAEBE', 'AEABGGEBCECFAD', 'GFEAFFGCFABCCH', 'DGADCGCGHEBBAFBGA', 'CDHDDFCHFHHGFB', 'GGEFCCFABBDGHAADBAE', 'HBEGGGHEBCFAFGAEB', 'GCAHAAHAAADBFGCHDB', 'FFFFCG', 'HBAEADGAAHAGBFH', 'ABAAAGHHAHFDG', 'CFABAFFACHEEBE', 'DDHHGEEDBG', 'ECBEFHDFFBAEECGEGF', 'CHGACHBFBBH', 'CAAEFADEC', 'HFDCCCCDDGG', 'BEHGDBCGFCDGCDAF', 'FACAFFBABHFBAH', 'FCGBEGGEADDAGF', 'EECHCEGGCHACBBE', 'ECHDHH', 'HEFEGEADAH', 'CAACBCGF', 'ADAEFCAECAGEGG', 'HEBHEBDFG', 'BDBHDAHFE', 'HGCEFHHGFCB', 'FDHHFEFEDGEB', 'FEHDECDAABFBGB', 'DBGHABEDAFF', 'FDEFFHGAGFEACHGA', 'HBCDEGCEFBFDE', 'BBEHBEHFGAFDFC', 'GCBDBBBDHEDAAE', 'BDBHGEDDFBEAB', 'BBADFGDFFBDA', 'HAAABCHHDCFAFCEGF', 'CBFBAEDDGEAF', 'ADHGGB', 'GGEGA', 'GCHCHCHF', 'CABFCGAFCHHCDFGF', 'AGFFGEFFBBA', 'ACCDEE', 'EGEDBCCCECADHEBEEC', 'GDGBCH', 'GAFCGCCCHDABFCGHCD', 'AGBDFBAEFCG', 'FEBBGDA', 'DCBBEGDDGBFEAHFFHEG', 'EFGFAECDHCDACE', 'DGHADGACAFBBA', 'AACHHFCD', 'BADAAAGCEEEEFHFBDFH', 'DAEFFEHHFEDCFAHDH', 'FGCCFFFEFEEB', 'DGAGDEFFHF', 'GDGDGADCDGAGE', 'CAGFB', 'FEDABDH', 'DGCFBEAABCAAAEGBCCGH', 'EFEFHGB', 'GGDHBCEB', 'HGCHBBBGGHBBEEFC', 'GBHCBC', 'HCBABDFDEBA', 'AFFBABECFDA', 'CGFBAF', 'DCCDAHACFBGEHEHFDG', 'BFBFCAEGCCGCGGHEEC', 'DCEACCEDDGBBCGD', 'DFEGEBCHDF', 'FGDDGGCFA', 'GHDHHFBGCGGDC', 'DHFGBHFDGEAEFEGAECB', 'EEDEAFHFCCEDGBEEE', 'BHHGCHC', 'FEFHGCHGEGAHEDB', 'HGDBCE', 'DCDFEFDGABBDGEEGFA', 'FGHBD', 'HAGBDEEEADCA', 'FCHBBBBADDHDFD', 'HBHDDHHFGFAHFHGBEC', 'FGHHFBHAGEACGBHFC', 'HEEGBBG', 'BBDEAHCABC', 'GAFGCEDFFHABHAADEH', 'CBDHAA', 'BCGGACFCEEDFG', 'GAFFBEHBH', 'FHCAEFH', 'CBGCDAFDHFBEBEGD', 'AGGADGDBBECGFFBFG', 'FAGABFAFHHA', 'DBDBAFDCBDCFC', 'GCFAEAGFH', 'GEDDBFFFFBH', 'FACBACDECHAFEHHD', 'EGFDAFAFAECECD', 'HEHGABAEBABBHFDCHF', 'HDGHHDHGBEBGBFEG', 'BCEFFEHH', 'GHGCCEADBAAFECA', 'DECEBCC', 'CBFFHAC', 'ACCEFCD', 'CBDAEACGEFA', 'BBCAAFGEDGAGEDEACCDE', 'GCGEECABAEDBG', 'HGHGD', 'EFEAGFDGF', 'CFEGDABED', 'FEDBHEEFFGDF', 'CDEGEGBDDHBGAHAA', 'FFCABACDGHEFEHHCG', 'DFFACDECFDACBH', 'DFFAAACDBEAAGFAADFHE', 'CEFHDACGCBDDADDBHEBG', 'FGEABACHEGEAGAD', 'AABEFFCGDFCEC', 'GFGDGGBAFFBDGGFGBCGA', 'AGHFGEEFABGEECEACB', 'CHEHDFCFBFDG', 'BDDDFEHAEAAHHDECA', 'GEBCDFHHGCGDGAFGHB', 'EHGFF', 'HGEFEHHGEHHFEA', 'AEDBH', 'CECCDCGD', 'CDGAAFG', 'DABHGDHEAAFDBFHCHC', 'GGFEDCEHADEEECBBBHCG', 'BCADEGEHGCDBDECACFGF', 'AHCDAHGGGCHBHHHCEHFA', 'EEBBCBDDFAGAD', 'DHDBAADFBCCAEFFAHC', 'AFAADBGHFDCGBH', 'HGHGHFEHDDGHEGBFBA', 'CACHEBHAB', 'FEGECEGAHCCEDDGBDEC', 'CAEHFADDFEEFF', 'BDHCDCFHEFFDBDEFGHHF', 'ECEDBGBCCFCFBGDGGA', 'DHDCBBGF', 'FEHDGEHEHFE', 'CHGGBGCABHFGDA', 'FCEDABAHGEHH', 'DHGEDGCBDDCDBFAGFEDD', 'GACEHADCABAEB', 'BAAHHC', 'DDFBBFGAADCDGDHF', 'EBHBAGHHBHGAHAGEH', 'FDEHBAAGDFAEBEFEBD', 'AEGEFBBDFHAA', 'FADGGH', 'BAABGAGEHDFGF', 'HFGDBEGEDBBGCBHDEE', 'CEBADHG', 'BBDAGC', 'HAEFGGFFCFBBEF', 'GAHBEAGBEBBGAEHDFFD', 'AFFBFEBFAEEDDDF', 'CHFFDEAEDCFF', 'GCEDEDB', 'FGAAEGD', 'DFCCBEAEH', 'EFHHDGCBCAHCCFDE', 'ECFEBFDBDGCAAFBAFABA', 'BHAFHBH', 'CDHBFDAFGEHDBGBEH', 'DGGFEDBGDHHDGH', 'BCGGCGHFHF', 'GBEEDHCFGDHCHFCA', 'GCDBEFGFFHBA', 'HABGDCCB', 'CEDFGAFBGFG', 'CFAAFGGHDHD', 'HBADBAEEGDFHAFDH', 'HDFEAECCEFFCHGDDB', 'EGHEHBAAACCAFCH', 'HBGDGFCAEDDGAEEGC', 'EAHECCDGCFBAHGBC', 'ACDFBDEFEFDGFG', 'HCAEDDACBFDAFEHA', 'GHAAACEBG', 'GDEHDAHEHEHCGA', 'DFDHDHFFFCC', 'HCDCFACBBBHDHGEGCEFD', 'AADHHH', 'HHGBEGACBFEBDEHH', 'BFGHH', 'FBHCB', 'EHFAAGH', 'GBFECEFGCBGAHEAGBCHD', 'CDEDCECBCHHAGCBEFCHH', 'CBBECBHEHHDFECAB', 'HHEAEGGDF', 'BGHAEDDF', 'AFCBECCBFCH', 'DBHGBCDGFBABHEFHAHE', 'DBFGFCFEAEHCACCFAG', 'BFABAEEDCCCDEGHH', 'ECFFAHE', 'FAGDGF', 'EHHHGEDAEEBCDDGBH', 'EGFDHHDBCHCAAHHGDGC', 'FHCFDBEDGCBDH', 'ABGBCABA', 'BBDGCCBHBACGFGDCB', 'EEEFFBACEDGCDDDACBD', 'CCBGDACFEGAHAG', 'CCCAF', 'EFEGECEFHEGDDFGCEBAC', 'ADCEC', 'BCGHGHBHEGEGCDBB', 'DCCDB', 'FADGDGEACH', 'FGCFEEADFDDCAAAGE', 'FEFGCGCCECBCFFHE', 'DFDDDECABCBDHFAAHDE', 'HBAGBAEFHBBFGCG', 'BHDBBEGCACEEG', 'EGGBBHBBCDFCBCEECEBF', 'ACBCHABA', 'HHEDG', 'HAFAFFFFGGBH', 'FGADCGGFBBHGFHGCAA', 'HBBCCEEG', 'GBCEBDB', 'FEEDGCFDCCBEB', 'ADEEHFDDCFA', 'ECDAGFBHEFHGGEBD', 'DCBHEBCHHA', 'CAEEGDEGAGFG', 'ADGHD', 'ADEGHCAGFECACBGCF', 'FGDDDCBBGAEFDGC', 'EBCDFBFF', 'BGEEFHCAFFACDFDG', 'FEGFDEDBG', 'DBGCAGA', 'FAEAHGECAFEFABE', 'BHHDBCGFHHHBAHGHHGGB', 'CCADGDCBBACAGBBF', 'HBGHCBEBGBDACBH', 'CAEEFCG', 'HCAFABEFC', 'BBAFGDDCADE', 'FHGFEBFDBE', 'FEBDDBFACH', 'HFEHEDBH', 'DGAEHGFFDDBHF', 'GBGGDDFFDDAADG', 'BHHAGCCHBAGCHAD', 'BFGDGGADCGFBEEGHACCH', 'DEADDBDCAFHDDFGGFDBB', 'DEDACFAGA', 'FCFCFCHEHFHEEFAGG', 'GHHCDBGAGABAGHHFGEFA', 'GEDGBCAHED', 'HGBCGG', 'FAGBFFFFHAGFHFCC', 'ADGBFEB', 'AHFAFHDDHFFEGDEBHEC', 'FGBAFHDGEBCDABDGBEAE', 'CGFHBFFEDA', 'HACGCGBBCDEBB', 'CEEHCAGCF', 'BGCHFGFEEBCDAFGA', 'EACAFFFCDBFDF', 'CCGAGACBG', 'DDBDBA', 'EGBEEE', 'HDCHGC', 'FGBDAGF', 'DAGGFAHHGGCDCBDAHF', 'HGCEHCEEA', 'BGFHEHGBADGHEEBAB', 'HCAADEDHH', 'FGHDBDFHGBGCABBBDDCH', 'HHHGCBEAAC', 'BAAFFEHGBCAHHA', 'BABBAAEBHEBCB', 'EFEFGFFHBDHGFEB', 'DGBAFHFFE', 'CEHFAF', 'BADDHFEEGAAEDD', 'DAHEEAGGFBE', 'DGEEEDBCBBBCEEADCB', 'HDAECCCBAEHEH', 'ACHFDEAGEE', 'HGCGAFDFH', 'CCGGCDCAFBBGHABACAGA', 'HAAFBHAE', 'BGEAHBDHFDBCBAGD', 'FCFBDGEGCEDGDGFC', 'HGBGCHEHEGBDD', 'GEAHFHHBCEBCECFGDDDB', 'GBHGDABGDCBF', 'FABBEFDD', 'FHFFEEGDHHACBGBEFEFE', 'EBDEBCGH', 'EAFBBCEAH', 'DDDGGHHCBCEF', 'CHEEAH', 'BBEEBHFHEBFDAFGCED', 'BFEBGACEFHAFGEB', 'FFFDFE', 'BCHHEADFHFFCECED', 'CBBDGDBEACDDFDF', 'EFCDBFHEECBDGGGA', 'DFBFEFFCGH', 'FGEHEFDDFBGCHEAEEHBC', 'GGGGGBFABDDCGFDG', 'HHGCCBGDHEB', 'EHHEHHCGBBGH', 'CGEEACDECFGDGGG', 'GDEAECHGGHAE', 'DEHCAFGFHAE', 'DECECBFBCBE', 'DEFAEHCBHCBBFDAAEGEB', 'HEDAECF', 'CGDHHHBCABEHC', 'ADFBDGFEHG', 'EDAGAEHAAG', 'CHDACDHGH', 'DDBAFCH', 'FEFADEDDAFBE', 'BFEAEHEDCDBBCAD', 'ECCACHDCFGAHFACFD', 'FGHFCAB', 'HGDFDHBCAGEEDFAA', 'HHBBEDGBGDCHDEFHGA', 'BADDGGGHDH', 'EFGHBBCEDEGEGGGGCB', 'CCFGFCBACH', 'HCCACBBCCBBFAA', 'FEACAFGDBHE', 'FEDHCCADHHDGECF', 'GHGDCFHBHFFABCE', 'BCECAFHFDH', 'DGFFGHFEG', 'DGHHDG', 'AFFHADBEFF', 'DAGBGACABGHHCFDEF', 'FBAGBHHBCBAD', 'BHGAEGDGFHBEB', 'GDHCACGCBHF', 'EDAHCDAABABB', 'AEDBEBEACE', 'GFHACGH', 'EEHDCACFAAHCCFAADDC', 'CGCEHHGEA', 'FHCCACFHGCHECGGEH', 'EBFHAHDCDBFCGBD', 'DCFADBAGECHABBCBEEF', 'BGBFBCEBHFBHDGC', 'ABDGCBFGBEABGACHBDA', 'DFCHBCFFGFFG', 'CDBCHEECACDC', 'HGHFACAB', 'EABADGABFFAG', 'HAFFAEF', 'EHBGGFHCEGCAFACD', 'HBFAAB', 'ABDGEHDBGBHEBGAB', 'HGCHGCCGCH', 'DADBGADDEADFEBECDGEH', 'FFHAAECHDHGGEBH', 'CBGBAG', 'GABBFCBECBBCHA', 'EEBBADBAEGCHGAA', 'DGFHHACEF', 'HCHEGCACAEEGAAHBDCEE', 'BDGFC', 'FGGFGC', 'BCCBDBGDG', 'DDHFGHG', 'EGHAAEECGGBH', 'DAHDFCGDCEDCBFDCHD', 'FHGFHAG', 'HAHGCEDBCBHBBHEG', 'FADFCADDACH', 'BFCBACAGGBH', 'GEEFFHGACE', 'DCADCBHFFA', 'CAHCCD', 'DHGGEDABHCCBCECDEAHB', 'CGFCFFAGC', 'AGFHGHECBAEHHHEFDAH', 'CACCCGCFFHEBBG', 'HGGDAGEGHFGBCFD', 'ABEBAAGDBGBFBBE', 'EEGGAF', 'BCGGCBBDBEDGFBFEGFBC', 'HHDCCGBCCECDBDGHAHG', 'ADDAECFBFCGBD', 'ACBAGD', 'CDHAEGDAHFFC', 'BHEGB', 'DGHGDECHHCAHDFCD', 'FEGHCBEA', 'HEDDCGBABCCEB', 'DAFDAHH', 'BABBAEDEGEGBFDDHBH', 'AHFAGDHCEDFFG', 'GEHDBGDCBHFHBBDHB', 'GEFHGBFABG', 'FHGBEGEFECFDGG', 'ABFFF', 'DBFCAFDCEADDGGFDCGGE', 'ADCEFABDDDCFFA', 'GHACEFB', 'EDBHAEFCCCCGDD', 'HGHFGBHEAEDH', 'ABBEFDBCHEEHBHCECC', 'EHEAGEBHGAAE', 'CBBHHFCBBGDAEGFFC', 'BBBGDAHB', 'HHECCFCBAFEEB', 'BGCCAFGBFDEBHDHA', 'BFBGEAEEE', 'HBCFGAFCEBCB', 'GHCGAAFHEAB', 'HBFCC', 'FDAAHBEBEBCB', 'DHFBEHBFDBB', 'HFBCDCFDCA', 'HCEGCEBGBCGDH', 'AEBDCBB', 'HGCFAAH', 'EDHAAAEEFAAHEAGAAFG', 'DHEHEBDBHFECC', 'DCECHBADCEBEHGCF', 'BBFEHDFBGADDHDG', 'DEGEDACEAGCH', 'FHGBECEAEA', 'GGCBHGDFEFFGHHGA', 'GACFGDACF', 'DEBDH', 'HEEHDGEABECAG', 'HEDFGCA', 'FHBFDEAFBFHFEHEFHDFH', 'FAGDFEAB', 'DHHHAHABBGHFA', 'BFBEAHAB', 'BHCEDFFEEBCBGHEABGH', 'CCABAGCHDBCHEHDF', 'HCBECHADDCEAFFH', 'GHBAHGBG', 'DAFHFGFCCAFEBC', 'DBDDCE', 'HCBHHBEDHFG', 'FCFBFCAHEEABDCAEEGE', 'GBBHCACFDC', 'DGEBBADCFBFFHGHBHAFF', 'HAEBF', 'CDFEDEE', 'BCCGEBFBA', 'CGEFFAADGFGEHCFDGCAE', 'GCCAECBDAFAECAGCCBEF', 'AGFCDCBHGBFCBGFE', 'HHGBACFCADEDDCEEG', 'GEEFDGF', 'AEEGAHGAD', 'BDBFAAAHGHAGGGCGGD', 'BHGHDAE', 'FFBEBFFCBC', 'AEFCADAEFH', 'CCAHDAA', 'DHDADD', 'ACEADHCHBH', 'HHCHHCFBCHEHGEGDGDH', 'HEHAG', 'CHFAEHAHDCCAG', 'AFDBDEFAGACEHGGBAEHE', 'GGEDBFBGHBHBEE', 'ACACGD', 'BBBDCBFFHBHFB', 'CBDDFDFCDBCCBDEABD', 'GCDHFGAACCEEGCFD', 'GHFEAHFEEF', 'HDAGG', 'BEHBEBHE', 'CGABFHAAHCFCHGAECCEF', 'GGACGF', 'HHFCHBECGHFDGCHD', 'FFBCAADCHCHBFAFEBA', 'FBBAABFCEG', 'EHGHBGBEH', 'FFGBCGCHDB', 'AFEHHGHFFAHG', 'FHCAADGGHEDB', 'BAGBCHECBDCACGDHC', 'AAAEHDDFEA', 'HBEHFFAGGDGAGHDGF', 'EEFABDDDGHBFGCGH', 'DDBDCACD', 'EBCFDDCDDBABC', 'DEEDBADHFEBBCFEHGG', 'GECDBGEEFBAC', 'BFEFBDBFDDBDGAGAAEF', 'EFDHDGGB', 'AHGGDGGF', 'FGDFE', 'EAGDDGFCDAHFFEHFG', 'HADGGFBBEFFE', 'HCAGEBHAFFAF', 'CDGEDGBBGCEABBHGH', 'ADEHFFEBBHDGBCAFB', 'HCEEA', 'CDDHDFGADCHFDDA', 'DBFDGHDDDFHDBBCE', 'CDBFGBCGHFAEGCCE', 'GBBGEFECHDEHHBBGHC', 'EDGAFFEAFCE', 'FGFHAHBAFDBEHBCA', 'HEFAHAFGFHH', 'CAHGFAA', 'HGEBAHCAD', 'DFDCAGAGAA', 'GHGGBDGAC', 'HBGBGHFAAGFFA', 'EEAABFGECFBCB', 'EAEBABGGD', 'BBEAEABAEAEEGG', 'CBBGHGCEADHBCDEFC', 'BFFHBCBBF', 'DEDECAE', 'DCAAAGEFCDGGH', 'HFBCGHH', 'AHBFAE', 'BDGGDDDGGAHEAAB', 'GFECEDGEGHEEHAH', 'ACGGBGHFBFHDCBD', 'BFFDGFBGFABGECF', 'GAAGGEBDCDCG', 'EGBAGABGGCABEFHH', 'FAACHDCG', 'HBABG', 'ABEEHEBCHHEEAAC', 'GGFFDCDBDHCCBGBBBBAB', 'CABEAFBGAFF', 'BHHGAAEDAHHHEFGFDGF', 'ABHBBC', 'HFEHEBFAEFGCH', 'FEHBGAACGGFB', 'AAGEHDHGGFHGHFB', 'EHDEFECEAFAE', 'ECHBFHFDCHBEE', 'DHDEE', 'BFCGFECDECEHD', 'GFGFCDGACBEBF', 'AHGGDECDBEHGBFG', 'CBCEAHFFAACCEDDCB', 'BAHDBD', 'EHCBHCFAGA', 'EDDABFF', 'BDDHHCACEFGGGF', 'GBBEHEFECHBDFDCCEB', 'GBEGDBEACEAE', 'DACHGABADBC', 'GHHBDCHBFGGFBAEDGDG', 'GAECF', 'DFABHHC', 'BHCDBAHCCDEBCDHCHB', 'AECDGCA', 'HHBGD', 'CGFAEDCFABCHF', 'CDCAHCEBFDDABDD', 'CEABDCHGCEF', 'EEDEFEEE', 'EEFACCBFAFG', 'EFCBFHGAGAEEGEBH', 'EFHBDEEGGFAFH', 'GCDGFEBFHCBAAGGG', 'HFCBACECHBCBGEBBCDF', 'ADDHGGGCAFEBCBG', 'EHDEBBFEEDHDBABHCE', 'FDABAAGFFGDF', 'ACGHBFGBBEDHFCDC', 'EGFFAG', 'BCAAGCDAEACFFHF', 'HHEACFBG', 'BCGHH', 'DFFCDGD', 'EGBAHFGHFGDAECGHGCFF', 'CGBEHHEFACFBEDEEGGGB', 'AHFGCCCFHCBCHFEG', 'EEACAHDAHCFFGAGDB', 'EFFHDDADDDHGCHAFG', 'BDHBGGCCHH', 'ECBEAGGDGAHDH', 'AHGCHBDFGE', 'DHCCGE', 'HCEHHBCEHH', 'GHGBDDHD', 'HFAAFECGBEGHCHCFF', 'CBFGG', 'DFBFAACGDH', 'HFFCDEGA', 'GFFBCBBAHCCGBBD', 'HDDAAGCDDEDD', 'BHBAHBABB', 'AFCCHACFEFCDCB', 'FHDDGACAACDHDGE', 'CDDCDEDDBHHCEAAH', 'BBEEAH', 'DBCCCCBECBGFDCBG', 'ADDEHDEHEGCBGHD', 'HEEHDGGGE', 'BDCFD', 'DEACCHFFG', 'ACGBEBGAFEAGEGAA', 'FGGFABCCCFF', 'CBHFFBEB', 'AGAED', 'FGHDHDCEBAFCFDADFEE', 'HABHBBGA', 'AEHBEDCAFC', 'DHCCDFGFDFH', 'DDFDDHCGABBEAFDF', 'AACGDCFHDBCCEDHAF', 'BDDCDHGGGH', 'GDFEHEABBGHGBEGD', 'BHEEFEGEAHG', 'CDEAHAEAAAHDCFBCGDF', 'ABAAEEDEBBDCCA', 'HDDDBEBFHBBADEFDCEFH', 'FADGAAFDDEGHDEFAD', 'EHCHCEGDEABF', 'GAGCCCCFFDBFADBCE', 'AHDGADGBG', 'EBBBCFHFADFBGDE', 'FBHDACHBFDHGFHH', 'CAEBDHBBCACFGECDAC', 'CCFCEEFFDCHCCAD', 'CABEDBHHC', 'BGHDBBABB', 'GGBGCDHBBBCEFABDEH', 'HACGGDGFFCCCGBFBBE', 'AHEADAFFBCAFCCGAGCB', 'EADBCFHHCAABD', 'EECFHBBCGCFBH', 'EBDCCEGCEHBAFG', 'BFHGEA', 'BAFHFFCEGBBDEEGGBC', 'EDEDFCDCBDCGCCEAD', 'EHEHAFHEFFC', 'AAGHHGDBECB', 'EHEAAFHFCHEEFA', 'HCFCGHACEEAF', 'EGBAACEEFECGAFEDEEF', 'HAFDHCBCA', 'ABAECHAG', 'GBAHDFG', 'ADABACAAGDBBCEH', 'ACDAFHG', 'AEGHGGACADG', 'CFCDFEBCFGHG', 'BCEBGHAAGDDBFDB', 'FGBHCEACGCEFCHGCC', 'DGCEGBGGHHDGEFD', 'DEEGFB', 'GHECDFHEEBEHA', 'HAHFFHHGBEFAH', 'AACBEFABAHAF', 'AAHCAADCHBE', 'BGDGCGFHH', 'DBHGEAADAABHC', 'HFFGDEEBEDEEDB', 'CCDBGCDFBGFGBEHFBH', 'ABBBC', 'GECEFDGFDHDHABGGBHHG', 'CDEEDCHGEGEFGFACCCB', 'ADAAFEEFCEFFA', 'BCGCECABBCFFBF', 'HDBCBAGAEEEFDC', 'BAGDEFHHHH', 'EGFGADGCCHGGHA', 'HHEEAB', 'HEBCHACGECAAGBAFE', 'GDBDFEB', 'FCHHHEB', 'GFDDBAGAHCAGAGHAD', 'BGEAAFCBDFBGA', 'HFCFHAGAGEDBBDH', 'BAEAGHDCGA', 'FACFHCFFGHD', 'DGHCBCHBDHEGGFAGCBBE', 'CGDGCBEFGCFBDDDEDBB', 'BFFGGAACGHAEB', 'EGFGDGEEAHA', 'CAAFDAFHGFHF', 'CCHCBGFAFBAFCB', 'FCGHAFEBGCCFD', 'CDCAAGCGFDFAFFCBH', 'DGBCHHEEA', 'FAFGEHAFFCEBBF', 'BFHBBCGGACECEAH', 'EGGDBADADEGFHFAG', 'DFACBDBG', 'EHHAEHCEHDDBGDBBC', 'FGFDBGGHEHDAA', 'AAEFDBDF', 'CDBACGAGEDDCGBB', 'DGHHHDAEHDFDBGGHFBGF', 'DEAFAEDFEG', 'HDDCBH', 'BAHGFH', 'DAEGBDHBFFH', 'GAHFAFBBAGBCBDCAA', 'CBCBAECED', 'HHADG', 'AGFHBFEFFBGAGCDA', 'CFEHHFCBFGCAHEA', 'HBCGGEB', 'CHAEHBH', 'AEGAGFGAFGGDF', 'CGEGDEEBDABGFFBHGEBD', 'FECBEFGAFBEGFDFAHDDE', 'BEBBADEAEFBDABE', 'DCDDGH', 'BDBDDC', 'GHEFF', 'BCHEBAHEGEAEGE', 'BAEAFGEFFEBBBCFEFCCD', 'FDAGE', 'GEBFGDFBCCFBEEGC', 'AFADHAEAHHDGDBCBCDBC', 'HDEGEAAFFEFEBG', 'GHHEA', 'CAEHBHA', 'CEHFBDEDCEFGDCA', 'FAAAFDBED', 'FCHGGEDEAE', 'DAGGE', 'CDFDAAACBGAEDE', 'CBFGCEFADBE', 'EBFAFECCHCDBACGFHDF', 'AGHEAFADEAGEFBDH', 'BDGHABHFB', 'CBEHFEGDEGEBCE', 'EAGHEHAGC', 'AHHBHBGEB', 'DFCFHGGHHDAGAHB', 'EGAGFGDFHFABCGF', 'FABFCBEDFEHAACD', 'BACDDEHFECG', 'HEHHBHDG', 'DCBHAEGGHBGDFEGDFA', 'FHGBEEBEDBBCBAECFDC', 'CAAEGACAG', 'FCHGCBDCCFAHDCGAFBF', 'ABEEFGAHFADGCADG', 'BDCEHBABB', 'HHGEHEB', 'GAEGFBGGFAEFGHHAD', 'CAFFHFC', 'HGCBABBGG', 'CDGBGAEGGECDBHGGE', 'CGBEEEBG', 'GDCEBDGE', 'DGHEABEDHCEAGHCFF', 'HDEEFGEFHAHDAGFDD', 'EAAFABEH', 'ABBEFB', 'GBHBHE', 'HBEGBGAFAAAEDEGD', 'FGHGFCFG', 'HCEBABDAEGDBEHHGGEG', 'FAFHDB', 'HFCAFGCHECBCDF', 'GFGFDDDCB', 'FBDBFHFGGFBDHGH', 'HEHECFGEFFBFBEBBA', 'BACBADBACGBFF', 'CEEAA', 'CHABBDEGCBHFBDBH', 'DCHCDAEFBFCEECE', 'FDGAAHCHDHEGCAEBB', 'DFAHA', 'HGEEFDHGECEBBFHHAHAG', 'GHFECFAC', 'HBCBEGC', 'EAFFDCAHEE', 'ABEGEBDADG', 'GAADDG', 'EGDEDDGEDACGADEHACBC', 'ECEEAGDHHBGEBAEFGHC', 'CAFFCGEGHGCFBCECBB', 'EGHACAAAHEHGCBBCA', 'BDEFFCHDEEB', 'GFEGD', 'CBFECAGFCFBGGFHDBACC', 'DEHEBHF', 'ACEGDDEC', 'BEGHBEECFHGCC', 'AAFHGCFCDCCHEHDGDCD', 'GHBHDHCHGCC', 'ACBEFBAEHGBCG', 'EAABFEBGDHAAEA', 'FDGBCF', 'HFDDGAH', 'BFHBCCBEFFE', 'FAEFGGECEBDBB', 'AAGACHAFBDD', 'EGCEAFHAGG', 'ECBCADGBHBHAB', 'BDBGDGFBBEBEADACFHEB', 'FEGEBDE', 'GFHAHEBBDADEHAH', 'HFGBHCE', 'EADFE', 'GFDHHGAEGEFBGDGHF', 'HHACAGCHBGEHDAAAG', 'GCFFGBHBEGFAFBFEFHCB', 'HBFGBHED', 'FCGGDDBHEFEEG', 'CEBBHBC', 'GECCCDAABAFHEHFCDBA', 'HGHHCBCCCDFHCBDEDDCA', 'EAGGDFGBH', 'BBAEGCACDEBE', 'HGADA', 'GCACCCAFDHFDF', 'DAHGCCFFC', 'HGADEBDGDFCFFFA', 'AEFFH', 'ADEEHBBHB', 'GGCDAFFF', 'AACABC', 'BCHGEABAGGBBFAEG', 'AACDEG', 'FCACBGHHD', 'EDAGFCCEAACCGHFF', 'HEHBBG', 'HFFBCDCCAGFGBDDF', 'AHECAA', 'DFACBEAACDGACFC', 'EGFHCGGA', 'DHGGGHAAGEHCFF', 'FDEGBHD', 'CFCDGGFGEFHE', 'BGHHADHEA', 'CDBDBHGGDGGDAGFDC', 'HFADCGFCAAHCEEGG', 'HDDDEGHG', 'EBBEFCGBC', 'CFCHBBFCGDAFBHEBBE', 'FAHFHHHDDFEFCD', 'BHFEGDDDFFGGAAF', 'GHFGFCGCDBHFFACBF', 'ABCACAFEB', 'AHCDFFFFHDCGEBCHDH', 'ADCDFCDBBCCHH', 'EDHHCBCGG', 'CGFCDDHA', 'GGFGDBCHACEGF', 'FHGGFBCBBGCF', 'FEFEFCD', 'DDCHCBDHDE', 'HGABCCHBDBEGGGGG', 'EADGGACACDHC', 'HEBHEHFECDHGCBAHHCH', 'BDFBEFHDAGACBAG', 'FEAHEEDDBBHCCHF', 'DEACDGDFAAFEHBDGBDAH', 'DFHDFH', 'EEGACFBHEBCAG', 'FHGAGHDDHCACDBHHEE', 'CDHGC', 'HFBGFFFH', 'EEGEFFHHEGHD', 'DFAFCDECEAB', 'HGHDEECDBE', 'EBBGDGAHDGCDHC', 'ECCDBGADC', 'EEBBCBCHADFFFB', 'EFEAECB', 'DDDFEC', 'HEFEGEDDCHGCGD', 'AFAEDFCBDDEBGDCFBA', 'HBDFABBEHCG', 'EFFFAC', 'EAGGEFAHGA', 'DEHCGDBAGCAADABBDAF', 'HDCBCADBCFDECEEFGC', 'AHAHEGAFBBGEH', 'CGAGF', 'BEFEFEDEACCECFHB', 'ACFBABDDHHEHHDGFBGH', 'GFEHBDFBDGFH', 'DAEFFCA', 'DHAFACHABDHAFHG', 'CFGHEAFBFF', 'CGGDBBHGEEGAAD', 'DGBHAC', 'DAAAHAHFGDCECA', 'FEBBCAFDDDHGAA', 'DGDGCEGADBFD', 'BCDGECCGBHCAED', 'HACFHCBF', 'GDHGEDHBFDG', 'HHBDDHBFF', 'GBHBGHHC', 'HFFBGGFEHHECADGHHB', 'GAHBBAEADDDGG', 'DBFABAHFCDBAEEGFB', 'BGFDHDDHCEEFFFCCBFB', 'GDHAF', 'HFHGAGCCHADE', 'ADAEBH', 'ACAHCEFGEF', 'FEDAGCGEABHCAHFCB', 'AFFCCGGBCBD', 'GEDBFF', 'FEAHCHDDGCE', 'AFCBCGFFFAE', 'EDACBCGE', 'HECDFBFFAFBF', 'HHEBDHC', 'CADDACEBEGDAEFGBEE', 'CGGFHCGDAHH', 'DCGAFEEDBCDFH', 'BGDAFE', 'AFFDACFAGGCB', 'CEFCEH', 'GDHCEGACE', 'EHFHDEBECFG', 'ECCBGABGBGAEFGFHHDBA', 'EGFGHFDHEEAAH', 'DFDHDBCHCD', 'FAGCCFECBHBDH', 'GEACFCDBEECGFAACBEB', 'EHEBCE', 'CGAAFFBCCEGEBHDCF', 'FGEBABHHGCHFFGFCFDC', 'HCDCHGAAFCGFABHCHDHB', 'DEABDEDBAF', 'HHBDAE', 'GDFEFAEFDAGBDD', 'GBCFADEFGAEDGD', 'HABFACDCHHABC', 'BGHFHHCEFECGABEADG', 'ADEGGBHGHHFBF', 'FCGDHBAHB', 'DDADHDBBFBFGGCGG', 'EDAHBADCAFBBD', 'ABAAEAACA', 'HBABBBCBCBGFDAFHHGD', 'CEBEGDAHCDAG', 'FEHAD', 'CGEADBEEBFGDA', 'EHEDHACDGDGFGBBFAEB', 'BEADCFFAHFA', 'CGADECEGEDFEAGAFFE', 'ABDGCHADEHACAGHFAC', 'GCACFCFEAFCHBAEAEGFA', 'HHBCEDHFBGDDCFF', 'DEEFCHEABDAGBHG', 'HGGEHBHDHEFBCGGCHC', 'DHGHGHGGCCEBDABGH', 'DAGFFBD', 'AGAGAFHHBBHDBCDEAG', 'GHCEEFGEACBBHDGCAEB', 'FGGGCCEGHCDFCAEFA', 'GEDDHAEGEDHBGEBEB', 'HFGCDACBAHDECAHA', 'EDCHDEBEDBAEHB', 'CDAAAGFCBCABCFD', 'EABHFFH', 'BBCGAAGEB', 'GCBAHHD', 'BGCGCCH', 'HGGHCGED', 'FBCFFCFEBCGHE', 'CBBBBBDBDH', 'CGHBGGFEHGEECBA', 'HHDGDCCDGGGDC', 'HFHADBCH', 'GCCDF', 'GHFGBEEHDFBFAF', 'CDBAD', 'BCBCFG', 'EFBGGCEHAAAEGEDGCH', 'HDFDACEGCGCDBEDE', 'GFDDA', 'ACHDFCAAGFFHDFBGHHB', 'FFCHGDCDD', 'DCCCHHACHDCBG', 'FFDHHCABGCDFABECGBCD', 'CBDAFDDDGDBDFEGEB', 'DAHFBFB', 'GDDFGCBAHHF', 'CGAGDAHCCBHFEFAGCHF', 'HFDDADEGECAACHBAF', 'EDDHBHGE', 'CEBHGADBHEEBAHGBEG', 'CEFAAGFHDABEHFCAHHBG', 'DHHBFHFCFEGEHGFDEA', 'EFCGBCADFDE', 'AEDDCGDGHDAAFGBBD', 'GEHFEAHFAAFFDFDGCF', 'ADEFDDCBC', 'EBHHFCHGEBEBEFDCDC', 'DCFAFGGGF', 'ABDHCEEAHDAHDDD', 'BCFGDGBGCCHGDBA', 'HFFDF', 'GFDFCCEF', 'CHGAAHHFFGHAE', 'EHEFHACGCGDAGFFABH', 'BBGHEHHHBBFHGDCBG', 'FFHGAADFGAACHGHCHA', 'BGEBFEBGF', 'CDEHCCAA', 'HHECHF', 'HACADEFFBHGBBHBEC', 'GHGHDFCDHDHCGAEGF', 'GDFFFABAH', 'BEFEDCAHHCEAGCH', 'EEDAFCHCHGFD', 'BFCDFGFGCHHGHCHDABB', 'CBHFFBDHCCEDHD', 'BCDADGBHFDFDAE', 'HFGEBCBEGECBFCCBBC', 'ABECFCCEHGFECCHBF', 'CGAHGCFEHFHGG', 'BBGGAEGDCC', 'CDEBAGGGD', 'CACDECGBAGAGB', 'GFFGHDFDBAABE', 'CHBHEAFCFHBBADEBDH', 'CAHCHHEBHDDBGCDBA', 'CFCFEDHB', 'BEDGC', 'ECGEGGFHEHEECHEABB', 'ECEAGCEEHFDCE', 'HGCDA', 'GEACE', 'FHECE', 'GCEGCB', 'GAHHHGDAC', 'GEAFHCCBDGADHHA', 'CGHFDGBGCABAECB', 'ACHFGG', 'HECDDDDABGCFECDB', 'AADGDBBHGBAG', 'FAGADEFCADG', 'EFCCFFDAFACC', 'ADDHCDFDHEGFFHDHFGG', 'CAHHGAHHD', 'FBGEDAB', 'GGCDDHHGHDHGFBD', 'FEBCHGEGEHCGBEHFACA', 'AGADEEHBDEBCDACBAEB', 'HCGHCBDCGCEEHFEACH', 'HEDAACC', 'FEAABDAGBEBGCACFFC', 'DGGEBDF', 'ABGEGCDFAHCFBFB', 'HADDBEEFBGHBFA', 'FCDEDG', 'BEDFGADAAHGBEBEDBEDA', 'GAGDDDEFBCCEEHFHEG', 'FCADEHAFEEGGHEGBGGC', 'ECDCCHHGGEBEFFAAC', 'FADEDDGEGHAC', 'FBFHAADGFDFC', 'HGADBECADAADBBH', 'EEHGAFEA', 'CFCEADDHDEDACABDBEA', 'FDGEEEGCFBDE', 'FAFCFFBADGHEEHFF', 'CDABGFFDD', 'AHFCGFEBABDAFGHABG', 'EEFFAHFBBFCAAA', 'GDADCBFBEBEBFDHFCEH', 'ACCCBB', 'DHEBFDHHC', 'FEEDECGCFHAHHBD', 'GCFBBFDEEFFCBA', 'AAAACFGGAGACDCGCFBA', 'FEDCEG', 'EHGBDED', 'ABFCGGAGHFFFAGG', 'DGHECFGHGDCE', 'DBFFCGAAFACDBGDDDD', 'BGHDGA', 'HAGFGEBFHHHFCGEBEC', 'EEADHFCDHBFFECFCGBEF', 'GDBFEGBBBD', 'HEABGA', 'FHAGFG', 'BBDDAF', 'GFDHHAHAB', 'DAHEF', 'EBCDFFAFGF', 'AHDHAHCGCEGCECHHDG', 'BABAFEFHBHDEE', 'CBHEH', 'CFHECFDCFAEHC', 'FGBEDGF', 'ACEBACE', 'HAGBFCEFBHADDCA', 'AAFEGDFD', 'ACHCFBFCDGBBBF', 'HCEADEGDFFBEHGHCAC', 'CCBCCGFCB', 'AGBFACEHE', 'CEFAH', 'ABCGBEGCB', 'FAAGCGEG', 'CCBAD', 'CHDHCACFCB', 'DHFGAGEEBDBBCCD', 'CFEFHAECGAAEBDDGB', 'DDABBGBGGDBAFB', 'DBFCDGAAAHGB', 'DGAAFFDGAFDAGH', 'FHGGGAGDCFECFBDCAE', 'DHDFEAEHGCC', 'HBFCGFHBGEBBB', 'HDAEGFGCEHEACHCBH', 'CGGHEGEDE', 'HDEBGFB', 'BBECFAGGDF', 'HFAHGB', 'HDDBECE', 'FEBHGEBACCAC', 'GGHGC', 'DHCHFAHDCBFCHDHD', 'AABBDBGECFDDCBBGBE', 'HBFDEGDGCBABBAEFB', 'DFFBDCFDE', 'AAAGBFGHCHAEAFCFGEH', 'GCCHEHDFAEHBGAC', 'CBBCDCCFD', 'AGGAAAFFEDDHDGEA', 'CHECHEDEFBBBACAAFGA', 'GCGADHBHACAGGGFAECD', 'CADDADBBB', 'ECCGCAFAAEEGFH', 'BHAADHDBHEHAH', 'AAADD', 'BCBAADBFDAABB', 'GAFDHCBBDBCDAGHFDHEF', 'BBAGCCECDD', 'CCHABDFHHBEBA', 'CEBHHADCFFFCHDDBDHB', 'ADFCGBCDBF', 'EBHGAAGGHDDDHCDHACG', 'HAGHBDCBHDGGD', 'FCGAEDCBADCCDEGEDFB', 'HFBHAGHHFCACEBGGBE', 'EDBDDCGDCGAAAHHAFBC', 'HABGDCDDBE', 'BADFFHBCAGCA', 'AFGBBDBEEF', 'CDFCH', 'HGFFBFHECDHHACCEEF', 'DGEEBEEBBACHGDDAF', 'HCEACDAGEFEBAFGHBC', 'GCEGGEABCBGGECADHEC', 'FFGHEDGEABAEBHHD', 'GEABEECECCCACAAACG', 'FAFHDADHBG', 'EHHGGDBBDBG', 'FABFACBAACCCDHG', 'GHACCF', 'HEAFHDGBFEEAD', 'FGCFCAEBHAFDDFCCB', 'HFCFDAEGECFBAAGDCGG', 'CEECBEACDHAGEBHBD', 'DGBEBCABBBHAA', 'DCBCAHEDBHFDGEAGBAAA', 'FCHHFBHCBBDAF', 'ACDGBDBEGG', 'GCCHFEHFFE', 'FBBHHHGCBFF', 'HFEDHEHCBCH', 'HCBECGEDHHBC', 'DHABBFFG', 'GBAEBE', 'AFBGAEFBBEF', 'HFHBHGECEF', 'BHCBGBAHGBDHBFFBGGDB', 'FHADACBCAGHA', 'HFFHHDGAEBAHG', 'EHCEGB', 'GDDGCGGACGGBBDEBHEHD', 'HCDAEEFFDADDEDFFFEEA', 'EHABCG', 'DHEBGGBAB', 'ABADDGFAGC', 'FDEGHEABBFA', 'AAAGEHHD', 'FCBBFGEBFFAGAGBEDBGG', 'HGABHCECBBABEG', 'AHBGHCEFCEFGEHADBAA', 'EDACAAHECECGHECCB', 'HBEED', 'BFHGE', 'ECCGAB', 'BFABBHEBHB', 'AHACCECBCEED', 'HCECDBHGHCECGAEGBH', 'HFBGFCHCADBCHGEDFAB', 'ABHHECHCEFEHFBGEBAB', 'ADGBHGDEHA', 'FHEGBFBCHGACD', 'GEEBAGDAEECHCFC', 'FBDDADCEFABFBC', 'BFCGECEBCFBAFCAHFCHE', 'CAABD', 'DHBHBAHFABHEGCA', 'EDEEFGBCBBBDBHGC', 'FGCFGBBDCHFCFEGDADE', 'GEHHGGHEDDHDCBEEFBC', 'HAHCGBGEAECHHBCGC', 'EGHEAAAGFFCFDEAC', 'HACFGCAHBFDB', 'BDBCGHE', 'FHGABFAGECFA', 'GFBHADFCFED', 'GHECGB', 'FGBHGCFDHEBHCFH', 'DDDHECEDGBFBADDC', 'HEABEBFGHHGAC', 'BEBFCGHEABGDEAFAFAG', 'GBEHGGCFDFHDHGCBBDA', 'BGDDCDBGCFECFHHEHD', 'GGCBBDBBHBGCCDBF', 'BGFHFBBFC', 'DAHFBGAFFDHEDCFACCG', 'AGGFECA', 'EFAEGDEEHCBCBFDCAB', 'DGECHADDGEBCHG', 'CBDBHEDDDGFEAF', 'BDFFAEGAC', 'EAGCBE', 'EAHEFFBHEGGFFCEA', 'GEBEE', 'AEAAHGCABHFGD', 'HEFHCCDEHHCH', 'CECGDACDBECB', 'ADFBFFEFBB', 'FEGCGBFCHDB', 'EGACBGCDAEEEEHCD', 'BBBAHGCBAFCAB', 'ABEBBCBABBBADEHB', 'AEFAGGGCFDABG', 'GFGEEFDEA', 'ABCFCACABACFGAGACGAB', 'AHDFADCB', 'DGGCABEFBFFDCAFAFG', 'HGFFACEAAADEFGABHB', 'CFDCBGAGBCEC', 'FFHABFBF', 'HDDDDBB', 'GCDEA', 'BAAFBDGAFF', 'BFDCEFAEAHHAHGHFHD', 'GCCDEGAFDGHCBEE', 'BCDBA', 'DCHDCF', 'CFGECHCFEFGD', 'DHDFAEE', 'CHCECGCEAHFBDBEF', 'HEGBAAHFFGGF', 'FBEHFE', 'BBHFHFCAHGGEGA', 'GCCEAB', 'BEHGBBFEFBACAGC', 'FHCHDEBAFH', 'BFGECAAGFAGH', 'FDBHEAA', 'HGEHD', 'DAGDG', 'AFEBHDBHBBAEBDBBGGGG', 'GDCGDEFECCGDHC', 'EBGBFDHFFDEAF', 'CBBAHB', 'HCGCCE', 'HBDEHEEBFDH', 'EFAEFADBAFGGCG', 'FBCBAHH', 'ECFGEHCDC', 'EAGEBCDFAGCACHACDAGE', 'DFHCAGBBGGHCB', 'DEFAGDBEGEHEGHAC', 'ADFDDFDCHBHCGCEE', 'EFAHFE', 'GCECAGDEGBDEFHF', 'DEBFHACBDFABFDBFBHCA', 'HHFDBCCGCEBHFDBAAH', 'DGABHFFBAADHCBA', 'CBCHAA', 'EHAFEGGFG', 'DBHEACGEFDEHGDGE', 'HHHAAHABCGA', 'BEAEEGGE', 'DCHGE', 'HEFHEBBCFHFCGDDH', 'FFBCEDCDAAEEGGHG', 'AECBEEEABHBDGDBEAGF', 'EFDCAGGCAGD', 'DBAEDECAHDBFDGFEHDCA', 'DECEEHA', 'GDGFDDFGAAECDEHFHDEE', 'BEAABCDBFFADBC', 'DHHFHC', 'CCEEAF', 'GEBCFDGFBAGFCBEDA', 'AFCBHEGBGHDCFHCCHEH', 'FDFCCGHHAECDFHCEH', 'CGFGAACAEDE', 'FDFFGABDFEBAHFDEBCF', 'DHHHHGFA', 'EBGHG', 'AABGBADFF', 'ABFACDCAFA', 'HCDECDDGADEB', 'DGDDHEDHCHAFEB', 'FECEDFFBEFBHHFGFHCDH', 'GHBABGCFFA', 'BDFHGAECHFHEDBHAFBC', 'HGHEBGEHEEFHCFEGADH', 'CBACDBEAGCACBFABC', 'DHDGGEHAGCGCF', 'FDHDCHHFCAA', 'ACHFAHGHHB', 'AFGEAAGFC', 'CEGHECGFHHH', 'CDCHDCB', 'FGDAFBAHGDFFGBD', 'BDGGFFH', 'ADCDFGCGBGAGG', 'GBDGCEBFEFFAGBCCFBG', 'EHADEAHD', 'BFAGFGEAGFHDABGGHHG', 'HGGCEEHBGFHADAAH', 'AGBBABEDBBD', 'AHADBEGGCDGADFH', 'EGHEBBEH', 'BHGFEFDGBFHA', 'FHDECDFCDAEEHADCFGAG', 'FAAAGEGHDBBHHGCDFB', 'ACHDAC', 'BAHDHH', 'DEFAGDE', 'ECHGDGGHAECFHF', 'CECBDDDCE', 'CBBEBEEHFCCHACACGHAC', 'FFFCEAADCGHHCHBHFEH', 'GDABFDACHHH', 'FFDEFHAEGCB', 'GGEHGFFDB', 'EHAAFAFAECBFBGHABA', 'GEHBAFBFCAHCABAFEAHF', 'ABFFHF', 'CGGCEGEB', 'BDFBAEFHHADFF', 'AEBHCA', 'CDHFFBHDHFGGGBBCBAFH', 'DADCAHAFHDGFGDGCEH', 'FAGGHECFC', 'BFFBBADGBCCEAAGHA', 'ABFAAFDHG', 'BEEEAGFGCCDABCEDB', 'BACGEHAFGFF', 'CHBBACCEHGCADDBAE', 'HBBFGEEGDHE', 'DFGDAHDHC', 'FAFAHGDBBHFD', 'HEGABFFHBACCAB', 'AHCCDEEFACDGHEGCFDHB', 'HABDHGCHHBG', 'GAEHGHCDAEGAA', 'FAGGBB', 'FCEBGEHCCCBBHH', 'BFBDGCBEHCAAE', 'GFFCDCCHAGFHFGCADCAC', 'EACHCCFEBEHEBCB', 'BDFDGAHGGHABEAC', 'AABBGCCCDAHBDGBHCA', 'GCHEAFCBCDGEFAHHA', 'GGHECCCAABDDDHGE', 'GBDEDBACEHBEADBC', 'HAGFDHFAFAFDFCEH', 'GHACDEHADHE', 'GHCBDF', 'HBCEABEAGFHHDF', 'CDAADHHFDBE', 'FBCAAFHHAFDF', 'GAFFCBDADCABCHGFEEH', 'AFBEHFBAADEFBDDGC', 'GHEDEFFBHDCDB', 'EGACDEGGAFABCDGGCCDA', 'DHBBEFBBBFDFBC', 'DGDAABHDBFDHBFFDFG', 'FBCDADBE', 'DAHHAGHAFADA', 'BDGHAGFEBAGDC', 'FBFHAFGECGDEHEH', 'HFCCFGCCHACDAEC', 'AEAECCBEDHFFGECHCAG', 'EEGCHHE', 'HFACE', 'FCECDBBFEFFFCADA', 'HCGDBDGBBCFCAHG', 'BHBDBBBHECBFGBFEHB', 'CDBHEBFCGA', 'ACCHABFFAAAFHCAFCCB', 'AADBDCDFFFFCD', 'BAACC', 'DGFACGCFHBHG', 'EAEBH', 'FGCEAHCEB', 'BEFEFFFAGBBEG', 'EDDHCCGFBFAAF', 'FBBAEGHD', 'FCDHDEHDAFAEHCC', 'FHBBHDDCCHBEHHBGBBC', 'FEDHEFH', 'DBBFEDGHFDDCGDAGCGAE', 'AGEGGEEDFHCFHDDHHH', 'CBHHDCGABFGCHDGAGGDH', 'FDGDFADAEEFEEABH', 'CEHCBBFBHFHGGFFEFBC', 'DBFDECGBCDBBBDHAEGHB', 'GGHDEDHEACEE', 'EHCGHBEHG', 'EFDFDDAACB', 'ABABDEFABGD', 'FACBGEBADCDGDBAGF', 'GGBGCEABC', 'EHECECE', 'DGEBDGBFEC', 'AHBCGD', 'GFHACECHHCA', 'FDGGBFEHAFEGFDA', 'GCFGHFEDHHBFEEBFHC', 'ACHHGFEDHEBCHHDBD', 'GDCGEABHHCDABGFHBH', 'AFCGBDDFHCAFCCA', 'GABGCFCECGFC', 'BFBACCF', 'FHAEFAAFEBDCAGC', 'FDGDG', 'FGHCEBBHFFAD', 'CBBFEAGDFHHBGCG', 'EABBAABEBDHAEHCEE', 'FCAACGECC', 'CFBAEFCBEAHEEHDE', 'DDGBGDDDCBF', 'DAACGFDF', 'CHHAGGDGAD', 'CEFCGH', 'EBEFEBDA', 'FEBCBFHEGCDGHHBDGE', 'FEFFDGBEHEGGEG', 'FCEDGECBGDDBAHB', 'HBEAACEGGDA', 'AGADEHEBC', 'BHGFAE', 'FGHECEDGEADGDDHHFFA', 'AFAHEEGB', 'BGDAAHAEHAHEHCD', 'HABABADEDCADCGCF', 'FFEHEFDCBAHAFHGDA', 'FHAEACHDD', 'BBHAFAAAAGGAHFAGGHE', 'HEHHGHHECCEAFECBEE', 'DCEEDFFF', 'HFBBFEFCFHFFDGGHFG', 'AABCCBGHFFDGGB', 'AFEAC', 'FGADHHFB', 'BGFDDFFBDFCFBCF', 'DFGBEBFGDGAADE', 'DGEEGDDCECAFBAADAA', 'DCDEDCGF', 'CBBHDD', 'HFDEBBDGGB', 'FGEDBF', 'GAGCBEAABAFHABD', 'BBBABAFCAGGGDDHCHGFD', 'AFDFECFE', 'FEAFDAHBCHAA', 'AAFGGBBEFAFD', 'BAFAC', 'DAGHGBHEFEAG', 'GGHGA', 'FCGFEFHHBGAEG', 'FFGAHGCABBCC', 'HCAAEFACEDHFEBAAD', 'FBBHBCFABDAAD', 'AFHEAECAEBBAGADACAHD', 'CCBDHDFCHADEEAGAHGF', 'CHDFGCHGG', 'BFDCGEABADF', 'HFAHDGCGAAAGAE', 'FBBCFBHGCF', 'FDEFCGHEHHAEDCEGEF', 'FGHCAEGDEFDEDAA', 'DDCDFBGHHABC', 'HBHAGCDEF', 'GGAHAFADFAHHGFFDCFA', 'GFGAAFBD', 'GFBEEFDCHCFA', 'DGFDHAACHGFH', 'DAHBHGBB', 'EAFBABBCDD', 'DEEBCADDEHEEBBDCE', 'AHHADECGFCD', 'GHHHEDDDFHEA', 'AAGDFBBGFHFGHGCFG', 'CCDDEGCHFBEHABBEBCGF', 'GDFCEAEFHBHEHAB', 'EBECDABCBHB', 'CBFHH', 'BHFAGF', 'BAACGGBEGHDAHFFBCGF', 'DHFDEAADBBABHCB', 'EDEEBHHGBCBEDBG', 'GCABGCEAGCEH', 'EEDEBHDGAAEFFBDEFHD', 'ECHHB', 'HFDBCGHAAE', 'ACEHBFAEAE', 'CDADFBABEFEFCH', 'DHDGBCCEGBFDBGHFAC', 'FCFCFDHBDAEHDHB', 'HBEDFGCEGAFADHHCDE', 'DADABDEAE', 'DFEHBBEADCFCFFBHH', 'BEEGFACGF', 'BEFHAGDCFCCGFEDA', 'ECEAABBAFGDBDCF', 'HGFHAHFHFBDDHHG', 'GGFADHFD', 'BGBFEEBEAB', 'HFEAAEFBCF', 'EGFDEHCBHFFBG', 'HABGH', 'BEBCHABE', 'ACACBHHHGCACDHGDA', 'AEDDGCCEDEA', 'CBHFG', 'ADFBABFD', 'CAFEDEBCH', 'ABBCCEADA', 'BFFGAFGGCCA', 'HEAGCGFAHGF', 'BBDDEHEABHDBGF', 'EFFGDFACFG', 'HFAFDEGDBD', 'GGAEAHFECHBHABGCDE', 'GFACDCH', 'CDDEEHDDEHFGEEAGCFEE', 'EECAABB', 'BCHHFD', 'BDGCABBEFHABEGHGGFEF', 'BDFDGBB', 'DEBDDDEFABAAHHHGFGEE', 'CACCGCEBAEGDDHFC', 'HCAHFE', 'DCEEGFFAGEHCGHGE', 'EDHBCHFDDEDHABB', 'ABCEGB', 'GHFEHE', 'EFGGDHBCEAAHHFBD', 'CFFCHAAEHCFFGD', 'EFDCE', 'HAABGFBBBDD', 'FBCFBHDB', 'AGDGBGFEHGA', 'AGHBCAEDCFDHCA', 'BEFFDCGDHDFDDGCCF', 'BGEGHBFCHHEFCAGA', 'AGCBBGHCBABCB', 'DFBGFFGE', 'HFHBEFCDDAAE', 'GCGDCDF', 'FEGCGDFECGCGCH', 'CCCFAEGB', 'DBAEBAAEGHGCGCD', 'AHAABADDCA', 'GFFAGBCEBCBBHHA', 'CCEBBDEBG', 'ABBFFHAHDBH', 'DEBECDA', 'CGADBDBECGAEC', 'GEFGABBHAEACEDCAHDDD', 'EHEDCEEGFBCDDCDBD', 'AGEBHCCAAAFCAABCDCG', 'DBDCEHEBBGBA', 'GHGFBDHGDA', 'BDBGDDEFFEGCHDCHCFBH', 'GDGCHHECEGGEEDGCFDB', 'HHFHGDEBHAAEDHGEE', 'BHFAAGEEBEAAGDHEEFB', 'AGBHHGDECGG', 'FEAFEAB', 'FDHDCEGACD', 'BBDGADGHGCAEHHECCD', 'EDHGDBGCBDCGFGDAAHAA', 'FCGDABDBBFADFACHAEEB', 'BGBCAAEFCCAADDB', 'GHGBHDAFFBAA', 'FGDHEHBF', 'HHAGDF', 'EFEGEBGGDCF', 'AHAABEFBBHFGBFCAFFBA', 'HAEDAFCHBBCC', 'HFHDBCC', 'FCFFAGB', 'AAEADGABAGFEG', 'BGDGAAAC', 'BCFADGDD', 'FCHHEGDHDF', 'DCGCBHAHEDHCEAEA', 'CCBAAAGEHA', 'ADEBBGFHFEAFDAHDHD', 'DFHGECGHC', 'CBBHHFBEBEDBDC', 'BFEGFB', 'AEBCEGHADHBDC', 'EAHFHCBBA', 'EGBCFHAFB', 'AFGHADDFBBECGGG', 'CGHCCGDDHD', 'BEGEEAAADEHFHEC', 'EEHBGHCAFDHGEA', 'BBHGEBBFGEFEFDGBCD', 'GADGCFCDGFDEA', 'BDDBF', 'GFGGAEBF', 'AFCAACBFECGBEDABAC', 'BHCCFGC', 'DFEHBADDGGBH', 'BCDGHC', 'ADCEEDHDAHFHFEA', 'CCFCDCEAABFFEBGAC', 'FGABFFHGHBDG', 'DCDAACG', 'DAGHBGEAFDH', 'HCCCEEAHFBDABD', 'GGHDADA', 'BCBCD', 'ECCEFDFBHHAEBD', 'DCGFB', 'FGGECEB', 'EFGDGFCEGDDCFACHCC', 'GCDGBFEBFDFAGAGCEH', 'DHEEDBDEDAGCFDAEAC', 'ACBACAFG', 'EEAHGC', 'DFECEGG', 'CAHHFDBHEFDFHAFDG', 'AGFFFEBCGDEGHHA', 'DGDEBCHEFFAB', 'DCFFCBGFEDBCDBEECCGD', 'HFACFDHAFFACGGC', 'BBCFDGCCGDCF', 'AHGGHBHDGECCEGDD', 'ADCGHHEF', 'HDGAAC', 'FBGBBDEGGCDEGGFFA', 'AGFFHEDGAHCE', 'FBHCEHADEACHFGACHFF', 'HHFAFFC', 'GEAFCFDDCEBHGEEE', 'GHAHGBHFHE', 'ACDEHDDFD', 'CDCEFGGHEBGCDGBHH', 'GAECCAGCHDFD', 'DBBFBBEBEHBDH', 'DEAABDGGDADBABHC', 'EGBHDFC', 'BADHB', 'EEECBEDHBGDAAFA', 'EHAFBB', 'ACFDEDBFGDB', 'CBACBDGCCAHHAGDGAEE', 'FDEDDC', 'FHCHGCGAHFGFB', 'HCAGCDBEBFABGG', 'BFCAAACGBCAA', 'HFHDBBBECHBACBDACFFF', 'BAHEDAHBFHDFGBBF', 'BEGHCHFAGEAFBABB', 'BFDBGAFE', 'DGGCBECGCDGDD', 'GBDCDDHAEHBAFHEAD', 'DCGFBAFDBABCFDGABGDD', 'EGDCCCDBDFCBFHDDD', 'CGHGGFCAG', 'FEADBACAEFHGDH', 'CDAFD', 'BBBFGEDGAAAEHBGCHFDD', 'EEBFAADGHABH', 'HEEBAEAAHGE', 'CDFHBDHDCAGFDBEB', 'BHBGCHDGADGFEEGDFCA', 'BFCCD', 'DFGAHHEBFHCEAFCDF', 'HFCCEAHGGCHFFHGEF', 'BHGGEFDFDDGHDBEHBDDD', 'CACFDE', 'FDCDGHGA', 'CDEDABACHBAHDGG', 'BDCFCAEEEECGDHHB', 'AEBCEHCHHGCCCGGHD', 'GFHHHGGCGAFDF', 'FCBBGEABEGEABAEEHD', 'HEBFCEAHFBBECG', 'AABHDCBEGECGD', 'BHADAEEFBF', 'AHHBGFHGDGDBDAHFH', 'BGCFC', 'GFHFEGDHCDEAHAGCDFDC', 'AACABFCEBDE', 'AGAGAAHCHH', 'CEHDCBCEDFHGBFA', 'BCHACADCDHAGCHHC', 'EFDGCGHCG', 'HEFBFBH', 'CAGEHBBBFADCCEHGBDG', 'HFEAAFBAE', 'ABCGBEAHCEGBBFD', 'FAHEGDHEAFEGBBBADB', 'FAACBGDDCACDDEG', 'HBEHBECDDBGHF', 'AHFECHHFH', 'DFGEGEFGGBHHBG', 'DEGGDFACCGEHAABC', 'BADBHGDC', 'HABAECADDACEDB', 'HBEBAFBCFCBH', 'DBBBFBCDCHDFEGFCHDA', 'CHCFFCCAGEABGA', 'DGBHGGEDEBFDEBBC', 'ADHFGEEFGGDDGABADDGH', 'ABBEA', 'HCAADB', 'GHDEEEEBG', 'AAECGHFBHBGDAEE', 'EHBGD', 'HDCFCGFCCE', 'CEADCBFED', 'HFEACF', 'DGGDHDGDDFGABGCFD', 'HFCADAHFHDC', 'ACGBBFFFAAAEDECCH', 'EHCGGGHCDAEDA', 'DCCEAGAGBABHCGCDG', 'DAHFGDBG', 'AAHBGDCABHGDDD', 'EACCFFEHFBEF', 'GGDDFCEHFBCDAFHGDFA', 'DEDEGDABDDBGHGCAG', 'BEGBBHCCAHBCEACFHA', 'FBGFHCCFE', 'HCFEHHGGBAGFDHFAFCC', 'DAAAHAEA', 'DAHGHHEGDCHGADHACB', 'FHDADHEGHG', 'CFACHCBHEDEEFCEDDHEE', 'DAGFFHDBEGF', 'FHEGEEDHFD', 'AFCFHHE', 'GCBBDGGCBCDF', 'DFGCBCE', 'HDDECH', 'AEHGCHFCCCDE', 'CFGGCGCHFAEEADDD', 'BFCCEEHHEGCBDBDHHF', 'GFGDFEAEHDBCADFF', 'HDGDHCEHGFCE', 'GHBHDHBBACCCAG', 'HFFCFCFCGCDFGABDCBCF', 'ACHFHEFBHFAEG', 'GFCCBBDGDCHHDF', 'DEAHEAFDCDC', 'GCHCGADEEHDCBDGG', 'CDCEFCBHCFCEC', 'BDEGGBDAADCGBCEHHAFD', 'DCDHHHAFCHCHGEGHD', 'FACHGGBC', 'HBAEFHEFGBBAGECCGC', 'BCHEHABBAAACDCE', 'AHGDCFB', 'DEGFGG', 'GHGBHGGFFC', 'BDCFBDDB', 'EDEHFFGBAAEG', 'BCCDECFCFHGC', 'EECCGBAABGECHAGE', 'HBHHGFCBDEDDCH', 'BDFDGEFBGADECFD', 'GBFHGEGEABHGFACDGBA', 'AHGCAH', 'EHBFDGHCFFDDCBBCG', 'AAHBDHFDEAHBHGH', 'CEHCEGFBEH', 'ADHGHFBBDAABHB', 'AGABGHDFEGF', 'FDHDAHGDHGA', 'CDEFHAHBHDBCFFBF', 'DDDFDDHCFAAGBEGHC', 'HDEGFAA', 'GGDCFGAH', 'BBBAABEB', 'GFEDBAGCE', 'CCAHGEEDBGFB', 'BGBHHAC', 'HCAGGBBGHFEBHGCCHBC', 'ACDDGDHH', 'CDFFDFAAFGHAEDDBACBE', 'EBCBEGEEDF', 'DHHEBCHABEC', 'HGAFCAABE', 'HGGFDHDBAFA', 'DEEEE', 'FAEDAEGEGHDA', 'CHCAGAGBEBADCHGBA', 'HBHFBHDEFBBBGDB', 'BDDCG', 'CCEHACDDD', 'BECAECDHEHCCCGECBAE', 'EHEFDDBCFAGGEAFAG', 'FDDFEFBDBEAEDHGF', 'FBBACHFDBDA', 'DABHFHFDHHBFGDEDADCC', 'FCDDCBGCBFFCGDDBHC', 'DBAHFBAEBEBHBBE', 'GCAHABEHBCCBBG', 'BEEAEED', 'AEAFAAHFGEAHAHAFEBH', 'AEDEFCAHCDF', 'DAHAHG', 'GEEHBFAGDBBEAEHCBA', 'GDEEHCD', 'EFEBFEGC', 'AFDGCHHFGGDHFDDEHGAD', 'CEDFHDFGFFAAHEA', 'DFCFECEGG', 'BDEEHEDCFBEFABFDAFEA', 'CEDDFFHAEF', 'EGBCAEGAGAB', 'BFCGACCGAFGEEBAGAFA', 'CDEHHCGCCEDHH', 'CFHGCFGHB', 'GBCFFAEDHCCAAAHABBFA', 'CAAHHFC', 'BBBBCCBDH', 'EAHEDCHDBFDEHDE', 'BBABGEAGEHDHGAH', 'EECDHDBGADGEABGDEG', 'DHHGAFF', 'CGDFDFFAGACDE', 'BFCAEH', 'GHHDHBACCABCFEFCEF', 'EDBEC', 'DFAGEBDDDFHCHCBHBEBA', 'HBEDAHBFCEHFAH', 'ECAAGHAFAAABFHHGGED', 'HBCDFCACFCFEBFEF', 'GDDCDHCBFCGD', 'DEFFCD', 'BCEFDDDFEGDDHB', 'CFEHGFDAHFBHCDECB', 'EHHDGAFBBBBDEHGC', 'DGCDBHABGCCG', 'AGEAAGFFD', 'HGBGCDFEGD', 'BCDHHEG', 'BHEFBCAFFEEGC', 'ECAHDHGCHBHFAADGAFH', 'FFHGBEAAABGBEFH', 'FEDFGBBGEBFDGFHBE', 'EDDFFCCHHDHCFECEDFF', 'EDEHFEGCADEHGF', 'FDHACDAEEFA', 'CBFHE', 'CEAEBHFEB', 'BHGHGGEBFHDEAHGGCCA', 'GGAAGBFBFAFBBE', 'FFEDGCG', 'GEBCFBFFEGA', 'GDBAGD', 'DEFDBDE', 'HHBEABAHECFBGE', 'CGGAAEHCE', 'BBHGA', 'EDECBDFGBCB', 'DAGBDA', 'AAFBFGHBCACBFEBGECCA', 'CFEFEEDAFFAHFFH', 'DBFAFGFGCHAE', 'FCDEFGH', 'DHGFAEH', 'HHHHGFDC', 'ABGABBHCHGFDE', 'EFGEDFGBFBCHH', 'FGFBHDE', 'HEDFDDAECGGA', 'CBGEGEFCAHBF', 'ACFAAHGDH', 'FFGEBECBGACABC', 'CFBACHHGCFBFBGBAFH', 'AFDDG', 'DAGGE', 'ECEEBHHABDFBDHA', 'BEAFGFHACGA', 'BGEAEH', 'CECGCAHHEBDEHBCEE', 'HEABGEGCDCAG', 'DCFHGB', 'DDGCBB', 'EAGFGGDABDHCCGA', 'EGBAHHFFFGBGCB', 'ACDFA', 'BCFFGBAADGFBGHDBEF', 'GBECADCBCDFHEE', 'AFGAHGDF', 'ADACHHD', 'AHCABHHE', 'EHGHHCE', 'CFEBBEDHEGF', 'CEEGBEFFHGDFB', 'HEBFFDDEEHFGFCDDCHG', 'EHCHFCFDEEDEFDB', 'EGGDBAADBBAGFB', 'GBHGBCFHCDCBHDGDBGGD', 'GHHHCBGGGBAGD', 'AGFDCAGF', 'EEHEHEBCHECHGCDFBGBC', 'HFHDGACAB', 'HHGBDD', 'CFEEFCADGFGG', 'ACDBCDEBBFCACFG', 'AFEDAADDFC', 'EGDBFEGGDDCHGEHBD', 'CBAHEHHGADCCADHDA', 'DAFBEFF', 'DHHCEGFDEBDBGFFG', 'AEBGFDD', 'AEEFBCCCDAFBADEECFAG', 'GHBDCHEDCGFGBG', 'FBDEDCFCCEBE', 'AFHGEACD', 'GFDDHEEADHEHEGE', 'DHACAFACEBBEF', 'HFBFDBAGDHFDHF', 'DADFEDG', 'AFHDACFEGAFA', 'DHCDDFGEHFGBBEA', 'HFAFHAEGCGBEADFC', 'BAABCHAFHFADHA', 'EFGHCCGDEBCAE', 'DADCCD', 'BHFDBBG', 'AGBCHADBDEBFBGBFBBA', 'BDGBHCHBBEDGDC', 'HEHFGG', 'GHAHDHBDBHAFACFB', 'FADDAHCCGHDB', 'DBGBFDBDFHGDGDAB', 'AAEBAAHBG', 'ABFFAHBCGFB', 'BACBGDEF', 'DCCBGEF', 'EEDEGEFE', 'GHGAAAHCEGAFAFHH', 'CGDFCHAGFEDGGGHFGB', 'FGFFECEHGECEH', 'AFCCE', 'AHHECCHBEHCA', 'EGADGEAE', 'HAHEFAB', 'BCGCEACGAABCDEBDHD', 'DGAAADECHGHEEGCHDCF', 'DCGGBAHAHCCBGF', 'FEAAFBEBGHHFHFDBEG', 'EDHAAGECEAHGHAC', 'AFACGACCCHAEE', 'DDHDEFACHE', 'HEGBAFAFCFCDG', 'AFFFE', 'DCEEFBF', 'HCCAHFEBHAEBDBA', 'BDGEFG', 'GBFHEFECDDBEFHBBFHAC', 'AGGFBABBGDGGD', 'AGCHDACAFFADG', 'ECAHGCGAACBEEDEGG', 'GEHDFEECGFDDFEHCAF', 'FGBCEGFEB', 'AFBBBAF', 'ABFECAH', 'EHCBBCCAGHCFAC', 'FECEAFGDDFFCGCDACAAD', 'EBEHBCBBEFFCABH', 'BGDHDHD', 'EHCCEF', 'DGBAHFEE', 'FEDGHGHCBCHCABCAFH', 'EFFCAC', 'BCCAGGFHEDFHGHFEFCA', 'CHGAEDFGDGBFB', 'ABFFDFEHB', 'BFCCAAADB', 'CGBCDBHBFDDCEGF', 'FHGEFAC', 'CBCAHFBAB', 'DADGE', 'BHEEDBDGBGGFHF', 'GGHGGHDHBGEAAGAHHC', 'AEBFGEAHG', 'BFCADFHCDEHDGHECF', 'FCHBHBGGDAHFFD', 'DACGGDEGHEGEAFGHB', 'GHADGEGGFFBAGHGFEEEF', 'DHDEDGEBAHBGFEGGDB', 'ADCCCGEAECBDHFFH', 'DDHFDB', 'DACGGGHAAGCBEG', 'DHHHEHFCGF', 'EEGGAEECEEGAFAFDBGHF', 'CFDGBFAB', 'EFEGGDDHABA', 'DGCGHDACAAG', 'EHHBGADHFFGA', 'DEGHEBFCBHEAAB', 'DHFFEGFHHEHDHDAA', 'FDABCCGHCFFAAHFFA', 'DGGAFCDGBEGBEEB', 'EADEFGFDE', 'AAFHHEGECCFB', 'GHHCHB', 'DDHHHGGFFDDD', 'AEFHFHCAFHA', 'DEADGEBAAEDCADHGDF', 'HACBEGAHCCD', 'HGABACBEHHACBCDGBAA', 'EGHCHAH', 'ABHEBDCGC', 'CHHEGBDFFGAGFGEFH', 'GHBFEAB', 'FCEED', 'EGBDAC', 'HDHDDFDBEDGF', 'DBBDCFDBGDHACADDGB', 'HGCBDADACEA', 'EGGECEAH', 'AAEBC', 'BADFGEDFAGHBEEG', 'HADGDCEFB', 'BAAFEGHHDGDDEAGB', 'HBHGEDFCHGGEDADGACF', 'EHBDHEFECHDCFFFEED', 'GABBEBFCHEDECH', 'EHFFFGHHEBCDDEGA', 'CBHABD', 'DBFCCAEGAHCFHAFA', 'CDGDGACAHBBADGB', 'HCDAEGHF', 'GGFHFHHCBG', 'DFEHA', 'HFEEEBCEAD', 'BGGEDGBBBHHCFBG', 'ACFDDBADAFC', 'DEHHAABDGCHACFH', 'GBBAHFBCHEBAAEBA', 'EABEDCCBFFGGBGBHDF', 'BGCDEBEEABDHBC', 'HGECCFEDEHBAFCBGC', 'BAACADCFGFFFF', 'HGHFEFCC', 'FGBHBCAFCCHGCGA', 'BACHCDDGGEEGHCECHEBH', 'GBCHAFF', 'FACCBFCGBFHCABBGHDF', 'EAHDA', 'FFFHEBEEDCBHGGFCBBG', 'GABBAECEAADB', 'FCFCF', 'GFEEGDBDHHBBHEH', 'FEHEAHEBCHBAEBDF', 'DHEGDEGFEBAFB', 'HABHBGAEG', 'BCEFFA', 'GBCEFE', 'FAGFFAEFBBECBGFBHD', 'EAHAABEFFGEHDGGHCFB', 'CECFHEEDC', 'HCBBDDBG', 'CAEHHGDEGDEDE', 'GCHCHHGGCCD', 'GGDAEEDEDABDHGE', 'CECHHDAD', 'CECBEH', 'CHEACCH', 'GDBGDHGEHCGGAGDBEGF', 'BFCHDFE', 'HGACD', 'CFDADBFAGFBHCGBAFG', 'BGEHCEADBHFADBEC', 'AEHECA', 'ABBDHEH', 'HBFBABHBCCFF', 'BGBDFFFHGGDBFDGA', 'FAFAGCEAC', 'HFDDD', 'GHHGECEHCF', 'AGAHEFH', 'HBFCCGDDDDC', 'EGHCAEEEAHBEGAHFB', 'BDCHHEBHGFABFE', 'BEDGFEGBBAG', 'GHBCAHBFG', 'GDGFHDFGDAG', 'GACDBEGGC', 'HAGFDECDFGCGHAB', 'EFCDHFHBGF', 'GBHFHEGAFDFFAHCEDFDH', 'HFCAA', 'AGDHBEFAHEGAGFFHF', 'CHFHDDACFFE', 'GHHFACHHHBDBGBAEDA', 'CDGAFHCAFHDEDG', 'BAABEHBFDHBEEFFE', 'HGDGFBDFEEDBFEB', 'BHGCDG', 'EHCCBAA', 'CEHFDEEEECBEEDBHHD', 'CCHHDBBHBDCHFFHCB', 'GFFFFEHBAFBHG', 'FEBCA', 'FHCBFCCCEFH', 'EABFECAABGHEC', 'EHBCFBGDFGDDDHCBHE', 'EBDFFBHACGADAHBEBFDG', 'HAHFDADGFDCCG', 'FADHGAB', 'FBDCGGDCDHDEEDFGHG', 'AFHDBH', 'CDBFDEGFGFABE', 'GCEDFCBECGAAAEFGB', 'DAGDHBFFCBGHCHHG', 'DFBCFGG', 'BGEEEAAHEBED', 'HBFEBHEACFDAHHAD', 'ECHCDAAACCD', 'EEEHDDAACDDCDCGEG', 'DFFFACGBHDBBDGHECE', 'FEHCBAGCAHBBFFEFHECC', 'GCGEED', 'DDGEABFBBHFCDDBGC', 'CHAAEDABECF', 'FBCDEABCAHFE', 'GBADFBA', 'FDHFFBBFADGCCEDHADFF', 'FADBA', 'CCEGAHHBFBDAGA', 'EGHGHDHGGEHF', 'HAFBFGGEEADCFFCCAAHB', 'DDHBEECHBHHDCAFCFA', 'EFHCHGDGACCE', 'FFBDEBBAGH', 'AGBFBCHEFCD', 'HFECHDEGCDGGDBCF', 'AFDDDFFHHACFFDBAHB', 'BBDCBHABGG', 'FDADDCBCHBGG', 'BEADADHCDDDDHF', 'DCEEFEHHEHCHDA', 'ADCEDEAHE', 'CAGBFAAE', 'BFADB', 'EGHAAGHFHEHFE', 'CAEGHHGFFEFBFFCDC', 'FEEECBHHGEAGEBDFG', 'AACEFDDHFFDHBB', 'EAFGBGDHB', 'GFADBHHAH', 'DFFABEFACFGDCGBF', 'GDGCGC', 'AFDEDGCGBABHEDAFHA', 'BBGFADGAGCEFAEA', 'GBFABDFCF', 'AEEFBAGBCHECHEFFB', 'DDEAFDE', 'HGBDFAAEFCBFABDFDDDG', 'HACAGF', 'EADCGDEDC', 'DEDBCBDEBCAHHHGDFFF', 'DBBDCBFE', 'GBAAEDCHEDEFEBE', 'FBBFDHEF', 'BBDGBDGDECECBDAEFH', 'DHDGEACFGCHEGFAHEGB', 'BHFBFEDABGEDHGFEC', 'FBEAGDDEDDFGH', 'BHDDDHAGFGBEEGHGACC', 'FDEHHCBGCGCFAHC', 'BEBGCHABHC', 'BGAFCHAE', 'EFFDEBAEBBHAGHD', 'BEHCAHAGHHADHB', 'CDBEFBEDGH', 'FHAEEHC', 'HCEFGGCBHHA', 'ECBBHFEEBCBDCFAB', 'HGGGDFCCFCBCBHFBGHA', 'AGGGDHEFCDDEAGHDDGF', 'FAEEGBCHAB', 'AHFEHEB', 'BBHAACB', 'DCAAAGDDADBG', 'GCGDCCAABGCA', 'ABDDEEAGDDDBFH', 'BDEEC', 'HAGCGBGBE', 'EGGBE', 'GCHEGDA', 'EFEECBGCCGEEABDGAHGE', 'AGEEEFBHDFDCBAG', 'DFDBACC', 'DEBBCCFDCDFBEFHDB', 'FCBADAFBF', 'CFHGCFFEDFCEACAHCE', 'FHHGEFHHEEDFAHHGB', 'ACBABDCAAEFBGBFFCDE', 'FFEFHHCHEDDFDCHE', 'BACCACGEADDCEGBHCCGB', 'AEBHBDHGEHGGGCAD', 'CDAABFEACEHFDHBDF', 'DHCFHEAGGBEB', 'FEFCGADA', 'CFDDEHGABFFFCBGBED', 'CHHEBGEAGCAFGEEF', 'CCDEHDEFF', 'DABHAEDCCDBCFCFDD', 'AFCAFFHGCC', 'ADHEGDADA', 'EGFHBAEHAABFBBGFHH', 'EBBFFAFA', 'GAHDAFEDACCBEBCBFFFG', 'AEFDBHDD', 'DGAGHBECHDBAHCGHGAA', 'CBCDABHBEHEDEAAEHEFD', 'EACGCBCDAAED', 'BDCHHBFEFDBFFHFACB', 'CGCBDEDCGHAA'], 'label': [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1]}"}, {"args": ["Unable to find '/home/zxl240011/AI-Scientist-v2/experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/0-run/process_ForkProcess-2/SPR_BENCH/train.csv'"]}, null, {"args": ["Unable to find '/home/zxl240011/AI-Scientist-v2/experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/0-run/process_ForkProcess-4/SPR_BENCH/train.csv'"]}, null, null, null, null], "exc_stack": [[["/home/zxl240011/AI-Scientist-v2/ai_scientist/treesearch/interpreter.py", 144, "_run_session", "exec(compile(code, self.agent_file_name, \"exec\"), global_scope)"], ["runfile.py", 73, "<module>", "dsets = get_dataset()"], ["runfile.py", 61, "get_dataset", "synth[\"train\"] = load_dataset("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 2062, "load_dataset", "builder_instance = load_dataset_builder("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 1782, "load_dataset_builder", "dataset_module = dataset_module_factory("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 1497, "dataset_module_factory", ").get_module()"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 913, "get_module", "data_files = DataFilesDict.from_patterns("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 690, "from_patterns", "else DataFilesList.from_patterns("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 583, "from_patterns", "resolve_pattern("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 344, "resolve_pattern", "if is_relative_path(pattern):"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/utils/file_utils.py", 88, "is_relative_path", "return urlparse(url_or_filename).scheme == \"\" and not os.path.isabs(url_or_filename)"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/urllib/parse.py", 394, "urlparse", "url, scheme, _coerce_result = _coerce_args(url, scheme)"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/urllib/parse.py", 133, "_coerce_args", "return _decode_args(args) + (_encode_result,)"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/urllib/parse.py", 117, "_decode_args", "return tuple(x.decode(encoding, errors) if x else '' for x in args)"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/urllib/parse.py", 117, "<genexpr>", "return tuple(x.decode(encoding, errors) if x else '' for x in args)"]], [["/home/zxl240011/AI-Scientist-v2/ai_scientist/treesearch/interpreter.py", 144, "_run_session", "exec(compile(code, self.agent_file_name, \"exec\"), global_scope)"], ["runfile.py", 34, "<module>", "spr = load_spr_bench(DATA_PATH)"], ["runfile.py", 27, "load_spr_bench", "d[\"train\"] = _load(\"train.csv\")"], ["runfile.py", 19, "_load", "return load_dataset("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 2062, "load_dataset", "builder_instance = load_dataset_builder("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 1782, "load_dataset_builder", "dataset_module = dataset_module_factory("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 1497, "dataset_module_factory", ").get_module()"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 913, "get_module", "data_files = DataFilesDict.from_patterns("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 690, "from_patterns", "else DataFilesList.from_patterns("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 583, "from_patterns", "resolve_pattern("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 384, "resolve_pattern", "raise FileNotFoundError(error_msg)"]], null, [["/home/zxl240011/AI-Scientist-v2/ai_scientist/treesearch/interpreter.py", 144, "_run_session", "exec(compile(code, self.agent_file_name, \"exec\"), global_scope)"], ["runfile.py", 41, "<module>", "spr = load_spr_bench(data_root)"], ["runfile.py", 32, "load_spr_bench", "dset[\"train\"] = _load(\"train.csv\")"], ["runfile.py", 24, "_load", "return load_dataset("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 2062, "load_dataset", "builder_instance = load_dataset_builder("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 1782, "load_dataset_builder", "dataset_module = dataset_module_factory("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 1497, "dataset_module_factory", ").get_module()"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/load.py", 913, "get_module", "data_files = DataFilesDict.from_patterns("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 690, "from_patterns", "else DataFilesList.from_patterns("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 583, "from_patterns", "resolve_pattern("], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/datasets/data_files.py", 384, "resolve_pattern", "raise FileNotFoundError(error_msg)"]], null, null, null, null], "exp_name": "0-run", "metrics": [{"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}, {"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}, {"metric_names": [{"metric_name": "macro F1 score", "lower_is_better": false, "description": "Macro-averaged F1 score, which evaluates the balance between precision and recall for each class.", "data": [{"dataset_name": "training", "final_value": 0.6974, "best_value": 0.6974}, {"dataset_name": "validation", "final_value": 0.686, "best_value": 0.686}]}, {"metric_name": "loss", "lower_is_better": true, "description": "Loss measures the error in predictions. Lower values indicate better performance.", "data": [{"dataset_name": "training", "final_value": 0.6121, "best_value": 0.6121}, {"dataset_name": "validation", "final_value": 0.6347, "best_value": 0.6347}]}]}, {"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}, {"metric_names": [{"metric_name": "macro F1 score", "lower_is_better": false, "description": "Macro-averaged F1 score, which is the harmonic mean of precision and recall, averaged across classes.", "data": [{"dataset_name": "training", "final_value": 0.6822, "best_value": 0.6822}, {"dataset_name": "validation", "final_value": 0.6676, "best_value": 0.6676}]}, {"metric_name": "loss", "lower_is_better": true, "description": "Loss measures the error or difference between predicted and actual values. Lower values indicate better performance.", "data": [{"dataset_name": "training", "final_value": 0.6216, "best_value": 0.6216}, {"dataset_name": "validation", "final_value": 0.6581, "best_value": 0.6581}]}]}, {"metric_names": [{"metric_name": "macro F1 score", "lower_is_better": false, "description": "Macro-averaged F1 score, a measure of a model's accuracy in classification tasks.", "data": [{"dataset_name": "training", "final_value": 0.6914, "best_value": 0.6914}, {"dataset_name": "validation", "final_value": 0.68, "best_value": 0.68}]}, {"metric_name": "loss", "lower_is_better": true, "description": "Loss measures the error of the model's predictions. Lower values indicate better performance.", "data": [{"dataset_name": "training", "final_value": 0.6101, "best_value": 0.6101}, {"dataset_name": "validation", "final_value": 0.6344, "best_value": 0.6344}]}]}, {"metric_names": [{"metric_name": "macro F1 score", "lower_is_better": false, "description": "Measures the balance between precision and recall. A higher value indicates better performance.", "data": [{"dataset_name": "training", "final_value": 0.6929, "best_value": 0.6929}, {"dataset_name": "validation", "final_value": 0.696, "best_value": 0.696}]}, {"metric_name": "loss", "lower_is_better": true, "description": "Measures the error in predictions. A lower value indicates better performance.", "data": [{"dataset_name": "training", "final_value": 0.6165, "best_value": 0.6165}, {"dataset_name": "validation", "final_value": 0.6318, "best_value": 0.6318}]}]}, {"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}], "is_best_node": [false, false, true, false, false, false, false, false], "plots": [[], [], ["../../logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_loss_curve.png", "../../logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_f1_curve.png", "../../logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_confusion_matrix.png"], [], ["../../logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_loss_curve.png", "../../logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_f1_curve.png", "../../logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_confusion_matrix.png"], ["../../logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_loss_curve.png", "../../logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_f1_curve.png", "../../logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_confusion_matrix.png"], ["../../logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_loss_curve.png", "../../logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_f1_curve.png", "../../logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_confusion_matrix.png"], ["../../logs/0-run/experiment_results/seed_aggregation_fa9a87faa65c4ba0b00afa5aca830376/SPR_BENCH_agg_loss_curve.png", "../../logs/0-run/experiment_results/seed_aggregation_fa9a87faa65c4ba0b00afa5aca830376/SPR_BENCH_agg_f1_curve.png", "../../logs/0-run/experiment_results/seed_aggregation_fa9a87faa65c4ba0b00afa5aca830376/SPR_BENCH_agg_confusion_matrix.png"]], "plot_paths": [[], [], ["experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_loss_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_f1_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_confusion_matrix.png"], [], ["experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_loss_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_f1_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_confusion_matrix.png"], ["experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_loss_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_f1_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_confusion_matrix.png"], ["experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_loss_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_f1_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_confusion_matrix.png"], ["experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/seed_aggregation_fa9a87faa65c4ba0b00afa5aca830376/SPR_BENCH_agg_loss_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/seed_aggregation_fa9a87faa65c4ba0b00afa5aca830376/SPR_BENCH_agg_f1_curve.png", "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/seed_aggregation_fa9a87faa65c4ba0b00afa5aca830376/SPR_BENCH_agg_confusion_matrix.png"]], "plot_analyses": [[], [], [{"analysis": "This plot shows the training and validation loss curves over 5 epochs. Both curves decrease steadily, indicating that the model is learning effectively. The training loss reduces more sharply than the validation loss, but they remain close, suggesting that the model is not overfitting. The final loss values are close to convergence, which is a positive sign for the model's stability.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_loss_curve.png"}, {"analysis": "This plot illustrates the training and validation Macro-F1 scores over 5 epochs. The training Macro-F1 score increases sharply in the first epoch and then shows gradual improvement, reaching a stable value. The validation Macro-F1 score follows a similar trend, with a slightly lower but consistent increase. The proximity of the two curves indicates that the model generalizes well to unseen data.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_f1_curve.png"}, {"analysis": "The confusion matrix provides a detailed breakdown of the model's performance on the best development set. The model correctly predicts 170 true negatives and 173 true positives, while there are 78 false positives and 79 false negatives. This indicates a relatively balanced performance, though there is room for improvement in reducing misclassifications.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_6e78e64bcaa34a7789da26644258e623_proc_3327789/SPR_BENCH_confusion_matrix.png"}], [], [{"analysis": "The plot shows the training and validation loss over 5 epochs. The training loss decreases steadily, indicating that the model is learning from the training data. The validation loss initially decreases but starts to plateau and slightly decreases by the end of the training. This suggests that the model generalizes reasonably well to unseen data, but there might be room for improvement in terms of validation performance, as the gap between the training and validation loss is small but persistent.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_loss_curve.png"}, {"analysis": "The plot displays the Macro-F1 scores for training and validation over 5 epochs. Both metrics improve steadily, with the training Macro-F1 score reaching a higher value compared to the validation Macro-F1 score. This indicates that the model is learning to classify the sequences better over time, but the gap between training and validation performance suggests some potential overfitting or insufficient generalization to unseen data.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_f1_curve.png"}, {"analysis": "The confusion matrix for the best-performing model on the development set shows the distribution of true positives, true negatives, false positives, and false negatives. The model performs reasonably well, with more true positives and true negatives compared to misclassifications. However, there is a noticeable number of false positives (72) and false negatives (94), indicating areas where the model could be improved to reduce misclassification rates.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/SPR_BENCH_confusion_matrix.png"}], [{"analysis": "This plot shows the training and validation loss over 5 epochs. The training loss decreases steadily, indicating that the model is learning from the training data. The validation loss also decreases, but it exhibits some fluctuation between epochs 2 and 3 before stabilizing. This suggests that the model is generalizing reasonably well, though there might be slight overfitting or instability early in training. Further regularization or hyperparameter tuning could help reduce these fluctuations.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_loss_curve.png"}, {"analysis": "This plot depicts the training and validation Macro-F1 scores over the same 5 epochs. Both metrics improve steadily, with the validation Macro-F1 closely tracking the training Macro-F1 after the second epoch. This indicates that the model's performance is consistent across the training and validation datasets, and it is successfully learning to classify sequences governed by symbolic poly-factor rules. The near-convergence of the two curves suggests that the model avoids significant overfitting.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_f1_curve.png"}, {"analysis": "The confusion matrix summarizes the model's performance on the development dataset at its best epoch. The true negatives (170) and true positives (170) are balanced, but there are also a notable number of false positives (78) and false negatives (82). This indicates that while the model is effective overall, there is room for improvement in distinguishing between the two classes. Techniques like class rebalancing or more sophisticated loss functions might help reduce these errors.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/SPR_BENCH_confusion_matrix.png"}], [{"analysis": "This plot shows the training and validation loss over 5 epochs. The training loss decreases steadily, indicating the model is learning from the training data. The validation loss also decreases initially but starts to stabilize and even slightly increase after epoch 3. This suggests that the model may be approaching overfitting, where it performs well on training data but not as well on unseen data. Further regularization or early stopping might help improve generalization.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_loss_curve.png"}, {"analysis": "This plot displays the macro-F1 score for both training and validation sets over 5 epochs. The macro-F1 score for training improves significantly in the first two epochs and then stabilizes. The validation macro-F1 score starts high and remains relatively stable, with a slight improvement toward the end. This indicates that the model is performing reasonably well in balancing precision and recall across classes, but further fine-tuning might be required to enhance performance stability.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_f1_curve.png"}, {"analysis": "The confusion matrix for the best development set performance indicates that the model is reasonably balanced in predicting both classes (0 and 1). However, there is a noticeable number of misclassifications in both categories, with 75 false positives and 77 false negatives. This suggests that while the model has learned the task to some extent, there is room for improvement in reducing classification errors, possibly by refining the model architecture or hyperparameters.", "plot_path": "experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/SPR_BENCH_confusion_matrix.png"}], []], "vlm_feedback_summary": ["[]", "[]", "The provided plots indicate that the model is learning effectively and\ngeneralizing well to unseen data. The loss curves show steady convergence, and\nthe Macro-F1 scores demonstrate consistent improvement. The confusion matrix\nreveals balanced performance with some scope for reducing misclassifications.", "[]", "The plots indicate that the model is learning effectively, as evidenced by the\ndecreasing loss and increasing Macro-F1 scores. However, there is room for\nimprovement in generalization, as suggested by the validation metrics and the\nconfusion matrix. The confusion matrix highlights specific misclassification\nissues that could be addressed in future iterations of the model.", "The plots demonstrate a promising initial implementation with decreasing loss,\nimproving Macro-F1 scores, and balanced classification performance. However,\nslight fluctuations in validation loss and classification errors suggest\noptimization opportunities such as hyperparameter tuning, regularization, or\nadvanced loss functions to further refine the model.", "The provided plots indicate that the model is learning effectively but shows\nsigns of overfitting and misclassification issues. The loss curves suggest\npotential overfitting after 3 epochs, while the macro-F1 score highlights decent\nbut improvable class balance. The confusion matrix reveals significant\nmisclassification, necessitating further optimization to enhance accuracy and\nrobustness.", "[]"], "exec_time": [1.4053621292114258, 1.2066283226013184, 3.684948205947876, 1.3749148845672607, 5.506430387496948, 4.611207008361816, 4.761048078536987, null], "exec_time_feedback": ["", "", "", "", "", "", "", ""], "datasets_successfully_tested": [[], [], ["[\"SPR_BENCH\"]"], [], ["['SPR_BENCH']"], ["['SPR_BENCH']"], ["[\"SPR_BENCH\"]"], []], "plot_code": [null, null, "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, f1_score\n\n# ensure working directory\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# -------- load experiment data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\ndata = experiment_data.get(\"SPR_BENCH\", {})\nepochs = np.array(data.get(\"epochs\", []))\ntrain_ls = np.array(data.get(\"losses\", {}).get(\"train\", []))\nval_ls = np.array(data.get(\"losses\", {}).get(\"val\", []))\ntrain_f1 = np.array(data.get(\"metrics\", {}).get(\"train\", []))\nval_f1 = np.array(data.get(\"metrics\", {}).get(\"val\", []))\npreds = np.array(data.get(\"predictions\", []))\ngts = np.array(data.get(\"ground_truth\", []))\n\n# print best dev F1 if available\nif len(val_f1):\n    print(f\"Best Dev Macro-F1 (stored) = {val_f1.max():.4f}\")\n\n# -------- 1) Loss curve ------------\ntry:\n    if len(epochs) and len(train_ls) and len(val_ls):\n        plt.figure()\n        plt.plot(epochs, train_ls, label=\"Train Loss\")\n        plt.plot(epochs, val_ls, label=\"Val Loss\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Cross-Entropy Loss\")\n        plt.title(\"SPR_BENCH: Training vs Validation Loss\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_loss_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating loss curve: {e}\")\n    plt.close()\n\n# -------- 2) F1 curve ---------------\ntry:\n    if len(epochs) and len(train_f1) and len(val_f1):\n        plt.figure()\n        plt.plot(epochs, train_f1, label=\"Train Macro-F1\")\n        plt.plot(epochs, val_f1, label=\"Val Macro-F1\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Macro-F1\")\n        plt.title(\"SPR_BENCH: Training vs Validation Macro-F1\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_f1_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating F1 curve: {e}\")\n    plt.close()\n\n# -------- 3) Confusion matrix -------\ntry:\n    if len(preds) and len(gts):\n        cm = confusion_matrix(gts, preds, labels=[0, 1])\n        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0, 1])\n        plt.figure()\n        disp.plot(cmap=\"Blues\", values_format=\"d\")\n        plt.title(\"SPR_BENCH: Confusion Matrix (Best Dev)\")\n        fname = os.path.join(working_dir, \"SPR_BENCH_confusion_matrix.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating confusion matrix: {e}\")\n    plt.close()\n", null, "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, f1_score\n\n# ensure working directory\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# -------- load experiment data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\ndata = experiment_data.get(\"SPR_BENCH\", {})\nepochs = np.array(data.get(\"epochs\", []))\ntrain_ls = np.array(data.get(\"losses\", {}).get(\"train\", []))\nval_ls = np.array(data.get(\"losses\", {}).get(\"val\", []))\ntrain_f1 = np.array(data.get(\"metrics\", {}).get(\"train\", []))\nval_f1 = np.array(data.get(\"metrics\", {}).get(\"val\", []))\npreds = np.array(data.get(\"predictions\", []))\ngts = np.array(data.get(\"ground_truth\", []))\n\n# print best dev F1 if available\nif len(val_f1):\n    print(f\"Best Dev Macro-F1 (stored) = {val_f1.max():.4f}\")\n\n# -------- 1) Loss curve ------------\ntry:\n    if len(epochs) and len(train_ls) and len(val_ls):\n        plt.figure()\n        plt.plot(epochs, train_ls, label=\"Train Loss\")\n        plt.plot(epochs, val_ls, label=\"Val Loss\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Cross-Entropy Loss\")\n        plt.title(\"SPR_BENCH: Training vs Validation Loss\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_loss_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating loss curve: {e}\")\n    plt.close()\n\n# -------- 2) F1 curve ---------------\ntry:\n    if len(epochs) and len(train_f1) and len(val_f1):\n        plt.figure()\n        plt.plot(epochs, train_f1, label=\"Train Macro-F1\")\n        plt.plot(epochs, val_f1, label=\"Val Macro-F1\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Macro-F1\")\n        plt.title(\"SPR_BENCH: Training vs Validation Macro-F1\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_f1_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating F1 curve: {e}\")\n    plt.close()\n\n# -------- 3) Confusion matrix -------\ntry:\n    if len(preds) and len(gts):\n        cm = confusion_matrix(gts, preds, labels=[0, 1])\n        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0, 1])\n        plt.figure()\n        disp.plot(cmap=\"Blues\", values_format=\"d\")\n        plt.title(\"SPR_BENCH: Confusion Matrix (Best Dev)\")\n        fname = os.path.join(working_dir, \"SPR_BENCH_confusion_matrix.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating confusion matrix: {e}\")\n    plt.close()\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, f1_score\n\n# ensure working directory\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# -------- load experiment data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\ndata = experiment_data.get(\"SPR_BENCH\", {})\nepochs = np.array(data.get(\"epochs\", []))\ntrain_ls = np.array(data.get(\"losses\", {}).get(\"train\", []))\nval_ls = np.array(data.get(\"losses\", {}).get(\"val\", []))\ntrain_f1 = np.array(data.get(\"metrics\", {}).get(\"train\", []))\nval_f1 = np.array(data.get(\"metrics\", {}).get(\"val\", []))\npreds = np.array(data.get(\"predictions\", []))\ngts = np.array(data.get(\"ground_truth\", []))\n\n# print best dev F1 if available\nif len(val_f1):\n    print(f\"Best Dev Macro-F1 (stored) = {val_f1.max():.4f}\")\n\n# -------- 1) Loss curve ------------\ntry:\n    if len(epochs) and len(train_ls) and len(val_ls):\n        plt.figure()\n        plt.plot(epochs, train_ls, label=\"Train Loss\")\n        plt.plot(epochs, val_ls, label=\"Val Loss\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Cross-Entropy Loss\")\n        plt.title(\"SPR_BENCH: Training vs Validation Loss\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_loss_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating loss curve: {e}\")\n    plt.close()\n\n# -------- 2) F1 curve ---------------\ntry:\n    if len(epochs) and len(train_f1) and len(val_f1):\n        plt.figure()\n        plt.plot(epochs, train_f1, label=\"Train Macro-F1\")\n        plt.plot(epochs, val_f1, label=\"Val Macro-F1\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Macro-F1\")\n        plt.title(\"SPR_BENCH: Training vs Validation Macro-F1\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_f1_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating F1 curve: {e}\")\n    plt.close()\n\n# -------- 3) Confusion matrix -------\ntry:\n    if len(preds) and len(gts):\n        cm = confusion_matrix(gts, preds, labels=[0, 1])\n        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0, 1])\n        plt.figure()\n        disp.plot(cmap=\"Blues\", values_format=\"d\")\n        plt.title(\"SPR_BENCH: Confusion Matrix (Best Dev)\")\n        fname = os.path.join(working_dir, \"SPR_BENCH_confusion_matrix.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating confusion matrix: {e}\")\n    plt.close()\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, f1_score\n\n# ensure working directory\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# -------- load experiment data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\ndata = experiment_data.get(\"SPR_BENCH\", {})\nepochs = np.array(data.get(\"epochs\", []))\ntrain_ls = np.array(data.get(\"losses\", {}).get(\"train\", []))\nval_ls = np.array(data.get(\"losses\", {}).get(\"val\", []))\ntrain_f1 = np.array(data.get(\"metrics\", {}).get(\"train\", []))\nval_f1 = np.array(data.get(\"metrics\", {}).get(\"val\", []))\npreds = np.array(data.get(\"predictions\", []))\ngts = np.array(data.get(\"ground_truth\", []))\n\n# print best dev F1 if available\nif len(val_f1):\n    print(f\"Best Dev Macro-F1 (stored) = {val_f1.max():.4f}\")\n\n# -------- 1) Loss curve ------------\ntry:\n    if len(epochs) and len(train_ls) and len(val_ls):\n        plt.figure()\n        plt.plot(epochs, train_ls, label=\"Train Loss\")\n        plt.plot(epochs, val_ls, label=\"Val Loss\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Cross-Entropy Loss\")\n        plt.title(\"SPR_BENCH: Training vs Validation Loss\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_loss_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating loss curve: {e}\")\n    plt.close()\n\n# -------- 2) F1 curve ---------------\ntry:\n    if len(epochs) and len(train_f1) and len(val_f1):\n        plt.figure()\n        plt.plot(epochs, train_f1, label=\"Train Macro-F1\")\n        plt.plot(epochs, val_f1, label=\"Val Macro-F1\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Macro-F1\")\n        plt.title(\"SPR_BENCH: Training vs Validation Macro-F1\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_f1_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating F1 curve: {e}\")\n    plt.close()\n\n# -------- 3) Confusion matrix -------\ntry:\n    if len(preds) and len(gts):\n        cm = confusion_matrix(gts, preds, labels=[0, 1])\n        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0, 1])\n        plt.figure()\n        disp.plot(cmap=\"Blues\", values_format=\"d\")\n        plt.title(\"SPR_BENCH: Confusion Matrix (Best Dev)\")\n        fname = os.path.join(working_dir, \"SPR_BENCH_confusion_matrix.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating confusion matrix: {e}\")\n    plt.close()\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\n# -------------------------------------------------------------------------\n# set up paths\n# -------------------------------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# list of experiment result files provided by the system\nexperiment_data_path_list = [\n    \"experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_9891c59e3e0f4298a9167b40758dd094_proc_3327788/experiment_data.npy\",\n    \"experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_96cb58584cf847579162c4b367b655df_proc_3327790/experiment_data.npy\",\n    \"experiments/2025-08-17_18-48-06_symblic_polyrule_reasoning_attempt_0/logs/0-run/experiment_results/experiment_d7084f96a1584b27a181610122410395_proc_3327787/experiment_data.npy\",\n]\n\n# -------------------------------------------------------------------------\n# load experiment data\n# -------------------------------------------------------------------------\nall_experiment_data = []\nfor path in experiment_data_path_list:\n    try:\n        full_path = os.path.join(os.getenv(\"AI_SCIENTIST_ROOT\", \"\"), path)\n        exp_data = np.load(full_path, allow_pickle=True).item()\n        all_experiment_data.append(exp_data)\n    except Exception as e:\n        print(f\"Error loading experiment data from {path}: {e}\")\n\n\n# -------------------------------------------------------------------------\n# aggregation helpers\n# -------------------------------------------------------------------------\ndef stack_and_truncate(arrays):\n    \"\"\"Stack 1-D arrays after truncating them to the minimum length.\"\"\"\n    if not arrays:\n        return np.array([])\n    min_len = min(len(a) for a in arrays if len(a))\n    if min_len == 0:\n        return np.array([])\n    return np.vstack([a[:min_len] for a in arrays]), min_len\n\n\ndataset_name = \"SPR_BENCH\"\ntrain_losses, val_losses = [], []\ntrain_f1s, val_f1s = [], []\nall_epochs = []\nall_best_val_f1 = []\nall_preds, all_gts = [], []\n\n# gather arrays\nfor idx, ed in enumerate(all_experiment_data):\n    data = ed.get(dataset_name, {})\n    epochs = np.array(data.get(\"epochs\", []))\n    train_ls = np.array(data.get(\"losses\", {}).get(\"train\", []))\n    val_ls = np.array(data.get(\"losses\", {}).get(\"val\", []))\n    train_f1 = np.array(data.get(\"metrics\", {}).get(\"train\", []))\n    val_f1 = np.array(data.get(\"metrics\", {}).get(\"val\", []))\n    preds = np.array(data.get(\"predictions\", []))\n    gts = np.array(data.get(\"ground_truth\", []))\n\n    # keep only non-empty runs\n    if len(epochs):\n        train_losses.append(train_ls)\n        val_losses.append(val_ls)\n        train_f1s.append(train_f1)\n        val_f1s.append(val_f1)\n        all_epochs.append(epochs)\n        if len(val_f1):\n            best_f1 = float(np.max(val_f1))\n            all_best_val_f1.append(best_f1)\n            print(f\"Run {idx:02d} best Dev Macro-F1 = {best_f1:.4f}\")\n    if len(preds) and len(gts):\n        all_preds.extend(preds.tolist())\n        all_gts.extend(gts.tolist())\n\n# -------------------------------------------------------------------------\n# compute means and standard errors\n# -------------------------------------------------------------------------\ntrain_mat, min_len = stack_and_truncate(train_losses)\nval_mat, _ = stack_and_truncate(val_losses)\ntrain_f1_mat, _ = stack_and_truncate(train_f1s)\nval_f1_mat, _ = stack_and_truncate(val_f1s)\nepoch_axis = np.arange(min_len) if min_len else np.array([])\n\n\ndef mean_and_se(mat):\n    if mat.size == 0:\n        return np.array([]), np.array([])\n    mean = mat.mean(axis=0)\n    se = mat.std(axis=0, ddof=1) / np.sqrt(mat.shape[0])\n    return mean, se\n\n\ntrain_loss_mean, train_loss_se = mean_and_se(train_mat)\nval_loss_mean, val_loss_se = mean_and_se(val_mat)\ntrain_f1_mean, train_f1_se = mean_and_se(train_f1_mat)\nval_f1_mean, val_f1_se = mean_and_se(val_f1_mat)\n\nif all_best_val_f1:\n    print(\n        f\"Aggregated best Dev Macro-F1 (mean \u00b1 SE) = \"\n        f\"{np.mean(all_best_val_f1):.4f} \u00b1 \"\n        f\"{np.std(all_best_val_f1, ddof=1)/np.sqrt(len(all_best_val_f1)):.4f}\"\n    )\n\n# -------------------------------------------------------------------------\n# 1) aggregated loss curve\n# -------------------------------------------------------------------------\ntry:\n    if epoch_axis.size and train_loss_mean.size and val_loss_mean.size:\n        plt.figure()\n        plt.plot(epoch_axis, train_loss_mean, label=\"Train Loss (mean)\", color=\"C0\")\n        plt.fill_between(\n            epoch_axis,\n            train_loss_mean - train_loss_se,\n            train_loss_mean + train_loss_se,\n            color=\"C0\",\n            alpha=0.3,\n            label=\"Train Loss (\u00b1SE)\",\n        )\n        plt.plot(epoch_axis, val_loss_mean, label=\"Val Loss (mean)\", color=\"C1\")\n        plt.fill_between(\n            epoch_axis,\n            val_loss_mean - val_loss_se,\n            val_loss_mean + val_loss_se,\n            color=\"C1\",\n            alpha=0.3,\n            label=\"Val Loss (\u00b1SE)\",\n        )\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Cross-Entropy Loss\")\n        plt.title(\"SPR_BENCH: Aggregated Train/Val Loss\\n(Mean \u00b1 Standard Error)\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_agg_loss_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating aggregated loss curve: {e}\")\n    plt.close()\n\n# -------------------------------------------------------------------------\n# 2) aggregated macro-F1 curve\n# -------------------------------------------------------------------------\ntry:\n    if epoch_axis.size and train_f1_mean.size and val_f1_mean.size:\n        plt.figure()\n        plt.plot(epoch_axis, train_f1_mean, label=\"Train Macro-F1 (mean)\", color=\"C0\")\n        plt.fill_between(\n            epoch_axis,\n            train_f1_mean - train_f1_se,\n            train_f1_mean + train_f1_se,\n            color=\"C0\",\n            alpha=0.3,\n            label=\"Train Macro-F1 (\u00b1SE)\",\n        )\n        plt.plot(epoch_axis, val_f1_mean, label=\"Val Macro-F1 (mean)\", color=\"C1\")\n        plt.fill_between(\n            epoch_axis,\n            val_f1_mean - val_f1_se,\n            val_f1_mean + val_f1_se,\n            color=\"C1\",\n            alpha=0.3,\n            label=\"Val Macro-F1 (\u00b1SE)\",\n        )\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Macro-F1\")\n        plt.title(\"SPR_BENCH: Aggregated Train/Val Macro-F1\\n(Mean \u00b1 Standard Error)\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_agg_f1_curve.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating aggregated F1 curve: {e}\")\n    plt.close()\n\n# -------------------------------------------------------------------------\n# 3) aggregated confusion matrix (all runs combined)\n# -------------------------------------------------------------------------\ntry:\n    if len(all_preds) and len(all_gts):\n        cm = confusion_matrix(all_gts, all_preds)\n        disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n        plt.figure()\n        disp.plot(cmap=\"Blues\", values_format=\"d\")\n        plt.title(\"SPR_BENCH: Confusion Matrix\\n(All Runs Combined)\")\n        fname = os.path.join(working_dir, \"SPR_BENCH_agg_confusion_matrix.png\")\n        plt.savefig(fname)\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating aggregated confusion matrix: {e}\")\n    plt.close()\n"], "plot_plan": [null, null, "We will load the serialized experiment_data, pull out the stored epochs, training/validation losses, and macro-F1 scores, and make three standard plots: (1) train/val loss vs. epoch, (2) train/val macro-F1 vs. epoch, and (3) a confusion matrix for the best-validation predictions. Each figure is wrapped in its own try-except so failures in one plot don\u2019t block the rest. The figures are titled descriptively and saved to working_dir with informative filenames that include the dataset name and plot type. After plotting we recompute and print the best dev macro-F1 directly from the stored arrays to give an immediate metric check. All figures are closed explicitly to avoid memory leaks.", null, null, null, null, null], "ablation_name": [null, null, null, null, null, null, null, null], "hyperparam_name": [null, null, null, null, null, null, null, null], "is_seed_node": [false, false, false, false, true, true, true, true], "is_seed_agg_node": [false, false, false, false, false, false, false, true], "parse_metrics_plan": ["", "", "The script will locate the working directory, load the stored numpy dictionary,\nand iterate over every dataset it contains.   For each dataset it will gather\nthe training / validation macro-F1 lists and loss lists that were recorded\nduring training.   It will then compute the best (maximum) F1 scores and the\nbest (minimum) losses and print them with explicit, descriptive labels so there\nis no ambiguity about what each value represents.   All code is placed at global\nscope so the file runs immediately when executed.", "", "The script will locate the working directory, load the stored numpy dictionary,\nand iterate over every dataset it contains.   For each dataset it will gather\nthe training / validation macro-F1 lists and loss lists that were recorded\nduring training.   It will then compute the best (maximum) F1 scores and the\nbest (minimum) losses and print them with explicit, descriptive labels so there\nis no ambiguity about what each value represents.   All code is placed at global\nscope so the file runs immediately when executed.", "The script will locate the working directory, load the stored numpy dictionary,\nand iterate over every dataset it contains.   For each dataset it will gather\nthe training / validation macro-F1 lists and loss lists that were recorded\nduring training.   It will then compute the best (maximum) F1 scores and the\nbest (minimum) losses and print them with explicit, descriptive labels so there\nis no ambiguity about what each value represents.   All code is placed at global\nscope so the file runs immediately when executed.", "The script will locate the working directory, load the stored numpy dictionary,\nand iterate over every dataset it contains.   For each dataset it will gather\nthe training / validation macro-F1 lists and loss lists that were recorded\nduring training.   It will then compute the best (maximum) F1 scores and the\nbest (minimum) losses and print them with explicit, descriptive labels so there\nis no ambiguity about what each value represents.   All code is placed at global\nscope so the file runs immediately when executed.", ""], "parse_metrics_code": ["", "", "import os\nimport numpy as np\n\n# -------------------------------------------------\n# locate and load the saved experiment information\n# -------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nexp_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(exp_path, allow_pickle=True).item()\n\n\n# -------------------------------------------------\n# helper for safe extraction and best-value picking\n# -------------------------------------------------\ndef best_value(values, higher_is_better=True):\n    if not values:\n        return None\n    return max(values) if higher_is_better else min(values)\n\n\n# -------------------------------------------------\n# iterate through every dataset and report metrics\n# -------------------------------------------------\nfor dataset_name, content in experiment_data.items():\n    print(dataset_name)  # dataset header\n\n    # Macro-F1 scores\n    train_f1_best = best_value(\n        content[\"metrics\"].get(\"train\", []), higher_is_better=True\n    )\n    val_f1_best = best_value(content[\"metrics\"].get(\"val\", []), higher_is_better=True)\n\n    if train_f1_best is not None:\n        print(f\"best training macro F1 score: {train_f1_best:.4f}\")\n    if val_f1_best is not None:\n        print(f\"best validation macro F1 score: {val_f1_best:.4f}\")\n\n    # Cross-entropy losses\n    train_loss_best = best_value(\n        content[\"losses\"].get(\"train\", []), higher_is_better=False\n    )\n    val_loss_best = best_value(content[\"losses\"].get(\"val\", []), higher_is_better=False)\n\n    if train_loss_best is not None:\n        print(f\"best training loss: {train_loss_best:.4f}\")\n    if val_loss_best is not None:\n        print(f\"best validation loss: {val_loss_best:.4f}\")\n\n    # blank line between datasets\n    print()\n", "", "import os\nimport numpy as np\n\n# -------------------------------------------------\n# locate and load the saved experiment information\n# -------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nexp_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(exp_path, allow_pickle=True).item()\n\n\n# -------------------------------------------------\n# helper for safe extraction and best-value picking\n# -------------------------------------------------\ndef best_value(values, higher_is_better=True):\n    if not values:\n        return None\n    return max(values) if higher_is_better else min(values)\n\n\n# -------------------------------------------------\n# iterate through every dataset and report metrics\n# -------------------------------------------------\nfor dataset_name, content in experiment_data.items():\n    print(dataset_name)  # dataset header\n\n    # Macro-F1 scores\n    train_f1_best = best_value(\n        content[\"metrics\"].get(\"train\", []), higher_is_better=True\n    )\n    val_f1_best = best_value(content[\"metrics\"].get(\"val\", []), higher_is_better=True)\n\n    if train_f1_best is not None:\n        print(f\"best training macro F1 score: {train_f1_best:.4f}\")\n    if val_f1_best is not None:\n        print(f\"best validation macro F1 score: {val_f1_best:.4f}\")\n\n    # Cross-entropy losses\n    train_loss_best = best_value(\n        content[\"losses\"].get(\"train\", []), higher_is_better=False\n    )\n    val_loss_best = best_value(content[\"losses\"].get(\"val\", []), higher_is_better=False)\n\n    if train_loss_best is not None:\n        print(f\"best training loss: {train_loss_best:.4f}\")\n    if val_loss_best is not None:\n        print(f\"best validation loss: {val_loss_best:.4f}\")\n\n    # blank line between datasets\n    print()\n", "import os\nimport numpy as np\n\n# -------------------------------------------------\n# locate and load the saved experiment information\n# -------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nexp_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(exp_path, allow_pickle=True).item()\n\n\n# -------------------------------------------------\n# helper for safe extraction and best-value picking\n# -------------------------------------------------\ndef best_value(values, higher_is_better=True):\n    if not values:\n        return None\n    return max(values) if higher_is_better else min(values)\n\n\n# -------------------------------------------------\n# iterate through every dataset and report metrics\n# -------------------------------------------------\nfor dataset_name, content in experiment_data.items():\n    print(dataset_name)  # dataset header\n\n    # Macro-F1 scores\n    train_f1_best = best_value(\n        content[\"metrics\"].get(\"train\", []), higher_is_better=True\n    )\n    val_f1_best = best_value(content[\"metrics\"].get(\"val\", []), higher_is_better=True)\n\n    if train_f1_best is not None:\n        print(f\"best training macro F1 score: {train_f1_best:.4f}\")\n    if val_f1_best is not None:\n        print(f\"best validation macro F1 score: {val_f1_best:.4f}\")\n\n    # Cross-entropy losses\n    train_loss_best = best_value(\n        content[\"losses\"].get(\"train\", []), higher_is_better=False\n    )\n    val_loss_best = best_value(content[\"losses\"].get(\"val\", []), higher_is_better=False)\n\n    if train_loss_best is not None:\n        print(f\"best training loss: {train_loss_best:.4f}\")\n    if val_loss_best is not None:\n        print(f\"best validation loss: {val_loss_best:.4f}\")\n\n    # blank line between datasets\n    print()\n", "import os\nimport numpy as np\n\n# -------------------------------------------------\n# locate and load the saved experiment information\n# -------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nexp_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(exp_path, allow_pickle=True).item()\n\n\n# -------------------------------------------------\n# helper for safe extraction and best-value picking\n# -------------------------------------------------\ndef best_value(values, higher_is_better=True):\n    if not values:\n        return None\n    return max(values) if higher_is_better else min(values)\n\n\n# -------------------------------------------------\n# iterate through every dataset and report metrics\n# -------------------------------------------------\nfor dataset_name, content in experiment_data.items():\n    print(dataset_name)  # dataset header\n\n    # Macro-F1 scores\n    train_f1_best = best_value(\n        content[\"metrics\"].get(\"train\", []), higher_is_better=True\n    )\n    val_f1_best = best_value(content[\"metrics\"].get(\"val\", []), higher_is_better=True)\n\n    if train_f1_best is not None:\n        print(f\"best training macro F1 score: {train_f1_best:.4f}\")\n    if val_f1_best is not None:\n        print(f\"best validation macro F1 score: {val_f1_best:.4f}\")\n\n    # Cross-entropy losses\n    train_loss_best = best_value(\n        content[\"losses\"].get(\"train\", []), higher_is_better=False\n    )\n    val_loss_best = best_value(content[\"losses\"].get(\"val\", []), higher_is_better=False)\n\n    if train_loss_best is not None:\n        print(f\"best training loss: {train_loss_best:.4f}\")\n    if val_loss_best is not None:\n        print(f\"best validation loss: {val_loss_best:.4f}\")\n\n    # blank line between datasets\n    print()\n", ""], "parse_term_out": ["", "", "['SPR_BENCH', '\\n', 'best training macro F1 score: 0.6974', '\\n', 'best\nvalidation macro F1 score: 0.6860', '\\n', 'best training loss: 0.6121', '\\n',\n'best validation loss: 0.6347', '\\n', '\\n', 'Execution time: a moment seconds\n(time limit is 30 minutes).']", "", "['SPR_BENCH', '\\n', 'best training macro F1 score: 0.6822', '\\n', 'best\nvalidation macro F1 score: 0.6676', '\\n', 'best training loss: 0.6216', '\\n',\n'best validation loss: 0.6581', '\\n', '\\n', 'Execution time: a moment seconds\n(time limit is 30 minutes).']", "['SPR_BENCH', '\\n', 'best training macro F1 score: 0.6914', '\\n', 'best\nvalidation macro F1 score: 0.6800', '\\n', 'best training loss: 0.6101', '\\n',\n'best validation loss: 0.6344', '\\n', '\\n', 'Execution time: a moment seconds\n(time limit is 30 minutes).']", "['SPR_BENCH', '\\n', 'best training macro F1 score: 0.6929', '\\n', 'best\nvalidation macro F1 score: 0.6960', '\\n', 'best training loss: 0.6165', '\\n',\n'best validation loss: 0.6318', '\\n', '\\n', 'Execution time: a moment seconds\n(time limit is 30 minutes).']", ""], "parse_exc_type": [null, null, null, null, null, null, null, null], "parse_exc_info": [null, null, null, null, null, null, null, null], "parse_exc_stack": [null, null, null, null, null, null, null, null], "completed_stages": ["Stage_1"]}