{"edges": [], "layout": [[0.0, 0.0], [0.3333333333333333, 0.0], [0.6666666666666666, 0.0], [1.0, 0.0]], "plan": ["Ablation name: Multi-Synthetic-Dataset Generalization. Trick: we build two new\nSPR-style datasets by (a) permuting the shape alphabet and (b) independently\npermuting the colour alphabet, thereby creating three disjoint but grammar-\nequivalent corpora.   A shared vocabulary over the union of all tokens is then\ncompiled, a single Bi-LSTM is trained on each training configuration (orig /\nalt1 / alt2 / union) and afterwards evaluated on every dev split.  Per-epoch\nlosses plus cross\u2013dataset SWA/CWA/HWA and predictions are stored under the key\nmulti_syn_dataset_generalization  and finally saved to experiment_data.npy.", "Ablation name: Bag-of-Embeddings (Orderless Encoder). Below is a drop-in\nreplacement script that runs the \u201cBag-of-Embeddings\u201d (orderless encoder)\nablation.  The BiLSTM is replaced by a padding-aware mean-pool over token\nembeddings followed by a linear classifier, everything else (data loading,\nmetrics, training/validation loop, numpy saving) is kept identical to the\nbaseline so the results are directly comparable.", "Ablation name: Unidirectional LSTM Encoder. We keep the original training/data\npipeline but introduce a parameterised LSTMClassifier that can be bidirectional\nor unidirectional.  The ablation study simply sets bidirectional=False and keeps\nthe same \u201fhidden\u201d size so that the forward-only model has exactly half the\nparameters of the BiLSTM.  For each hidden size (64, 128, 256, 512) we train\nboth variants, log identical metrics/losses, and store results in a structured\nexperiment_data dictionary.  All information required for later plotting is\nsaved to experiment_data.npy in the working directory.", "Ablation name: No-Packed-LSTM (Padding-Aware vs Padding-Agnostic). We add a\nswitch (use_packing) in BiLSTMClassifier.forward: if True we keep the original\npack_padded_sequence logic (\u201cpadding-aware\u201d), otherwise we feed zero-padded\ntensors directly to the LSTM (\u201cpadding-agnostic\u201d).   Two ablation branches\n(\u201cpadding_aware\u201d, \u201cpadding_agnostic\u201d) are run for the same hyper-parameter sweep\n(hidden sizes 64-512, 6 epochs).   All metrics / losses / predictions are stored\nin a nested experiment_data dictionary and saved to \u2018experiment_data.npy\u2019."], "code": ["import os, pathlib, random, numpy as np, torch, torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom datasets import load_dataset, Dataset, DatasetDict\n\n# ------------------------------------------------------------------ #\n# reproducibility & device ----------------------------------------- #\nrandom.seed(0)\nnp.random.seed(0)\ntorch.manual_seed(0)\ntorch.cuda.manual_seed_all(0)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\nprint(f\"Device: {device}\")\n\n\n# ------------------------------------------------------------------ #\n# locate original SPR_BENCH ---------------------------------------- #\ndef find_spr_bench() -> pathlib.Path:\n    cand = list(\n        filter(\n            None,\n            [\n                os.environ.get(\"SPR_DATA_PATH\"),\n                \"./SPR_BENCH\",\n                \"../SPR_BENCH\",\n                \"../../SPR_BENCH\",\n            ],\n        )\n    )\n    for p in cand:\n        p = pathlib.Path(p)\n        if p.joinpath(\"train.csv\").exists():\n            return p.resolve()\n    raise FileNotFoundError(\"SPR_BENCH dataset not found.\")\n\n\nDATA_PATH = find_spr_bench()\nprint(f\"Found SPR_BENCH at: {DATA_PATH}\")\n\n\ndef load_csv_split(fname):\n    return load_dataset(\n        \"csv\",\n        data_files=str(DATA_PATH / fname),\n        split=\"train\",\n        cache_dir=\".cache_dsets\",\n    )\n\n\norig_ds = DatasetDict(\n    train=load_csv_split(\"train.csv\"),\n    dev=load_csv_split(\"dev.csv\"),\n    test=load_csv_split(\"test.csv\"),\n)\n\n\n# ------------------------------------------------------------------ #\n# helper : metrics -------------------------------------------------- #\ndef count_shape_variety(seq):\n    return len(set(t[0] for t in seq.split()))\n\n\ndef count_color_variety(seq):\n    return len(set(t[1] for t in seq.split()))\n\n\ndef shape_weighted_accuracy(seqs, y, yhat):\n    w = [count_shape_variety(s) for s in seqs]\n    c = [wt if a == b else 0 for wt, a, b in zip(w, y, yhat)]\n    return sum(c) / sum(w) if sum(w) > 0 else 0.0\n\n\ndef color_weighted_accuracy(seqs, y, yhat):\n    w = [count_color_variety(s) for s in seqs]\n    c = [wt if a == b else 0 for wt, a, b in zip(w, y, yhat)]\n    return sum(c) / sum(w) if sum(w) > 0 else 0.0\n\n\ndef harmonic_weighted_accuracy(swa, cwa):\n    return 2 * swa * cwa / (swa + cwa) if (swa + cwa) > 0 else 0.0\n\n\n# ------------------------------------------------------------------ #\n# build two remapped synthetic datasets ---------------------------- #\ndef extract_shapes_colors(ds):\n    shapes, colors = set(), set()\n    for seq in ds[\"train\"][\"sequence\"]:\n        for tok in seq.split():\n            if len(tok) >= 2:\n                shapes.add(tok[0])\n                colors.add(tok[1])\n    return sorted(shapes), sorted(colors)\n\n\nshapes, colors = extract_shapes_colors(orig_ds)\n\n\ndef permuted_map(vocab, rng):\n    perm = vocab.copy()\n    rng.shuffle(perm)\n    return {o: n for o, n in zip(vocab, perm)}\n\n\nrng1, rng2 = random.Random(1), random.Random(2)\nshape_map_1, color_map_1 = permuted_map(shapes, rng1), permuted_map(colors, rng1)\nshape_map_2, color_map_2 = permuted_map(shapes, rng2), permuted_map(colors, rng2)\n\n\ndef remap_sequence(seq, smap, cmap):\n    tok_out = []\n    for tok in seq.split():\n        if len(tok) >= 2:\n            new_tok = smap.get(tok[0], tok[0]) + cmap.get(tok[1], tok[1]) + tok[2:]\n        else:\n            new_tok = tok\n        tok_out.append(new_tok)\n    return \" \".join(tok_out)\n\n\ndef make_remapped_dataset(src_ds, smap, cmap):\n    d = {}\n    for split in [\"train\", \"dev\", \"test\"]:\n        seqs = [remap_sequence(s, smap, cmap) for s in src_ds[split][\"sequence\"]]\n        d[split] = Dataset.from_dict(\n            {\"sequence\": seqs, \"label\": src_ds[split][\"label\"]}\n        )\n    return DatasetDict(**d)\n\n\nalt1_ds = make_remapped_dataset(orig_ds, shape_map_1, color_map_1)\nalt2_ds = make_remapped_dataset(orig_ds, shape_map_2, color_map_2)\n\n\n# create union dataset ------------------------------------------------\ndef concat_splits(ds_list, split):\n    seqs, labs = [], []\n    for ds in ds_list:\n        seqs.extend(ds[split][\"sequence\"])\n        labs.extend(ds[split][\"label\"])\n    return Dataset.from_dict({\"sequence\": seqs, \"label\": labs})\n\n\nunion_ds = DatasetDict(\n    train=concat_splits([orig_ds, alt1_ds, alt2_ds], \"train\"),\n    dev=concat_splits([orig_ds, alt1_ds, alt2_ds], \"dev\"),\n    test=concat_splits([orig_ds, alt1_ds, alt2_ds], \"test\"),\n)\n\n\n# ------------------------------------------------------------------ #\n# build shared vocabulary ------------------------------------------ #\ndef collect_tokens(datasets):\n    all_tok = set()\n    for ds in datasets:\n        for split in [\"train\", \"dev\", \"test\"]:\n            for seq in ds[split][\"sequence\"]:\n                all_tok.update(seq.split())\n    return sorted(all_tok)\n\n\nall_tokens = collect_tokens([orig_ds, alt1_ds, alt2_ds])\nPAD_ID = 0\ntoken2id = {tok: i + 1 for i, tok in enumerate(all_tokens)}\nvocab_size = len(token2id) + 1\nnum_classes = len(set(orig_ds[\"train\"][\"label\"]))\nprint(f\"Shared vocab size={vocab_size}, num classes={num_classes}\")\n\n\ndef encode(seq):\n    return [token2id[t] for t in seq.split()]\n\n\n# ------------------------------------------------------------------ #\n# Torch dataset & dataloader --------------------------------------- #\nclass SPRTorchSet(Dataset):\n    def __init__(self, hf_split):\n        self.seqs = hf_split[\"sequence\"]\n        self.labels = hf_split[\"label\"]\n        self.enc = [encode(s) for s in self.seqs]\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        return {\n            \"input_ids\": torch.tensor(self.enc[idx], dtype=torch.long),\n            \"label\": torch.tensor(self.labels[idx], dtype=torch.long),\n            \"raw_seq\": self.seqs[idx],\n        }\n\n\ndef collate_fn(batch):\n    maxlen = max(len(b[\"input_ids\"]) for b in batch)\n    ids, labels, raw = [], [], []\n    for b in batch:\n        seq = b[\"input_ids\"]\n        if maxlen - len(seq):\n            seq = torch.cat(\n                [seq, torch.full((maxlen - len(seq),), PAD_ID, dtype=torch.long)]\n            )\n        ids.append(seq)\n        labels.append(b[\"label\"])\n        raw.append(b[\"raw_seq\"])\n    return {\"input_ids\": torch.stack(ids), \"label\": torch.stack(labels), \"raw_seq\": raw}\n\n\ndef get_loader(hf_ds, split, batch, shuffle):\n    return DataLoader(\n        SPRTorchSet(hf_ds[split]),\n        batch_size=batch,\n        shuffle=shuffle,\n        collate_fn=collate_fn,\n    )\n\n\n# ------------------------------------------------------------------ #\n# model ------------------------------------------------------------- #\nclass BiLSTMClassifier(nn.Module):\n    def __init__(self, vocab, emb=64, hidden=128, num_cls=8):\n        super().__init__()\n        self.emb = nn.Embedding(vocab, emb, padding_idx=PAD_ID)\n        self.lstm = nn.LSTM(emb, hidden, batch_first=True, bidirectional=True)\n        self.fc = nn.Linear(hidden * 2, num_cls)\n\n    def forward(self, x):\n        e = self.emb(x)\n        lens = (x != PAD_ID).sum(1).cpu()\n        packed = nn.utils.rnn.pack_padded_sequence(\n            e, lens, batch_first=True, enforce_sorted=False\n        )\n        _, (h, _) = self.lstm(packed)\n        z = torch.cat([h[-2], h[-1]], 1)\n        return self.fc(z)\n\n\n# ------------------------------------------------------------------ #\n# train / evaluate -------------------------------------------------- #\ndef evaluate(model, loader, crit):\n    model.eval()\n    tloss = 0\n    n = 0\n    preds, labels, seqs = [], [], []\n    with torch.no_grad():\n        for batch in loader:\n            batch = {\n                k: (v.to(device) if isinstance(v, torch.Tensor) else v)\n                for k, v in batch.items()\n            }\n            out = model(batch[\"input_ids\"])\n            loss = crit(out, batch[\"label\"])\n            tloss += loss.item()\n            n += 1\n            p = out.argmax(-1).cpu().tolist()\n            l = batch[\"label\"].cpu().tolist()\n            preds.extend(p)\n            labels.extend(l)\n            seqs.extend(batch[\"raw_seq\"])\n    swa = shape_weighted_accuracy(seqs, labels, preds)\n    cwa = color_weighted_accuracy(seqs, labels, preds)\n    hwa = harmonic_weighted_accuracy(swa, cwa)\n    return tloss / n, swa, cwa, hwa, preds, labels\n\n\ndef run_training(train_loader, val_loader, epochs=6):\n    model = BiLSTMClassifier(vocab_size, emb=64, hidden=128, num_cls=num_classes).to(\n        device\n    )\n    crit = nn.CrossEntropyLoss()\n    opt = torch.optim.Adam(model.parameters(), lr=1e-3)\n    log = {\"losses\": {\"train\": [], \"val\": []}}\n    for ep in range(1, epochs + 1):\n        model.train()\n        tloss = 0\n        n = 0\n        for batch in train_loader:\n            batch = {\n                k: (v.to(device) if isinstance(v, torch.Tensor) else v)\n                for k, v in batch.items()\n            }\n            opt.zero_grad()\n            out = model(batch[\"input_ids\"])\n            loss = crit(out, batch[\"label\"])\n            loss.backward()\n            opt.step()\n            tloss += loss.item()\n            n += 1\n        train_loss = tloss / n\n        val_loss, swa, cwa, hwa, _, _ = evaluate(model, val_loader, crit)\n        log[\"losses\"][\"train\"].append((ep, train_loss))\n        log[\"losses\"][\"val\"].append((ep, val_loss, swa, cwa, hwa))\n        print(f\"Epoch{ep} train={train_loss:.3f} val={val_loss:.3f} HWA={hwa:.3f}\")\n    return model, log\n\n\n# ------------------------------------------------------------------ #\n# main experiment --------------------------------------------------- #\nexperiment_data = {\"multi_syn_dataset_generalization\": {}}\n\ndatasets = {\"orig\": orig_ds, \"alt1\": alt1_ds, \"alt2\": alt2_ds, \"union\": union_ds}\ndev_loaders = {name: get_loader(ds, \"dev\", 256, False) for name, ds in datasets.items()}\n\nfor train_name, train_ds in datasets.items():\n    print(f\"\\n=== Training on {train_name.upper()} ===\")\n    train_loader = get_loader(train_ds, \"train\", 128, True)\n    val_loader = get_loader(train_ds, \"dev\", 256, False)\n    model, log = run_training(train_loader, val_loader, epochs=6)\n    # evaluate on each dev set\n    eval_results = {}\n    for eval_name, loader in dev_loaders.items():\n        vloss, swa, cwa, hwa, preds, labels = evaluate(\n            model, loader, nn.CrossEntropyLoss()\n        )\n        eval_results[eval_name] = {\n            \"vloss\": vloss,\n            \"swa\": swa,\n            \"cwa\": cwa,\n            \"hwa\": hwa,\n            \"predictions\": preds,\n            \"ground_truth\": labels,\n        }\n        print(f\"  Eval on {eval_name}: HWA={hwa:.3f}\")\n    experiment_data[\"multi_syn_dataset_generalization\"][train_name] = {\n        \"losses\": log[\"losses\"],\n        \"eval\": eval_results,\n    }\n\n# ------------------------------------------------------------------ #\n# save -------------------------------------------------------------- #\nnp.save(\n    os.path.join(working_dir, \"experiment_data.npy\"), experiment_data, allow_pickle=True\n)\nprint(\"Saved experiment_data.npy\")\n", "import os, pathlib, random, numpy as np, torch, torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom datasets import load_dataset, DatasetDict\n\n# ---------------- reproducibility -----------------\nrandom.seed(0)\nnp.random.seed(0)\ntorch.manual_seed(0)\ntorch.cuda.manual_seed_all(0)\n\n# ---------------- working dir / device -----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Using device:\", device)\n\n\n# ---------------- locate SPR_BENCH ---------------\ndef find_spr_bench() -> pathlib.Path:\n    cand, env = [], os.environ.get(\"SPR_DATA_PATH\")\n    if env:\n        cand.append(env)\n    cand += [\n        \"./SPR_BENCH\",\n        \"../SPR_BENCH\",\n        \"../../SPR_BENCH\",\n        \"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\",\n    ]\n    for p in cand:\n        fp = pathlib.Path(p).expanduser()\n        if fp.joinpath(\"train.csv\").exists():\n            return fp.resolve()\n    raise FileNotFoundError(\"SPR_BENCH not found.\")\n\n\nDATA_PATH = find_spr_bench()\nprint(\"Found SPR_BENCH at:\", DATA_PATH)\n\n\n# ---------------- metrics helpers ----------------\ndef count_shape_variety(s):\n    return len(set(t[0] for t in s.split() if t))\n\n\ndef count_color_variety(s):\n    return len(set(t[1] for t in s.split() if len(t) > 1))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    corr = [wt if t == p else 0 for wt, t, p in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) > 0 else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    corr = [wt if t == p else 0 for wt, t, p in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) > 0 else 0.0\n\n\ndef harmonic_weighted_accuracy(swa, cwa):\n    return 2 * swa * cwa / (swa + cwa) if swa + cwa > 0 else 0.0\n\n\n# ---------------- load dataset -------------------\ndef load_spr(root: pathlib.Path) -> DatasetDict:\n    load = lambda csv: load_dataset(\n        \"csv\", data_files=str(root / csv), split=\"train\", cache_dir=\".cache_dsets\"\n    )\n    return DatasetDict(\n        train=load(\"train.csv\"), dev=load(\"dev.csv\"), test=load(\"test.csv\")\n    )\n\n\nspr = load_spr(DATA_PATH)\n\n# ---------------- vocabulary ---------------------\nall_tokens = set(tok for ex in spr[\"train\"] for tok in ex[\"sequence\"].split())\ntoken2id = {tok: i + 1 for i, tok in enumerate(sorted(all_tokens))}\nPAD_ID = 0\nvocab_size = len(token2id) + 1\n\n\ndef encode(seq: str):\n    return [token2id[t] for t in seq.split()]\n\n\nnum_classes = len(set(spr[\"train\"][\"label\"]))\nprint(f\"Vocab size={vocab_size}, num_classes={num_classes}\")\n\n\n# ---------------- torch dataset ------------------\nclass SPRTorchSet(Dataset):\n    def __init__(self, split):\n        self.seqs = split[\"sequence\"]\n        self.labels = split[\"label\"]\n        self.enc = [encode(s) for s in self.seqs]\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        return {\n            \"input_ids\": torch.tensor(self.enc[idx], dtype=torch.long),\n            \"label\": torch.tensor(self.labels[idx], dtype=torch.long),\n            \"raw_seq\": self.seqs[idx],\n        }\n\n\ndef collate(batch):\n    maxlen = max(len(b[\"input_ids\"]) for b in batch)\n    ids, lab, raw = [], [], []\n    for b in batch:\n        seq = b[\"input_ids\"]\n        if pad := maxlen - len(seq):\n            seq = torch.cat([seq, torch.full((pad,), PAD_ID, dtype=torch.long)])\n        ids.append(seq)\n        lab.append(b[\"label\"])\n        raw.append(b[\"raw_seq\"])\n    return {\"input_ids\": torch.stack(ids), \"label\": torch.stack(lab), \"raw_seq\": raw}\n\n\ntrain_loader = DataLoader(\n    SPRTorchSet(spr[\"train\"]), batch_size=128, shuffle=True, collate_fn=collate\n)\ndev_loader = DataLoader(\n    SPRTorchSet(spr[\"dev\"]), batch_size=256, shuffle=False, collate_fn=collate\n)\n\n\n# ---------------- bag-of-embeddings model --------\nclass BagOfEmbeddingsClassifier(nn.Module):\n    def __init__(self, vocab_sz, emb_dim, num_cls):\n        super().__init__()\n        self.embed = nn.Embedding(vocab_sz, emb_dim, padding_idx=PAD_ID)\n        self.fc = nn.Linear(emb_dim, num_cls)\n\n    def forward(self, x):\n        emb = self.embed(x)  # (B,L,E)\n        mask = (x != PAD_ID).unsqueeze(-1)  # (B,L,1)\n        summed = (emb * mask).sum(1)  # (B,E)\n        lengths = mask.sum(1).clamp(min=1)  # (B,1)\n        avg = summed / lengths  # (B,E)\n        return self.fc(avg)\n\n\n# ---------------- experiment container ----------\nexperiment_data = {\n    \"bag_of_embeddings\": {\n        \"SPR_BENCH\": {\n            \"metrics\": {\"train\": [], \"val\": []},\n            \"losses\": {\"train\": [], \"val\": []},\n            \"predictions\": [],\n            \"ground_truth\": [],\n        }\n    }\n}\n\n\n# ---------------- training loop -----------------\ndef run_boe(epochs=6, emb_dim=64):\n    model = BagOfEmbeddingsClassifier(vocab_size, emb_dim, num_classes).to(device)\n    crit = nn.CrossEntropyLoss()\n    opt = torch.optim.Adam(model.parameters(), lr=1e-3)\n    store = experiment_data[\"bag_of_embeddings\"][\"SPR_BENCH\"]\n    for ep in range(1, epochs + 1):\n        # ---- train ----\n        model.train()\n        tloss = nb = 0\n        for batch in train_loader:\n            batch = {\n                k: (v.to(device) if isinstance(v, torch.Tensor) else v)\n                for k, v in batch.items()\n            }\n            opt.zero_grad()\n            logit = model(batch[\"input_ids\"])\n            loss = crit(logit, batch[\"label\"])\n            loss.backward()\n            opt.step()\n            tloss += loss.item()\n            nb += 1\n        tr_loss = tloss / nb\n        store[\"losses\"][\"train\"].append((ep, tr_loss))\n        # ---- validate ----\n        model.eval()\n        vloss = nb = 0\n        preds = []\n        labels = []\n        seqs = []\n        with torch.no_grad():\n            for batch in dev_loader:\n                batch = {\n                    k: (v.to(device) if isinstance(v, torch.Tensor) else v)\n                    for k, v in batch.items()\n                }\n                logit = model(batch[\"input_ids\"])\n                loss = crit(logit, batch[\"label\"])\n                vloss += loss.item()\n                nb += 1\n                preds.extend(logit.argmax(-1).cpu().tolist())\n                labels.extend(batch[\"label\"].cpu().tolist())\n                seqs.extend(batch[\"raw_seq\"])\n        v_loss = vloss / nb\n        store[\"losses\"][\"val\"].append((ep, v_loss))\n        swa = shape_weighted_accuracy(seqs, labels, preds)\n        cwa = color_weighted_accuracy(seqs, labels, preds)\n        hwa = harmonic_weighted_accuracy(swa, cwa)\n        store[\"metrics\"][\"val\"].append((ep, swa, cwa, hwa))\n        print(\n            f\"[BagEmb] Epoch{ep} train_loss={tr_loss:.4f} \"\n            f\"val_loss={v_loss:.4f} SWA={swa:.4f} CWA={cwa:.4f} HWA={hwa:.4f}\"\n        )\n        if ep == epochs:\n            store[\"predictions\"] = preds\n            store[\"ground_truth\"] = labels\n    return store\n\n\nrun_boe()\n\n# ---------------- save results -------------------\nnp.save(\n    os.path.join(working_dir, \"experiment_data.npy\"), experiment_data, allow_pickle=True\n)\nprint(\"Saved experiment data to\", os.path.join(working_dir, \"experiment_data.npy\"))\n", "import os, pathlib, random, numpy as np, torch, torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom datasets import load_dataset, DatasetDict\n\n# ---------------- reproducibility -----------------\nrandom.seed(0)\nnp.random.seed(0)\ntorch.manual_seed(0)\ntorch.cuda.manual_seed_all(0)\n\n# ---------------- work dir & device ---------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# -------------- locate SPR_BENCH ------------------\ndef find_spr_bench() -> pathlib.Path:\n    c, env = [], os.environ.get(\"SPR_DATA_PATH\")\n    if env:\n        c.append(env)\n    c += [\n        \"./SPR_BENCH\",\n        \"../SPR_BENCH\",\n        \"../../SPR_BENCH\",\n        \"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\",\n    ]\n    for p in c:\n        fp = pathlib.Path(p).expanduser()\n        if fp.joinpath(\"train.csv\").exists():\n            return fp.resolve()\n    raise FileNotFoundError(\"SPR_BENCH dataset not found.\")\n\n\nDATA_PATH = find_spr_bench()\nprint(f\"Found SPR_BENCH at: {DATA_PATH}\")\n\n\n# ---------------- metrics helpers -----------------\ndef count_shape_variety(seq):\n    return len(set(t[0] for t in seq.split() if t))\n\n\ndef count_color_variety(seq):\n    return len(set(t[1] for t in seq.split() if len(t) > 1))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    corr = [wt if t == p else 0 for wt, t, p in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) > 0 else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    corr = [wt if t == p else 0 for wt, t, p in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) > 0 else 0.0\n\n\ndef harmonic_weighted_accuracy(swa, cwa):\n    return 2 * swa * cwa / (swa + cwa) if (swa + cwa) > 0 else 0.0\n\n\n# ---------------- load dataset --------------------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(csv):\n        return load_dataset(\n            \"csv\", data_files=str(root / csv), split=\"train\", cache_dir=\".cache_dsets\"\n        )\n\n    return DatasetDict(\n        train=_load(\"train.csv\"), dev=_load(\"dev.csv\"), test=_load(\"test.csv\")\n    )\n\n\nspr = load_spr_bench(DATA_PATH)\n\n# ---------------- vocabulary ----------------------\nall_tokens = set(tok for ex in spr[\"train\"] for tok in ex[\"sequence\"].split())\ntoken2id = {tok: i + 1 for i, tok in enumerate(sorted(all_tokens))}\nPAD_ID = 0\nvocab_size = len(token2id) + 1\n\n\ndef encode(seq: str):\n    return [token2id[t] for t in seq.split()]\n\n\nnum_classes = len(set(spr[\"train\"][\"label\"]))\nprint(f\"Vocab size={vocab_size}, num_classes={num_classes}\")\n\n\n# ---------------- Torch dataset ------------------\nclass SPRTorchSet(Dataset):\n    def __init__(self, split):\n        self.seqs = split[\"sequence\"]\n        self.labels = split[\"label\"]\n        self.enc = [encode(s) for s in self.seqs]\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        return {\n            \"input_ids\": torch.tensor(self.enc[idx], dtype=torch.long),\n            \"label\": torch.tensor(self.labels[idx], dtype=torch.long),\n            \"raw_seq\": self.seqs[idx],\n        }\n\n\ndef collate_fn(batch):\n    maxlen = max(len(b[\"input_ids\"]) for b in batch)\n    ids, labels, raw = [], [], []\n    for it in batch:\n        seq = it[\"input_ids\"]\n        if pad := maxlen - len(seq):\n            seq = torch.cat([seq, torch.full((pad,), PAD_ID, dtype=torch.long)])\n        ids.append(seq)\n        labels.append(it[\"label\"])\n        raw.append(it[\"raw_seq\"])\n    return {\"input_ids\": torch.stack(ids), \"label\": torch.stack(labels), \"raw_seq\": raw}\n\n\ntrain_loader = DataLoader(\n    SPRTorchSet(spr[\"train\"]), batch_size=128, shuffle=True, collate_fn=collate_fn\n)\ndev_loader = DataLoader(\n    SPRTorchSet(spr[\"dev\"]), batch_size=256, shuffle=False, collate_fn=collate_fn\n)\n\n\n# ---------------- models --------------------------\nclass LSTMClassifier(nn.Module):\n    def __init__(self, vocab_sz, emb_dim, hidden, num_cls, bidirectional=True):\n        super().__init__()\n        self.embed = nn.Embedding(vocab_sz, emb_dim, padding_idx=PAD_ID)\n        self.bidirectional = bidirectional\n        self.lstm = nn.LSTM(\n            emb_dim, hidden, batch_first=True, bidirectional=bidirectional\n        )\n        out_dim = hidden * 2 if bidirectional else hidden\n        self.fc = nn.Linear(out_dim, num_cls)\n\n    def forward(self, x):\n        emb = self.embed(x)\n        lengths = (x != PAD_ID).sum(1).cpu()\n        packed = nn.utils.rnn.pack_padded_sequence(\n            emb, lengths, batch_first=True, enforce_sorted=False\n        )\n        _, (h_n, _) = self.lstm(packed)\n        out = torch.cat([h_n[-2], h_n[-1]], dim=1) if self.bidirectional else h_n[-1]\n        return self.fc(out)\n\n\n# -------------- experiment container --------------\nexperiment_data = {\"bidirectional\": {}, \"unidirectional\": {}}\n\n\n# -------------- training procedure ---------------\ndef run_experiment(hidden_size, bidirectional=True, epochs=6):\n    model = LSTMClassifier(vocab_size, 64, hidden_size, num_classes, bidirectional).to(\n        device\n    )\n    crit = nn.CrossEntropyLoss()\n    opt = torch.optim.Adam(model.parameters(), lr=1e-3)\n    store = {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n    for epoch in range(1, epochs + 1):\n        # ---- train ----\n        model.train()\n        tot_loss = nb = 0\n        for batch in train_loader:\n            batch = {\n                k: (v.to(device) if isinstance(v, torch.Tensor) else v)\n                for k, v in batch.items()\n            }\n            opt.zero_grad()\n            logit = model(batch[\"input_ids\"])\n            loss = crit(logit, batch[\"label\"])\n            loss.backward()\n            opt.step()\n            tot_loss += loss.item()\n            nb += 1\n        tr_loss = tot_loss / nb\n        store[\"losses\"][\"train\"].append((epoch, tr_loss))\n        # ---- validate ----\n        model.eval()\n        vloss = nb = 0\n        preds = []\n        labels = []\n        seqs = []\n        with torch.no_grad():\n            for batch in dev_loader:\n                batch = {\n                    k: (v.to(device) if isinstance(v, torch.Tensor) else v)\n                    for k, v in batch.items()\n                }\n                logit = model(batch[\"input_ids\"])\n                loss = crit(logit, batch[\"label\"])\n                vloss += loss.item()\n                nb += 1\n                p = logit.argmax(-1).cpu().tolist()\n                l = batch[\"label\"].cpu().tolist()\n                preds.extend(p)\n                labels.extend(l)\n                seqs.extend(batch[\"raw_seq\"])\n        v_loss = vloss / nb\n        store[\"losses\"][\"val\"].append((epoch, v_loss))\n        swa = shape_weighted_accuracy(seqs, labels, preds)\n        cwa = color_weighted_accuracy(seqs, labels, preds)\n        hwa = harmonic_weighted_accuracy(swa, cwa)\n        store[\"metrics\"][\"val\"].append((epoch, swa, cwa, hwa))\n        if epoch == epochs:\n            store[\"predictions\"] = preds\n            store[\"ground_truth\"] = labels\n        print(\n            f\"[hidden={hidden_size}, {'Bi' if bidirectional else 'Uni'}] \"\n            f\"Epoch{epoch} train_loss={tr_loss:.4f} val_loss={v_loss:.4f} \"\n            f\"SWA={swa:.4f} CWA={cwa:.4f} HWA={hwa:.4f}\"\n        )\n    return store\n\n\n# -------------- hyperparameter sweep --------------\nfor hs in [64, 128, 256, 512]:\n    experiment_data[\"bidirectional\"][hs] = {\"SPR_BENCH\": run_experiment(hs, True)}\n    experiment_data[\"unidirectional\"][hs] = {\"SPR_BENCH\": run_experiment(hs, False)}\n\n# ----------------------- save ---------------------\nnp.save(\n    os.path.join(working_dir, \"experiment_data.npy\"), experiment_data, allow_pickle=True\n)\nprint(f\"Saved experiment data to {os.path.join(working_dir,'experiment_data.npy')}\")\n", "import os, pathlib, numpy as np, torch, torch.nn as nn, random, math\nfrom torch.utils.data import Dataset, DataLoader\nfrom datasets import load_dataset, DatasetDict\n\n# ---------- reproducibility ----------\nrandom.seed(0)\nnp.random.seed(0)\ntorch.manual_seed(0)\ntorch.cuda.manual_seed_all(0)\n\n# ---------- paths & device -----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Using device:\", device)\n\n\n# ---------- locate SPR_BENCH ----------\ndef find_spr_bench() -> pathlib.Path:\n    cand, env = [], os.environ.get(\"SPR_DATA_PATH\")\n    if env:\n        cand.append(env)\n    cand += [\"./SPR_BENCH\", \"../SPR_BENCH\", \"../../SPR_BENCH\"]\n    for p in cand:\n        pth = pathlib.Path(p).expanduser()\n        if pth.joinpath(\"train.csv\").exists():\n            return pth.resolve()\n    raise FileNotFoundError(\"SPR_BENCH dataset not found.\")\n\n\nDATA_PATH = find_spr_bench()\nprint(\"Found SPR_BENCH at:\", DATA_PATH)\n\n\n# ---------- metrics ----------\ndef count_shape_variety(seq: str) -> int:\n    return len(set(tok[0] for tok in seq.split() if tok))\n\n\ndef count_color_variety(seq: str) -> int:\n    return len(set(tok[1] for tok in seq.split() if len(tok) > 1))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    corr = [wt if t == p else 0 for wt, t, p in zip(w, y_true, y_pred)]\n    return sum(corr) / (sum(w) or 1)\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    corr = [wt if t == p else 0 for wt, t, p in zip(w, y_true, y_pred)]\n    return sum(corr) / (sum(w) or 1)\n\n\ndef harmonic_weighted_accuracy(swa, cwa):\n    return 2 * swa * cwa / (swa + cwa + 1e-9)\n\n\n# ---------- load dataset -------------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _ld(csv):\n        return load_dataset(\n            \"csv\", data_files=str(root / csv), split=\"train\", cache_dir=\".cache_dsets\"\n        )\n\n    return DatasetDict(train=_ld(\"train.csv\"), dev=_ld(\"dev.csv\"), test=_ld(\"test.csv\"))\n\n\nspr = load_spr_bench(DATA_PATH)\n\n# ---------- vocab --------------------\nall_tokens = set(tok for ex in spr[\"train\"] for tok in ex[\"sequence\"].split())\ntoken2id = {tok: i + 1 for i, tok in enumerate(sorted(all_tokens))}\nPAD_ID, vocab_size = 0, len(token2id) + 1\n\n\ndef encode(seq: str):\n    return [token2id[tok] for tok in seq.split()]\n\n\nnum_classes = len(set(spr[\"train\"][\"label\"]))\nprint(f\"Vocab size={vocab_size}, num_classes={num_classes}\")\n\n\n# ---------- torch dataset ------------\nclass SPRTorchSet(Dataset):\n    def __init__(self, split):\n        self.seqs, self.labels = split[\"sequence\"], split[\"label\"]\n        self.enc = [encode(s) for s in self.seqs]\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        return {\n            \"input_ids\": torch.tensor(self.enc[idx], dtype=torch.long),\n            \"label\": torch.tensor(self.labels[idx], dtype=torch.long),\n            \"raw_seq\": self.seqs[idx],\n        }\n\n\ndef collate_fn(batch):\n    maxlen = max(len(b[\"input_ids\"]) for b in batch)\n    ids, labs, raw = [], [], []\n    for b in batch:\n        seq = b[\"input_ids\"]\n        if pad := maxlen - len(seq):\n            seq = torch.cat([seq, torch.full((pad,), PAD_ID, dtype=torch.long)])\n        ids.append(seq)\n        labs.append(b[\"label\"])\n        raw.append(b[\"raw_seq\"])\n    return {\"input_ids\": torch.stack(ids), \"label\": torch.stack(labs), \"raw_seq\": raw}\n\n\ntrain_loader = DataLoader(\n    SPRTorchSet(spr[\"train\"]), batch_size=128, shuffle=True, collate_fn=collate_fn\n)\ndev_loader = DataLoader(\n    SPRTorchSet(spr[\"dev\"]), batch_size=256, shuffle=False, collate_fn=collate_fn\n)\n\n\n# ---------- model ---------------------\nclass BiLSTMClassifier(nn.Module):\n    def __init__(self, vocab_sz, emb_dim, hidden, num_cls, use_packing=True):\n        super().__init__()\n        self.use_packing = use_packing\n        self.embed = nn.Embedding(vocab_sz, emb_dim, padding_idx=PAD_ID)\n        self.lstm = nn.LSTM(emb_dim, hidden, bidirectional=True, batch_first=True)\n        self.fc = nn.Linear(hidden * 2, num_cls)\n\n    def forward(self, x):\n        emb = self.embed(x)\n        if self.use_packing:\n            lengths = (x != PAD_ID).sum(1).cpu()\n            packed = nn.utils.rnn.pack_padded_sequence(\n                emb, lengths, batch_first=True, enforce_sorted=False\n            )\n            _, (h_n, _) = self.lstm(packed)\n        else:\n            _, (h_n, _) = self.lstm(emb)\n        out = torch.cat([h_n[-2], h_n[-1]], dim=1)\n        return self.fc(out)\n\n\n# ---------- experiment container -----\nexperiment_data = {\n    \"padding_aware\": {\"SPR_BENCH\": {}},\n    \"padding_agnostic\": {\"SPR_BENCH\": {}},\n}\n\n\n# ---------- training loop ------------\ndef run_experiment(hidden_size, use_packing, epochs=6):\n    model = BiLSTMClassifier(vocab_size, 64, hidden_size, num_classes, use_packing).to(\n        device\n    )\n    crit = nn.CrossEntropyLoss()\n    opt = torch.optim.Adam(model.parameters(), lr=1e-3)\n    store = {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n    for ep in range(1, epochs + 1):\n        # train\n        model.train()\n        tot_loss = 0\n        nb = 0\n        for batch in train_loader:\n            batch = {\n                k: (v.to(device) if isinstance(v, torch.Tensor) else v)\n                for k, v in batch.items()\n            }\n            opt.zero_grad()\n            logit = model(batch[\"input_ids\"])\n            loss = crit(logit, batch[\"label\"])\n            loss.backward()\n            opt.step()\n            tot_loss += loss.item()\n            nb += 1\n        store[\"losses\"][\"train\"].append((ep, tot_loss / nb))\n        # validate\n        model.eval()\n        vloss = 0\n        nb = 0\n        preds, labs, seqs = [], [], []\n        with torch.no_grad():\n            for batch in dev_loader:\n                batch = {\n                    k: (v.to(device) if isinstance(v, torch.Tensor) else v)\n                    for k, v in batch.items()\n                }\n                logit = model(batch[\"input_ids\"])\n                loss = crit(logit, batch[\"label\"])\n                vloss += loss.item()\n                nb += 1\n                p = logit.argmax(-1).cpu().tolist()\n                l = batch[\"label\"].cpu().tolist()\n                preds.extend(p)\n                labs.extend(l)\n                seqs.extend(batch[\"raw_seq\"])\n        vloss /= nb\n        swa, cwa = shape_weighted_accuracy(seqs, labs, preds), color_weighted_accuracy(\n            seqs, labs, preds\n        )\n        hwa = harmonic_weighted_accuracy(swa, cwa)\n        store[\"losses\"][\"val\"].append((ep, vloss))\n        store[\"metrics\"][\"val\"].append((ep, swa, cwa, hwa))\n        if ep == epochs:\n            store[\"predictions\"], store[\"ground_truth\"] = preds, labs\n        print(\n            f\"[pack={use_packing} hid={hidden_size}] Ep{ep} train_loss={tot_loss/nb:.4f} \"\n            f\"val_loss={vloss:.4f} SWA={swa:.4f} CWA={cwa:.4f} HWA={hwa:.4f}\"\n        )\n    return store\n\n\n# ---------- run ablations -------------\nfor use_packing, key in [(True, \"padding_aware\"), (False, \"padding_agnostic\")]:\n    for hs in [64, 128, 256, 512]:\n        experiment_data[key][\"SPR_BENCH\"][hs] = run_experiment(hs, use_packing)\n\n# ---------- save ----------------------\nnp.save(\n    os.path.join(working_dir, \"experiment_data.npy\"), experiment_data, allow_pickle=True\n)\nprint(\"Saved experiment data to\", os.path.join(working_dir, \"experiment_data.npy\"))\n"], "term_out": ["['Device: cuda', '\\n', 'Traceback (most recent call last):\\n  File \"runfile.py\",\nline 38, in <module>\\n    DATA_PATH = find_spr_bench()\\n\n^^^^^^^^^^^^^^^^\\n  File \"runfile.py\", line 35, in find_spr_bench\\n    raise\nFileNotFoundError(\"SPR_BENCH dataset not found.\")\\nFileNotFoundError: SPR_BENCH\ndataset not found.\\n', 'Execution time: a moment seconds (time limit is 30\nminutes).']", "['Using device:', ' ', 'cuda', '\\n', 'Found SPR_BENCH at:', ' ',\n'/home/zxl240011/AI-Scientist-v2/SPR_BENCH', '\\n', '\\rGenerating train split: 0\nexamples [00:00, ? examples/s]', '', '\\rGenerating train split: 20000 examples\n[00:00, 491409.62 examples/s]', '\\n', '\\rGenerating train split: 0 examples\n[00:00, ? examples/s]', '', '\\rGenerating train split: 5000 examples [00:00,\n692975.58 examples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 10000 examples [00:00, 773214.86\nexamples/s]', '\\n', 'Vocab size=17, num_classes=2', '\\n', '[BagEmb] Epoch1\ntrain_loss=0.5786 val_loss=0.5333 SWA=0.7301 CWA=0.7259 HWA=0.7280', '\\n',\n'[BagEmb] Epoch2 train_loss=0.5239 val_loss=0.5229 SWA=0.7352 CWA=0.7311\nHWA=0.7331', '\\n', '[BagEmb] Epoch3 train_loss=0.5198 val_loss=0.5219 SWA=0.7470\nCWA=0.7414 HWA=0.7442', '\\n', '[BagEmb] Epoch4 train_loss=0.5203 val_loss=0.5220\nSWA=0.7500 CWA=0.7441 HWA=0.7471', '\\n', '[BagEmb] Epoch5 train_loss=0.5203\nval_loss=0.5217 SWA=0.7451 CWA=0.7398 HWA=0.7425', '\\n', '[BagEmb] Epoch6\ntrain_loss=0.5199 val_loss=0.5215 SWA=0.7465 CWA=0.7404 HWA=0.7434', '\\n',\n'Saved experiment data to', ' ', '/home/zxl240011/AI-Scientist-\nv2/experiments/2025-08-16_02-30-\n16_context_aware_contrastive_learning_attempt_0/0-run/process_ForkProcess-\n29/working/experiment_data.npy', '\\n', 'Execution time: 4 seconds seconds (time\nlimit is 30 minutes).']", "['Using device: cuda', '\\n', 'Found SPR_BENCH at: /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 20000 examples [00:00, 449254.14\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 5000 examples [00:00, 480183.18\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 10000 examples [00:00, 597223.98\nexamples/s]', '\\n', 'Vocab size=17, num_classes=2', '\\n', '[hidden=64, Bi]\nEpoch1 train_loss=0.2265 val_loss=0.0937 SWA=0.9748 CWA=0.9740 HWA=0.9744',\n'\\n', '[hidden=64, Bi] Epoch2 train_loss=0.0586 val_loss=0.0338 SWA=0.9904\nCWA=0.9907 HWA=0.9906', '\\n', '[hidden=64, Bi] Epoch3 train_loss=0.0239\nval_loss=0.0178 SWA=0.9944 CWA=0.9948 HWA=0.9946', '\\n', '[hidden=64, Bi] Epoch4\ntrain_loss=0.0116 val_loss=0.0102 SWA=0.9970 CWA=0.9971 HWA=0.9971', '\\n',\n'[hidden=64, Bi] Epoch5 train_loss=0.0050 val_loss=0.0070 SWA=0.9977 CWA=0.9976\nHWA=0.9976', '\\n', '[hidden=64, Bi] Epoch6 train_loss=0.0028 val_loss=0.0041\nSWA=0.9985 CWA=0.9986 HWA=0.9986', '\\n', '[hidden=64, Uni] Epoch1\ntrain_loss=0.3175 val_loss=0.1267 SWA=0.9608 CWA=0.9594 HWA=0.9601', '\\n',\n'[hidden=64, Uni] Epoch2 train_loss=0.1022 val_loss=0.0772 SWA=0.9760 CWA=0.9768\nHWA=0.9764', '\\n', '[hidden=64, Uni] Epoch3 train_loss=0.0563 val_loss=0.0362\nSWA=0.9886 CWA=0.9890 HWA=0.9888', '\\n', '[hidden=64, Uni] Epoch4\ntrain_loss=0.0284 val_loss=0.0204 SWA=0.9940 CWA=0.9944 HWA=0.9942', '\\n',\n'[hidden=64, Uni] Epoch5 train_loss=0.0171 val_loss=0.0153 SWA=0.9949 CWA=0.9955\nHWA=0.9952', '\\n', '[hidden=64, Uni] Epoch6 train_loss=0.0107 val_loss=0.0122\nSWA=0.9958 CWA=0.9963 HWA=0.9961', '\\n', '[hidden=128, Bi] Epoch1\ntrain_loss=0.2006 val_loss=0.0737 SWA=0.9795 CWA=0.9794 HWA=0.9795', '\\n',\n'[hidden=128, Bi] Epoch2 train_loss=0.0417 val_loss=0.0230 SWA=0.9931 CWA=0.9936\nHWA=0.9934', '\\n', '[hidden=128, Bi] Epoch3 train_loss=0.0114 val_loss=0.0055\nSWA=0.9985 CWA=0.9984 HWA=0.9984', '\\n', '[hidden=128, Bi] Epoch4\ntrain_loss=0.0032 val_loss=0.0034 SWA=0.9993 CWA=0.9993 HWA=0.9993', '\\n',\n'[hidden=128, Bi] Epoch5 train_loss=0.0048 val_loss=0.0022 SWA=0.9998 CWA=0.9998\nHWA=0.9998', '\\n', '[hidden=128, Bi] Epoch6 train_loss=0.0006 val_loss=0.0016\nSWA=0.9998 CWA=0.9998 HWA=0.9998', '\\n', '[hidden=128, Uni] Epoch1\ntrain_loss=0.2511 val_loss=0.1350 SWA=0.9577 CWA=0.9557 HWA=0.9567', '\\n',\n'[hidden=128, Uni] Epoch2 train_loss=0.1061 val_loss=0.0720 SWA=0.9763\nCWA=0.9775 HWA=0.9769', '\\n', '[hidden=128, Uni] Epoch3 train_loss=0.0533\nval_loss=0.0351 SWA=0.9879 CWA=0.9883 HWA=0.9881', '\\n', '[hidden=128, Uni]\nEpoch4 train_loss=0.0270 val_loss=0.0206 SWA=0.9943 CWA=0.9945 HWA=0.9944',\n'\\n', '[hidden=128, Uni] Epoch5 train_loss=0.0131 val_loss=0.0119 SWA=0.9958\nCWA=0.9959 HWA=0.9959', '\\n', '[hidden=128, Uni] Epoch6 train_loss=0.0065\nval_loss=0.0065 SWA=0.9980 CWA=0.9982 HWA=0.9981', '\\n', '[hidden=256, Bi]\nEpoch1 train_loss=0.1556 val_loss=0.0543 SWA=0.9854 CWA=0.9849 HWA=0.9851',\n'\\n', '[hidden=256, Bi] Epoch2 train_loss=0.0447 val_loss=0.0328 SWA=0.9914\nCWA=0.9911 HWA=0.9912', '\\n', '[hidden=256, Bi] Epoch3 train_loss=0.0171\nval_loss=0.0090 SWA=0.9964 CWA=0.9964 HWA=0.9964', '\\n', '[hidden=256, Bi]\nEpoch4 train_loss=0.0043 val_loss=0.0072 SWA=0.9978 CWA=0.9980 HWA=0.9979',\n'\\n', '[hidden=256, Bi] Epoch5 train_loss=0.0019 val_loss=0.0028 SWA=0.9995\nCWA=0.9996 HWA=0.9996', '\\n', '[hidden=256, Bi] Epoch6 train_loss=0.0030\nval_loss=0.0072 SWA=0.9971 CWA=0.9974 HWA=0.9973', '\\n', '[hidden=256, Uni]\nEpoch1 train_loss=0.2280 val_loss=0.1509 SWA=0.9502 CWA=0.9481 HWA=0.9492',\n'\\n', '[hidden=256, Uni] Epoch2 train_loss=0.0971 val_loss=0.0618 SWA=0.9769\nCWA=0.9764 HWA=0.9766', '\\n', '[hidden=256, Uni] Epoch3 train_loss=0.0323\nval_loss=0.0211 SWA=0.9920 CWA=0.9918 HWA=0.9919', '\\n', '[hidden=256, Uni]\nEpoch4 train_loss=0.0125 val_loss=0.0089 SWA=0.9982 CWA=0.9982 HWA=0.9982',\n'\\n', '[hidden=256, Uni] Epoch5 train_loss=0.0058 val_loss=0.0043 SWA=0.9991\nCWA=0.9992 HWA=0.9992', '\\n', '[hidden=256, Uni] Epoch6 train_loss=0.0018\nval_loss=0.0025 SWA=0.9995 CWA=0.9996 HWA=0.9996', '\\n', '[hidden=512, Bi]\nEpoch1 train_loss=0.1508 val_loss=0.0581 SWA=0.9828 CWA=0.9820 HWA=0.9824',\n'\\n', '[hidden=512, Bi] Epoch2 train_loss=0.0331 val_loss=0.0259 SWA=0.9899\nCWA=0.9906 HWA=0.9902', '\\n', '[hidden=512, Bi] Epoch3 train_loss=0.0132\nval_loss=0.0037 SWA=0.9993 CWA=0.9995 HWA=0.9994', '\\n', '[hidden=512, Bi]\nEpoch4 train_loss=0.0025 val_loss=0.0009 SWA=1.0000 CWA=1.0000 HWA=1.0000',\n'\\n', '[hidden=512, Bi] Epoch5 train_loss=0.0003 val_loss=0.0005 SWA=1.0000\nCWA=1.0000 HWA=1.0000', '\\n', '[hidden=512, Bi] Epoch6 train_loss=0.0001\nval_loss=0.0004 SWA=1.0000 CWA=1.0000 HWA=1.0000', '\\n', '[hidden=512, Uni]\nEpoch1 train_loss=0.2066 val_loss=0.1164 SWA=0.9656 CWA=0.9636 HWA=0.9646',\n'\\n', '[hidden=512, Uni] Epoch2 train_loss=0.0741 val_loss=0.0378 SWA=0.9877\nCWA=0.9885 HWA=0.9881', '\\n', '[hidden=512, Uni] Epoch3 train_loss=0.0251\nval_loss=0.0135 SWA=0.9979 CWA=0.9982 HWA=0.9980', '\\n', '[hidden=512, Uni]\nEpoch4 train_loss=0.0055 val_loss=0.0052 SWA=0.9984 CWA=0.9987 HWA=0.9985',\n'\\n', '[hidden=512, Uni] Epoch5 train_loss=0.0020 val_loss=0.0067 SWA=0.9985\nCWA=0.9986 HWA=0.9986', '\\n', '[hidden=512, Uni] Epoch6 train_loss=0.0077\nval_loss=0.0048 SWA=0.9991 CWA=0.9991 HWA=0.9991', '\\n', 'Saved experiment data\nto /home/zxl240011/AI-Scientist-v2/experiments/2025-08-16_02-30-\n16_context_aware_contrastive_learning_attempt_0/0-run/process_ForkProcess-\n30/working/experiment_data.npy', '\\n', 'Execution time: 28 seconds seconds (time\nlimit is 30 minutes).']", "['Using device:', ' ', 'cuda', '\\n', 'Traceback (most recent call last):\\n  File\n\"runfile.py\", line 31, in <module>\\n    DATA_PATH = find_spr_bench()\\n\n^^^^^^^^^^^^^^^^\\n  File \"runfile.py\", line 28, in find_spr_bench\\n    raise\nFileNotFoundError(\"SPR_BENCH dataset not found.\")\\nFileNotFoundError: SPR_BENCH\ndataset not found.\\n', 'Execution time: a moment seconds (time limit is 30\nminutes).']"], "analysis": ["The execution failed because the script could not locate the SPR_BENCH dataset.\nThe function find_spr_bench() raises a FileNotFoundError when it cannot find the\ndataset in the specified paths. To fix this, ensure that the SPR_BENCH dataset\nis correctly placed in one of the expected locations ('./SPR_BENCH',\n'../SPR_BENCH', or '../../SPR_BENCH') or set the SPR_DATA_PATH environment\nvariable to the correct path of the dataset. Additionally, verify that the\ndataset files (train.csv, dev.csv, test.csv) exist in the specified directory.", "", "", "The execution failed because the script could not locate the SPR_BENCH dataset.\nThe error message indicates that the dataset directory was not found in the\nspecified paths or the environment variable SPR_DATA_PATH. To fix this, ensure\nthat the SPR_BENCH dataset is correctly placed in one of the specified paths\n('./SPR_BENCH', '../SPR_BENCH', '../../SPR_BENCH') or set the SPR_DATA_PATH\nenvironment variable to the correct directory path where the dataset is located."], "exc_type": ["FileNotFoundError", null, null, "FileNotFoundError"], "exc_info": [{"args": ["SPR_BENCH dataset not found."]}, null, null, {"args": ["SPR_BENCH dataset not found."]}], "exc_stack": [[["/home/zxl240011/AI-Scientist-v2/ai_scientist/treesearch/interpreter.py", 144, "_run_session", "exec(compile(code, self.agent_file_name, \"exec\"), global_scope)"], ["runfile.py", 38, "<module>", "DATA_PATH = find_spr_bench()"], ["runfile.py", 35, "find_spr_bench", "raise FileNotFoundError(\"SPR_BENCH dataset not found.\")"]], null, null, [["/home/zxl240011/AI-Scientist-v2/ai_scientist/treesearch/interpreter.py", 144, "_run_session", "exec(compile(code, self.agent_file_name, \"exec\"), global_scope)"], ["runfile.py", 31, "<module>", "DATA_PATH = find_spr_bench()"], ["runfile.py", 28, "find_spr_bench", "raise FileNotFoundError(\"SPR_BENCH dataset not found.\")"]]], "exp_name": "0-run", "metrics": [{"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}, {"metric_names": [{"metric_name": "training loss", "lower_is_better": true, "description": "Measures how well the model is performing on the training data.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.519887, "best_value": 0.519887}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "Measures how well the model is performing on the validation data.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.521528, "best_value": 0.521528}]}, {"metric_name": "validation shape-weighted accuracy", "lower_is_better": false, "description": "Measures the accuracy of the model on shape-weighted validation data.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.746483, "best_value": 0.746483}]}, {"metric_name": "validation color-weighted accuracy", "lower_is_better": false, "description": "Measures the accuracy of the model on color-weighted validation data.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.740406, "best_value": 0.740406}]}, {"metric_name": "validation harmonic-weighted accuracy", "lower_is_better": false, "description": "Measures the accuracy of the model on harmonic-weighted validation data.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.743432, "best_value": 0.743432}]}]}, {"metric_names": [{"metric_name": "training loss", "lower_is_better": true, "description": "The loss value during training, which indicates how well the model is performing on the training data.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0001, "best_value": 0.0001}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "The loss value during validation, which indicates how well the model is performing on the validation data.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0004, "best_value": 0.0004}]}, {"metric_name": "validation shape weighted accuracy", "lower_is_better": false, "description": "The accuracy of shape predictions on the validation dataset, weighted by the importance of each category.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 1.0, "best_value": 1.0}]}, {"metric_name": "validation color weighted accuracy", "lower_is_better": false, "description": "The accuracy of color predictions on the validation dataset, weighted by the importance of each category.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 1.0, "best_value": 1.0}]}, {"metric_name": "validation harmonic weighted accuracy", "lower_is_better": false, "description": "The harmonic mean of weighted accuracies across different categories on the validation dataset.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 1.0, "best_value": 1.0}]}]}, {"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}], "is_best_node": [false, false, true, false], "plots": [[], ["../../logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_loss_curves.png", "../../logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_weighted_accuracies.png", "../../logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_confusion_matrix.png"], ["../../logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_bidirectional_loss_curves.png", "../../logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_bidirectional_hwa_curves.png", "../../logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_unidirectional_loss_curves.png", "../../logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_unidirectional_hwa_curves.png"], []], "plot_paths": [[], ["experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_loss_curves.png", "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_weighted_accuracies.png", "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_confusion_matrix.png"], ["experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_bidirectional_loss_curves.png", "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_bidirectional_hwa_curves.png", "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_unidirectional_loss_curves.png", "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_unidirectional_hwa_curves.png"], []], "plot_analyses": [[], [{"analysis": "The training and validation loss curves show a rapid decrease in the first two epochs, followed by stabilization. This indicates effective learning during the initial stages, with the model converging quickly. The slight divergence between training and validation loss after the second epoch suggests a potential risk of overfitting, but the gap remains minimal, indicating good generalization.", "plot_path": "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_loss_curves.png"}, {"analysis": "Validation accuracies for SWA, CWA, and HWA improve consistently across epochs up to the fourth epoch, after which there is a slight decline for SWA and CWA, while HWA stabilizes. This suggests that the model achieves its best performance around the fourth epoch and that further training may lead to slight overfitting. The consistent improvement in all metrics demonstrates the effectiveness of the proposed approach in learning robust embeddings.", "plot_path": "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_weighted_accuracies.png"}, {"analysis": "The confusion matrix for the dev set indicates a balanced performance with a good number of true positives and true negatives. However, there is still room for improvement in reducing false positives and false negatives. The model demonstrates a reasonable ability to distinguish between classes but may benefit from further optimization or adjustments to hyperparameters to improve classification accuracy.", "plot_path": "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_0ecae20a777b43ee9002d600b2045307_proc_3110742/SPR_BENCH_confusion_matrix.png"}], [{"analysis": "The loss curves for the bidirectional LSTM show consistent convergence across all hidden sizes (hs64, hs128, hs256, hs512). The training loss decreases rapidly in the initial epochs and stabilizes around epoch 5 for all configurations. Validation loss follows a similar trend, indicating no significant overfitting. Larger hidden sizes (hs256 and hs512) exhibit slightly better convergence, with lower final losses compared to smaller sizes. This suggests that increasing hidden size improves the model's capacity to learn complex patterns in the SPR_BENCH dataset.", "plot_path": "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_bidirectional_loss_curves.png"}, {"analysis": "The harmonic weighted accuracy (HWA) plot for the bidirectional LSTM demonstrates a steady improvement in accuracy over epochs for all hidden sizes. Larger hidden sizes (hs256 and hs512) achieve higher peak HWA, suggesting that they better capture the symbolic relationships in the data. However, the marginal improvement from hs256 to hs512 is minimal, indicating diminishing returns for increasing hidden size beyond hs256.", "plot_path": "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_bidirectional_hwa_curves.png"}, {"analysis": "The loss curves for the unidirectional LSTM also show consistent convergence, with training and validation losses decreasing rapidly in the initial epochs and stabilizing around epoch 5. Similar to the bidirectional LSTM, larger hidden sizes (hs256 and hs512) achieve lower final losses, highlighting the benefit of increased capacity. Validation loss curves closely follow training loss curves, indicating no significant overfitting.", "plot_path": "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_unidirectional_loss_curves.png"}, {"analysis": "The HWA plot for the unidirectional LSTM shows a similar trend to the bidirectional LSTM, with accuracy improving steadily over epochs. Larger hidden sizes (hs256 and hs512) achieve higher accuracy, but the difference between hs256 and hs512 is minimal. Interestingly, the unidirectional LSTM with hs512 reaches higher peak accuracy compared to the bidirectional LSTM, suggesting that unidirectional models may be sufficient for the SPR task when equipped with sufficient capacity.", "plot_path": "experiments/2025-08-16_02-30-16_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_01bd69658b03498c8c2e7c05522f5036_proc_3110743/SPR_BENCH_unidirectional_hwa_curves.png"}], []], "vlm_feedback_summary": ["[]", "The experiment demonstrates effective learning and convergence, with validation\nmetrics showing consistent improvement up to the fourth epoch. While the model\nshows good generalization, slight overfitting is observed beyond the fourth\nepoch. The confusion matrix highlights balanced performance but suggests\npotential for further optimization to reduce misclassifications.", "The provided plots reveal consistent convergence and performance improvement for\nboth bidirectional and unidirectional LSTMs across different hidden sizes.\nLarger hidden sizes (hs256 and hs512) generally lead to better performance,\nthough the gain diminishes beyond hs256. The unidirectional LSTM with hs512\nachieves the highest harmonic weighted accuracy, indicating that it may be a\nstrong candidate for the SPR task. No significant overfitting is observed in any\nconfiguration.", "[]"], "exec_time": [0.530531644821167, 4.9696595668792725, 28.568082332611084, 0.47542357444763184], "exec_time_feedback": ["", "", "", ""], "datasets_successfully_tested": [[], ["['SPR_BENCH']"], ["['SPR_BENCH']"], []], "plot_code": [null, "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load experiment data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\nboe = experiment_data.get(\"bag_of_embeddings\", {}).get(\"SPR_BENCH\", {})\n\n# ---------- helper to get losses / metrics ----------\nloss_tr = np.array(boe.get(\"losses\", {}).get(\"train\", []))  # (ep, loss)\nloss_val = np.array(boe.get(\"losses\", {}).get(\"val\", []))\nmetrics_val = np.array(boe.get(\"metrics\", {}).get(\"val\", []))  # (ep, swa,cwa,hwa)\npreds = np.array(boe.get(\"predictions\", []))\ntruth = np.array(boe.get(\"ground_truth\", []))\n\n# ---------- Figure 1: loss curves ----------\ntry:\n    if loss_tr.size and loss_val.size:\n        plt.figure()\n        plt.plot(loss_tr[:, 0], loss_tr[:, 1], label=\"Train\")\n        plt.plot(loss_val[:, 0], loss_val[:, 1], label=\"Validation\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Cross-Entropy Loss\")\n        plt.title(\"SPR_BENCH Bag-of-Embeddings\\nTraining vs Validation Loss\")\n        plt.legend()\n        fp = os.path.join(working_dir, \"SPR_BENCH_loss_curves.png\")\n        plt.savefig(fp)\n        plt.close()\n        print(\"Saved\", fp)\nexcept Exception as e:\n    print(f\"Error creating loss curve: {e}\")\n    plt.close()\n\n# ---------- Figure 2: validation metrics ----------\ntry:\n    if metrics_val.size:\n        plt.figure()\n        plt.plot(metrics_val[:, 0], metrics_val[:, 1], \"o-\", label=\"SWA\")\n        plt.plot(metrics_val[:, 0], metrics_val[:, 2], \"s-\", label=\"CWA\")\n        plt.plot(metrics_val[:, 0], metrics_val[:, 3], \"^-\", label=\"HWA\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Accuracy\")\n        plt.title(\"SPR_BENCH Bag-of-Embeddings\\nValidation Weighted Accuracies\")\n        plt.legend()\n        fp = os.path.join(working_dir, \"SPR_BENCH_weighted_accuracies.png\")\n        plt.savefig(fp)\n        plt.close()\n        print(\"Saved\", fp)\nexcept Exception as e:\n    print(f\"Error creating metrics curve: {e}\")\n    plt.close()\n\n# ---------- Figure 3: confusion matrix ----------\ntry:\n    if preds.size and truth.size:\n        labels = sorted(set(truth))\n        cm = np.zeros((len(labels), len(labels)), dtype=int)\n        for t, p in zip(truth, preds):\n            cm[t, p] += 1\n        plt.figure()\n        im = plt.imshow(cm, cmap=\"Blues\")\n        plt.colorbar(im)\n        plt.xticks(range(len(labels)), labels)\n        plt.yticks(range(len(labels)), labels)\n        plt.xlabel(\"Predicted\")\n        plt.ylabel(\"True\")\n        plt.title(\"SPR_BENCH Bag-of-Embeddings\\nConfusion Matrix (Dev Set)\")\n        fp = os.path.join(working_dir, \"SPR_BENCH_confusion_matrix.png\")\n        plt.savefig(fp)\n        plt.close()\n        print(\"Saved\", fp)\nexcept Exception as e:\n    print(f\"Error creating confusion matrix: {e}\")\n    plt.close()\n\n# ---------- print final harmonic weighted accuracy ----------\nif metrics_val.size:\n    final_hwa = metrics_val[-1, 3]\n    print(f\"Final Harmonic Weighted Accuracy (dev): {final_hwa:.4f}\")\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\n\n# ---------- helper to unpack ----------\ndef unpack_losses(metrics_dict, kind=\"losses\"):\n    xs, ys_tr, ys_val = {}, {}, {}\n    for hs, data in metrics_dict.items():\n        rec = data[\"SPR_BENCH\"][kind]\n        if kind == \"losses\":\n            tr = [t for t, _ in rec[\"train\"]]\n            ys_tr[hs] = [v for _, v in rec[\"train\"]]\n            ys_val[hs] = [v for _, v in rec[\"val\"]]\n            xs[hs] = tr\n        else:  # metrics\n            xs[hs] = [t for t, *_ in rec[\"val\"]]\n            swa = [s for _, s, _, _ in rec[\"val\"]]\n            cwa = [c for _, _, c, _ in rec[\"val\"]]\n            hwa = [h for _, _, _, h in rec[\"val\"]]\n            ys_tr[hs] = (swa, cwa, hwa)  # reuse container\n    return xs, ys_tr, ys_val\n\n\n# ---------- plotting ----------\nfor model_type in [\"bidirectional\", \"unidirectional\"]:\n    configs = experiment_data.get(model_type, {})\n    if not configs:\n        continue\n\n    # 1) Loss curves\n    try:\n        plt.figure()\n        xs, ys_tr, ys_val = unpack_losses(configs, \"losses\")\n        for hs in sorted(xs):\n            plt.plot(xs[hs], ys_tr[hs], label=f\"hs{hs}-train\")\n            plt.plot(xs[hs], ys_val[hs], \"--\", label=f\"hs{hs}-val\")\n        plt.title(f\"SPR_BENCH {model_type} LSTM - Loss Curves\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Cross-Entropy Loss\")\n        plt.legend()\n        fname = f\"SPR_BENCH_{model_type}_loss_curves.png\"\n        plt.savefig(os.path.join(working_dir, fname))\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating {model_type} loss plot: {e}\")\n        plt.close()\n\n    # 2) HWA curves\n    try:\n        plt.figure()\n        xs, ys_tr, _ = unpack_losses(configs, \"metrics\")\n        for hs in sorted(xs):\n            hwa = ys_tr[hs][2]  # index 2 is HWA\n            plt.plot(xs[hs], hwa, label=f\"hs{hs}\")\n        plt.title(f\"SPR_BENCH {model_type} LSTM - Harmonic Weighted Accuracy\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"HWA\")\n        plt.legend()\n        fname = f\"SPR_BENCH_{model_type}_hwa_curves.png\"\n        plt.savefig(os.path.join(working_dir, fname))\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating {model_type} HWA plot: {e}\")\n        plt.close()\n\n# ---------- print best final metrics ----------\nbest_cfg = None\nbest_hwa = -1\nfor model_type, cfgs in experiment_data.items():\n    for hs, data in cfgs.items():\n        hwa_final = data[\"SPR_BENCH\"][\"metrics\"][\"val\"][-1][-1]\n        if hwa_final > best_hwa:\n            best_hwa = hwa_final\n            swa_final = data[\"SPR_BENCH\"][\"metrics\"][\"val\"][-1][1]\n            cwa_final = data[\"SPR_BENCH\"][\"metrics\"][\"val\"][-1][2]\n            best_cfg = (model_type, hs, swa_final, cwa_final, hwa_final)\n\nif best_cfg:\n    mtype, hs, swa_f, cwa_f, hwa_f = best_cfg\n    print(\n        f\"Best final config: {mtype}, hidden={hs} \"\n        f\"SWA={swa_f:.4f} CWA={cwa_f:.4f} HWA={hwa_f:.4f}\"\n    )\nelse:\n    print(\"No data available to compute best metrics.\")\n", null], "plot_plan": [null, "We will load the saved experiment_data dictionary, extract the per-epoch losses and validation metrics, and draw three figures: (1) training vs. validation loss, (2) Shape/Color/Harmonic weighted accuracies, and (3) a confusion-matrix heat-map for the final dev predictions.  Each figure is wrapped in its own try-except so that one failure does not break the others, and every figure is saved into working_dir with descriptive file names that include \u201cSPR_BENCH\u201d and the plot type.  We will cap the total number of figures at three\u2014well under the five-figure limit\u2014and always close figures even on error.  The code begins with the required imports and working_dir definition, then attempts to load experiment_data.npy.  After plotting, we also print the final harmonic accuracy for convenience.  All plotting relies solely on data present in experiment_data.npy and uses only base matplotlib calls.", "We will load experiment_data.npy, explore its nested structure and iterate over both model types (bidirectional/unidirectional) and hidden sizes. For each model type we create two plots: (1) training vs validation loss curves for all hidden sizes; (2) harmonic weighted accuracy (HWA) curves for all hidden sizes. This yields four figures total\u2014well under the five-figure cap. Each figure is generated inside its own try-except block, titled clearly, saved to working_dir with descriptive names, and then closed. After plotting, we scan every configuration, record the final-epoch SWA, CWA and HWA, find the configuration with the best final HWA, and print these best metrics so the user can see peak performance directly. All matplotlib calls use basic defaults, no simulated data are introduced, and every figure is properly closed even on error.", null], "ablation_name": ["Multi-Synthetic-Dataset Generalization", "Bag-of-Embeddings (Orderless Encoder)", "Unidirectional LSTM Encoder", "No-Packed-LSTM (Padding-Aware vs Padding-Agnostic)"], "hyperparam_name": [null, null, null, null], "is_seed_node": [false, false, false, false], "is_seed_agg_node": [false, false, false, false], "parse_metrics_plan": ["", "We will load the saved NumPy file from the working directory, walk through its\nnested dictionary (model \u2192 dataset \u2192 content), and retrieve the last entry of\neach recorded list. Those last entries correspond to the final epoch, so we\ntreat them as the final values for every metric. For each dataset we then print\nthe dataset name once, followed by clearly-labelled final training loss, final\nvalidation loss, final validation shape-weighted accuracy, final validation\ncolor-weighted accuracy, and final validation harmonic-weighted accuracy.", "We will load the saved NumPy dictionary, walk through every stored run\n(bidirectional / unidirectional \u00d7 hidden size) and collect the final\u2013epoch\nnumbers for each metric.   For every dataset key (here only \u201cSPR_BENCH\u201d) we keep\nthe best value seen: lowest for losses and highest for the three weighted-\naccuracy variants.   Finally we print the dataset name once, followed by clearly\nlabeled metrics with the best value achieved across all runs.", ""], "parse_metrics_code": ["", "import os\nimport numpy as np\n\n# -------- locate file & load ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n# -------- iterate and report ----------\nfor model_name, datasets in experiment_data.items():\n    for dataset_name, content in datasets.items():\n        print(f\"Dataset: {dataset_name}\")\n\n        # losses\n        train_losses = content.get(\"losses\", {}).get(\"train\", [])\n        val_losses = content.get(\"losses\", {}).get(\"val\", [])\n        if train_losses:\n            final_train_loss = train_losses[-1][1]\n            print(f\"Final training loss: {final_train_loss:.6f}\")\n        if val_losses:\n            final_val_loss = val_losses[-1][1]\n            print(f\"Final validation loss: {final_val_loss:.6f}\")\n\n        # validation accuracies (SWA, CWA, HWA)\n        val_metrics = content.get(\"metrics\", {}).get(\"val\", [])\n        if val_metrics:\n            _, swa, cwa, hwa = val_metrics[-1]\n            print(f\"Final validation shape-weighted accuracy: {swa:.6f}\")\n            print(f\"Final validation color-weighted accuracy:  {cwa:.6f}\")\n            print(f\"Final validation harmonic-weighted accuracy: {hwa:.6f}\")\n", "import os\nimport numpy as np\n\n# -------- locate file and load ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n\n# -------- helper to update best values ----------\ndef keep_best(dstore, metric, value, better):\n    \"\"\"Update dstore[metric] if value is better.\"\"\"\n    if metric not in dstore:\n        dstore[metric] = value\n    else:\n        if better(value, dstore[metric]):\n            dstore[metric] = value\n\n\nbest_scores = {}  # dataset -> metric -> value\n\n# -------- iterate through every run ----------\nfor direction in experiment_data:  # 'bidirectional', 'unidirectional'\n    for hidden_size, res_per_dataset in experiment_data[direction].items():\n        for dataset_name, run_data in res_per_dataset.items():\n            # final epoch entries are the last elements in the lists\n            final_train_loss = run_data[\"losses\"][\"train\"][-1][1]\n            final_val_loss = run_data[\"losses\"][\"val\"][-1][1]\n            _, swa, cwa, hwa = run_data[\"metrics\"][\"val\"][-1]\n\n            ds_best = best_scores.setdefault(dataset_name, {})\n            keep_best(ds_best, \"training loss\", final_train_loss, lambda v, b: v < b)\n            keep_best(ds_best, \"validation loss\", final_val_loss, lambda v, b: v < b)\n            keep_best(\n                ds_best, \"validation shape weighted accuracy\", swa, lambda v, b: v > b\n            )\n            keep_best(\n                ds_best, \"validation color weighted accuracy\", cwa, lambda v, b: v > b\n            )\n            keep_best(\n                ds_best,\n                \"validation harmonic weighted accuracy\",\n                hwa,\n                lambda v, b: v > b,\n            )\n\n# -------- print results ----------\nfor dataset_name, metrics in best_scores.items():\n    print(f\"Dataset: {dataset_name}\")\n    for metric_name, value in metrics.items():\n        # all metrics are floats; format to 4 decimals\n        print(f\"{metric_name}: {value:.4f}\")\n", ""], "parse_term_out": ["", "['Dataset: SPR_BENCH', '\\n', 'Final training loss: 0.519887', '\\n', 'Final\nvalidation loss: 0.521528', '\\n', 'Final validation shape-weighted accuracy:\n0.746483', '\\n', 'Final validation color-weighted accuracy:  0.740406', '\\n',\n'Final validation harmonic-weighted accuracy: 0.743432', '\\n', 'Execution time:\na moment seconds (time limit is 30 minutes).']", "['Dataset: SPR_BENCH', '\\n', 'training loss: 0.0001', '\\n', 'validation loss:\n0.0004', '\\n', 'validation shape weighted accuracy: 1.0000', '\\n', 'validation\ncolor weighted accuracy: 1.0000', '\\n', 'validation harmonic weighted accuracy:\n1.0000', '\\n', 'Execution time: a moment seconds (time limit is 30 minutes).']", ""], "parse_exc_type": [null, null, null, null], "parse_exc_info": [null, null, null, null], "parse_exc_stack": [null, null, null, null], "completed_stages": ["Stage_1", "Stage_2", "Stage_3", "Stage_4"]}