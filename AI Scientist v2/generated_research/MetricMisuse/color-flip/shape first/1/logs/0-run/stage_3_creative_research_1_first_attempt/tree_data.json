{"edges": [[0, 10], [0, 5], [0, 3], [0, 8], [0, 6], [0, 4], [0, 2], [0, 12], [0, 9], [0, 1], [0, 7], [0, 11]], "layout": [[0.5, 0.0], [0.0, 1.0], [0.09090909090909091, 1.0], [0.18181818181818182, 1.0], [0.2727272727272727, 1.0], [0.36363636363636365, 1.0], [0.45454545454545453, 1.0], [0.5454545454545454, 1.0], [0.6363636363636364, 1.0], [0.7272727272727273, 1.0], [0.8181818181818182, 1.0], [0.9090909090909091, 1.0], [1.0, 1.0]], "plan": ["Hyperparam tuning name: pretrain_epochs. The solution repeats the original\npipeline for several values of pretrain_epochs (2, 4, 6, 8, 10).   For every\nsetting it re-initialises the encoder / classifier, runs contrastive pre-\ntraining for the chosen number of epochs, fine-tunes for three epochs, and\nstores all losses and metrics in the mandatory experiment_data dictionary\n(organised as\nexperiment_data['pretrain_epochs']['SPR_BENCH'][str(pretrain_epochs)] = \u2026).\nFinally it saves the dictionary to working/experiment_data.npy and produces a\nloss-curve PNG for each run.", "To push performance further we swap the GRU for a lightweight Transformer\nencoder that can capture longer-range context, and we create far \u201charder\u201d\npositive views by (i) random span-masking and (ii) length-preserving local\nshuffling.  A single view is passed twice through the encoder so that\ncontrastive learning must rely on content, not order.  We pre-train with InfoNCE\nfor six epochs (the sweet-spot found in previous sweeps) then fine-tune three\nepochs.  At every epoch we log validation loss plus Shape-, Color- and new\nComplexity-Weighted Accuracy, save everything to ./working and draw a loss\ncurve.  The entire script is self-contained, GPU-aware and respects all storage\n/ metric guidelines.  You can extend it easily by changing the hyper-parameters\ndictionary.", "We enhance the baseline by giving the encoder explicit knowledge of shapes and\ncolours.   Every token is decomposed into its shape symbol (first char) and\ncolour symbol (second char).   Three embedding tables (token, shape, colour) are\nlearned; the concatenated vector is linearly projected and fed to a bi-GRU\nencoder.   Two stochastic context augmentations create contrastive views: (i) 15\n% random token masking and (ii) one random adjacent swap.   The encoder is pre-\ntrained with InfoNCE for a few epochs, then a linear classifier is fine-tuned\nwith cross-entropy.   We monitor validation loss together with Shape-, Colour-\nand Complexity-Weighted Accuracies at every epoch and store everything in\nexperiment_data.npy.   Thanks to the compositional embeddings the model can\ngeneralise to unseen shape/colour combinations while keeping the script light\nenough to finish in minutes.", "We will enhance the previous baseline by (1) switching to a light Transformer\nencoder with learnable positional embeddings, (2) designing a richer context-\naware augmentation (token deletion / masking / local shuffling) for SimCLR-style\ncontrastive pre-training, and (3) adding the requested Complexity-Weighted\nAccuracy metric that simultaneously rewards shape- and color-sensitive\npredictions.   After contrastive pre-training the encoder is fine-tuned for\nclassification; validation loss plus SWA, CWA and CompWA are printed every epoch\nand stored (together with losses, predictions, ground-truth) in\n`experiment_data.npy`. The whole script is self-contained, GPU-aware and keeps\nruntime modest by using a single strong setting (6 pre-train epochs, 5 fine-tune\nepochs).", "We propose replacing the GRU encoder with a lightweight Transformer that can\nbetter capture long-range symbolic dependencies, and we inject stronger context-\naware augmentations (masking, local permutation, and token-dropping) when\nbuilding positive pairs. After 5 epochs of contrastive pre-training the encoder\nis fine-tuned for classification; during fine-tuning we monitor Shape-, Color-\nand the requested Complexity-Weighted Accuracy (CompWA). All metrics and losses\nare saved to ./working/experiment_data.npy for later analysis.", "We improve representation learning by decomposing each symbol into independent\nshape- and color-indices, learning two small embedding tables whose sum gives\nthe full token embedding. A 2-layer lightweight Transformer encoder replaces the\nearlier GRU, capturing long-range dependencies more effectively. During self-\nsupervised pre-training we generate two context-aware augmented views of every\nsequence: one with random span-masking, the other with local token shuffling,\nand optimize an NT-Xent contrastive loss on the resulting CLS embeddings. After\na few epochs of pre-training, we append a linear classifier and fine-tune on\nlabelled data, monitoring validation loss together with Shape-, Color- and the\nrequested Complexity-Weighted Accuracy. All losses and metrics are stored in the\nprescribed experiment_data structure and saved to ./working. The whole script is\nself-contained, GPU-aware, and keeps runtime short by using small hidden sizes\nand only a handful of epochs.", "The improved approach separates each token into shape and color, embeds them\nindependently, and merges the two embeddings before feeding a lightweight\n2-layer Transformer encoder. Positive views for contrastive pre-training are\nproduced with context-aware augmentations: (1) random span-masking and (2) local\nwindow shuffling. After a short InfoNCE pre-training, the whole encoder is fine-\ntuned with a classification head. We track validation loss every epoch and\ncompute Shape-, Color- and Complexity-Weighted Accuracies, storing everything in\n`experiment_data.npy`. All tensors and the model are moved to the available\nGPU/CPU as required.", "We switch to a lightweight Transformer encoder with separate embeddings for\nshape and color symbols plus positional encodings.  During self-supervised pre-\ntraining we apply context-aware augmentations (token masking & local shuffling)\nand maximise an InfoNCE loss on positive pairs.  The encoder is then fine-tuned\nwith a linear head for sequence classification, tracking validation loss and\nthree metrics: SWA, CWA and the requested Complexity-Weighted Accuracy (CompWA).\nAll metrics/losses are stored in `experiment_data` and saved to\n`./working/experiment_data.npy`.  The code falls back to a small synthetic\ndataset if the real one is absent, so it runs quickly on CPU or GPU.", "We will switch to a compositional encoder that embeds shape\u2010 and color-symbols\nindependently and feeds their sum into a lightweight 2-layer Transformer\nencoder.  Contrastive pre-training still relies on two stochastic, context-aware\naugmentations (token deletion + span masking) but the richer encoder should\nprovide more generalizable representations.  After a few epochs of contrastive\nlearning we attach a soft-max head and fine-tune on labels.  At every fine-\ntuning epoch we compute and print validation loss together with Shape-, Color-\nand (new) Complexity-Weighted Accuracies, saving all curves into the\nexperiment_data dict.  A single small run (4 pre-train + 3 fine-tune epochs)\nkeeps the script well under the 30-minute limit while demonstrating the improved\narchitecture and metric tracking.  The code automatically falls back to a tiny\nsynthetic SPR set if the real data folder is missing, so it can run anywhere.\nAll tensors, models and losses are consistently moved to GPU when available, and\nresults are finally stored in ./working/experiment_data.npy for later analysis.\nThis minimal but principled upgrade provides a clear experimental stepping stone\ntoward beating the current SOTA.", "Seed node", "Seed node", "Seed node", "Aggregate results from multiple seeds"], "code": ["import os, pathlib, random, math, time, json, gc\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence, pack_padded_sequence\nimport matplotlib.pyplot as plt\n\n# ------------------------- I/O -----------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ------------------------- Device --------------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n# ---------------------- Data loading -----------------------\nfrom datasets import load_dataset, DatasetDict\n\n\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(split_csv: str):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    for s in [\"train\", \"dev\", \"test\"]:\n        d[s] = _load(f\"{s}.csv\")\n    return d\n\n\ndata_root_candidates = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr_bench = None\nfor p in data_root_candidates:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(f\"Loaded data from {p}\")\n        break\nif spr_bench is None:\n    print(\"SPR_BENCH not found, generating synthetic data.\")\n\n    def synth(n):\n        seqs, labels = [], []\n        shapes, colors = \"ABCD\", \"1234\"\n        for _ in range(n):\n            L = random.randint(4, 9)\n            seq = \" \".join(\n                random.choice(shapes) + random.choice(colors) for _ in range(L)\n            )\n            seqs.append(seq)\n            labels.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n\n    spr_bench = DatasetDict()\n    for split, n in [(\"train\", 500), (\"dev\", 100), (\"test\", 100)]:\n        spr_bench[split] = load_dataset(\n            \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n        )\n\n\ndef tokenize(seq):\n    return seq.strip().split()\n\n\n# ---------------------- Vocabulary -------------------------\nvocab = {\"<PAD>\": 0, \"<MASK>\": 1}\nfor split in spr_bench.values():\n    for seq in split[\"sequence\"]:\n        for tok in tokenize(seq):\n            if tok not in vocab:\n                vocab[tok] = len(vocab)\nvocab_size = len(vocab)\nmask_id = vocab[\"<MASK>\"]\nprint(\"Vocab size:\", vocab_size)\n\n\n# ---------------------- Metrics ----------------------------\ndef count_shape_variety(sequence: str) -> int:\n    return len(set(tok[0] for tok in sequence.strip().split() if tok))\n\n\ndef count_color_variety(sequence: str) -> int:\n    return len(set(tok[1] for tok in sequence.strip().split() if len(tok) > 1))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    corr = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    corr = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\n# --------------------- Datasets ----------------------------\nclass SPRContrastiveDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def _augment(self, toks, p=0.15):\n        out = [t for t in toks if random.random() >= p]\n        if not out:\n            out = [random.choice(toks)]\n        return out\n\n    def __getitem__(self, idx):\n        toks = tokenize(self.seqs[idx])\n        return self._augment(toks), self._augment(toks)\n\n\nclass SPRClassifierDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n        self.labels = hf_ds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return tokenize(self.seqs[idx]), self.labels[idx], self.seqs[idx]\n\n\ndef collate_contrastive(batch):\n    v1, v2 = zip(*batch)\n\n    def encode(tok_list):\n        ids = [\n            torch.tensor([vocab[t] for t in toks], dtype=torch.long)\n            for toks in tok_list\n        ]\n        lens = [len(i) for i in ids]\n        ids = pad_sequence(ids, batch_first=True, padding_value=0)\n        return ids.to(device), torch.tensor(lens, dtype=torch.long).to(device)\n\n    ids1, len1 = encode(v1)\n    ids2, len2 = encode(v2)\n    return {\"ids1\": ids1, \"len1\": len1, \"ids2\": ids2, \"len2\": len2}\n\n\ndef collate_classifier(batch):\n    toks, labels, raw_seq = zip(*batch)\n    ids = [torch.tensor([vocab[t] for t in t], dtype=torch.long) for t in toks]\n    lens = [len(i) for i in ids]\n    ids = pad_sequence(ids, batch_first=True, padding_value=0).to(device)\n    return {\n        \"ids\": ids,\n        \"len\": torch.tensor(lens, dtype=torch.long).to(device),\n        \"label\": torch.tensor(labels, dtype=torch.long).to(device),\n        \"sequence\": raw_seq,\n    }\n\n\n# ---------------------- Model ------------------------------\nclass Encoder(nn.Module):\n    def __init__(self, vocab, emb_dim=64, hidden=128):\n        super().__init__()\n        self.emb = nn.Embedding(len(vocab), emb_dim, padding_idx=0)\n        self.gru = nn.GRU(emb_dim, hidden, batch_first=True, bidirectional=True)\n        self.proj = nn.Linear(hidden * 2, hidden)\n\n    def forward(self, ids, lens):\n        x = self.emb(ids)\n        packed = pack_padded_sequence(\n            x, lens.cpu(), batch_first=True, enforce_sorted=False\n        )\n        _, h = self.gru(packed)\n        h = torch.cat([h[-2], h[-1]], dim=1)\n        return self.proj(h)\n\n\nclass Classifier(nn.Module):\n    def __init__(self, encoder, num_classes):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.proj.out_features, num_classes)\n\n    def forward(self, ids, lens):\n        return self.head(self.encoder(ids, lens))\n\n\n# ---------------- Contrastive loss -------------------------\ndef nt_xent_loss(z1, z2, temp=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], dim=0)\n    sim = torch.matmul(z, z.T) / temp\n    mask = torch.eye(2 * N, dtype=torch.bool, device=z.device)\n    sim.masked_fill_(mask, -9e15)\n    targets = torch.arange(N, 2 * N, device=z.device)\n    logits_12 = sim[:N, N:]\n    logits_21 = sim[N:, :N]\n    denom_12 = torch.logsumexp(sim[:N], dim=1)\n    denom_21 = torch.logsumexp(sim[N:], dim=1)\n    loss = (-logits_12.diag() + denom_12 + -logits_21.diag() + denom_21).mean() * 0.5\n    return loss\n\n\n# ---------------- Experiment container ---------------------\nexperiment_data = {\"pretrain_epochs\": {\"SPR_BENCH\": {}}}\n\n# ------------- Hyperparameter values to try ----------------\nepoch_settings = [2, 4, 6, 8, 10]\n\nfor pretrain_epochs in epoch_settings:\n    print(f\"\\n=== Running experiment with pretrain_epochs={pretrain_epochs} ===\")\n    run_dict = {\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"metrics\": {\"SWA\": [], \"CWA\": [], \"SCHM\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n\n    # Dataloaders (fresh shuffle each run)\n    pretrain_loader = DataLoader(\n        SPRContrastiveDataset(spr_bench[\"train\"]),\n        batch_size=128,\n        shuffle=True,\n        collate_fn=collate_contrastive,\n    )\n    train_loader = DataLoader(\n        SPRClassifierDataset(spr_bench[\"train\"]),\n        batch_size=128,\n        shuffle=True,\n        collate_fn=collate_classifier,\n    )\n    dev_loader = DataLoader(\n        SPRClassifierDataset(spr_bench[\"dev\"]),\n        batch_size=256,\n        shuffle=False,\n        collate_fn=collate_classifier,\n    )\n\n    # Model instantiation\n    encoder = Encoder(vocab).to(device)\n    clf_model = Classifier(\n        encoder, num_classes=len(set(spr_bench[\"train\"][\"label\"]))\n    ).to(device)\n\n    # -------- Contrastive pre-training ----------\n    optimizer_pt = torch.optim.Adam(encoder.parameters(), lr=1e-3)\n    for ep in range(1, pretrain_epochs + 1):\n        encoder.train()\n        epoch_loss = 0.0\n        for batch in pretrain_loader:\n            optimizer_pt.zero_grad()\n            z1 = encoder(batch[\"ids1\"], batch[\"len1\"])\n            z2 = encoder(batch[\"ids2\"], batch[\"len2\"])\n            loss = nt_xent_loss(z1, z2)\n            loss.backward()\n            optimizer_pt.step()\n            epoch_loss += loss.item() * batch[\"ids1\"].size(0)\n        epoch_loss /= len(pretrain_loader.dataset)\n        run_dict[\"losses\"][\"pretrain\"].append(epoch_loss)\n        print(f\"  Pretrain epoch {ep}/{pretrain_epochs} loss={epoch_loss:.4f}\")\n\n    # --------------- Fine-tuning ----------------\n    optimizer_ft = torch.optim.Adam(clf_model.parameters(), lr=1e-3)\n    criterion = nn.CrossEntropyLoss()\n    ft_epochs = 3\n    for ep in range(1, ft_epochs + 1):\n        # train\n        clf_model.train()\n        running_loss = 0.0\n        for batch in train_loader:\n            optimizer_ft.zero_grad()\n            logits = clf_model(batch[\"ids\"], batch[\"len\"])\n            loss = criterion(logits, batch[\"label\"])\n            loss.backward()\n            optimizer_ft.step()\n            running_loss += loss.item() * batch[\"ids\"].size(0)\n        train_loss = running_loss / len(train_loader.dataset)\n        run_dict[\"losses\"][\"train\"].append(train_loss)\n        # evaluate\n        clf_model.eval()\n        val_loss = 0.0\n        all_pred = []\n        all_true = []\n        all_seq = []\n        with torch.no_grad():\n            for batch in dev_loader:\n                logits = clf_model(batch[\"ids\"], batch[\"len\"])\n                loss = criterion(logits, batch[\"label\"])\n                val_loss += loss.item() * batch[\"ids\"].size(0)\n                preds = logits.argmax(1).cpu().tolist()\n                all_pred.extend(preds)\n                all_true.extend(batch[\"label\"].cpu().tolist())\n                all_seq.extend(batch[\"sequence\"])\n        val_loss /= len(dev_loader.dataset)\n        run_dict[\"losses\"][\"val\"].append(val_loss)\n        swa = shape_weighted_accuracy(all_seq, all_true, all_pred)\n        cwa = color_weighted_accuracy(all_seq, all_true, all_pred)\n        schm = 2 * swa * cwa / (swa + cwa) if (swa + cwa) > 0 else 0.0\n        run_dict[\"metrics\"][\"SWA\"].append(swa)\n        run_dict[\"metrics\"][\"CWA\"].append(cwa)\n        run_dict[\"metrics\"][\"SCHM\"].append(schm)\n        print(\n            f\"  FT epoch {ep}/{ft_epochs} train_loss={train_loss:.4f} val_loss={val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} SCHM={schm:.3f}\"\n        )\n\n    # store final preds/gt from last epoch\n    run_dict[\"predictions\"] = all_pred\n    run_dict[\"ground_truth\"] = all_true\n    experiment_data[\"pretrain_epochs\"][\"SPR_BENCH\"][str(pretrain_epochs)] = run_dict\n\n    # plot loss curves for this run\n    plt.figure()\n    plt.plot(run_dict[\"losses\"][\"train\"], label=\"train\")\n    plt.plot(run_dict[\"losses\"][\"val\"], label=\"val\")\n    plt.title(f\"FT Loss (pretrain_epochs={pretrain_epochs})\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.savefig(os.path.join(working_dir, f\"loss_curve_ep{pretrain_epochs}.png\"))\n    plt.close()\n\n    # free memory\n    del encoder, clf_model, optimizer_pt, optimizer_ft\n    torch.cuda.empty_cache()\n    gc.collect()\n\n# --------------- Save experiment data ----------------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"\\nSaved experiment data and plots to ./working/\")\n", "import os, pathlib, random, math, gc, time\nimport numpy as np\nimport torch, torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence, pack_padded_sequence\nimport matplotlib.pyplot as plt\nfrom datasets import load_dataset, DatasetDict\n\n# --------------------  mandatory working dir -------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# --------------------  device ----------------------------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# --------------------  load SPR_BENCH -------------------------------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(csv_name):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / csv_name),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    for split in [\"train\", \"dev\", \"test\"]:\n        d[split] = _load(f\"{split}.csv\")\n    return d\n\n\ndata_roots = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr_bench = None\nfor p in data_roots:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(f\"Loaded SPR_BENCH from {p}\")\n        break\nif spr_bench is None:  # fallback tiny synthetic\n    print(\"SPR_BENCH not found \u2013 creating toy data\")\n\n    def synth(n):\n        shapes, colors = \"ABCD\", \"1234\"\n        seq, lbl = [], []\n        for i in range(n):\n            L = random.randint(4, 9)\n            seq.append(\n                \" \".join(\n                    random.choice(shapes) + random.choice(colors) for _ in range(L)\n                )\n            )\n            lbl.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seq, \"label\": lbl}\n\n    spr_bench = DatasetDict()\n    for sp, n in [(\"train\", 600), (\"dev\", 120), (\"test\", 120)]:\n        spr_bench[sp] = load_dataset(\n            \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n        )\n\n# --------------------- vocab ----------------------------------------\ntok2id = {\"<PAD>\": 0, \"<MASK>\": 1}\n\n\ndef tokenize(s):\n    return s.strip().split()\n\n\nfor seq in spr_bench[\"train\"][\"sequence\"]:\n    for tok in tokenize(seq):\n        if tok not in tok2id:\n            tok2id[tok] = len(tok2id)\nvocab_size = len(tok2id)\nmask_id = tok2id[\"<MASK>\"]\nprint(\"Vocab size:\", vocab_size)\n\n\n# -------------------- metrics ---------------------------------------\ndef count_shape(seq):\n    return len({t[0] for t in tokenize(seq)})\n\n\ndef count_color(seq):\n    return len({t[1] for t in tokenize(seq) if len(t) > 1})\n\n\ndef shape_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_shape(s) for s in seqs]\n    c = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if sum(w) else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_color(s) for s in seqs]\n    c = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if sum(w) else 0.0\n\n\ndef complexity_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_shape(s) + count_color(s) for s in seqs]\n    c = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if sum(w) else 0.0\n\n\n# -------------------- datasets --------------------------------------\nclass ContrastiveSPR(Dataset):\n    def __init__(self, hfd):\n        self.seqs = hfd[\"sequence\"]\n\n    def _augment(self, toks):\n        # span mask\n        toks = toks.copy()\n        if len(toks) > 2:\n            st = random.randint(0, len(toks) - 2)\n            ln = random.randint(1, max(1, len(toks) // 3))\n            for i in range(st, min(len(toks), st + ln)):\n                toks[i] = \"<MASK>\"\n        # local shuffle (k=3)\n        k = 3\n        if len(toks) > k:\n            i = random.randint(0, len(toks) - k)\n            window = toks[i : i + k]\n            random.shuffle(window)\n            toks[i : i + k] = window\n        return toks\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        toks = tokenize(self.seqs[idx])\n        return self._augment(toks), self._augment(toks)\n\n\nclass ClassifierSPR(Dataset):\n    def __init__(self, hfd):\n        self.seqs = hfd[\"sequence\"]\n        self.labels = hfd[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return tokenize(self.seqs[idx]), self.labels[idx], self.seqs[idx]\n\n\ndef pad_encode(token_lists):\n    id_seqs = [\n        torch.tensor([tok2id.get(t, mask_id) for t in tl], dtype=torch.long)\n        for tl in token_lists\n    ]\n    lens = [len(t) for t in id_seqs]\n    ids = pad_sequence(id_seqs, batch_first=True, padding_value=0)\n    return ids, lens\n\n\ndef collate_contrastive(batch):\n    a, b = zip(*batch)\n    ids1, l1 = pad_encode(a)\n    ids2, l2 = pad_encode(b)\n    return {\n        \"ids1\": ids1.to(device),\n        \"len1\": torch.tensor(l1).to(device),\n        \"ids2\": ids2.to(device),\n        \"len2\": torch.tensor(l2).to(device),\n    }\n\n\ndef collate_classifier(batch):\n    toks, lab, raw = zip(*batch)\n    ids, lens = pad_encode(toks)\n    return {\n        \"ids\": ids.to(device),\n        \"len\": torch.tensor(lens).to(device),\n        \"label\": torch.tensor(lab).to(device),\n        \"seq\": raw,\n    }\n\n\n# -------------------- model ----------------------------------------\nclass TransformerEncoder(nn.Module):\n    def __init__(self, vocab_sz, d_model=128, nhead=4, num_layers=2):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_sz, d_model, padding_idx=0)\n        self.pos = nn.Parameter(torch.randn(512, d_model))  # enough for longest seq\n        encoder_layer = nn.TransformerEncoderLayer(\n            d_model=d_model,\n            nhead=nhead,\n            dim_feedforward=256,\n            dropout=0.1,\n            batch_first=True,\n        )\n        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)\n        self.pool = nn.Linear(d_model, d_model)  # simple projection\n\n    def forward(self, ids, lens):\n        x = self.emb(ids) + self.pos[: ids.size(1)]\n        mask = ids == 0\n        h = self.transformer(x, src_key_padding_mask=mask)\n        # mean pooling over valid tokens\n        lens_tensor = torch.tensor(lens, device=ids.device).unsqueeze(1)\n        h_sum = torch.sum(h.masked_fill(mask.unsqueeze(2), 0), dim=1)\n        h_mean = h_sum / lens_tensor\n        return self.pool(h_mean)\n\n\nclass Classifier(nn.Module):\n    def __init__(self, encoder, num_classes):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.pool.out_features, num_classes)\n\n    def forward(self, ids, lens):\n        return self.head(self.encoder(ids, lens))\n\n\n# -------------------- loss ----------------------------------------\ndef info_nce(z1, z2, temp=0.2):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], dim=0)\n    sim = torch.matmul(z, z.T) / temp\n    mask = torch.eye(2 * N, dtype=torch.bool, device=z.device)\n    sim.masked_fill_(mask, -9e15)\n    targets = torch.arange(N, 2 * N, device=z.device)\n    loss1 = nn.functional.cross_entropy(sim[:N], targets)\n    loss2 = nn.functional.cross_entropy(sim[N:], targets - N)\n    return (loss1 + loss2) / 2\n\n\n# -------------------- experiment container ------------------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n}\n\n# -------------------- dataloaders ---------------------------------\nbatch_pt = 256\nbatch_ft = 128\npre_loader = DataLoader(\n    ContrastiveSPR(spr_bench[\"train\"]),\n    batch_size=batch_pt,\n    shuffle=True,\n    collate_fn=collate_contrastive,\n)\ntrain_loader = DataLoader(\n    ClassifierSPR(spr_bench[\"train\"]),\n    batch_size=batch_ft,\n    shuffle=True,\n    collate_fn=collate_classifier,\n)\ndev_loader = DataLoader(\n    ClassifierSPR(spr_bench[\"dev\"]),\n    batch_size=256,\n    shuffle=False,\n    collate_fn=collate_classifier,\n)\n\n# -------------------- build model ---------------------------------\nencoder = TransformerEncoder(vocab_size).to(device)\nclf = Classifier(encoder, num_classes=len(set(spr_bench[\"train\"][\"label\"]))).to(device)\n\n# -------------------- optimizers ----------------------------------\nopt_pt = torch.optim.Adam(encoder.parameters(), lr=1e-3)\nopt_ft = torch.optim.Adam(clf.parameters(), lr=1e-3)\nce_loss = nn.CrossEntropyLoss()\n\n# -------------------- pre-training --------------------------------\npretrain_epochs = 6\nfor ep in range(1, pretrain_epochs + 1):\n    encoder.train()\n    running = 0\n    for batch in pre_loader:\n        opt_pt.zero_grad()\n        z1 = encoder(batch[\"ids1\"], batch[\"len1\"])\n        z2 = encoder(batch[\"ids2\"], batch[\"len2\"])\n        loss = info_nce(z1, z2)\n        loss.backward()\n        opt_pt.step()\n        running += loss.item() * batch[\"ids1\"].size(0)\n    ep_loss = running / len(pre_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"pretrain\"].append(ep_loss)\n    print(f\"Pretrain epoch {ep}/{pretrain_epochs} loss={ep_loss:.4f}\")\n\n# -------------------- fine-tuning ---------------------------------\nft_epochs = 3\nfor ep in range(1, ft_epochs + 1):\n    # train\n    clf.train()\n    run = 0\n    for batch in train_loader:\n        opt_ft.zero_grad()\n        logits = clf(batch[\"ids\"], batch[\"len\"])\n        loss = ce_loss(logits, batch[\"label\"])\n        loss.backward()\n        opt_ft.step()\n        run += loss.item() * batch[\"ids\"].size(0)\n    train_loss = run / len(train_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(train_loss)\n    # val\n    clf.eval()\n    vloss = 0\n    all_p = []\n    all_t = []\n    all_s = []\n    with torch.no_grad():\n        for batch in dev_loader:\n            logits = clf(batch[\"ids\"], batch[\"len\"])\n            loss = ce_loss(logits, batch[\"label\"])\n            vloss += loss.item() * batch[\"ids\"].size(0)\n            preds = logits.argmax(1).cpu().tolist()\n            all_p.extend(preds)\n            all_t.extend(batch[\"label\"].cpu().tolist())\n            all_s.extend(batch[\"seq\"])\n    vloss /= len(dev_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(vloss)\n    swa = shape_weighted_accuracy(all_s, all_t, all_p)\n    cwa = color_weighted_accuracy(all_s, all_t, all_p)\n    comp = complexity_weighted_accuracy(all_s, all_t, all_p)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append(\n        {\"SWA\": swa, \"CWA\": cwa, \"CompWA\": comp}\n    )\n    print(\n        f\"Epoch {ep}: validation_loss = {vloss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} CompWA={comp:.3f}\"\n    )\n\n# store final predictions / gt\nexperiment_data[\"SPR_BENCH\"][\"predictions\"] = all_p\nexperiment_data[\"SPR_BENCH\"][\"ground_truth\"] = all_t\n\n# -------------------- plot & save ----------------------------------\nplt.figure()\nplt.plot(experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"], label=\"train\")\nplt.plot(experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"], label=\"val\")\nplt.title(\"Fine-tune loss\")\nplt.legend()\nplt.savefig(os.path.join(working_dir, \"ft_loss_curve.png\"))\nplt.close()\n\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"All data saved to\", working_dir)\n\n# free memory\ndel encoder, clf, opt_ft, opt_pt\ntorch.cuda.empty_cache()\ngc.collect()\n", "import os, pathlib, random, gc, time\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence, pack_padded_sequence\nimport matplotlib.pyplot as plt\nfrom datasets import load_dataset, DatasetDict\n\n# ---------- working dir ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- device ---------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# ---------- data loading ----------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _ld(csv_name):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / csv_name),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    out = DatasetDict()\n    for sp in [\"train\", \"dev\", \"test\"]:\n        out[sp] = _ld(f\"{sp}.csv\")\n    return out\n\n\ndata_roots = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr = None\nfor p in data_roots:\n    if (p / \"train.csv\").exists():\n        spr = load_spr_bench(p)\n        print(f\"Loaded real SPR_BENCH from {p}\")\n        break\nif spr is None:  # fallback tiny synthetic\n    print(\"Real SPR_BENCH not found \u2013 creating tiny synthetic dataset\")\n\n    def synth(n):\n        sh, col = \"ABCD\", \"1234\"\n        seq, lab = [], []\n        for i in range(n):\n            L = random.randint(4, 8)\n            seq.append(\n                \" \".join(random.choice(sh) + random.choice(col) for _ in range(L))\n            )\n            lab.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seq, \"label\": lab}\n\n    spr = DatasetDict()\n    for sp, n in [(\"train\", 800), (\"dev\", 200), (\"test\", 200)]:\n        spr[sp] = load_dataset(\"json\", data_files=None, split=\"train\", data=synth(n))\n\n# ---------- vocabularies ----------\ntok2id = {\"<PAD>\": 0, \"<MASK>\": 1}\nshape2id = {\"<PAD>\": 0}\ncolor2id = {\"<PAD>\": 0}\n\n\ndef register_token(tok: str):\n    if tok not in tok2id:\n        tok2id[tok] = len(tok2id)\n    sh, col = tok[0], (tok[1] if len(tok) > 1 else \"0\")\n    if sh not in shape2id:\n        shape2id[sh] = len(shape2id)\n    if col not in color2id:\n        color2id[col] = len(color2id)\n\n\nfor split in spr.values():\n    for seq in split[\"sequence\"]:\n        for t in seq.strip().split():\n            register_token(t)\n# also register mask pseudo token\nshape2id[\"?\"] = len(shape2id)\ncolor2id[\"?\"] = len(color2id)\n\nprint(f\"Token vocab: {len(tok2id)} | shapes: {len(shape2id)} | colors: {len(color2id)}\")\n\n\n# ---------- metrics ----------\ndef count_shape_variety(seq):\n    return len(set(t[0] for t in seq.split()))\n\n\ndef count_color_variety(seq):\n    return len(set((t[1] if len(t) > 1 else \"0\") for t in seq.split()))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    return sum(wi for wi, yt, yp in zip(w, y_true, y_pred) if yt == yp) / max(1, sum(w))\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    return sum(wi for wi, yt, yp in zip(w, y_true, y_pred) if yt == yp) / max(1, sum(w))\n\n\ndef complexity_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) + count_color_variety(s) for s in seqs]\n    return sum(wi for wi, yt, yp in zip(w, y_true, y_pred) if yt == yp) / max(1, sum(w))\n\n\n# ---------- augmentation ----------\ndef augment_tokens(toks):\n    toks = toks[:]  # copy\n    # 15% masking\n    out = []\n    for t in toks:\n        if random.random() < 0.15:\n            out.append(\"<MASK>\")\n        else:\n            out.append(t)\n    # random single swap\n    if len(out) > 1 and random.random() < 0.3:\n        i = random.randint(0, len(out) - 2)\n        out[i], out[i + 1] = out[i + 1], out[i]\n    return out\n\n\n# ---------- datasets ----------\nclass ContrastiveDS(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        toks = self.seqs[idx].split()\n        return augment_tokens(toks), augment_tokens(toks)\n\n\nclass ClassifyDS(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs, self.labels = hf_ds[\"sequence\"], hf_ds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return self.seqs[idx].split(), self.labels[idx], self.seqs[idx]\n\n\n# ---------- collators ----------\ndef encode_lists(token_lists):\n    tok_ids, sh_ids, col_ids, lens = [], [], [], []\n    for toks in token_lists:\n        ids, sh, co = [], [], []\n        for t in toks:\n            tid = tok2id.get(t, tok2id[\"<MASK>\"])\n            sid = shape2id.get((t[0] if t not in [\"<MASK>\"] else \"?\"), shape2id[\"?\"])\n            cid = color2id.get(\n                (t[1] if len(t) > 1 and t not in [\"<MASK>\"] else \"?\"), color2id[\"?\"]\n            )\n            ids.append(tid)\n            sh.append(sid)\n            co.append(cid)\n        tok_ids.append(torch.tensor(ids))\n        sh_ids.append(torch.tensor(sh))\n        col_ids.append(torch.tensor(co))\n        lens.append(len(ids))\n    pad = lambda seqs: pad_sequence(seqs, batch_first=True, padding_value=0)\n    return pad(tok_ids), pad(sh_ids), pad(col_ids), torch.tensor(lens)\n\n\ndef collate_contrastive(batch):\n    v1, v2 = zip(*batch)\n    ids1, sh1, col1, len1 = encode_lists(v1)\n    ids2, sh2, col2, len2 = encode_lists(v2)\n    batch_tensors = {\n        \"ids1\": ids1.to(device),\n        \"sh1\": sh1.to(device),\n        \"col1\": col1.to(device),\n        \"len1\": len1.to(device),\n        \"ids2\": ids2.to(device),\n        \"sh2\": sh2.to(device),\n        \"col2\": col2.to(device),\n        \"len2\": len2.to(device),\n    }\n    return batch_tensors\n\n\ndef collate_classifier(batch):\n    toks, lbls, raw_seq = zip(*batch)\n    ids, sh, col, lens = encode_lists(toks)\n    return {\n        \"ids\": ids.to(device),\n        \"sh\": sh.to(device),\n        \"col\": col.to(device),\n        \"len\": lens.to(device),\n        \"label\": torch.tensor(lbls, dtype=torch.long).to(device),\n        \"sequence\": raw_seq,\n    }\n\n\n# ---------- model ----------\nclass Encoder(nn.Module):\n    def __init__(self, d_tok=32, d_model=64):\n        super().__init__()\n        self.token_emb = nn.Embedding(len(tok2id), d_tok, padding_idx=0)\n        self.shape_emb = nn.Embedding(len(shape2id), d_tok, padding_idx=0)\n        self.color_emb = nn.Embedding(len(color2id), d_tok, padding_idx=0)\n        self.proj = nn.Linear(d_tok * 3, d_model)\n        self.gru = nn.GRU(d_model, d_model, batch_first=True, bidirectional=True)\n        self.out = nn.Linear(d_model * 2, d_model)\n\n    def forward(self, ids, sh, col, lens):\n        x = torch.cat(\n            [self.token_emb(ids), self.shape_emb(sh), self.color_emb(col)], dim=-1\n        )\n        x = self.proj(x)\n        packed = pack_padded_sequence(\n            x, lens.cpu(), batch_first=True, enforce_sorted=False\n        )\n        _, h = self.gru(packed)\n        h = torch.cat([h[-2], h[-1]], dim=1)\n        return self.out(h)  # (B, d_model)\n\n\nclass Classifier(nn.Module):\n    def __init__(self, enc, n_classes):\n        super().__init__()\n        self.enc = enc\n        self.head = nn.Linear(enc.out.out_features, n_classes)\n\n    def forward(self, ids, sh, col, lens):\n        z = self.enc(ids, sh, col, lens)\n        return self.head(z)\n\n\n# ---------- contrastive loss ----------\ndef info_nce(z1, z2, temp=0.5):\n    z1, z2 = nn.functional.normalize(z1, dim=1), nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], 0)\n    sim = (z @ z.T) / temp\n    mask = torch.eye(2 * N, device=z.device).bool()\n    sim.masked_fill_(mask, -9e15)\n    targets = torch.arange(N, 2 * N, device=z.device)\n    loss = (\n        nn.functional.cross_entropy(sim[:N], targets)\n        + nn.functional.cross_entropy(sim[N:], targets - N)\n    ) * 0.5\n    return loss\n\n\n# ---------- dataloaders ----------\nbatch_c = 256\npt_loader = DataLoader(\n    ContrastiveDS(spr[\"train\"]),\n    batch_size=batch_c,\n    shuffle=True,\n    collate_fn=collate_contrastive,\n)\ntr_loader = DataLoader(\n    ClassifyDS(spr[\"train\"]),\n    batch_size=batch_c,\n    shuffle=True,\n    collate_fn=collate_classifier,\n)\ndv_loader = DataLoader(\n    ClassifyDS(spr[\"dev\"]),\n    batch_size=batch_c,\n    shuffle=False,\n    collate_fn=collate_classifier,\n)\n\n# ---------- experiment dict ----------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n}\n\n# ---------- model / optim ----------\nencoder = Encoder().to(device)\nclf = Classifier(encoder, n_classes=len(set(spr[\"train\"][\"label\"]))).to(device)\n\n# ---------- pre-training ----------\nopt_pt = torch.optim.Adam(encoder.parameters(), lr=1e-3)\npretrain_epochs = 4\nfor ep in range(1, pretrain_epochs + 1):\n    encoder.train()\n    running = 0.0\n    for batch in pt_loader:\n        opt_pt.zero_grad()\n        z1 = encoder(batch[\"ids1\"], batch[\"sh1\"], batch[\"col1\"], batch[\"len1\"])\n        z2 = encoder(batch[\"ids2\"], batch[\"sh2\"], batch[\"col2\"], batch[\"len2\"])\n        loss = info_nce(z1, z2)\n        loss.backward()\n        opt_pt.step()\n        running += loss.item() * batch[\"ids1\"].size(0)\n    epoch_loss = running / len(pt_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"pretrain\"].append(epoch_loss)\n    print(f\"Pretrain epoch {ep}/{pretrain_epochs} loss={epoch_loss:.4f}\")\n\n# ---------- fine-tuning ----------\nopt_ft = torch.optim.Adam(clf.parameters(), lr=1e-3)\ncriterion = nn.CrossEntropyLoss()\nft_epochs = 3\nfor ep in range(1, ft_epochs + 1):\n    # train\n    clf.train()\n    run_tr = 0.0\n    for batch in tr_loader:\n        opt_ft.zero_grad()\n        logits = clf(batch[\"ids\"], batch[\"sh\"], batch[\"col\"], batch[\"len\"])\n        loss = criterion(logits, batch[\"label\"])\n        loss.backward()\n        opt_ft.step()\n        run_tr += loss.item() * batch[\"ids\"].size(0)\n    tr_loss = run_tr / len(tr_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(tr_loss)\n\n    # val\n    clf.eval()\n    run_val = 0.0\n    all_p, all_t, all_s = [], [], []\n    with torch.no_grad():\n        for batch in dv_loader:\n            logits = clf(batch[\"ids\"], batch[\"sh\"], batch[\"col\"], batch[\"len\"])\n            loss = criterion(logits, batch[\"label\"])\n            run_val += loss.item() * batch[\"ids\"].size(0)\n            preds = logits.argmax(1).cpu().tolist()\n            all_p.extend(preds)\n            all_t.extend(batch[\"label\"].cpu().tolist())\n            all_s.extend(batch[\"sequence\"])\n    val_loss = run_val / len(dv_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(val_loss)\n    swa = shape_weighted_accuracy(all_s, all_t, all_p)\n    cwa = color_weighted_accuracy(all_s, all_t, all_p)\n    comp = complexity_weighted_accuracy(all_s, all_t, all_p)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append((swa, cwa, comp))\n    print(\n        f\"Epoch {ep}: validation_loss = {val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} CompWA={comp:.3f}\"\n    )\n\n# ---------- save ----------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"Saved experiment data to\", working_dir)\n", "import os, pathlib, random, math, gc, time, json\nimport numpy as np\nimport torch, torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence\nfrom datasets import load_dataset, DatasetDict\nimport matplotlib.pyplot as plt\n\n# -----------------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# --------------------  SPR loader (from baseline) ----------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(csv_name):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / csv_name),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    out = DatasetDict()\n    for split in [\"train\", \"dev\", \"test\"]:\n        out[split] = _load(f\"{split}.csv\")\n    return out\n\n\ndata_root_candidates = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr_bench = None\nfor p in data_root_candidates:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(f\"Loaded SPR_BENCH from {p}\")\n        break\nassert spr_bench is not None, \"SPR_BENCH dataset not found!\"\n\n\n# --------------------  tokenisation / vocab ---------------\ndef tok(seq):\n    return seq.strip().split()\n\n\nvocab = {\"<PAD>\": 0, \"<MASK>\": 1, \"<CLS>\": 2}\nfor split in spr_bench.values():\n    for s in split[\"sequence\"]:\n        for t in tok(s):\n            if t not in vocab:\n                vocab[t] = len(vocab)\npad_id, mask_id, cls_id = vocab[\"<PAD>\"], vocab[\"<MASK>\"], vocab[\"<CLS>\"]\nvocab_size = len(vocab)\nprint(\"Vocab size =\", vocab_size)\n\nmax_len = (\n    max(len(tok(s)) for split in spr_bench.values() for s in split[\"sequence\"]) + 1\n)  # +CLS\n\n\n# -------------------- metrics -----------------------------\ndef count_shape_variety(seq):\n    return len(set(t[0] for t in tok(seq)))\n\n\ndef count_color_variety(seq):\n    return len(set(t[1] for t in tok(seq)))\n\n\ndef shape_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_shape_variety(s) for s in seqs]\n    c = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if sum(w) else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_color_variety(s) for s in seqs]\n    c = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if sum(w) else 0.0\n\n\ndef complexity_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_shape_variety(s) + count_color_variety(s) for s in seqs]\n    c = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if sum(w) else 0.0\n\n\n# -------------------- datasets ----------------------------\nclass SPRContrastive(Dataset):\n    def __init__(self, ds):\n        self.seqs = ds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def _augment(self, tokens):\n        out = []\n        for t in tokens:\n            r = random.random()\n            if r < 0.1:  # deletion\n                continue\n            elif r < 0.2:  # masking\n                out.append(\"<MASK>\")\n            else:\n                out.append(t)\n        # local shuffle with prob 0.3\n        if random.random() < 0.3 and len(out) > 2:\n            i = random.randrange(len(out) - 1)\n            out[i], out[i + 1] = out[i + 1], out[i]\n        return out if out else [\"<MASK>\"]\n\n    def __getitem__(self, idx):\n        toks = tok(self.seqs[idx])\n        return self._augment(toks), self._augment(toks)\n\n\nclass SPRClassify(Dataset):\n    def __init__(self, ds):\n        self.seqs, self.labels = ds[\"sequence\"], ds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return tok(self.seqs[idx]), self.labels[idx], self.seqs[idx]\n\n\ndef encode_batch(token_lists):\n    ids = [\n        torch.tensor([cls_id] + [vocab.get(t, mask_id) for t in tl], dtype=torch.long)\n        for tl in token_lists\n    ]\n    lens = [len(i) for i in ids]\n    return pad_sequence(ids, batch_first=True, padding_value=pad_id), torch.tensor(lens)\n\n\ndef collate_contrastive(batch):\n    t1, t2 = zip(*batch)\n    ids1, l1 = encode_batch(t1)\n    ids2, l2 = encode_batch(t2)\n    return {\n        \"ids1\": ids1.to(device),\n        \"len1\": l1.to(device),\n        \"ids2\": ids2.to(device),\n        \"len2\": l2.to(device),\n    }\n\n\ndef collate_classify(batch):\n    toks, lab, raw = zip(*batch)\n    ids, lens = encode_batch(toks)\n    return {\n        \"ids\": ids.to(device),\n        \"len\": lens.to(device),\n        \"label\": torch.tensor(lab, dtype=torch.long).to(device),\n        \"sequence\": raw,\n    }\n\n\n# ------------------  Transformer encoder ------------------\nclass SymbolicTransformer(nn.Module):\n    def __init__(self, vocab_sz, d_model=96, n_head=4, n_layer=2, dim_ff=256):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_sz, d_model, padding_idx=pad_id)\n        self.pos = nn.Parameter(torch.randn(max_len, d_model))\n        enc_layer = nn.TransformerEncoderLayer(\n            d_model, n_head, dim_feedforward=dim_ff, batch_first=True\n        )\n        self.tr = nn.TransformerEncoder(enc_layer, n_layer)\n        self.out_dim = d_model\n\n    def forward(self, ids, lens):\n        x = self.emb(ids) + self.pos[: ids.size(1)]\n        mask = ids == pad_id\n        h = self.tr(x, src_key_padding_mask=mask)\n        return h[:, 0]  # CLS token\n\n\nclass Classifier(nn.Module):\n    def __init__(self, encoder, n_cls):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.out_dim, n_cls)\n\n    def forward(self, ids, lens):\n        return self.head(self.encoder(ids, lens))\n\n\n# ------------------  Contrastive loss ---------------------\ndef nt_xent(z1, z2, T=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], 0)\n    sim = torch.mm(z, z.t()) / T\n    mask = torch.eye(2 * N, device=z.device).bool()\n    sim.masked_fill_(mask, -9e15)\n    targets = torch.arange(N, device=z.device)\n    loss = (\n        nn.functional.cross_entropy(sim[:N, N:], targets)\n        + nn.functional.cross_entropy(sim[N:, :N], targets)\n    ) * 0.5\n    return loss\n\n\n# ------------------  experiment store ---------------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n}\n\n# ------------------  loaders ------------------------------\nbt_con, bt_train, bt_eval = 128, 128, 256\npretrain_loader = DataLoader(\n    SPRContrastive(spr_bench[\"train\"]),\n    batch_size=bt_con,\n    shuffle=True,\n    collate_fn=collate_contrastive,\n)\ntrain_loader = DataLoader(\n    SPRClassify(spr_bench[\"train\"]),\n    batch_size=bt_train,\n    shuffle=True,\n    collate_fn=collate_classify,\n)\ndev_loader = DataLoader(\n    SPRClassify(spr_bench[\"dev\"]),\n    batch_size=bt_eval,\n    shuffle=False,\n    collate_fn=collate_classify,\n)\n\n# ------------------  model --------------------------------\nencoder = SymbolicTransformer(vocab_size).to(device)\nclf = Classifier(encoder, n_cls=len(set(spr_bench[\"train\"][\"label\"]))).to(device)\n\n# ------------------  contrastive pre-training -------------\nopt_pt = torch.optim.Adam(encoder.parameters(), lr=1e-3)\npretrain_epochs = 6\nfor ep in range(1, pretrain_epochs + 1):\n    encoder.train()\n    total = 0\n    s = 0.0\n    for b in pretrain_loader:\n        opt_pt.zero_grad()\n        z1 = encoder(b[\"ids1\"], b[\"len1\"])\n        z2 = encoder(b[\"ids2\"], b[\"len2\"])\n        loss = nt_xent(z1, z2)\n        loss.backward()\n        opt_pt.step()\n        s += loss.item() * b[\"ids1\"].size(0)\n        total += b[\"ids1\"].size(0)\n    epoch_loss = s / total\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"pretrain\"].append(epoch_loss)\n    print(f\"Pretrain epoch {ep}/{pretrain_epochs} loss={epoch_loss:.4f}\")\n\n# ------------------  fine-tuning --------------------------\nopt_ft = torch.optim.Adam(clf.parameters(), lr=1e-3)\nce = nn.CrossEntropyLoss()\nft_epochs = 5\nfor ep in range(1, ft_epochs + 1):\n    # train\n    clf.train()\n    s = 0.0\n    total = 0\n    for b in train_loader:\n        opt_ft.zero_grad()\n        logits = clf(b[\"ids\"], b[\"len\"])\n        loss = ce(logits, b[\"label\"])\n        loss.backward()\n        opt_ft.step()\n        s += loss.item() * b[\"ids\"].size(0)\n        total += b[\"ids\"].size(0)\n    tr_loss = s / total\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(tr_loss)\n\n    # validation\n    clf.eval()\n    s = 0.0\n    total = 0\n    all_pred = []\n    all_true = []\n    all_seq = []\n    with torch.no_grad():\n        for b in dev_loader:\n            logits = clf(b[\"ids\"], b[\"len\"])\n            loss = ce(logits, b[\"label\"])\n            s += loss.item() * b[\"ids\"].size(0)\n            total += b[\"ids\"].size(0)\n            preds = logits.argmax(1).cpu().tolist()\n            all_pred.extend(preds)\n            all_true.extend(b[\"label\"].cpu().tolist())\n            all_seq.extend(b[\"sequence\"])\n    val_loss = s / total\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(val_loss)\n\n    swa = shape_weighted_accuracy(all_seq, all_true, all_pred)\n    cwa = color_weighted_accuracy(all_seq, all_true, all_pred)\n    comp = complexity_weighted_accuracy(all_seq, all_true, all_pred)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train\"].append(\n        {\"epoch\": ep, \"train_loss\": tr_loss}\n    )\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append(\n        {\"epoch\": ep, \"val_loss\": val_loss, \"SWA\": swa, \"CWA\": cwa, \"CompWA\": comp}\n    )\n    experiment_data[\"SPR_BENCH\"][\"predictions\"] = all_pred\n    experiment_data[\"SPR_BENCH\"][\"ground_truth\"] = all_true\n    print(\n        f\"Epoch {ep}: validation_loss = {val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} CompWA={comp:.3f}\"\n    )\n\n# ------------------  save artefacts -----------------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"Saved experiment data to\", working_dir)\n\n# save simple loss curve\nplt.figure()\nplt.plot(experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"], label=\"train\")\nplt.plot(experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"], label=\"val\")\nplt.xlabel(\"Fine-tune epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.savefig(os.path.join(working_dir, \"ft_loss_curve.png\"))\nplt.close()\n", "import os, pathlib, random, time, gc, math, json\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence\nfrom datasets import load_dataset, DatasetDict\nimport matplotlib.pyplot as plt\n\n# ----------- mandatory working dir ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# -------------- device ----------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# -------------- load SPR_BENCH --------------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _ld(csv):\n        return load_dataset(\n            \"csv\", data_files=str(root / csv), split=\"train\", cache_dir=\".cache_dsets\"\n        )\n\n    return DatasetDict(\n        {\"train\": _ld(\"train.csv\"), \"dev\": _ld(\"dev.csv\"), \"test\": _ld(\"test.csv\")}\n    )\n\n\npossible_roots = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr_bench = None\nfor p in possible_roots:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(f\"Loaded SPR_BENCH from {p}\")\n        break\n# synthetic fallback (small) -------------------------------------------------\nif spr_bench is None:\n    print(\"Dataset not found \u2013 creating tiny synthetic placeholder\")\n    shapes, colors = \"ABCD\", \"1234\"\n\n    def synth(n):\n        seqs, labels = [], []\n        for i in range(n):\n            L = random.randint(4, 10)\n            seq = \" \".join(\n                random.choice(shapes) + random.choice(colors) for _ in range(L)\n            )\n            seqs.append(seq)\n            labels.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n\n    spr_bench = DatasetDict()\n    for split, n in [(\"train\", 800), (\"dev\", 200), (\"test\", 200)]:\n        spr_bench[split] = load_dataset(\n            \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n        )\n\n# --------------- vocabulary -----------------\nvocab = {\"<PAD>\": 0, \"<MASK>\": 1}\nfor seq in spr_bench[\"train\"][\"sequence\"]:\n    for tok in seq.split():\n        if tok not in vocab:\n            vocab[tok] = len(vocab)\npad_id, mask_id = 0, 1\nprint(\"Vocab size:\", len(vocab))\n\n\n# --------------- metrics --------------------\ndef count_shape_variety(s):\n    return len(set(t[0] for t in s.split()))\n\n\ndef count_color_variety(s):\n    return len(set(t[1] for t in s.split()))\n\n\ndef shape_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_shape_variety(s) for s in seqs]\n    c = [wi if a == b else 0 for wi, a, b in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if w else 0\n\n\ndef color_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_color_variety(s) for s in seqs]\n    c = [wi if a == b else 0 for wi, a, b in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if w else 0\n\n\ndef complexity_weighted_accuracy(seqs, y_t, y_p):\n    w = [count_shape_variety(s) + count_color_variety(s) for s in seqs]\n    c = [wi if a == b else 0 for wi, a, b in zip(w, y_t, y_p)]\n    return sum(c) / sum(w) if w else 0\n\n\n# ------------- augmentation utils ----------\ndef augment(tokens):\n    out = []\n    for t in tokens:\n        r = random.random()\n        if r < 0.15:  # 15% mask\n            out.append(\"<MASK>\")\n        elif r < 0.25:  # 10% drop token\n            continue\n        else:\n            out.append(t)\n    # local permutation (context aware)\n    window = 3\n    i = 0\n    while i < len(out):\n        if random.random() < 0.3:\n            j = min(len(out), i + window)\n            segment = out[i:j]\n            random.shuffle(segment)\n            out[i:j] = segment\n        i += window\n    return out if out else [\"<MASK>\"]\n\n\n# -------------- datasets --------------------\ndef tokens2ids(tok_list):\n    return torch.tensor([vocab.get(t, mask_id) for t in tok_list], dtype=torch.long)\n\n\nclass ContrastiveSPR(Dataset):\n    def __init__(self, hfds):\n        self.seqs = hfds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        toks = self.seqs[idx].split()\n        return augment(toks), augment(toks)\n\n\nclass ClassifierSPR(Dataset):\n    def __init__(self, hfds):\n        self.seqs = hfds[\"sequence\"]\n        self.labels = hfds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return self.seqs[idx].split(), self.labels[idx], self.seqs[idx]\n\n\ndef collate_con(batch):\n    v1, v2 = zip(*batch)\n    ids1 = [tokens2ids(t) for t in v1]\n    ids2 = [tokens2ids(t) for t in v2]\n    len1 = [len(i) for i in ids1]\n    len2 = [len(i) for i in ids2]\n    ids1 = pad_sequence(ids1, batch_first=True, padding_value=pad_id).to(device)\n    ids2 = pad_sequence(ids2, batch_first=True, padding_value=pad_id).to(device)\n    return {\n        \"ids1\": ids1,\n        \"ids2\": ids2,\n        \"len1\": torch.tensor(len1).to(device),\n        \"len2\": torch.tensor(len2).to(device),\n    }\n\n\ndef collate_clf(batch):\n    toks, labels, raw = zip(*batch)\n    ids = [tokens2ids(t) for t in toks]\n    lens = [len(i) for i in ids]\n    ids = pad_sequence(ids, batch_first=True, padding_value=pad_id).to(device)\n    return {\n        \"ids\": ids,\n        \"len\": torch.tensor(lens).to(device),\n        \"label\": torch.tensor(labels).to(device),\n        \"seq\": raw,\n    }\n\n\n# -------------- model -----------------------\nclass TransformerEncoder(nn.Module):\n    def __init__(self, vocab_sz, d_model=96, nhead=4, num_layers=2, dim_feed=128):\n        super().__init__()\n        self.emb = nn.Embedding(vocab_sz, d_model, padding_idx=pad_id)\n        self.pos = nn.Parameter(torch.randn(1, 512, d_model))  # maximum length 512\n        encoder_layer = nn.TransformerEncoderLayer(\n            d_model, nhead, dim_feed, 0.1, batch_first=True\n        )\n        self.enc = nn.TransformerEncoder(encoder_layer, num_layers)\n        self.proj = nn.Linear(d_model, d_model)\n\n    def forward(self, ids, lens=None):\n        x = self.emb(ids) + self.pos[:, : ids.size(1)]\n        mask = ids == pad_id\n        h = self.enc(x, src_key_padding_mask=mask)\n        h = h.masked_fill(mask.unsqueeze(-1), 0).sum(1) / (~mask).sum(\n            1, keepdim=True\n        ).clamp(\n            min=1\n        )  # mean pooling\n        return self.proj(h)\n\n\nclass SPRClassifier(nn.Module):\n    def __init__(self, encoder, num_classes):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.proj.out_features, num_classes)\n\n    def forward(self, ids, lens):\n        return self.head(self.encoder(ids, lens))\n\n\n# -------------- loss ------------------------\ndef nt_xent(z1, z2, temp=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], 0)\n    sim = (z @ z.T) / temp\n    mask = torch.eye(2 * N, device=z.device).bool()\n    sim.masked_fill_(mask, -1e9)\n    targets = torch.arange(N, 2 * N, device=z.device)\n    logits12 = sim[:N, N:]\n    logits21 = sim[N:, :N]\n    loss = (\n        -(logits12.diag().mean() + logits21.diag().mean()) / 2\n        + (torch.logsumexp(sim[:N], 1).mean() + torch.logsumexp(sim[N:], 1).mean()) / 2\n    )\n    return loss\n\n\n# ------------ experiment store --------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n}\n\n# ---------------- dataloaders ---------------\npre_loader = DataLoader(\n    ContrastiveSPR(spr_bench[\"train\"]),\n    batch_size=256,\n    shuffle=True,\n    collate_fn=collate_con,\n)\ntrain_loader = DataLoader(\n    ClassifierSPR(spr_bench[\"train\"]),\n    batch_size=256,\n    shuffle=True,\n    collate_fn=collate_clf,\n)\ndev_loader = DataLoader(\n    ClassifierSPR(spr_bench[\"dev\"]),\n    batch_size=512,\n    shuffle=False,\n    collate_fn=collate_clf,\n)\n\n# -------------- build model -----------------\nencoder = TransformerEncoder(len(vocab)).to(device)\nclf = SPRClassifier(encoder, num_classes=len(set(spr_bench[\"train\"][\"label\"]))).to(\n    device\n)\n\n# -------------- optimizers ------------------\nopt_pre = torch.optim.Adam(encoder.parameters(), lr=1e-3)\nopt_ft = torch.optim.Adam(clf.parameters(), lr=1e-3)\nce_loss = nn.CrossEntropyLoss()\n\n# -------------- pretrain --------------------\npre_epochs = 5\nfor epoch in range(1, pre_epochs + 1):\n    encoder.train()\n    running = 0\n    for b in pre_loader:\n        opt_pre.zero_grad()\n        z1 = encoder(b[\"ids1\"], b[\"len1\"])\n        z2 = encoder(b[\"ids2\"], b[\"len2\"])\n        loss = nt_xent(z1, z2)\n        loss.backward()\n        opt_pre.step()\n        running += loss.item() * b[\"ids1\"].size(0)\n    ep_loss = running / len(pre_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"pretrain\"].append(ep_loss)\n    print(f\"Pretrain epoch {epoch}/{pre_epochs} loss={ep_loss:.4f}\")\n\n# -------------- fine-tune --------------------\nft_epochs = 4\nfor epoch in range(1, ft_epochs + 1):\n    # train\n    clf.train()\n    tr_loss = 0\n    for b in train_loader:\n        opt_ft.zero_grad()\n        logit = clf(b[\"ids\"], b[\"len\"])\n        loss = ce_loss(logit, b[\"label\"])\n        loss.backward()\n        opt_ft.step()\n        tr_loss += loss.item() * b[\"ids\"].size(0)\n    tr_loss /= len(train_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(tr_loss)\n\n    # validate\n    clf.eval()\n    val_loss = 0\n    all_p = []\n    all_t = []\n    all_seq = []\n    with torch.no_grad():\n        for b in dev_loader:\n            logit = clf(b[\"ids\"], b[\"len\"])\n            loss = ce_loss(logit, b[\"label\"])\n            val_loss += loss.item() * b[\"ids\"].size(0)\n            p = logit.argmax(1).cpu().tolist()\n            all_p.extend(p)\n            all_t.extend(b[\"label\"].cpu().tolist())\n            all_seq.extend(b[\"seq\"])\n    val_loss /= len(dev_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(val_loss)\n\n    swa = shape_weighted_accuracy(all_seq, all_t, all_p)\n    cwa = color_weighted_accuracy(all_seq, all_t, all_p)\n    comp = complexity_weighted_accuracy(all_seq, all_t, all_p)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train\"].append(\n        {\"epoch\": epoch, \"swa\": swa, \"cwa\": cwa, \"comp\": comp}\n    )\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append(\n        {\"epoch\": epoch, \"val_loss\": val_loss, \"swa\": swa, \"cwa\": cwa, \"comp\": comp}\n    )\n    print(\n        f\"Epoch {epoch}: validation_loss = {val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} CompWA={comp:.3f}\"\n    )\n\n# store final predictions/gt for analysis\nexperiment_data[\"SPR_BENCH\"][\"predictions\"] = all_p\nexperiment_data[\"SPR_BENCH\"][\"ground_truth\"] = all_t\n\n# -------------- save everything -------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"Saved experiment_data.npy\")\n", "import os, random, pathlib, gc, math, time\nimport numpy as np\nimport torch, torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence\nfrom datasets import load_dataset, DatasetDict\n\n# -------- working dir ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# -------- device ---------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# ---------------------------------------------------------------\n# Helper to load SPR_BENCH or fall back to synthetic tiny set\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(split_csv):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    for s in (\"train\", \"dev\", \"test\"):\n        d[s] = _load(f\"{s}.csv\")\n    return d\n\n\ndata_roots = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr = None\nfor p in data_roots:\n    if (p / \"train.csv\").exists():\n        spr = load_spr_bench(p)\n        print(\"Loaded real SPR\")\n        break\nif spr is None:\n    print(\"SPR_BENCH not found, creating toy synthetic set\")\n    random.seed(0)\n\n    def synth(n):\n        shapes, colors = \"ABCD\", \"1234\"\n        seqs, labels = [], []\n        for i in range(n):\n            L = random.randint(4, 9)\n            seq = \" \".join(\n                random.choice(shapes) + random.choice(colors) for _ in range(L)\n            )\n            seqs.append(seq)\n            labels.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n\n    spr = DatasetDict()\n    for sp, n in [(\"train\", 800), (\"dev\", 200), (\"test\", 200)]:\n        spr[sp] = load_dataset(\n            \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n        )\n\n# -------- vocabulary for shapes and colors --------------------\nshape_vocab = {\"<PAD>\": 0}\ncolor_vocab = {\"<PAD>\": 0}\nfor seq in spr[\"train\"][\"sequence\"]:\n    for tok in seq.split():\n        s, c = tok[0], tok[1] if len(tok) > 1 else \"0\"\n        if s not in shape_vocab:\n            shape_vocab[s] = len(shape_vocab)\n        if c not in color_vocab:\n            color_vocab[c] = len(color_vocab)\nshape_pad, color_pad = shape_vocab[\"<PAD>\"], color_vocab[\"<PAD>\"]\nprint(f\"Shapes:{len(shape_vocab)}  Colors:{len(color_vocab)}\")\n\n\n# --------------- tokenisation -----------------\ndef tokenize(seq):\n    return seq.strip().split()\n\n\ndef encode_token(token):\n    s_idx = shape_vocab.get(token[0], shape_pad)\n    c_idx = color_vocab.get(token[1] if len(token) > 1 else \"0\", color_pad)\n    return s_idx, c_idx\n\n\n# --------------- Dataset classes --------------\nclass ContrastiveSPRDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def random_mask(self, toks, p=0.15):\n        out = []\n        for t in toks:\n            if random.random() < p:\n                out.append(\"<MASK>\")\n            else:\n                out.append(t)\n        return out\n\n    def local_shuffle(self, toks, window=3):\n        toks = toks[:]\n        i = 0\n        while i < len(toks):\n            w_len = random.randint(1, window)\n            segment = toks[i : i + w_len]\n            random.shuffle(segment)\n            toks[i : i + w_len] = segment\n            i += w_len\n        return toks\n\n    def __getitem__(self, idx):\n        toks = tokenize(self.seqs[idx])\n        view1 = self.random_mask(toks)\n        view2 = self.local_shuffle(toks)\n        return view1, view2\n\n\nclass ClassifierSPRDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n        self.labels = hf_ds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return tokenize(self.seqs[idx]), self.labels[idx], self.seqs[idx]\n\n\n# ----------------- collate functions -----------------\ndef collate_views(batch):\n    v1, v2 = zip(*batch)\n\n    def encode(tok_lists):\n        shp_ids = [\n            torch.tensor([encode_token(t)[0] for t in toks], dtype=torch.long)\n            for toks in tok_lists\n        ]\n        col_ids = [\n            torch.tensor([encode_token(t)[1] for t in toks], dtype=torch.long)\n            for toks in tok_lists\n        ]\n        lens = [len(x) for x in shp_ids]\n        shp_ids = pad_sequence(shp_ids, batch_first=True, padding_value=shape_pad)\n        col_ids = pad_sequence(col_ids, batch_first=True, padding_value=color_pad)\n        return (\n            shp_ids.to(device),\n            col_ids.to(device),\n            torch.tensor(lens, dtype=torch.long).to(device),\n        )\n\n    s1, c1, l1 = encode(v1)\n    s2, c2, l2 = encode(v2)\n    return {\"s1\": s1, \"c1\": c1, \"l1\": l1, \"s2\": s2, \"c2\": c2, \"l2\": l2}\n\n\ndef collate_class(batch):\n    toks, labels, raw = zip(*batch)\n    shp = [\n        torch.tensor([encode_token(t)[0] for t in tok], dtype=torch.long)\n        for tok in toks\n    ]\n    col = [\n        torch.tensor([encode_token(t)[1] for t in tok], dtype=torch.long)\n        for tok in toks\n    ]\n    lens = [len(x) for x in shp]\n    shp = pad_sequence(shp, batch_first=True, padding_value=shape_pad).to(device)\n    col = pad_sequence(col, batch_first=True, padding_value=color_pad).to(device)\n    return {\n        \"shape\": shp,\n        \"color\": col,\n        \"len\": torch.tensor(lens, dtype=torch.long).to(device),\n        \"label\": torch.tensor(labels, dtype=torch.long).to(device),\n        \"seq\": raw,\n    }\n\n\n# ----------------- Metrics ------------------\ndef count_shape_variety(seq):\n    return len(set(tok[0] for tok in seq.split()))\n\n\ndef count_color_variety(seq):\n    return len(set(tok[1] for tok in seq.split() if len(tok) > 1))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    corr = [wi if a == b else 0 for wi, a, b in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    corr = [wi if a == b else 0 for wi, a, b in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\ndef complexity_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) + count_color_variety(s) for s in seqs]\n    corr = [wi if a == b else 0 for wi, a, b in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\n# ------------------ Model -------------------\nclass SPRTransformerEncoder(nn.Module):\n    def __init__(self, shape_vocab, color_vocab, d_model=64, nhead=4, nlayers=2):\n        super().__init__()\n        self.shape_emb = nn.Embedding(len(shape_vocab), d_model)\n        self.color_emb = nn.Embedding(len(color_vocab), d_model)\n        self.pos_emb = nn.Embedding(128, d_model)\n        encoder_layer = nn.TransformerEncoderLayer(\n            d_model=d_model,\n            nhead=nhead,\n            dim_feedforward=128,\n            activation=\"gelu\",\n            batch_first=True,\n        )\n        self.encoder = nn.TransformerEncoder(encoder_layer, num_layers=nlayers)\n        self.cls_proj = nn.Linear(d_model, d_model)\n\n    def forward(self, shp_ids, col_ids, lens):\n        pos_idx = torch.arange(shp_ids.size(1), device=shp_ids.device).unsqueeze(0)\n        x = self.shape_emb(shp_ids) + self.color_emb(col_ids) + self.pos_emb(pos_idx)\n        mask = shp_ids == shape_pad\n        h = self.encoder(x, src_key_padding_mask=mask)\n        cls = h.mean(1)  # simple pooling\n        return self.cls_proj(cls)\n\n\nclass SPRClassifier(nn.Module):\n    def __init__(self, encoder, num_classes):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.cls_proj.out_features, num_classes)\n\n    def forward(self, shp_ids, col_ids, lens):\n        z = self.encoder(shp_ids, col_ids, lens)\n        return self.head(z)\n\n\n# ------------------ loss --------------------\ndef nt_xent(z1, z2, temp=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], dim=0)\n    sim = torch.matmul(z, z.T) / temp\n    mask = torch.eye(2 * N, device=z.device, dtype=torch.bool)\n    sim.masked_fill_(mask, -9e15)\n    targets = torch.arange(N, 2 * N, device=z.device)\n    logits_12 = sim[:N, N:]\n    logits_21 = sim[N:, :N]\n    loss = (\n        -torch.diag(logits_12)\n        + torch.logsumexp(sim[:N], dim=1)\n        - torch.diag(logits_21)\n        + torch.logsumexp(sim[N:], dim=1)\n    ).mean() * 0.5\n    return loss\n\n\n# ----------- Dataloaders -------------------\nbatch_c = 128\npretrain_loader = DataLoader(\n    ContrastiveSPRDataset(spr[\"train\"]),\n    batch_size=batch_c,\n    shuffle=True,\n    collate_fn=collate_views,\n)\ntrain_loader = DataLoader(\n    ClassifierSPRDataset(spr[\"train\"]),\n    batch_size=batch_c,\n    shuffle=True,\n    collate_fn=collate_class,\n)\ndev_loader = DataLoader(\n    ClassifierSPRDataset(spr[\"dev\"]),\n    batch_size=256,\n    shuffle=False,\n    collate_fn=collate_class,\n)\n\n# -------------- Experiment record ----------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n}\n\n# ---------------- Build model --------------\nencoder = SPRTransformerEncoder(shape_vocab, color_vocab).to(device)\nclassifier = SPRClassifier(encoder, num_classes=len(set(spr[\"train\"][\"label\"]))).to(\n    device\n)\n\n# -------- Pre-training ---------------------\noptim_pt = torch.optim.Adam(encoder.parameters(), lr=3e-4)\npretrain_epochs = 4\nfor ep in range(1, pretrain_epochs + 1):\n    encoder.train()\n    running = 0.0\n    for b in pretrain_loader:\n        optim_pt.zero_grad()\n        z1 = encoder(b[\"s1\"], b[\"c1\"], b[\"l1\"])\n        z2 = encoder(b[\"s2\"], b[\"c2\"], b[\"l2\"])\n        loss = nt_xent(z1, z2)\n        loss.backward()\n        optim_pt.step()\n        running += loss.item() * b[\"s1\"].size(0)\n    epoch_loss = running / len(pretrain_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"pretrain\"].append(epoch_loss)\n    print(f\"Pretrain epoch {ep}/{pretrain_epochs}: loss={epoch_loss:.4f}\")\n\n# ---------- Fine-tuning --------------------\noptim_ft = torch.optim.Adam(classifier.parameters(), lr=3e-4)\ncriterion = nn.CrossEntropyLoss()\nft_epochs = 5\nfor ep in range(1, ft_epochs + 1):\n    # train\n    classifier.train()\n    run_loss = 0.0\n    for b in train_loader:\n        optim_ft.zero_grad()\n        logits = classifier(b[\"shape\"], b[\"color\"], b[\"len\"])\n        loss = criterion(logits, b[\"label\"])\n        loss.backward()\n        optim_ft.step()\n        run_loss += loss.item() * b[\"shape\"].size(0)\n    train_loss = run_loss / len(train_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(train_loss)\n\n    # val\n    classifier.eval()\n    vloss = 0.0\n    preds = []\n    gts = []\n    seqs = []\n    with torch.no_grad():\n        for b in dev_loader:\n            logits = classifier(b[\"shape\"], b[\"color\"], b[\"len\"])\n            loss = criterion(logits, b[\"label\"])\n            vloss += loss.item() * b[\"shape\"].size(0)\n            preds.extend(logits.argmax(1).cpu().tolist())\n            gts.extend(b[\"label\"].cpu().tolist())\n            seqs.extend(b[\"seq\"])\n    val_loss = vloss / len(dev_loader.dataset)\n    swa = shape_weighted_accuracy(seqs, gts, preds)\n    cwa = color_weighted_accuracy(seqs, gts, preds)\n    comp = complexity_weighted_accuracy(seqs, gts, preds)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(val_loss)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append(\n        {\"SWA\": swa, \"CWA\": cwa, \"CompWA\": comp}\n    )\n    print(\n        f\"Epoch {ep}: validation_loss = {val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} CompWA={comp:.3f}\"\n    )\n\n    # simple early record of best preds\n    if ep == ft_epochs:\n        experiment_data[\"SPR_BENCH\"][\"predictions\"] = preds\n        experiment_data[\"SPR_BENCH\"][\"ground_truth\"] = gts\n\n# -------------- Save metrics -----------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"Saved experiment_data.npy to ./working\")\n\n# cleanup\ntorch.cuda.empty_cache()\ngc.collect()\n", "import os, pathlib, random, math, gc, time, json, numpy as np, torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom datasets import load_dataset, DatasetDict\n\n# ---------- work dir ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- device ------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# ---------- data loading -------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _ld(name):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / f\"{name}.csv\"),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    return DatasetDict({s: _ld(s) for s in (\"train\", \"dev\", \"test\")})\n\n\nroot_candidates = [\n    pathlib.Path(p)\n    for p in [\n        \"SPR_BENCH\",\n        \"./data/SPR_BENCH\",\n        \"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\",\n    ]\n]\nspr_bench = None\nfor p in root_candidates:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(\"Loaded\", p)\n        break\nif spr_bench is None:  # tiny synthetic fallback\n\n    def synth(n):\n        shapes, colors = \"ABCDE\", \"12345\"\n        return {\n            \"id\": list(range(n)),\n            \"sequence\": [\n                \" \".join(\n                    random.choice(shapes) + random.choice(colors)\n                    for _ in range(random.randint(4, 9))\n                )\n                for _ in range(n)\n            ],\n            \"label\": [random.randint(0, 1) for _ in range(n)],\n        }\n\n    spr_bench = DatasetDict(\n        {\n            s: load_dataset(\n                \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n            )\n            for s, n in [(\"train\", 1000), (\"dev\", 200), (\"test\", 200)]\n        }\n    )\nprint({k: len(v) for k, v in spr_bench.items()})\n\n# ---------- vocabulary ----------\nspecial = [\"<PAD>\", \"<MASK>\", \"<CLS>\"]\nvocab = {tok: i for i, tok in enumerate(special)}\n\n\ndef tokenize(seq):\n    return seq.strip().split()\n\n\nfor split in spr_bench.values():\n    for seq in split[\"sequence\"]:\n        for tok in tokenize(seq):\n            if tok not in vocab:\n                vocab[tok] = len(vocab)\nvsize = len(vocab)\npad_id = vocab[\"<PAD>\"]\nmask_id = vocab[\"<MASK>\"]\ncls_id = vocab[\"<CLS>\"]\nprint(\"vocab\", vsize)\n\n\n# ---------- metrics ------------\ndef n_shape(seq):\n    return len({t[0] for t in seq.split() if t})\n\n\ndef n_color(seq):\n    return len({t[1] for t in seq.split() if len(t) > 1})\n\n\ndef SWA(seqs, y, yhat):\n    w = [n_shape(s) for s in seqs]\n    return sum(wi for wi, gt, pr in zip(w, y, yhat) if gt == pr) / max(1, sum(w))\n\n\ndef CWA(seqs, y, yhat):\n    w = [n_color(s) for s in seqs]\n    return sum(wi for wi, gt, pr in zip(w, y, yhat) if gt == pr) / max(1, sum(w))\n\n\ndef CompWA(seqs, y, yhat):\n    w = [n_shape(s) + n_color(s) for s in seqs]\n    return sum(wi for wi, gt, pr in zip(w, y, yhat) if gt == pr) / max(1, sum(w))\n\n\n# ---------- datasets -----------\nclass ContrastiveSPR(Dataset):\n    def __init__(self, ds):\n        self.seqs = ds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def _span_mask(self, toks, ratio=0.3):\n        if len(toks) < 2:\n            return toks\n        L = max(1, int(len(toks) * ratio * random.random()))\n        start = random.randint(0, len(toks) - L)\n        return toks[:start] + [\"<MASK>\"] * L + toks[start + L :]\n\n    def _shuffle_window(self, toks, win=3):\n        out = toks[:]\n        for i in range(0, len(out), win):\n            seg = out[i : i + win]\n            random.shuffle(seg)\n            out[i : i + win] = seg\n        return out\n\n    def _aug(self, toks):\n        if random.random() < 0.5:\n            toks = self._span_mask(toks)\n        else:\n            toks = self._shuffle_window(toks)\n        return toks\n\n    def __getitem__(self, idx):\n        toks = tokenize(self.seqs[idx])\n        return self._aug(toks), self._aug(toks)\n\n\nclass ClassifySPR(Dataset):\n    def __init__(self, ds):\n        self.seq = ds[\"sequence\"]\n        self.y = ds[\"label\"]\n\n    def __len__(self):\n        return len(self.y)\n\n    def __getitem__(self, idx):\n        return tokenize(self.seq[idx]), self.y[idx], self.seq[idx]\n\n\ndef pad_batch(list_tok):\n    ids = [\n        torch.tensor([vocab.get(t, mask_id) for t in toks], dtype=torch.long)\n        for toks in list_tok\n    ]\n    ids = [torch.cat([torch.tensor([cls_id]), t]) for t in ids]  # prepend CLS\n    lens = [len(t) for t in ids]\n    ids = nn.utils.rnn.pad_sequence(ids, batch_first=True, padding_value=pad_id)\n    return ids, lens\n\n\ndef coll_contrast(batch):\n    v1, v2 = zip(*batch)\n    ids1, l1 = pad_batch(v1)\n    ids2, l2 = pad_batch(v2)\n    return {\"ids1\": ids1.to(device), \"len1\": l1, \"ids2\": ids2.to(device), \"len2\": l2}\n\n\ndef coll_class(batch):\n    toks, y, raw = zip(*batch)\n    ids, lens = pad_batch(toks)\n    return {\n        \"ids\": ids.to(device),\n        \"len\": lens,\n        \"label\": torch.tensor(y, dtype=torch.long).to(device),\n        \"seq\": raw,\n    }\n\n\n# ---------- model --------------\nclass CompEmbedding(nn.Module):\n    def __init__(self, dim=64):\n        super().__init__()\n        self.shape_emb = nn.Embedding(26, dim // 2)  # uppercase letters\n        self.color_emb = nn.Embedding(10, dim // 2)  # digits\n        self.special = nn.Embedding(vsize, dim)  # fallback for specials\n\n    def forward(self, ids):\n        tok_ids = ids\n        token_idx = tok_ids.cpu().numpy()\n        shape_idx = np.zeros_like(token_idx)\n        color_idx = np.zeros_like(token_idx)\n        specials_mask = np.zeros_like(token_idx, dtype=bool)\n        for i in range(token_idx.shape[0]):\n            for j, t in enumerate(token_idx[i]):\n                if t in (pad_id, mask_id, cls_id) or t >= vsize:\n                    specials_mask[i, j] = True\n                else:\n                    tok = list(vocab.keys())[t]\n                    shape_idx[i, j] = ord(tok[0]) - ord(\"A\")\n                    color_idx[i, j] = int(tok[1])\n        shape = torch.tensor(shape_idx, dtype=torch.long, device=ids.device)\n        color = torch.tensor(color_idx, dtype=torch.long, device=ids.device)\n        sp_mask = torch.tensor(specials_mask, device=ids.device)\n        emb = torch.cat([self.shape_emb(shape), self.color_emb(color)], dim=-1)\n        emb[sp_mask] = self.special(tok_ids[sp_mask])\n        return emb\n\n\nclass TransformerEncoder(nn.Module):\n    def __init__(self, dim=64, heads=8, layers=2, drop=0.1):\n        super().__init__()\n        self.emb = CompEmbedding(dim)\n        self.pos = nn.Parameter(torch.randn(512, dim) * 0.01)\n        enc_layer = nn.TransformerEncoderLayer(\n            dim, heads, dim * 4, drop, batch_first=True\n        )\n        self.tr = nn.TransformerEncoder(enc_layer, layers)\n        self.dim = dim\n\n    def forward(self, ids, lens):\n        x = self.emb(ids) + self.pos[: ids.size(1)]\n        mask = ids == pad_id\n        h = self.tr(x, src_key_padding_mask=mask)\n        cls = h[:, 0]  # CLS representation\n        return cls\n\n\nclass SPRClassifier(nn.Module):\n    def __init__(self, enc, classes):\n        super().__init__()\n        self.enc = enc\n        self.fc = nn.Linear(enc.dim, classes)\n\n    def forward(self, ids, lens):\n        return self.fc(self.enc(ids, lens))\n\n\n# ---------- losses ------------\ndef nt_xent(z1, z2, T=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], 0)\n    sim = torch.matmul(z, z.T) / T\n    mask = torch.eye(2 * N, dtype=torch.bool, device=z.device)\n    sim.masked_fill_(mask, -9e15)\n    pos = torch.arange(N, device=z.device)\n    loss = (\n        nn.functional.cross_entropy(sim[:N], pos)\n        + nn.functional.cross_entropy(sim[N:], pos)\n    ) / 2\n    return loss\n\n\n# ---------- experiment setup ---\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"metrics\": {\"SWA\": [], \"CWA\": [], \"CompWA\": []},\n    }\n}\n\n# Dataloaders\npt_loader = DataLoader(\n    ContrastiveSPR(spr_bench[\"train\"]),\n    batch_size=256,\n    shuffle=True,\n    collate_fn=coll_contrast,\n)\ntrain_loader = DataLoader(\n    ClassifySPR(spr_bench[\"train\"]), batch_size=256, shuffle=True, collate_fn=coll_class\n)\ndev_loader = DataLoader(\n    ClassifySPR(spr_bench[\"dev\"]), batch_size=512, shuffle=False, collate_fn=coll_class\n)\n\n# Model\nenc = TransformerEncoder().to(device)\nclf = SPRClassifier(enc, classes=len(set(spr_bench[\"train\"][\"label\"]))).to(device)\n\n# ---------- pre-train ----------\nopt_pt = torch.optim.Adam(enc.parameters(), lr=1e-3)\npre_epochs = 4\nfor ep in range(1, pre_epochs + 1):\n    enc.train()\n    tot = 0\n    for b in pt_loader:\n        opt_pt.zero_grad()\n        z1 = enc(b[\"ids1\"], b[\"len1\"])\n        z2 = enc(b[\"ids2\"], b[\"len2\"])\n        loss = nt_xent(z1, z2)\n        loss.backward()\n        opt_pt.step()\n        tot += loss.item() * z1.size(0)\n    epoch_loss = tot / len(pt_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"pretrain\"].append(epoch_loss)\n    print(f\"Pre-train epoch {ep}/{pre_epochs}: loss={epoch_loss:.4f}\")\n\n# ---------- fine-tune ----------\nopt = torch.optim.Adam(clf.parameters(), lr=2e-4)\nce = nn.CrossEntropyLoss()\nft_epochs = 5\nfor ep in range(1, ft_epochs + 1):\n    # train\n    clf.train()\n    tot = 0\n    for b in train_loader:\n        opt.zero_grad()\n        out = clf(b[\"ids\"], b[\"len\"])\n        loss = ce(out, b[\"label\"])\n        loss.backward()\n        opt.step()\n        tot += loss.item() * out.size(0)\n    train_loss = tot / len(train_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(train_loss)\n\n    # eval\n    clf.eval()\n    tot = 0\n    yhat = []\n    y = []\n    seq = []\n    with torch.no_grad():\n        for b in dev_loader:\n            out = clf(b[\"ids\"], b[\"len\"])\n            loss = ce(out, b[\"label\"])\n            tot += loss.item() * out.size(0)\n            yhat.extend(out.argmax(1).cpu().tolist())\n            y.extend(b[\"label\"].cpu().tolist())\n            seq.extend(b[\"seq\"])\n    val_loss = tot / len(dev_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(val_loss)\n    swa, cwa, cmp = SWA(seq, y, yhat), CWA(seq, y, yhat), CompWA(seq, y, yhat)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"SWA\"].append(swa)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"CWA\"].append(cwa)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"CompWA\"].append(cmp)\n    print(\n        f\"Epoch {ep}: validation_loss = {val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} CompWA={cmp:.3f}\"\n    )\n\n# ---------- save ---------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"Saved metrics to\", working_dir)\n", "import os, pathlib, random, math, gc, time\nimport numpy as np\nimport torch, torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence\nfrom datasets import load_dataset, DatasetDict\n\n# ---------- boiler-plate dirs / device ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# ---------- load SPR_BENCH or fallback ----------\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _ld(csv):\n        return load_dataset(\n            \"csv\", data_files=str(root / csv), split=\"train\", cache_dir=\".cache_dsets\"\n        )\n\n    d = DatasetDict()\n    d[\"train\"] = _ld(\"train.csv\")\n    d[\"dev\"] = _ld(\"dev.csv\")\n    d[\"test\"] = _ld(\"test.csv\")\n    return d\n\n\ncands = [\n    pathlib.Path(p)\n    for p in [\n        \"SPR_BENCH\",\n        \"./data/SPR_BENCH\",\n        \"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\",\n    ]\n]\nspr = None\nfor p in cands:\n    if (p / \"train.csv\").exists():\n        spr = load_spr_bench(p)\n        print(\"Loaded real SPR\")\n        break\nif spr is None:\n    print(\"Real SPR_BENCH not found \u2013 using tiny synthetic data\")\n\n    def synth(n):\n        shapes, cols = \"ABCDE\", \"12345\"\n        return {\n            \"id\": list(range(n)),\n            \"sequence\": [\n                \" \".join(\n                    random.choice(shapes) + random.choice(cols)\n                    for _ in range(random.randint(4, 9))\n                )\n                for _ in range(n)\n            ],\n            \"label\": [random.randint(0, 1) for _ in range(n)],\n        }\n\n    spr = DatasetDict(\n        {\n            s: load_dataset(\n                \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n            )\n            for s, n in [(\"train\", 800), (\"dev\", 160), (\"test\", 160)]\n        }\n    )\n\n# ---------- build separate vocabularies ----------\nshape_set = set()\ncolor_set = set()\nfor split in spr.values():\n    for seq in split[\"sequence\"]:\n        for tok in seq.split():\n            shape_set.add(tok[0])\n            color_set.add(tok[1:])\nshape2id = {s: i + 2 for i, s in enumerate(sorted(shape_set))}\nshape2id[\"<PAD>\"] = 0\nshape2id[\"<MASK>\"] = 1\ncolor2id = {c: i + 2 for i, c in enumerate(sorted(color_set))}\ncolor2id[\"<PAD>\"] = 0\ncolor2id[\"<MASK>\"] = 1\npad_id = 0\nmask_id = 1\n\n\n# ---------- helper metrics ----------\ndef count_shape_variety(seq):\n    return len({t[0] for t in seq.split()})\n\n\ndef count_color_variety(seq):\n    return len({t[1:] for t in seq.split()})\n\n\ndef SWA(seq, y, yhat):\n    w = [count_shape_variety(s) for s in seq]\n    return sum(wi for wi, gt, pr in zip(w, y, yhat) if gt == pr) / max(1, sum(w))\n\n\ndef CWA(seq, y, yhat):\n    w = [count_color_variety(s) for s in seq]\n    return sum(wi for wi, gt, pr in zip(w, y, yhat) if gt == pr) / max(1, sum(w))\n\n\ndef CompWA(seq, y, yhat):\n    w = [count_shape_variety(s) + count_color_variety(s) for s in seq]\n    return sum(wi for wi, gt, pr in zip(w, y, yhat) if gt == pr) / max(1, sum(w))\n\n\n# ---------- datasets ----------\ndef tokenise(seq):\n    return seq.split()\n\n\nclass ContrastiveDS(Dataset):\n    def __init__(self, dset):\n        self.seqs = dset[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def augment(self, toks):\n        toks = [t for t in toks if random.random() > 0.05]  # 5% deletion\n        toks = [(t if random.random() > 0.15 else \"<MASK>\") for t in toks]  # 15% mask\n        # local shuffle\n        if len(toks) > 3 and random.random() < 0.5:\n            i = random.randint(0, len(toks) - 2)\n            toks[i], toks[i + 1] = toks[i + 1], toks[i]\n        if not toks:\n            toks = [\"<MASK>\"]\n        return toks\n\n    def encode(self, toks):\n        sids = [mask_id if t == \"<MASK>\" else shape2id[t[0]] for t in toks]\n        cids = [mask_id if t == \"<MASK>\" else color2id[t[1:]] for t in toks]\n        return torch.tensor(sids), torch.tensor(cids)\n\n    def __getitem__(self, idx):\n        toks = tokenise(self.seqs[idx])\n        return self.encode(self.augment(toks)), self.encode(self.augment(toks))\n\n\nclass ClassifyDS(Dataset):\n    def __init__(self, dset):\n        self.seqs = dset[\"sequence\"]\n        self.labels = dset[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        toks = tokenise(self.seqs[idx])\n        sids = [shape2id[t[0]] for t in toks]\n        cids = [color2id[t[1:]] for t in toks]\n        return torch.tensor(sids), torch.tensor(cids), self.labels[idx], self.seqs[idx]\n\n\ndef collate_con(batch):\n    (s1, c1), (s2, c2) = zip(*batch)\n\n    def pad(xs):\n        lens = [len(x) for x in xs]\n        return pad_sequence(xs, batch_first=True, padding_value=pad_id), torch.tensor(\n            lens\n        )\n\n    ss1, l1 = pad(s1)\n    ss2, l2 = pad(s2)\n    cs1, _ = pad(c1)\n    cs2, _ = pad(c2)\n    return {\"s1\": ss1, \"c1\": cs1, \"l1\": l1, \"s2\": ss2, \"c2\": cs2, \"l2\": l2}\n\n\ndef collate_cls(batch):\n    sids, cids, lab, raw = zip(*batch)\n\n    def pad(xs):\n        lens = [len(x) for x in xs]\n        return pad_sequence(xs, batch_first=True, padding_value=pad_id), torch.tensor(\n            lens\n        )\n\n    ss, l = pad(sids)\n    cs, _ = pad(cids)\n    return {\"s\": ss, \"c\": cs, \"l\": l, \"y\": torch.tensor(lab), \"seq\": raw}\n\n\n# ---------- model ----------\nclass Encoder(nn.Module):\n    def __init__(self, d_shape, d_color, d_model=64, nhead=4, nlayers=2):\n        super().__init__()\n        self.emb_s = nn.Embedding(d_shape, d_model // 2, padding_idx=pad_id)\n        self.emb_c = nn.Embedding(d_color, d_model // 2, padding_idx=pad_id)\n        self.pos_emb = nn.Embedding(128, d_model)\n        encoder_layer = nn.TransformerEncoderLayer(\n            d_model, nhead, d_model * 2, 0.1, batch_first=True\n        )\n        self.tr = nn.TransformerEncoder(encoder_layer, nlayers)\n        self.cls = nn.Parameter(torch.zeros(1, 1, d_model))\n        self.proj = nn.Linear(d_model, d_model)\n\n    def forward(self, sids, cids, lens):\n        B, L = sids.shape\n        x = torch.cat([self.emb_s(sids), self.emb_c(cids)], dim=-1)\n        pos = torch.arange(L, device=x.device).expand(B, L)\n        x = x + self.pos_emb(pos)\n        cls = self.cls.expand(B, -1, -1)\n        x = torch.cat([cls, x], 1)\n        mask = sids == pad_id\n        x = self.tr(\n            x,\n            src_key_padding_mask=torch.cat(\n                [torch.zeros(B, 1, dtype=bool, device=x.device), mask], 1\n            ),\n        )\n        return self.proj(x[:, 0])  # CLS token\n\n\nclass SimCLRLoss(nn.Module):\n    def __init__(self, t=0.5):\n        super().__init__()\n        self.t = t\n\n    def forward(self, z1, z2):\n        z1 = nn.functional.normalize(z1, dim=1)\n        z2 = nn.functional.normalize(z2, dim=1)\n        N = z1.size(0)\n        z = torch.cat([z1, z2], 0)\n        sim = torch.mm(z, z.t()) / self.t\n        diag = torch.eye(2 * N, device=z.device).bool()\n        sim.masked_fill_(diag, -9e15)\n        targets = torch.arange(N, 2 * N, device=z.device)\n        loss = (\n            -(\n                sim[:N, targets].diag().log_softmax(1).mean()\n                + sim[N:, targets - N].diag().log_softmax(1).mean()\n            )\n            / 2\n        )\n        return loss\n\n\n# ---------- training ----------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\"train\": [], \"val\": []},\n        \"losses\": {\"pre\": [], \"train\": [], \"val\": []},\n    }\n}\n\npt_epochs, ft_epochs = 3, 3\nbs_pt, bs_ft = 128, 128\nenc = Encoder(len(shape2id), len(color2id)).to(device)\npt_opt = torch.optim.Adam(enc.parameters(), 1e-3)\nloss_con = SimCLRLoss()\n\npt_loader = DataLoader(\n    ContrastiveDS(spr[\"train\"]), batch_size=bs_pt, shuffle=True, collate_fn=collate_con\n)\nfor ep in range(1, pt_epochs + 1):\n    enc.train()\n    tot = 0\n    for batch in pt_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        z1 = enc(batch[\"s1\"], batch[\"c1\"], batch[\"l1\"])\n        z2 = enc(batch[\"s2\"], batch[\"c2\"], batch[\"l2\"])\n        loss = loss_con(z1, z2)\n        pt_opt.zero_grad()\n        loss.backward()\n        pt_opt.step()\n        tot += loss.item() * len(z1)\n    ls = tot / len(pt_loader.dataset)\n    print(f\"Pretrain epoch {ep}/{pt_epochs} loss {ls:.4f}\")\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"pre\"].append(ls)\n\nclf = nn.Linear(enc.proj.out_features, len(set(spr[\"train\"][\"label\"]))).to(device)\nft_opt = torch.optim.Adam(list(enc.parameters()) + list(clf.parameters()), 1e-3)\nce = nn.CrossEntropyLoss()\n\ntrain_loader = DataLoader(\n    ClassifyDS(spr[\"train\"]), batch_size=bs_ft, shuffle=True, collate_fn=collate_cls\n)\nval_loader = DataLoader(\n    ClassifyDS(spr[\"dev\"]), batch_size=bs_ft * 2, shuffle=False, collate_fn=collate_cls\n)\n\nfor ep in range(1, ft_epochs + 1):\n    enc.train()\n    clf.train()\n    tot = 0\n    for batch in train_loader:\n        batch = {\n            k: v.to(device) if isinstance(v, torch.Tensor) else v\n            for k, v in batch.items()\n        }\n        out = clf(enc(batch[\"s\"], batch[\"c\"], batch[\"l\"]))\n        loss = ce(out, batch[\"y\"])\n        ft_opt.zero_grad()\n        loss.backward()\n        ft_opt.step()\n        tot += loss.item() * len(out)\n    train_loss = tot / len(train_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"train\"].append(train_loss)\n\n    # ---- eval ----\n    enc.eval()\n    clf.eval()\n    tot = 0\n    preds = []\n    gts = []\n    seqs = []\n    with torch.no_grad():\n        for batch in val_loader:\n            batch_gpu = {\n                k: v.to(device) if isinstance(v, torch.Tensor) else v\n                for k, v in batch.items()\n            }\n            logits = clf(enc(batch_gpu[\"s\"], batch_gpu[\"c\"], batch_gpu[\"l\"]))\n            loss = ce(logits, batch_gpu[\"y\"])\n            tot += loss.item() * len(logits)\n            p = logits.argmax(1).cpu().tolist()\n            preds += p\n            gts += batch[\"y\"].tolist()\n            seqs += batch[\"seq\"]\n    val_loss = tot / len(val_loader.dataset)\n    experiment_data[\"SPR_BENCH\"][\"losses\"][\"val\"].append(val_loss)\n    swa, cwa, comp = (\n        SWA(seqs, gts, preds),\n        CWA(seqs, gts, preds),\n        CompWA(seqs, gts, preds),\n    )\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val\"].append((swa, cwa, comp))\n    print(\n        f\"Epoch {ep}: validation_loss = {val_loss:.4f} | SWA {swa:.3f} CWA {cwa:.3f} CompWA {comp:.3f}\"\n    )\n\n# ------------ save ------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"Saved experiment_data.npy\")\n", "import os, pathlib, random, gc, math, time, json\nimport numpy as np\nimport torch, torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence\nimport matplotlib.pyplot as plt\nfrom datasets import load_dataset, DatasetDict\n\n# ---------- set up working dir ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------------- device ---------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n\n# ------------- small utilities ----------\ndef tokenize(seq):  # token -> e.g. \"A3\"\n    return seq.strip().split()\n\n\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(name):\n        return load_dataset(\n            \"csv\", data_files=str(root / name), split=\"train\", cache_dir=\".cache_dsets\"\n        )\n\n    return DatasetDict(\n        train=_load(\"train.csv\"), dev=_load(\"dev.csv\"), test=_load(\"test.csv\")\n    )\n\n\n# try to find real data, else synthesize tiny one\ndata_roots = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr_bench = None\nfor p in data_roots:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(f\"Loaded SPR_BENCH from {p}\")\n        break\nif spr_bench is None:\n    print(\"No SPR_BENCH found \u2013 synthesising toy data.\")\n\n    def synth(n):\n        sh, co = \"ABCDE\", \"12345\"\n        seqs, labs = [], []\n        for i in range(n):\n            L = random.randint(4, 9)\n            seqs.append(\n                \" \".join(random.choice(sh) + random.choice(co) for _ in range(L))\n            )\n            labs.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labs}\n\n    spr_bench = DatasetDict()\n    for split, n in [(\"train\", 800), (\"dev\", 200), (\"test\", 200)]:\n        spr_bench[split] = load_dataset(\n            \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n        )\n\n# -------------- build separate vocabularies ---------------\nshape_vocab = {\"<PAD>\": 0}\ncolor_vocab = {\"<PAD>\": 0}\nfor seq in spr_bench[\"train\"][\"sequence\"]:\n    for tok in tokenize(seq):\n        s, c = tok[0], tok[1]\n        if s not in shape_vocab:\n            shape_vocab[s] = len(shape_vocab)\n        if c not in color_vocab:\n            color_vocab[c] = len(color_vocab)\npad_id = 0\nprint(f\"Shape vocab: {len(shape_vocab)}  Color vocab: {len(color_vocab)}\")\n\n\n# ------------------ metrics -----------------\ndef count_shape_variety(seq):\n    return len(set(t[0] for t in tokenize(seq)))\n\n\ndef count_color_variety(seq):\n    return len(set(t[1] for t in tokenize(seq)))\n\n\ndef shape_weighted_accuracy(seqs, y, g):\n    w = [count_shape_variety(s) for s in seqs]\n    return sum(wi for wi, yt, yp in zip(w, y, g) if yt == yp) / sum(w) if w else 0\n\n\ndef color_weighted_accuracy(seqs, y, g):\n    w = [count_color_variety(s) for s in seqs]\n    return sum(wi for wi, yt, yp in zip(w, y, g) if yt == yp) / sum(w) if w else 0\n\n\ndef complexity_weighted_accuracy(seqs, y, g):\n    w = [count_shape_variety(s) + count_color_variety(s) for s in seqs]\n    return sum(wi for wi, yt, yp in zip(w, y, g) if yt == yp) / sum(w) if w else 0\n\n\n# -------------- datasets & augmentation -------------------\nclass ContrastiveSPR(Dataset):\n    def __init__(self, hfds):\n        self.seqs = hfds[\"sequence\"]\n\n    def _augment(self, toks):\n        # simple random deletion + span mask\n        if len(toks) == 1:\n            return toks\n        out = []\n        i = 0\n        while i < len(toks):\n            if random.random() < 0.1:  # delete token\n                i += 1\n                continue\n            if random.random() < 0.05:  # mask span of length k\n                k = min(len(toks) - i, random.randint(1, 3))\n                out.extend([\"<PAD>\"] * k)\n                i += k\n            else:\n                out.append(toks[i])\n                i += 1\n        if not out:\n            out = [random.choice(toks)]\n        return out\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        tok = tokenize(self.seqs[idx])\n        return self._augment(tok), self._augment(tok)\n\n\nclass ClassifierSPR(Dataset):\n    def __init__(self, hfds):\n        self.seqs = hfds[\"sequence\"]\n        self.labels = hfds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return tokenize(self.seqs[idx]), self.labels[idx], self.seqs[idx]\n\n\ndef encode_tokens(tok_list):\n    shape_ids = [shape_vocab.get(t[0], 0) for t in tok_list]\n    color_ids = [color_vocab.get(t[1], 0) for t in tok_list]\n    return torch.tensor(shape_ids), torch.tensor(color_ids)\n\n\ndef collate_contrastive(batch):\n    a1, a2 = zip(*batch)\n\n    def encode(list_of_tok_lists):\n        sids = [encode_tokens(t)[0] for t in list_of_tok_lists]\n        cids = [encode_tokens(t)[1] for t in list_of_tok_lists]\n        lens = [len(x) for x in sids]\n        sids = pad_sequence(sids, batch_first=True, padding_value=0)\n        cids = pad_sequence(cids, batch_first=True, padding_value=0)\n        return sids.to(device), cids.to(device), torch.tensor(lens).to(device)\n\n    s1, c1, l1 = encode(a1)\n    s2, c2, l2 = encode(a2)\n    return {\"s1\": s1, \"c1\": c1, \"l1\": l1, \"s2\": s2, \"c2\": c2, \"l2\": l2}\n\n\ndef collate_classifier(batch):\n    toks, labels, raw = zip(*batch)\n    sids = [encode_tokens(t)[0] for t in toks]\n    cids = [encode_tokens(t)[1] for t in toks]\n    lens = [len(x) for x in sids]\n    sids = pad_sequence(sids, batch_first=True, padding_value=0).to(device)\n    cids = pad_sequence(cids, batch_first=True, padding_value=0).to(device)\n    return {\n        \"s\": sids,\n        \"c\": cids,\n        \"l\": torch.tensor(lens).to(device),\n        \"y\": torch.tensor(labels).to(device),\n        \"seq\": raw,\n    }\n\n\n# ------------------ model -------------------\nclass CompositionalEncoder(nn.Module):\n    def __init__(\n        self, shape_vocab_size, color_vocab_size, d_model=64, nhead=4, layers=2\n    ):\n        super().__init__()\n        self.shape_emb = nn.Embedding(shape_vocab_size, d_model, padding_idx=pad_id)\n        self.color_emb = nn.Embedding(color_vocab_size, d_model, padding_idx=pad_id)\n        encoder_layer = nn.TransformerEncoderLayer(\n            d_model=d_model,\n            nhead=nhead,\n            dim_feedforward=128,\n            dropout=0.1,\n            batch_first=True,\n        )\n        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers=layers)\n\n    def forward(self, shape_ids, color_ids, lens):\n        x = self.shape_emb(shape_ids) + self.color_emb(color_ids)\n        # create padding mask\n        mask = shape_ids == pad_id\n        h = self.transformer(x, src_key_padding_mask=mask)\n        # masked mean pool\n        mask_f = (~mask).unsqueeze(-1)\n        h = (h * mask_f).sum(1) / mask_f.sum(1).clamp(min=1)\n        return h\n\n\nclass SPRClassifier(nn.Module):\n    def __init__(self, encoder, classes=2):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.shape_emb.embedding_dim, classes)\n\n    def forward(self, shape_ids, color_ids, lens):\n        z = self.encoder(shape_ids, color_ids, lens)\n        return self.head(z)\n\n\ndef nt_xent(z1, z2, temp=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], 0)  # 2N x d\n    sim = torch.exp(torch.mm(z, z.t()) / temp)\n    mask = torch.eye(2 * N, device=z.device).bool()\n    sim = sim.masked_fill(mask, 0)\n    pos = torch.cat([torch.diag(sim[:N, N:]), torch.diag(sim[N:, :N])])\n    denom = sim.sum(1)\n    loss = -torch.log(pos / denom).mean()\n    return loss\n\n\n# -------------- experiment data container ------------\nexperiment_data = {\n    \"SPR_BENCH\": {\n        \"metrics\": {\n            \"train_loss\": [],\n            \"val_loss\": [],\n            \"SWA\": [],\n            \"CWA\": [],\n            \"CompWA\": [],\n        },\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n}\n\n# -------------------- data loaders -------------------\npretrain_loader = DataLoader(\n    ContrastiveSPR(spr_bench[\"train\"]),\n    batch_size=128,\n    shuffle=True,\n    collate_fn=collate_contrastive,\n)\ntrain_loader = DataLoader(\n    ClassifierSPR(spr_bench[\"train\"]),\n    batch_size=128,\n    shuffle=True,\n    collate_fn=collate_classifier,\n)\ndev_loader = DataLoader(\n    ClassifierSPR(spr_bench[\"dev\"]),\n    batch_size=256,\n    shuffle=False,\n    collate_fn=collate_classifier,\n)\n\n# ------------------ build model ----------------------\nencoder = CompositionalEncoder(len(shape_vocab), len(color_vocab)).to(device)\nclf = SPRClassifier(encoder, classes=len(set(spr_bench[\"train\"][\"label\"]))).to(device)\n\n# ------------------ optimizers -----------------------\nopt_pt = torch.optim.Adam(encoder.parameters(), lr=1e-3)\nopt_ft = torch.optim.Adam(clf.parameters(), lr=1e-3)\ncriterion = nn.CrossEntropyLoss()\n\n# ----------------- contrastive pretrain --------------\npretrain_epochs = 4\nfor ep in range(1, pretrain_epochs + 1):\n    encoder.train()\n    epoch_loss = 0\n    for batch in pretrain_loader:\n        opt_pt.zero_grad()\n        z1 = encoder(batch[\"s1\"], batch[\"c1\"], batch[\"l1\"])\n        z2 = encoder(batch[\"s2\"], batch[\"c2\"], batch[\"l2\"])\n        loss = nt_xent(z1, z2)\n        loss.backward()\n        opt_pt.step()\n        epoch_loss += loss.item() * batch[\"s1\"].size(0)\n    print(\n        f\"Pretrain epoch {ep}/{pretrain_epochs}: loss={epoch_loss/len(pretrain_loader.dataset):.4f}\"\n    )\n\n# ---------------- fine-tuning -----------------------\nft_epochs = 3\nfor ep in range(1, ft_epochs + 1):\n    # ---- train ----\n    clf.train()\n    run_loss = 0\n    for batch in train_loader:\n        opt_ft.zero_grad()\n        logits = clf(batch[\"s\"], batch[\"c\"], batch[\"l\"])\n        loss = criterion(logits, batch[\"y\"])\n        loss.backward()\n        opt_ft.step()\n        run_loss += loss.item() * batch[\"s\"].size(0)\n    train_loss = run_loss / len(train_loader.dataset)\n    # ---- validate ----\n    clf.eval()\n    val_loss, preds, gts, seqs = 0, [], [], []\n    with torch.no_grad():\n        for batch in dev_loader:\n            logits = clf(batch[\"s\"], batch[\"c\"], batch[\"l\"])\n            loss = criterion(logits, batch[\"y\"])\n            val_loss += loss.item() * batch[\"s\"].size(0)\n            p = logits.argmax(1).cpu().tolist()\n            preds.extend(p)\n            gts.extend(batch[\"y\"].cpu().tolist())\n            seqs.extend(batch[\"seq\"])\n    val_loss /= len(dev_loader.dataset)\n    swa = shape_weighted_accuracy(seqs, gts, preds)\n    cwa = color_weighted_accuracy(seqs, gts, preds)\n    comp = complexity_weighted_accuracy(seqs, gts, preds)\n    # ---- log ----\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"train_loss\"].append(train_loss)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val_loss\"].append(val_loss)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"SWA\"].append(swa)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"CWA\"].append(cwa)\n    experiment_data[\"SPR_BENCH\"][\"metrics\"][\"CompWA\"].append(comp)\n    print(\n        f\"Epoch {ep}/{ft_epochs}: train_loss={train_loss:.4f}  val_loss={val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} CompWA={comp:.3f}\"\n    )\n\n# store final preds\nexperiment_data[\"SPR_BENCH\"][\"predictions\"] = preds\nexperiment_data[\"SPR_BENCH\"][\"ground_truth\"] = gts\n\n# -------------- save experiment data -----------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"Saved experiment data to ./working/experiment_data.npy\")\n\n# optional quick plot of val loss progression\nplt.figure()\nplt.plot(experiment_data[\"SPR_BENCH\"][\"metrics\"][\"val_loss\"], label=\"val_loss\")\nplt.xlabel(\"Fine-tune epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.savefig(os.path.join(working_dir, \"val_loss_curve.png\"))\nplt.close()\n\n# tidy up\ntorch.cuda.empty_cache()\ngc.collect()\n", "# Set random seed\nimport random\nimport numpy as np\nimport torch\n\nseed = 0\nrandom.seed(seed)\nnp.random.seed(seed)\ntorch.manual_seed(seed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed(seed)\n\nimport os, pathlib, random, math, time, json, gc\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence, pack_padded_sequence\nimport matplotlib.pyplot as plt\n\n# ------------------------- I/O -----------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ------------------------- Device --------------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n# ---------------------- Data loading -----------------------\nfrom datasets import load_dataset, DatasetDict\n\n\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(split_csv: str):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    for s in [\"train\", \"dev\", \"test\"]:\n        d[s] = _load(f\"{s}.csv\")\n    return d\n\n\ndata_root_candidates = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr_bench = None\nfor p in data_root_candidates:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(f\"Loaded data from {p}\")\n        break\nif spr_bench is None:\n    print(\"SPR_BENCH not found, generating synthetic data.\")\n\n    def synth(n):\n        seqs, labels = [], []\n        shapes, colors = \"ABCD\", \"1234\"\n        for _ in range(n):\n            L = random.randint(4, 9)\n            seq = \" \".join(\n                random.choice(shapes) + random.choice(colors) for _ in range(L)\n            )\n            seqs.append(seq)\n            labels.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n\n    spr_bench = DatasetDict()\n    for split, n in [(\"train\", 500), (\"dev\", 100), (\"test\", 100)]:\n        spr_bench[split] = load_dataset(\n            \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n        )\n\n\ndef tokenize(seq):\n    return seq.strip().split()\n\n\n# ---------------------- Vocabulary -------------------------\nvocab = {\"<PAD>\": 0, \"<MASK>\": 1}\nfor split in spr_bench.values():\n    for seq in split[\"sequence\"]:\n        for tok in tokenize(seq):\n            if tok not in vocab:\n                vocab[tok] = len(vocab)\nvocab_size = len(vocab)\nmask_id = vocab[\"<MASK>\"]\nprint(\"Vocab size:\", vocab_size)\n\n\n# ---------------------- Metrics ----------------------------\ndef count_shape_variety(sequence: str) -> int:\n    return len(set(tok[0] for tok in sequence.strip().split() if tok))\n\n\ndef count_color_variety(sequence: str) -> int:\n    return len(set(tok[1] for tok in sequence.strip().split() if len(tok) > 1))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    corr = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    corr = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\n# --------------------- Datasets ----------------------------\nclass SPRContrastiveDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def _augment(self, toks, p=0.15):\n        out = [t for t in toks if random.random() >= p]\n        if not out:\n            out = [random.choice(toks)]\n        return out\n\n    def __getitem__(self, idx):\n        toks = tokenize(self.seqs[idx])\n        return self._augment(toks), self._augment(toks)\n\n\nclass SPRClassifierDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n        self.labels = hf_ds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return tokenize(self.seqs[idx]), self.labels[idx], self.seqs[idx]\n\n\ndef collate_contrastive(batch):\n    v1, v2 = zip(*batch)\n\n    def encode(tok_list):\n        ids = [\n            torch.tensor([vocab[t] for t in toks], dtype=torch.long)\n            for toks in tok_list\n        ]\n        lens = [len(i) for i in ids]\n        ids = pad_sequence(ids, batch_first=True, padding_value=0)\n        return ids.to(device), torch.tensor(lens, dtype=torch.long).to(device)\n\n    ids1, len1 = encode(v1)\n    ids2, len2 = encode(v2)\n    return {\"ids1\": ids1, \"len1\": len1, \"ids2\": ids2, \"len2\": len2}\n\n\ndef collate_classifier(batch):\n    toks, labels, raw_seq = zip(*batch)\n    ids = [torch.tensor([vocab[t] for t in t], dtype=torch.long) for t in toks]\n    lens = [len(i) for i in ids]\n    ids = pad_sequence(ids, batch_first=True, padding_value=0).to(device)\n    return {\n        \"ids\": ids,\n        \"len\": torch.tensor(lens, dtype=torch.long).to(device),\n        \"label\": torch.tensor(labels, dtype=torch.long).to(device),\n        \"sequence\": raw_seq,\n    }\n\n\n# ---------------------- Model ------------------------------\nclass Encoder(nn.Module):\n    def __init__(self, vocab, emb_dim=64, hidden=128):\n        super().__init__()\n        self.emb = nn.Embedding(len(vocab), emb_dim, padding_idx=0)\n        self.gru = nn.GRU(emb_dim, hidden, batch_first=True, bidirectional=True)\n        self.proj = nn.Linear(hidden * 2, hidden)\n\n    def forward(self, ids, lens):\n        x = self.emb(ids)\n        packed = pack_padded_sequence(\n            x, lens.cpu(), batch_first=True, enforce_sorted=False\n        )\n        _, h = self.gru(packed)\n        h = torch.cat([h[-2], h[-1]], dim=1)\n        return self.proj(h)\n\n\nclass Classifier(nn.Module):\n    def __init__(self, encoder, num_classes):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.proj.out_features, num_classes)\n\n    def forward(self, ids, lens):\n        return self.head(self.encoder(ids, lens))\n\n\n# ---------------- Contrastive loss -------------------------\ndef nt_xent_loss(z1, z2, temp=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], dim=0)\n    sim = torch.matmul(z, z.T) / temp\n    mask = torch.eye(2 * N, dtype=torch.bool, device=z.device)\n    sim.masked_fill_(mask, -9e15)\n    targets = torch.arange(N, 2 * N, device=z.device)\n    logits_12 = sim[:N, N:]\n    logits_21 = sim[N:, :N]\n    denom_12 = torch.logsumexp(sim[:N], dim=1)\n    denom_21 = torch.logsumexp(sim[N:], dim=1)\n    loss = (-logits_12.diag() + denom_12 + -logits_21.diag() + denom_21).mean() * 0.5\n    return loss\n\n\n# ---------------- Experiment container ---------------------\nexperiment_data = {\"pretrain_epochs\": {\"SPR_BENCH\": {}}}\n\n# ------------- Hyperparameter values to try ----------------\nepoch_settings = [2, 4, 6, 8, 10]\n\nfor pretrain_epochs in epoch_settings:\n    print(f\"\\n=== Running experiment with pretrain_epochs={pretrain_epochs} ===\")\n    run_dict = {\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"metrics\": {\"SWA\": [], \"CWA\": [], \"SCHM\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n\n    # Dataloaders (fresh shuffle each run)\n    pretrain_loader = DataLoader(\n        SPRContrastiveDataset(spr_bench[\"train\"]),\n        batch_size=128,\n        shuffle=True,\n        collate_fn=collate_contrastive,\n    )\n    train_loader = DataLoader(\n        SPRClassifierDataset(spr_bench[\"train\"]),\n        batch_size=128,\n        shuffle=True,\n        collate_fn=collate_classifier,\n    )\n    dev_loader = DataLoader(\n        SPRClassifierDataset(spr_bench[\"dev\"]),\n        batch_size=256,\n        shuffle=False,\n        collate_fn=collate_classifier,\n    )\n\n    # Model instantiation\n    encoder = Encoder(vocab).to(device)\n    clf_model = Classifier(\n        encoder, num_classes=len(set(spr_bench[\"train\"][\"label\"]))\n    ).to(device)\n\n    # -------- Contrastive pre-training ----------\n    optimizer_pt = torch.optim.Adam(encoder.parameters(), lr=1e-3)\n    for ep in range(1, pretrain_epochs + 1):\n        encoder.train()\n        epoch_loss = 0.0\n        for batch in pretrain_loader:\n            optimizer_pt.zero_grad()\n            z1 = encoder(batch[\"ids1\"], batch[\"len1\"])\n            z2 = encoder(batch[\"ids2\"], batch[\"len2\"])\n            loss = nt_xent_loss(z1, z2)\n            loss.backward()\n            optimizer_pt.step()\n            epoch_loss += loss.item() * batch[\"ids1\"].size(0)\n        epoch_loss /= len(pretrain_loader.dataset)\n        run_dict[\"losses\"][\"pretrain\"].append(epoch_loss)\n        print(f\"  Pretrain epoch {ep}/{pretrain_epochs} loss={epoch_loss:.4f}\")\n\n    # --------------- Fine-tuning ----------------\n    optimizer_ft = torch.optim.Adam(clf_model.parameters(), lr=1e-3)\n    criterion = nn.CrossEntropyLoss()\n    ft_epochs = 3\n    for ep in range(1, ft_epochs + 1):\n        # train\n        clf_model.train()\n        running_loss = 0.0\n        for batch in train_loader:\n            optimizer_ft.zero_grad()\n            logits = clf_model(batch[\"ids\"], batch[\"len\"])\n            loss = criterion(logits, batch[\"label\"])\n            loss.backward()\n            optimizer_ft.step()\n            running_loss += loss.item() * batch[\"ids\"].size(0)\n        train_loss = running_loss / len(train_loader.dataset)\n        run_dict[\"losses\"][\"train\"].append(train_loss)\n        # evaluate\n        clf_model.eval()\n        val_loss = 0.0\n        all_pred = []\n        all_true = []\n        all_seq = []\n        with torch.no_grad():\n            for batch in dev_loader:\n                logits = clf_model(batch[\"ids\"], batch[\"len\"])\n                loss = criterion(logits, batch[\"label\"])\n                val_loss += loss.item() * batch[\"ids\"].size(0)\n                preds = logits.argmax(1).cpu().tolist()\n                all_pred.extend(preds)\n                all_true.extend(batch[\"label\"].cpu().tolist())\n                all_seq.extend(batch[\"sequence\"])\n        val_loss /= len(dev_loader.dataset)\n        run_dict[\"losses\"][\"val\"].append(val_loss)\n        swa = shape_weighted_accuracy(all_seq, all_true, all_pred)\n        cwa = color_weighted_accuracy(all_seq, all_true, all_pred)\n        schm = 2 * swa * cwa / (swa + cwa) if (swa + cwa) > 0 else 0.0\n        run_dict[\"metrics\"][\"SWA\"].append(swa)\n        run_dict[\"metrics\"][\"CWA\"].append(cwa)\n        run_dict[\"metrics\"][\"SCHM\"].append(schm)\n        print(\n            f\"  FT epoch {ep}/{ft_epochs} train_loss={train_loss:.4f} val_loss={val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} SCHM={schm:.3f}\"\n        )\n\n    # store final preds/gt from last epoch\n    run_dict[\"predictions\"] = all_pred\n    run_dict[\"ground_truth\"] = all_true\n    experiment_data[\"pretrain_epochs\"][\"SPR_BENCH\"][str(pretrain_epochs)] = run_dict\n\n    # plot loss curves for this run\n    plt.figure()\n    plt.plot(run_dict[\"losses\"][\"train\"], label=\"train\")\n    plt.plot(run_dict[\"losses\"][\"val\"], label=\"val\")\n    plt.title(f\"FT Loss (pretrain_epochs={pretrain_epochs})\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.savefig(os.path.join(working_dir, f\"loss_curve_ep{pretrain_epochs}.png\"))\n    plt.close()\n\n    # free memory\n    del encoder, clf_model, optimizer_pt, optimizer_ft\n    torch.cuda.empty_cache()\n    gc.collect()\n\n# --------------- Save experiment data ----------------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"\\nSaved experiment data and plots to ./working/\")\n", "# Set random seed\nimport random\nimport numpy as np\nimport torch\n\nseed = 1\nrandom.seed(seed)\nnp.random.seed(seed)\ntorch.manual_seed(seed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed(seed)\n\nimport os, pathlib, random, math, time, json, gc\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence, pack_padded_sequence\nimport matplotlib.pyplot as plt\n\n# ------------------------- I/O -----------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ------------------------- Device --------------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n# ---------------------- Data loading -----------------------\nfrom datasets import load_dataset, DatasetDict\n\n\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(split_csv: str):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    for s in [\"train\", \"dev\", \"test\"]:\n        d[s] = _load(f\"{s}.csv\")\n    return d\n\n\ndata_root_candidates = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr_bench = None\nfor p in data_root_candidates:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(f\"Loaded data from {p}\")\n        break\nif spr_bench is None:\n    print(\"SPR_BENCH not found, generating synthetic data.\")\n\n    def synth(n):\n        seqs, labels = [], []\n        shapes, colors = \"ABCD\", \"1234\"\n        for _ in range(n):\n            L = random.randint(4, 9)\n            seq = \" \".join(\n                random.choice(shapes) + random.choice(colors) for _ in range(L)\n            )\n            seqs.append(seq)\n            labels.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n\n    spr_bench = DatasetDict()\n    for split, n in [(\"train\", 500), (\"dev\", 100), (\"test\", 100)]:\n        spr_bench[split] = load_dataset(\n            \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n        )\n\n\ndef tokenize(seq):\n    return seq.strip().split()\n\n\n# ---------------------- Vocabulary -------------------------\nvocab = {\"<PAD>\": 0, \"<MASK>\": 1}\nfor split in spr_bench.values():\n    for seq in split[\"sequence\"]:\n        for tok in tokenize(seq):\n            if tok not in vocab:\n                vocab[tok] = len(vocab)\nvocab_size = len(vocab)\nmask_id = vocab[\"<MASK>\"]\nprint(\"Vocab size:\", vocab_size)\n\n\n# ---------------------- Metrics ----------------------------\ndef count_shape_variety(sequence: str) -> int:\n    return len(set(tok[0] for tok in sequence.strip().split() if tok))\n\n\ndef count_color_variety(sequence: str) -> int:\n    return len(set(tok[1] for tok in sequence.strip().split() if len(tok) > 1))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    corr = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    corr = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\n# --------------------- Datasets ----------------------------\nclass SPRContrastiveDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def _augment(self, toks, p=0.15):\n        out = [t for t in toks if random.random() >= p]\n        if not out:\n            out = [random.choice(toks)]\n        return out\n\n    def __getitem__(self, idx):\n        toks = tokenize(self.seqs[idx])\n        return self._augment(toks), self._augment(toks)\n\n\nclass SPRClassifierDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n        self.labels = hf_ds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return tokenize(self.seqs[idx]), self.labels[idx], self.seqs[idx]\n\n\ndef collate_contrastive(batch):\n    v1, v2 = zip(*batch)\n\n    def encode(tok_list):\n        ids = [\n            torch.tensor([vocab[t] for t in toks], dtype=torch.long)\n            for toks in tok_list\n        ]\n        lens = [len(i) for i in ids]\n        ids = pad_sequence(ids, batch_first=True, padding_value=0)\n        return ids.to(device), torch.tensor(lens, dtype=torch.long).to(device)\n\n    ids1, len1 = encode(v1)\n    ids2, len2 = encode(v2)\n    return {\"ids1\": ids1, \"len1\": len1, \"ids2\": ids2, \"len2\": len2}\n\n\ndef collate_classifier(batch):\n    toks, labels, raw_seq = zip(*batch)\n    ids = [torch.tensor([vocab[t] for t in t], dtype=torch.long) for t in toks]\n    lens = [len(i) for i in ids]\n    ids = pad_sequence(ids, batch_first=True, padding_value=0).to(device)\n    return {\n        \"ids\": ids,\n        \"len\": torch.tensor(lens, dtype=torch.long).to(device),\n        \"label\": torch.tensor(labels, dtype=torch.long).to(device),\n        \"sequence\": raw_seq,\n    }\n\n\n# ---------------------- Model ------------------------------\nclass Encoder(nn.Module):\n    def __init__(self, vocab, emb_dim=64, hidden=128):\n        super().__init__()\n        self.emb = nn.Embedding(len(vocab), emb_dim, padding_idx=0)\n        self.gru = nn.GRU(emb_dim, hidden, batch_first=True, bidirectional=True)\n        self.proj = nn.Linear(hidden * 2, hidden)\n\n    def forward(self, ids, lens):\n        x = self.emb(ids)\n        packed = pack_padded_sequence(\n            x, lens.cpu(), batch_first=True, enforce_sorted=False\n        )\n        _, h = self.gru(packed)\n        h = torch.cat([h[-2], h[-1]], dim=1)\n        return self.proj(h)\n\n\nclass Classifier(nn.Module):\n    def __init__(self, encoder, num_classes):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.proj.out_features, num_classes)\n\n    def forward(self, ids, lens):\n        return self.head(self.encoder(ids, lens))\n\n\n# ---------------- Contrastive loss -------------------------\ndef nt_xent_loss(z1, z2, temp=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], dim=0)\n    sim = torch.matmul(z, z.T) / temp\n    mask = torch.eye(2 * N, dtype=torch.bool, device=z.device)\n    sim.masked_fill_(mask, -9e15)\n    targets = torch.arange(N, 2 * N, device=z.device)\n    logits_12 = sim[:N, N:]\n    logits_21 = sim[N:, :N]\n    denom_12 = torch.logsumexp(sim[:N], dim=1)\n    denom_21 = torch.logsumexp(sim[N:], dim=1)\n    loss = (-logits_12.diag() + denom_12 + -logits_21.diag() + denom_21).mean() * 0.5\n    return loss\n\n\n# ---------------- Experiment container ---------------------\nexperiment_data = {\"pretrain_epochs\": {\"SPR_BENCH\": {}}}\n\n# ------------- Hyperparameter values to try ----------------\nepoch_settings = [2, 4, 6, 8, 10]\n\nfor pretrain_epochs in epoch_settings:\n    print(f\"\\n=== Running experiment with pretrain_epochs={pretrain_epochs} ===\")\n    run_dict = {\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"metrics\": {\"SWA\": [], \"CWA\": [], \"SCHM\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n\n    # Dataloaders (fresh shuffle each run)\n    pretrain_loader = DataLoader(\n        SPRContrastiveDataset(spr_bench[\"train\"]),\n        batch_size=128,\n        shuffle=True,\n        collate_fn=collate_contrastive,\n    )\n    train_loader = DataLoader(\n        SPRClassifierDataset(spr_bench[\"train\"]),\n        batch_size=128,\n        shuffle=True,\n        collate_fn=collate_classifier,\n    )\n    dev_loader = DataLoader(\n        SPRClassifierDataset(spr_bench[\"dev\"]),\n        batch_size=256,\n        shuffle=False,\n        collate_fn=collate_classifier,\n    )\n\n    # Model instantiation\n    encoder = Encoder(vocab).to(device)\n    clf_model = Classifier(\n        encoder, num_classes=len(set(spr_bench[\"train\"][\"label\"]))\n    ).to(device)\n\n    # -------- Contrastive pre-training ----------\n    optimizer_pt = torch.optim.Adam(encoder.parameters(), lr=1e-3)\n    for ep in range(1, pretrain_epochs + 1):\n        encoder.train()\n        epoch_loss = 0.0\n        for batch in pretrain_loader:\n            optimizer_pt.zero_grad()\n            z1 = encoder(batch[\"ids1\"], batch[\"len1\"])\n            z2 = encoder(batch[\"ids2\"], batch[\"len2\"])\n            loss = nt_xent_loss(z1, z2)\n            loss.backward()\n            optimizer_pt.step()\n            epoch_loss += loss.item() * batch[\"ids1\"].size(0)\n        epoch_loss /= len(pretrain_loader.dataset)\n        run_dict[\"losses\"][\"pretrain\"].append(epoch_loss)\n        print(f\"  Pretrain epoch {ep}/{pretrain_epochs} loss={epoch_loss:.4f}\")\n\n    # --------------- Fine-tuning ----------------\n    optimizer_ft = torch.optim.Adam(clf_model.parameters(), lr=1e-3)\n    criterion = nn.CrossEntropyLoss()\n    ft_epochs = 3\n    for ep in range(1, ft_epochs + 1):\n        # train\n        clf_model.train()\n        running_loss = 0.0\n        for batch in train_loader:\n            optimizer_ft.zero_grad()\n            logits = clf_model(batch[\"ids\"], batch[\"len\"])\n            loss = criterion(logits, batch[\"label\"])\n            loss.backward()\n            optimizer_ft.step()\n            running_loss += loss.item() * batch[\"ids\"].size(0)\n        train_loss = running_loss / len(train_loader.dataset)\n        run_dict[\"losses\"][\"train\"].append(train_loss)\n        # evaluate\n        clf_model.eval()\n        val_loss = 0.0\n        all_pred = []\n        all_true = []\n        all_seq = []\n        with torch.no_grad():\n            for batch in dev_loader:\n                logits = clf_model(batch[\"ids\"], batch[\"len\"])\n                loss = criterion(logits, batch[\"label\"])\n                val_loss += loss.item() * batch[\"ids\"].size(0)\n                preds = logits.argmax(1).cpu().tolist()\n                all_pred.extend(preds)\n                all_true.extend(batch[\"label\"].cpu().tolist())\n                all_seq.extend(batch[\"sequence\"])\n        val_loss /= len(dev_loader.dataset)\n        run_dict[\"losses\"][\"val\"].append(val_loss)\n        swa = shape_weighted_accuracy(all_seq, all_true, all_pred)\n        cwa = color_weighted_accuracy(all_seq, all_true, all_pred)\n        schm = 2 * swa * cwa / (swa + cwa) if (swa + cwa) > 0 else 0.0\n        run_dict[\"metrics\"][\"SWA\"].append(swa)\n        run_dict[\"metrics\"][\"CWA\"].append(cwa)\n        run_dict[\"metrics\"][\"SCHM\"].append(schm)\n        print(\n            f\"  FT epoch {ep}/{ft_epochs} train_loss={train_loss:.4f} val_loss={val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} SCHM={schm:.3f}\"\n        )\n\n    # store final preds/gt from last epoch\n    run_dict[\"predictions\"] = all_pred\n    run_dict[\"ground_truth\"] = all_true\n    experiment_data[\"pretrain_epochs\"][\"SPR_BENCH\"][str(pretrain_epochs)] = run_dict\n\n    # plot loss curves for this run\n    plt.figure()\n    plt.plot(run_dict[\"losses\"][\"train\"], label=\"train\")\n    plt.plot(run_dict[\"losses\"][\"val\"], label=\"val\")\n    plt.title(f\"FT Loss (pretrain_epochs={pretrain_epochs})\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.savefig(os.path.join(working_dir, f\"loss_curve_ep{pretrain_epochs}.png\"))\n    plt.close()\n\n    # free memory\n    del encoder, clf_model, optimizer_pt, optimizer_ft\n    torch.cuda.empty_cache()\n    gc.collect()\n\n# --------------- Save experiment data ----------------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"\\nSaved experiment data and plots to ./working/\")\n", "# Set random seed\nimport random\nimport numpy as np\nimport torch\n\nseed = 2\nrandom.seed(seed)\nnp.random.seed(seed)\ntorch.manual_seed(seed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed(seed)\n\nimport os, pathlib, random, math, time, json, gc\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pad_sequence, pack_padded_sequence\nimport matplotlib.pyplot as plt\n\n# ------------------------- I/O -----------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ------------------------- Device --------------------------\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\n# ---------------------- Data loading -----------------------\nfrom datasets import load_dataset, DatasetDict\n\n\ndef load_spr_bench(root: pathlib.Path) -> DatasetDict:\n    def _load(split_csv: str):\n        return load_dataset(\n            \"csv\",\n            data_files=str(root / split_csv),\n            split=\"train\",\n            cache_dir=\".cache_dsets\",\n        )\n\n    d = DatasetDict()\n    for s in [\"train\", \"dev\", \"test\"]:\n        d[s] = _load(f\"{s}.csv\")\n    return d\n\n\ndata_root_candidates = [\n    pathlib.Path(\"SPR_BENCH\"),\n    pathlib.Path(\"./data/SPR_BENCH\"),\n    pathlib.Path(\"/home/zxl240011/AI-Scientist-v2/SPR_BENCH\"),\n]\nspr_bench = None\nfor p in data_root_candidates:\n    if (p / \"train.csv\").exists():\n        spr_bench = load_spr_bench(p)\n        print(f\"Loaded data from {p}\")\n        break\nif spr_bench is None:\n    print(\"SPR_BENCH not found, generating synthetic data.\")\n\n    def synth(n):\n        seqs, labels = [], []\n        shapes, colors = \"ABCD\", \"1234\"\n        for _ in range(n):\n            L = random.randint(4, 9)\n            seq = \" \".join(\n                random.choice(shapes) + random.choice(colors) for _ in range(L)\n            )\n            seqs.append(seq)\n            labels.append(random.randint(0, 1))\n        return {\"id\": list(range(n)), \"sequence\": seqs, \"label\": labels}\n\n    spr_bench = DatasetDict()\n    for split, n in [(\"train\", 500), (\"dev\", 100), (\"test\", 100)]:\n        spr_bench[split] = load_dataset(\n            \"json\", data_files={\"train\": None}, split=\"train\", data=synth(n)\n        )\n\n\ndef tokenize(seq):\n    return seq.strip().split()\n\n\n# ---------------------- Vocabulary -------------------------\nvocab = {\"<PAD>\": 0, \"<MASK>\": 1}\nfor split in spr_bench.values():\n    for seq in split[\"sequence\"]:\n        for tok in tokenize(seq):\n            if tok not in vocab:\n                vocab[tok] = len(vocab)\nvocab_size = len(vocab)\nmask_id = vocab[\"<MASK>\"]\nprint(\"Vocab size:\", vocab_size)\n\n\n# ---------------------- Metrics ----------------------------\ndef count_shape_variety(sequence: str) -> int:\n    return len(set(tok[0] for tok in sequence.strip().split() if tok))\n\n\ndef count_color_variety(sequence: str) -> int:\n    return len(set(tok[1] for tok in sequence.strip().split() if len(tok) > 1))\n\n\ndef shape_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_shape_variety(s) for s in seqs]\n    corr = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\ndef color_weighted_accuracy(seqs, y_true, y_pred):\n    w = [count_color_variety(s) for s in seqs]\n    corr = [wi if yt == yp else 0 for wi, yt, yp in zip(w, y_true, y_pred)]\n    return sum(corr) / sum(w) if sum(w) else 0.0\n\n\n# --------------------- Datasets ----------------------------\nclass SPRContrastiveDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def _augment(self, toks, p=0.15):\n        out = [t for t in toks if random.random() >= p]\n        if not out:\n            out = [random.choice(toks)]\n        return out\n\n    def __getitem__(self, idx):\n        toks = tokenize(self.seqs[idx])\n        return self._augment(toks), self._augment(toks)\n\n\nclass SPRClassifierDataset(Dataset):\n    def __init__(self, hf_ds):\n        self.seqs = hf_ds[\"sequence\"]\n        self.labels = hf_ds[\"label\"]\n\n    def __len__(self):\n        return len(self.seqs)\n\n    def __getitem__(self, idx):\n        return tokenize(self.seqs[idx]), self.labels[idx], self.seqs[idx]\n\n\ndef collate_contrastive(batch):\n    v1, v2 = zip(*batch)\n\n    def encode(tok_list):\n        ids = [\n            torch.tensor([vocab[t] for t in toks], dtype=torch.long)\n            for toks in tok_list\n        ]\n        lens = [len(i) for i in ids]\n        ids = pad_sequence(ids, batch_first=True, padding_value=0)\n        return ids.to(device), torch.tensor(lens, dtype=torch.long).to(device)\n\n    ids1, len1 = encode(v1)\n    ids2, len2 = encode(v2)\n    return {\"ids1\": ids1, \"len1\": len1, \"ids2\": ids2, \"len2\": len2}\n\n\ndef collate_classifier(batch):\n    toks, labels, raw_seq = zip(*batch)\n    ids = [torch.tensor([vocab[t] for t in t], dtype=torch.long) for t in toks]\n    lens = [len(i) for i in ids]\n    ids = pad_sequence(ids, batch_first=True, padding_value=0).to(device)\n    return {\n        \"ids\": ids,\n        \"len\": torch.tensor(lens, dtype=torch.long).to(device),\n        \"label\": torch.tensor(labels, dtype=torch.long).to(device),\n        \"sequence\": raw_seq,\n    }\n\n\n# ---------------------- Model ------------------------------\nclass Encoder(nn.Module):\n    def __init__(self, vocab, emb_dim=64, hidden=128):\n        super().__init__()\n        self.emb = nn.Embedding(len(vocab), emb_dim, padding_idx=0)\n        self.gru = nn.GRU(emb_dim, hidden, batch_first=True, bidirectional=True)\n        self.proj = nn.Linear(hidden * 2, hidden)\n\n    def forward(self, ids, lens):\n        x = self.emb(ids)\n        packed = pack_padded_sequence(\n            x, lens.cpu(), batch_first=True, enforce_sorted=False\n        )\n        _, h = self.gru(packed)\n        h = torch.cat([h[-2], h[-1]], dim=1)\n        return self.proj(h)\n\n\nclass Classifier(nn.Module):\n    def __init__(self, encoder, num_classes):\n        super().__init__()\n        self.encoder = encoder\n        self.head = nn.Linear(encoder.proj.out_features, num_classes)\n\n    def forward(self, ids, lens):\n        return self.head(self.encoder(ids, lens))\n\n\n# ---------------- Contrastive loss -------------------------\ndef nt_xent_loss(z1, z2, temp=0.5):\n    z1 = nn.functional.normalize(z1, dim=1)\n    z2 = nn.functional.normalize(z2, dim=1)\n    N = z1.size(0)\n    z = torch.cat([z1, z2], dim=0)\n    sim = torch.matmul(z, z.T) / temp\n    mask = torch.eye(2 * N, dtype=torch.bool, device=z.device)\n    sim.masked_fill_(mask, -9e15)\n    targets = torch.arange(N, 2 * N, device=z.device)\n    logits_12 = sim[:N, N:]\n    logits_21 = sim[N:, :N]\n    denom_12 = torch.logsumexp(sim[:N], dim=1)\n    denom_21 = torch.logsumexp(sim[N:], dim=1)\n    loss = (-logits_12.diag() + denom_12 + -logits_21.diag() + denom_21).mean() * 0.5\n    return loss\n\n\n# ---------------- Experiment container ---------------------\nexperiment_data = {\"pretrain_epochs\": {\"SPR_BENCH\": {}}}\n\n# ------------- Hyperparameter values to try ----------------\nepoch_settings = [2, 4, 6, 8, 10]\n\nfor pretrain_epochs in epoch_settings:\n    print(f\"\\n=== Running experiment with pretrain_epochs={pretrain_epochs} ===\")\n    run_dict = {\n        \"losses\": {\"pretrain\": [], \"train\": [], \"val\": []},\n        \"metrics\": {\"SWA\": [], \"CWA\": [], \"SCHM\": []},\n        \"predictions\": [],\n        \"ground_truth\": [],\n    }\n\n    # Dataloaders (fresh shuffle each run)\n    pretrain_loader = DataLoader(\n        SPRContrastiveDataset(spr_bench[\"train\"]),\n        batch_size=128,\n        shuffle=True,\n        collate_fn=collate_contrastive,\n    )\n    train_loader = DataLoader(\n        SPRClassifierDataset(spr_bench[\"train\"]),\n        batch_size=128,\n        shuffle=True,\n        collate_fn=collate_classifier,\n    )\n    dev_loader = DataLoader(\n        SPRClassifierDataset(spr_bench[\"dev\"]),\n        batch_size=256,\n        shuffle=False,\n        collate_fn=collate_classifier,\n    )\n\n    # Model instantiation\n    encoder = Encoder(vocab).to(device)\n    clf_model = Classifier(\n        encoder, num_classes=len(set(spr_bench[\"train\"][\"label\"]))\n    ).to(device)\n\n    # -------- Contrastive pre-training ----------\n    optimizer_pt = torch.optim.Adam(encoder.parameters(), lr=1e-3)\n    for ep in range(1, pretrain_epochs + 1):\n        encoder.train()\n        epoch_loss = 0.0\n        for batch in pretrain_loader:\n            optimizer_pt.zero_grad()\n            z1 = encoder(batch[\"ids1\"], batch[\"len1\"])\n            z2 = encoder(batch[\"ids2\"], batch[\"len2\"])\n            loss = nt_xent_loss(z1, z2)\n            loss.backward()\n            optimizer_pt.step()\n            epoch_loss += loss.item() * batch[\"ids1\"].size(0)\n        epoch_loss /= len(pretrain_loader.dataset)\n        run_dict[\"losses\"][\"pretrain\"].append(epoch_loss)\n        print(f\"  Pretrain epoch {ep}/{pretrain_epochs} loss={epoch_loss:.4f}\")\n\n    # --------------- Fine-tuning ----------------\n    optimizer_ft = torch.optim.Adam(clf_model.parameters(), lr=1e-3)\n    criterion = nn.CrossEntropyLoss()\n    ft_epochs = 3\n    for ep in range(1, ft_epochs + 1):\n        # train\n        clf_model.train()\n        running_loss = 0.0\n        for batch in train_loader:\n            optimizer_ft.zero_grad()\n            logits = clf_model(batch[\"ids\"], batch[\"len\"])\n            loss = criterion(logits, batch[\"label\"])\n            loss.backward()\n            optimizer_ft.step()\n            running_loss += loss.item() * batch[\"ids\"].size(0)\n        train_loss = running_loss / len(train_loader.dataset)\n        run_dict[\"losses\"][\"train\"].append(train_loss)\n        # evaluate\n        clf_model.eval()\n        val_loss = 0.0\n        all_pred = []\n        all_true = []\n        all_seq = []\n        with torch.no_grad():\n            for batch in dev_loader:\n                logits = clf_model(batch[\"ids\"], batch[\"len\"])\n                loss = criterion(logits, batch[\"label\"])\n                val_loss += loss.item() * batch[\"ids\"].size(0)\n                preds = logits.argmax(1).cpu().tolist()\n                all_pred.extend(preds)\n                all_true.extend(batch[\"label\"].cpu().tolist())\n                all_seq.extend(batch[\"sequence\"])\n        val_loss /= len(dev_loader.dataset)\n        run_dict[\"losses\"][\"val\"].append(val_loss)\n        swa = shape_weighted_accuracy(all_seq, all_true, all_pred)\n        cwa = color_weighted_accuracy(all_seq, all_true, all_pred)\n        schm = 2 * swa * cwa / (swa + cwa) if (swa + cwa) > 0 else 0.0\n        run_dict[\"metrics\"][\"SWA\"].append(swa)\n        run_dict[\"metrics\"][\"CWA\"].append(cwa)\n        run_dict[\"metrics\"][\"SCHM\"].append(schm)\n        print(\n            f\"  FT epoch {ep}/{ft_epochs} train_loss={train_loss:.4f} val_loss={val_loss:.4f} | SWA={swa:.3f} CWA={cwa:.3f} SCHM={schm:.3f}\"\n        )\n\n    # store final preds/gt from last epoch\n    run_dict[\"predictions\"] = all_pred\n    run_dict[\"ground_truth\"] = all_true\n    experiment_data[\"pretrain_epochs\"][\"SPR_BENCH\"][str(pretrain_epochs)] = run_dict\n\n    # plot loss curves for this run\n    plt.figure()\n    plt.plot(run_dict[\"losses\"][\"train\"], label=\"train\")\n    plt.plot(run_dict[\"losses\"][\"val\"], label=\"val\")\n    plt.title(f\"FT Loss (pretrain_epochs={pretrain_epochs})\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.savefig(os.path.join(working_dir, f\"loss_curve_ep{pretrain_epochs}.png\"))\n    plt.close()\n\n    # free memory\n    del encoder, clf_model, optimizer_pt, optimizer_ft\n    torch.cuda.empty_cache()\n    gc.collect()\n\n# --------------- Save experiment data ----------------------\nnp.save(os.path.join(working_dir, \"experiment_data.npy\"), experiment_data)\nprint(\"\\nSaved experiment data and plots to ./working/\")\n", "# plotting aggregation code"], "term_out": ["['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 20000 examples [00:00, 395455.89\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 5000 examples [00:00, 541773.75\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 10000 examples [00:00, 700627.08\nexamples/s]', '\\n', 'Loaded data from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Vocab size:', ' ', '18', '\\n', '\\n=== Running\nexperiment with pretrain_epochs=2 ===', '\\n', '  Pretrain epoch 1/2\nloss=4.0418', '\\n', '  Pretrain epoch 2/2 loss=4.0178', '\\n', '  FT epoch 1/3\ntrain_loss=0.1954 val_loss=0.1197 | SWA=0.966 CWA=0.964 SCHM=0.965', '\\n', '  FT\nepoch 2/3 train_loss=0.0517 val_loss=0.0222 | SWA=0.994 CWA=0.995 SCHM=0.994',\n'\\n', '  FT epoch 3/3 train_loss=0.0152 val_loss=0.0112 | SWA=0.997 CWA=0.998\nSCHM=0.997', '\\n', '\\n=== Running experiment with pretrain_epochs=4 ===', '\\n',\n'  Pretrain epoch 1/4 loss=4.0387', '\\n', '  Pretrain epoch 2/4 loss=4.0166',\n'\\n', '  Pretrain epoch 3/4 loss=4.0127', '\\n', '  Pretrain epoch 4/4\nloss=4.0134', '\\n', '  FT epoch 1/3 train_loss=0.1910 val_loss=0.1038 |\nSWA=0.970 CWA=0.969 SCHM=0.969', '\\n', '  FT epoch 2/3 train_loss=0.0479\nval_loss=0.0165 | SWA=0.993 CWA=0.993 SCHM=0.993', '\\n', '  FT epoch 3/3\ntrain_loss=0.0106 val_loss=0.0127 | SWA=0.995 CWA=0.995 SCHM=0.995', '\\n',\n'\\n=== Running experiment with pretrain_epochs=6 ===', '\\n', '  Pretrain epoch\n1/6 loss=4.0394', '\\n', '  Pretrain epoch 2/6 loss=4.0214', '\\n', '  Pretrain\nepoch 3/6 loss=4.0164', '\\n', '  Pretrain epoch 4/6 loss=4.0101', '\\n', '\nPretrain epoch 5/6 loss=4.0104', '\\n', '  Pretrain epoch 6/6 loss=4.0115', '\\n',\n'  FT epoch 1/3 train_loss=0.1891 val_loss=0.1088 | SWA=0.965 CWA=0.964\nSCHM=0.965', '\\n', '  FT epoch 2/3 train_loss=0.0465 val_loss=0.0184 | SWA=0.992\nCWA=0.993 SCHM=0.992', '\\n', '  FT epoch 3/3 train_loss=0.0101 val_loss=0.0060 |\nSWA=0.998 CWA=0.999 SCHM=0.999', '\\n', '\\n=== Running experiment with\npretrain_epochs=8 ===', '\\n', '  Pretrain epoch 1/8 loss=4.0439', '\\n', '\nPretrain epoch 2/8 loss=4.0162', '\\n', '  Pretrain epoch 3/8 loss=4.0157', '\\n',\n'  Pretrain epoch 4/8 loss=4.0128', '\\n', '  Pretrain epoch 5/8 loss=4.0087',\n'\\n', '  Pretrain epoch 6/8 loss=4.0084', '\\n', '  Pretrain epoch 7/8\nloss=4.0099', '\\n', '  Pretrain epoch 8/8 loss=4.0036', '\\n', '  FT epoch 1/3\ntrain_loss=0.1913 val_loss=0.0911 | SWA=0.976 CWA=0.977 SCHM=0.976', '\\n', '  FT\nepoch 2/3 train_loss=0.0391 val_loss=0.0177 | SWA=0.995 CWA=0.995 SCHM=0.995',\n'\\n', '  FT epoch 3/3 train_loss=0.0088 val_loss=0.0114 | SWA=0.996 CWA=0.996\nSCHM=0.996', '\\n', '\\n=== Running experiment with pretrain_epochs=10 ===', '\\n',\n'  Pretrain epoch 1/10 loss=4.0433', '\\n', '  Pretrain epoch 2/10 loss=4.0201',\n'\\n', '  Pretrain epoch 3/10 loss=4.0163', '\\n', '  Pretrain epoch 4/10\nloss=4.0120', '\\n', '  Pretrain epoch 5/10 loss=4.0079', '\\n', '  Pretrain epoch\n6/10 loss=4.0100', '\\n', '  Pretrain epoch 7/10 loss=4.0091', '\\n', '  Pretrain\nepoch 8/10 loss=4.0085', '\\n', '  Pretrain epoch 9/10 loss=4.0059', '\\n', '\nPretrain epoch 10/10 loss=4.0024', '\\n', '  FT epoch 1/3 train_loss=0.1581\nval_loss=0.0585 | SWA=0.988 CWA=0.989 SCHM=0.988', '\\n', '  FT epoch 2/3\ntrain_loss=0.0255 val_loss=0.0125 | SWA=0.996 CWA=0.996 SCHM=0.996', '\\n', '  FT\nepoch 3/3 train_loss=0.0049 val_loss=0.0087 | SWA=0.997 CWA=0.997 SCHM=0.997',\n'\\n', '\\nSaved experiment data and plots to ./working/', '\\n', 'Execution time:\na minute seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 20000 examples [00:00, 373845.54\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 5000 examples [00:00, 568842.60\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 10000 examples [00:00, 720658.41\nexamples/s]', '\\n', 'Loaded SPR_BENCH from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Vocab size:', ' ', '18', '\\n', 'runfile.py:207:\nUserWarning: To copy construct from a tensor, it is recommended to use\nsourceTensor.clone().detach() or\nsourceTensor.clone().detach().requires_grad_(True), rather than\ntorch.tensor(sourceTensor).\\n  lens_tensor = torch.tensor(lens,\ndevice=ids.device).unsqueeze(1)\\n', 'Pretrain epoch 1/6 loss=3.6487', '\\n',\n'Pretrain epoch 2/6 loss=3.4863', '\\n', 'Pretrain epoch 3/6 loss=3.4363', '\\n',\n'Pretrain epoch 4/6 loss=3.4010', '\\n', 'Pretrain epoch 5/6 loss=3.3862', '\\n',\n'Pretrain epoch 6/6 loss=3.3773', '\\n',\n'/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/transformer.py:502: UserWarning: The PyTorch API of\nnested tensors is in prototype stage and will change in the near future.\n(Triggered internally at /opt/conda/conda-\nbld/pytorch_1729647429097/work/aten/src/ATen/NestedTensorImpl.cpp:178.)\\n\noutput = torch._nested_tensor_from_mask(\\n', 'Epoch 1: validation_loss = 0.0461\n| SWA=0.988 CWA=0.989 CompWA=0.988', '\\n', 'Epoch 2: validation_loss = 0.0420 |\nSWA=0.985 CWA=0.986 CompWA=0.986', '\\n', 'Epoch 3: validation_loss = 0.0258 |\nSWA=0.993 CWA=0.993 CompWA=0.993', '\\n', 'All data saved to', ' ',\n'/home/zxl240011/AI-Scientist-v2/experiments/2025-08-15_22-24-\n43_context_aware_contrastive_learning_attempt_0/0-run/process_ForkProcess-\n15/working', '\\n', 'Execution time: 13 seconds seconds (time limit is 30\nminutes).']", "['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 20000 examples [00:00, 524779.98\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 5000 examples [00:00, 679591.69\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 10000 examples [00:00, 524668.38\nexamples/s]', '\\n', 'Loaded real SPR_BENCH from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Token vocab: 18 | shapes: 6 | colors: 6', '\\n',\n'Pretrain epoch 1/4 loss=4.7889', '\\n', 'Pretrain epoch 2/4 loss=4.7119', '\\n',\n'Pretrain epoch 3/4 loss=4.6907', '\\n', 'Pretrain epoch 4/4 loss=4.6853', '\\n',\n'Epoch 1: validation_loss = 0.1252 | SWA=0.965 CWA=0.963 CompWA=0.964', '\\n',\n'Epoch 2: validation_loss = 0.0283 | SWA=0.992 CWA=0.992 CompWA=0.992', '\\n',\n'Epoch 3: validation_loss = 0.0088 | SWA=0.997 CWA=0.998 CompWA=0.997', '\\n',\n'Saved experiment data to', ' ', '/home/zxl240011/AI-Scientist-\nv2/experiments/2025-08-15_22-24-\n43_context_aware_contrastive_learning_attempt_0/0-run/process_ForkProcess-\n16/working', '\\n', 'Execution time: 11 seconds seconds (time limit is 30\nminutes).']", "['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 20000 examples [00:00, 366583.69\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 5000 examples [00:00, 393683.50\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 10000 examples [00:00, 588988.37\nexamples/s]', '\\n', 'Loaded SPR_BENCH from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Vocab size =', ' ', '19', '\\n', 'Pretrain epoch\n1/6 loss=3.7541', '\\n', 'Pretrain epoch 2/6 loss=3.6001', '\\n', 'Pretrain epoch\n3/6 loss=3.5715', '\\n', 'Pretrain epoch 4/6 loss=3.5590', '\\n', 'Pretrain epoch\n5/6 loss=3.5499', '\\n', 'Pretrain epoch 6/6 loss=3.5378', '\\n',\n'/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/transformer.py:502: UserWarning: The PyTorch API of\nnested tensors is in prototype stage and will change in the near future.\n(Triggered internally at /opt/conda/conda-\nbld/pytorch_1729647429097/work/aten/src/ATen/NestedTensorImpl.cpp:178.)\\n\noutput = torch._nested_tensor_from_mask(\\n', 'Epoch 1: validation_loss = 0.1419\n| SWA=0.963 CWA=0.960 CompWA=0.961', '\\n', 'Epoch 2: validation_loss = 0.1291 |\nSWA=0.966 CWA=0.963 CompWA=0.964', '\\n', 'Epoch 3: validation_loss = 0.0826 |\nSWA=0.976 CWA=0.974 CompWA=0.975', '\\n', 'Epoch 4: validation_loss = 0.0498 |\nSWA=0.987 CWA=0.986 CompWA=0.987', '\\n', 'Epoch 5: validation_loss = 0.0570 |\nSWA=0.984 CWA=0.983 CompWA=0.983', '\\n', 'Saved experiment data to', ' ',\n'/home/zxl240011/AI-Scientist-v2/experiments/2025-08-15_22-24-\n43_context_aware_contrastive_learning_attempt_0/0-run/process_ForkProcess-\n17/working', '\\n', 'Execution time: 23 seconds seconds (time limit is 30\nminutes).']", "['Using device: cuda', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 20000 examples [00:00, 356329.75\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 5000 examples [00:00, 469981.62\nexamples/s]', '\\n', '\\rGenerating train split: 0 examples [00:00, ?\nexamples/s]', '', '\\rGenerating train split: 10000 examples [00:00, 534565.01\nexamples/s]', '\\n', 'Loaded SPR_BENCH from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Vocab size:', ' ', '18', '\\n', 'Pretrain epoch\n1/5 loss=5.0517', '\\n', 'Pretrain epoch 2/5 loss=4.9721', '\\n', 'Pretrain epoch\n3/5 loss=4.9564', '\\n', 'Pretrain epoch 4/5 loss=4.9566', '\\n', 'Pretrain epoch\n5/5 loss=4.9546', '\\n',\n'/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/transformer.py:502: UserWarning: The PyTorch API of\nnested tensors is in prototype stage and will change in the near future.\n(Triggered internally at /opt/conda/conda-\nbld/pytorch_1729647429097/work/aten/src/ATen/NestedTensorImpl.cpp:178.)\\n\noutput = torch._nested_tensor_from_mask(\\n', 'Epoch 1: validation_loss = 0.1437\n| SWA=0.964 CWA=0.962 CompWA=0.963', '\\n', 'Epoch 2: validation_loss = 0.1128 |\nSWA=0.972 CWA=0.968 CompWA=0.970', '\\n', 'Epoch 3: validation_loss = 0.0542 |\nSWA=0.985 CWA=0.985 CompWA=0.985', '\\n', 'Epoch 4: validation_loss = 0.0193 |\nSWA=0.994 CWA=0.994 CompWA=0.994', '\\n', 'Saved experiment_data.npy', '\\n',\n'Execution time: 12 seconds seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', 'Loaded real SPR', '\\n', 'Shapes:5  Colors:5',\n'\\n', 'Pretrain epoch 1/4: loss=4.2046', '\\n', 'Pretrain epoch 2/4:\nloss=4.0511', '\\n', 'Pretrain epoch 3/4: loss=4.0214', '\\n', 'Pretrain epoch\n4/4: loss=4.0086', '\\n',\n'/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/transformer.py:502: UserWarning: The PyTorch API of\nnested tensors is in prototype stage and will change in the near future.\n(Triggered internally at /opt/conda/conda-\nbld/pytorch_1729647429097/work/aten/src/ATen/NestedTensorImpl.cpp:178.)\\n\noutput = torch._nested_tensor_from_mask(\\n', 'Epoch 1: validation_loss = 0.0826\n| SWA=0.976 CWA=0.977 CompWA=0.976', '\\n', 'Epoch 2: validation_loss = 0.0661 |\nSWA=0.982 CWA=0.983 CompWA=0.983', '\\n', 'Epoch 3: validation_loss = 0.0470 |\nSWA=0.989 CWA=0.990 CompWA=0.990', '\\n', 'Epoch 4: validation_loss = 0.0449 |\nSWA=0.988 CWA=0.989 CompWA=0.988', '\\n', 'Epoch 5: validation_loss = 0.0212 |\nSWA=0.993 CWA=0.993 CompWA=0.993', '\\n', 'Saved experiment_data.npy to\n./working', '\\n', 'Execution time: 21 seconds seconds (time limit is 30\nminutes).']", "['Using device: cuda', '\\n', 'Loaded', ' ', '/home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', \"{'train': 20000, 'dev': 5000, 'test': 10000}\",\n'\\n', 'vocab', ' ', '19', '\\n', 'Traceback (most recent call last):\\n  File\n\"runfile.py\", line 299, in <module>\\n    z1 = enc(b[\"ids1\"], b[\"len1\"])\\n\n^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/module.py\", line 1736, in _wrapped_call_impl\\n\nreturn self._call_impl(*args, **kwargs)\\n\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/module.py\", line 1747, in _call_impl\\n    return\nforward_call(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"runfile.py\", line 231, in forward\\n    x = self.emb(ids) + self.pos[:\nids.size(1)]\\n        ^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/module.py\", line 1736, in _wrapped_call_impl\\n\nreturn self._call_impl(*args, **kwargs)\\n\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/module.py\", line 1747, in _call_impl\\n    return\nforward_call(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"runfile.py\", line 210, in forward\\n    color_idx[i, j] = int(tok[1])\\n\n^^^^^^^^^^^\\nValueError: invalid literal for int() with base 10: \\'b\\'\\n',\n'Execution time: 2 seconds seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', 'Loaded real SPR', '\\n', 'Traceback (most recent\ncall last):\\n  File \"runfile.py\", line 264, in <module>\\n    for batch in\npt_loader:\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/utils/data/dataloader.py\", line 701, in __next__\\n    data =\nself._next_data()\\n           ^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/utils/data/dataloader.py\", line 757, in _next_data\\n    data =\nself._dataset_fetcher.fetch(index)  # may raise StopIteration\\n\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File\n\"/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/utils/data/_utils/fetch.py\", line 55, in fetch\\n    return\nself.collate_fn(data)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"runfile.py\",\nline 160, in collate_con\\n    (s1, c1), (s2, c2) = zip(*batch)\\n\n^^^^^^^^\\nValueError: too many values to unpack (expected 2)\\n', 'Execution\ntime: 2 seconds seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', 'Loaded SPR_BENCH from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Shape vocab: 5  Color vocab: 5', '\\n', 'Pretrain\nepoch 1/4: loss=4.3034', '\\n', 'Pretrain epoch 2/4: loss=4.1868', '\\n',\n'Pretrain epoch 3/4: loss=4.1638', '\\n', 'Pretrain epoch 4/4: loss=4.1522',\n'\\n', '/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-\npackages/torch/nn/modules/transformer.py:502: UserWarning: The PyTorch API of\nnested tensors is in prototype stage and will change in the near future.\n(Triggered internally at /opt/conda/conda-\nbld/pytorch_1729647429097/work/aten/src/ATen/NestedTensorImpl.cpp:178.)\\n\noutput = torch._nested_tensor_from_mask(\\n', 'Epoch 1/3: train_loss=0.3058\nval_loss=0.1789 | SWA=0.942 CWA=0.946 CompWA=0.944', '\\n', 'Epoch 2/3:\ntrain_loss=0.1832  val_loss=0.1700 | SWA=0.944 CWA=0.948 CompWA=0.946', '\\n',\n'Epoch 3/3: train_loss=0.1757  val_loss=0.1703 | SWA=0.941 CWA=0.945\nCompWA=0.943', '\\n', 'Saved experiment data to ./working/experiment_data.npy',\n'\\n', 'Execution time: 16 seconds seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', 'Loaded data from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Vocab size:', ' ', '18', '\\n', '\\n=== Running\nexperiment with pretrain_epochs=2 ===', '\\n', '  Pretrain epoch 1/2\nloss=4.0424', '\\n', '  Pretrain epoch 2/2 loss=4.0243', '\\n', '  FT epoch 1/3\ntrain_loss=0.1930 val_loss=0.1405 | SWA=0.958 CWA=0.956 SCHM=0.957', '\\n', '  FT\nepoch 2/3 train_loss=0.0573 val_loss=0.0239 | SWA=0.993 CWA=0.993 SCHM=0.993',\n'\\n', '  FT epoch 3/3 train_loss=0.0144 val_loss=0.0074 | SWA=0.997 CWA=0.997\nSCHM=0.997', '\\n', '\\n=== Running experiment with pretrain_epochs=4 ===', '\\n',\n'  Pretrain epoch 1/4 loss=4.0427', '\\n', '  Pretrain epoch 2/4 loss=4.0199',\n'\\n', '  Pretrain epoch 3/4 loss=4.0210', '\\n', '  Pretrain epoch 4/4\nloss=4.0133', '\\n', '  FT epoch 1/3 train_loss=0.1876 val_loss=0.0958 |\nSWA=0.974 CWA=0.974 SCHM=0.974', '\\n', '  FT epoch 2/3 train_loss=0.0420\nval_loss=0.0178 | SWA=0.994 CWA=0.995 SCHM=0.994', '\\n', '  FT epoch 3/3\ntrain_loss=0.0113 val_loss=0.0093 | SWA=0.997 CWA=0.997 SCHM=0.997', '\\n',\n'\\n=== Running experiment with pretrain_epochs=6 ===', '\\n', '  Pretrain epoch\n1/6 loss=4.0375', '\\n', '  Pretrain epoch 2/6 loss=4.0200', '\\n', '  Pretrain\nepoch 3/6 loss=4.0175', '\\n', '  Pretrain epoch 4/6 loss=4.0138', '\\n', '\nPretrain epoch 5/6 loss=4.0124', '\\n', '  Pretrain epoch 6/6 loss=4.0084', '\\n',\n'  FT epoch 1/3 train_loss=0.1873 val_loss=0.0893 | SWA=0.968 CWA=0.969\nSCHM=0.969', '\\n', '  FT epoch 2/3 train_loss=0.0331 val_loss=0.0234 | SWA=0.993\nCWA=0.994 SCHM=0.994', '\\n', '  FT epoch 3/3 train_loss=0.0097 val_loss=0.0084 |\nSWA=0.998 CWA=0.998 SCHM=0.998', '\\n', '\\n=== Running experiment with\npretrain_epochs=8 ===', '\\n', '  Pretrain epoch 1/8 loss=4.0384', '\\n', '\nPretrain epoch 2/8 loss=4.0159', '\\n', '  Pretrain epoch 3/8 loss=4.0197', '\\n',\n'  Pretrain epoch 4/8 loss=4.0109', '\\n', '  Pretrain epoch 5/8 loss=4.0086',\n'\\n', '  Pretrain epoch 6/8 loss=4.0120', '\\n', '  Pretrain epoch 7/8\nloss=4.0062', '\\n', '  Pretrain epoch 8/8 loss=4.0067', '\\n', '  FT epoch 1/3\ntrain_loss=0.1697 val_loss=0.0549 | SWA=0.984 CWA=0.984 SCHM=0.984', '\\n', '  FT\nepoch 2/3 train_loss=0.0302 val_loss=0.0194 | SWA=0.994 CWA=0.995 SCHM=0.994',\n'\\n', '  FT epoch 3/3 train_loss=0.0066 val_loss=0.0057 | SWA=0.997 CWA=0.998\nSCHM=0.998', '\\n', '\\n=== Running experiment with pretrain_epochs=10 ===', '\\n',\n'  Pretrain epoch 1/10 loss=4.0385', '\\n', '  Pretrain epoch 2/10 loss=4.0176',\n'\\n', '  Pretrain epoch 3/10 loss=4.0151', '\\n', '  Pretrain epoch 4/10\nloss=4.0128', '\\n', '  Pretrain epoch 5/10 loss=4.0113', '\\n', '  Pretrain epoch\n6/10 loss=4.0100', '\\n', '  Pretrain epoch 7/10 loss=4.0088', '\\n', '  Pretrain\nepoch 8/10 loss=4.0095', '\\n', '  Pretrain epoch 9/10 loss=4.0060', '\\n', '\nPretrain epoch 10/10 loss=4.0056', '\\n', '  FT epoch 1/3 train_loss=0.1612\nval_loss=0.0475 | SWA=0.984 CWA=0.985 SCHM=0.985', '\\n', '  FT epoch 2/3\ntrain_loss=0.0218 val_loss=0.0107 | SWA=0.996 CWA=0.996 SCHM=0.996', '\\n', '  FT\nepoch 3/3 train_loss=0.0035 val_loss=0.0045 | SWA=0.999 CWA=0.998 SCHM=0.999',\n'\\n', '\\nSaved experiment data and plots to ./working/', '\\n', 'Execution time:\na minute seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', 'Loaded data from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Vocab size:', ' ', '18', '\\n', '\\n=== Running\nexperiment with pretrain_epochs=2 ===', '\\n', '  Pretrain epoch 1/2\nloss=4.0459', '\\n', '  Pretrain epoch 2/2 loss=4.0195', '\\n', '  FT epoch 1/3\ntrain_loss=0.1833 val_loss=0.0982 | SWA=0.967 CWA=0.967 SCHM=0.967', '\\n', '  FT\nepoch 2/3 train_loss=0.0393 val_loss=0.0128 | SWA=0.996 CWA=0.996 SCHM=0.996',\n'\\n', '  FT epoch 3/3 train_loss=0.0087 val_loss=0.0102 | SWA=0.996 CWA=0.997\nSCHM=0.996', '\\n', '\\n=== Running experiment with pretrain_epochs=4 ===', '\\n',\n'  Pretrain epoch 1/4 loss=4.0429', '\\n', '  Pretrain epoch 2/4 loss=4.0192',\n'\\n', '  Pretrain epoch 3/4 loss=4.0164', '\\n', '  Pretrain epoch 4/4\nloss=4.0124', '\\n', '  FT epoch 1/3 train_loss=0.1907 val_loss=0.1049 |\nSWA=0.967 CWA=0.966 SCHM=0.967', '\\n', '  FT epoch 2/3 train_loss=0.0463\nval_loss=0.0169 | SWA=0.996 CWA=0.996 SCHM=0.996', '\\n', '  FT epoch 3/3\ntrain_loss=0.0105 val_loss=0.0087 | SWA=0.997 CWA=0.997 SCHM=0.997', '\\n',\n'\\n=== Running experiment with pretrain_epochs=6 ===', '\\n', '  Pretrain epoch\n1/6 loss=4.0460', '\\n', '  Pretrain epoch 2/6 loss=4.0156', '\\n', '  Pretrain\nepoch 3/6 loss=4.0159', '\\n', '  Pretrain epoch 4/6 loss=4.0117', '\\n', '\nPretrain epoch 5/6 loss=4.0099', '\\n', '  Pretrain epoch 6/6 loss=4.0071', '\\n',\n'  FT epoch 1/3 train_loss=0.1816 val_loss=0.0583 | SWA=0.983 CWA=0.983\nSCHM=0.983', '\\n', '  FT epoch 2/3 train_loss=0.0303 val_loss=0.0159 | SWA=0.996\nCWA=0.995 SCHM=0.995', '\\n', '  FT epoch 3/3 train_loss=0.0049 val_loss=0.0055 |\nSWA=0.998 CWA=0.998 SCHM=0.998', '\\n', '\\n=== Running experiment with\npretrain_epochs=8 ===', '\\n', '  Pretrain epoch 1/8 loss=4.0425', '\\n', '\nPretrain epoch 2/8 loss=4.0173', '\\n', '  Pretrain epoch 3/8 loss=4.0169', '\\n',\n'  Pretrain epoch 4/8 loss=4.0140', '\\n', '  Pretrain epoch 5/8 loss=4.0133',\n'\\n', '  Pretrain epoch 6/8 loss=4.0095', '\\n', '  Pretrain epoch 7/8\nloss=4.0071', '\\n', '  Pretrain epoch 8/8 loss=4.0030', '\\n', '  FT epoch 1/3\ntrain_loss=0.1871 val_loss=0.0835 | SWA=0.975 CWA=0.975 SCHM=0.975', '\\n', '  FT\nepoch 2/3 train_loss=0.0376 val_loss=0.0113 | SWA=0.998 CWA=0.998 SCHM=0.998',\n'\\n', '  FT epoch 3/3 train_loss=0.0067 val_loss=0.0071 | SWA=0.997 CWA=0.997\nSCHM=0.997', '\\n', '\\n=== Running experiment with pretrain_epochs=10 ===', '\\n',\n'  Pretrain epoch 1/10 loss=4.0398', '\\n', '  Pretrain epoch 2/10 loss=4.0170',\n'\\n', '  Pretrain epoch 3/10 loss=4.0149', '\\n', '  Pretrain epoch 4/10\nloss=4.0111', '\\n', '  Pretrain epoch 5/10 loss=4.0115', '\\n', '  Pretrain epoch\n6/10 loss=4.0071', '\\n', '  Pretrain epoch 7/10 loss=4.0094', '\\n', '  Pretrain\nepoch 8/10 loss=4.0016', '\\n', '  Pretrain epoch 9/10 loss=4.0091', '\\n', '\nPretrain epoch 10/10 loss=4.0028', '\\n', '  FT epoch 1/3 train_loss=0.1672\nval_loss=0.0430 | SWA=0.988 CWA=0.989 SCHM=0.988', '\\n', '  FT epoch 2/3\ntrain_loss=0.0203 val_loss=0.0083 | SWA=0.998 CWA=0.998 SCHM=0.998', '\\n', '  FT\nepoch 3/3 train_loss=0.0045 val_loss=0.0058 | SWA=0.998 CWA=0.998 SCHM=0.998',\n'\\n', '\\nSaved experiment data and plots to ./working/', '\\n', 'Execution time:\na minute seconds (time limit is 30 minutes).']", "['Using device: cuda', '\\n', 'Loaded data from /home/zxl240011/AI-\nScientist-v2/SPR_BENCH', '\\n', 'Vocab size:', ' ', '18', '\\n', '\\n=== Running\nexperiment with pretrain_epochs=2 ===', '\\n', '  Pretrain epoch 1/2\nloss=4.0378', '\\n', '  Pretrain epoch 2/2 loss=4.0200', '\\n', '  FT epoch 1/3\ntrain_loss=0.1994 val_loss=0.1011 | SWA=0.974 CWA=0.972 SCHM=0.973', '\\n', '  FT\nepoch 2/3 train_loss=0.0473 val_loss=0.0294 | SWA=0.993 CWA=0.993 SCHM=0.993',\n'\\n', '  FT epoch 3/3 train_loss=0.0132 val_loss=0.0113 | SWA=0.998 CWA=0.998\nSCHM=0.998', '\\n', '\\n=== Running experiment with pretrain_epochs=4 ===', '\\n',\n'  Pretrain epoch 1/4 loss=4.0421', '\\n', '  Pretrain epoch 2/4 loss=4.0197',\n'\\n', '  Pretrain epoch 3/4 loss=4.0170', '\\n', '  Pretrain epoch 4/4\nloss=4.0143', '\\n', '  FT epoch 1/3 train_loss=0.1880 val_loss=0.0857 |\nSWA=0.976 CWA=0.975 SCHM=0.976', '\\n', '  FT epoch 2/3 train_loss=0.0428\nval_loss=0.0193 | SWA=0.996 CWA=0.996 SCHM=0.996', '\\n', '  FT epoch 3/3\ntrain_loss=0.0102 val_loss=0.0086 | SWA=0.996 CWA=0.997 SCHM=0.996', '\\n',\n'\\n=== Running experiment with pretrain_epochs=6 ===', '\\n', '  Pretrain epoch\n1/6 loss=4.0417', '\\n', '  Pretrain epoch 2/6 loss=4.0213', '\\n', '  Pretrain\nepoch 3/6 loss=4.0137', '\\n', '  Pretrain epoch 4/6 loss=4.0128', '\\n', '\nPretrain epoch 5/6 loss=4.0089', '\\n', '  Pretrain epoch 6/6 loss=4.0075', '\\n',\n'  FT epoch 1/3 train_loss=0.1654 val_loss=0.0547 | SWA=0.983 CWA=0.981\nSCHM=0.982', '\\n', '  FT epoch 2/3 train_loss=0.0388 val_loss=0.0170 | SWA=0.995\nCWA=0.995 SCHM=0.995', '\\n', '  FT epoch 3/3 train_loss=0.0116 val_loss=0.0046 |\nSWA=0.998 CWA=0.999 SCHM=0.998', '\\n', '\\n=== Running experiment with\npretrain_epochs=8 ===', '\\n', '  Pretrain epoch 1/8 loss=4.0406', '\\n', '\nPretrain epoch 2/8 loss=4.0176', '\\n', '  Pretrain epoch 3/8 loss=4.0137', '\\n',\n'  Pretrain epoch 4/8 loss=4.0081', '\\n', '  Pretrain epoch 5/8 loss=4.0101',\n'\\n', '  Pretrain epoch 6/8 loss=4.0094', '\\n', '  Pretrain epoch 7/8\nloss=4.0120', '\\n', '  Pretrain epoch 8/8 loss=4.0079', '\\n', '  FT epoch 1/3\ntrain_loss=0.1681 val_loss=0.0714 | SWA=0.979 CWA=0.980 SCHM=0.980', '\\n', '  FT\nepoch 2/3 train_loss=0.0319 val_loss=0.0102 | SWA=0.998 CWA=0.998 SCHM=0.998',\n'\\n', '  FT epoch 3/3 train_loss=0.0048 val_loss=0.0037 | SWA=0.999 CWA=0.999\nSCHM=0.999', '\\n', '\\n=== Running experiment with pretrain_epochs=10 ===', '\\n',\n'  Pretrain epoch 1/10 loss=4.0419', '\\n', '  Pretrain epoch 2/10 loss=4.0157',\n'\\n', '  Pretrain epoch 3/10 loss=4.0113', '\\n', '  Pretrain epoch 4/10\nloss=4.0141', '\\n', '  Pretrain epoch 5/10 loss=4.0099', '\\n', '  Pretrain epoch\n6/10 loss=4.0053', '\\n', '  Pretrain epoch 7/10 loss=4.0092', '\\n', '  Pretrain\nepoch 8/10 loss=4.0050', '\\n', '  Pretrain epoch 9/10 loss=4.0057', '\\n', '\nPretrain epoch 10/10 loss=4.0082', '\\n', '  FT epoch 1/3 train_loss=0.1679\nval_loss=0.0754 | SWA=0.975 CWA=0.975 SCHM=0.975', '\\n', '  FT epoch 2/3\ntrain_loss=0.0215 val_loss=0.0115 | SWA=0.997 CWA=0.997 SCHM=0.997', '\\n', '  FT\nepoch 3/3 train_loss=0.0032 val_loss=0.0048 | SWA=0.999 CWA=0.999 SCHM=0.999',\n'\\n', '\\nSaved experiment data and plots to ./working/', '\\n', 'Execution time:\na minute seconds (time limit is 30 minutes).']", ""], "analysis": ["", "", "", "", "", "", "The execution failed due to a ValueError in the 'CompEmbedding' class's\n'forward' method. Specifically, the code attempts to convert the second\ncharacter of a token (tok[1]) into an integer. However, not all tokens in the\nvocabulary have a second character that represents a valid integer. For example,\nthe token 'b' caused this issue.  To fix this, the code should first check if\nthe token has a second character and whether it is a valid digit before\nattempting the conversion. Here's a suggested fix:  Replace: ```python\ncolor_idx[i, j] = int(tok[1]) ``` with: ```python if len(tok) > 1 and\ntok[1].isdigit():     color_idx[i, j] = int(tok[1]) else:     color_idx[i, j] =\n0  # or some other default value ```", "The execution failed due to a bug in the 'collate_con' function. Specifically,\nthe error occurs when unpacking the 'batch' variable in the line '(s1, c1), (s2,\nc2) = zip(*batch)'. The dataset being passed to the DataLoader likely produces a\nbatch with a structure that does not match the expected format. To fix this,\nensure that the '__getitem__' method of the 'ContrastiveDS' class returns a\ntuple structured as expected by 'collate_con'. For example, verify that\n'__getitem__' returns two pairs of tensors (s1, c1) and (s2, c2). If not, adjust\nthe '__getitem__' method or modify 'collate_con' to handle the actual output\nstructure.", "", "", "", "", ""], "exc_type": [null, null, null, null, null, null, "ValueError", "ValueError", null, null, null, null, null], "exc_info": [null, null, null, null, null, null, {"args": ["invalid literal for int() with base 10: 'b'"]}, {"args": ["too many values to unpack (expected 2)"]}, null, null, null, null, null], "exc_stack": [null, null, null, null, null, null, [["/home/zxl240011/AI-Scientist-v2/ai_scientist/treesearch/interpreter.py", 144, "_run_session", "exec(compile(code, self.agent_file_name, \"exec\"), global_scope)"], ["runfile.py", 299, "<module>", "z1 = enc(b[\"ids1\"], b[\"len1\"])"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/torch/nn/modules/module.py", 1736, "_wrapped_call_impl", "return self._call_impl(*args, **kwargs)"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/torch/nn/modules/module.py", 1747, "_call_impl", "return forward_call(*args, **kwargs)"], ["runfile.py", 231, "forward", "x = self.emb(ids) + self.pos[: ids.size(1)]"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/torch/nn/modules/module.py", 1736, "_wrapped_call_impl", "return self._call_impl(*args, **kwargs)"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/torch/nn/modules/module.py", 1747, "_call_impl", "return forward_call(*args, **kwargs)"], ["runfile.py", 210, "forward", "color_idx[i, j] = int(tok[1])"]], [["/home/zxl240011/AI-Scientist-v2/ai_scientist/treesearch/interpreter.py", 144, "_run_session", "exec(compile(code, self.agent_file_name, \"exec\"), global_scope)"], ["runfile.py", 264, "<module>", "for batch in pt_loader:"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/torch/utils/data/dataloader.py", 701, "__next__", "data = self._next_data()"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/torch/utils/data/dataloader.py", 757, "_next_data", "data = self._dataset_fetcher.fetch(index)  # may raise StopIteration"], ["/home/zxl240011/anaconda3/envs/ai_scientist/lib/python3.11/site-packages/torch/utils/data/_utils/fetch.py", 55, "fetch", "return self.collate_fn(data)"], ["runfile.py", 160, "collate_con", "(s1, c1), (s2, c2) = zip(*batch)"]], null, null, null, null, null], "exp_name": "0-run", "metrics": [{"metric_names": [{"metric_name": "pretraining loss", "lower_is_better": true, "description": "Loss during the pretraining phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 4.0024, "best_value": 4.0024}]}, {"metric_name": "fine-tuning train loss", "lower_is_better": true, "description": "Loss during the fine-tuning phase on the training dataset.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0049, "best_value": 0.0049}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "Loss on the validation dataset.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0087, "best_value": 0.006}]}, {"metric_name": "shape-weighted accuracy", "lower_is_better": false, "description": "Accuracy metric weighted by shape-specific performance.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9969, "best_value": 0.9985}]}, {"metric_name": "color-weighted accuracy", "lower_is_better": false, "description": "Accuracy metric weighted by color-specific performance.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9969, "best_value": 0.9985}]}, {"metric_name": "SCHM score", "lower_is_better": false, "description": "A combined metric score for shape and color-weighted accuracy.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9969, "best_value": 0.9985}]}]}, {"metric_names": [{"metric_name": "pretraining loss", "lower_is_better": true, "description": "Loss during the pretraining phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 3.377299, "best_value": 3.377299}]}, {"metric_name": "training loss", "lower_is_better": true, "description": "Loss during the training phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.023985, "best_value": 0.023985}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "Loss during the validation phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.025814, "best_value": 0.025814}]}, {"metric_name": "Shape Weighted Accuracy (validation)", "lower_is_better": false, "description": "Weighted accuracy based on shape during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.992675, "best_value": 0.992675}]}, {"metric_name": "Color Weighted Accuracy (validation)", "lower_is_better": false, "description": "Weighted accuracy based on color during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.993167, "best_value": 0.993167}]}, {"metric_name": "Complexity Weighted Accuracy (validation)", "lower_is_better": false, "description": "Weighted accuracy based on complexity during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.992915, "best_value": 0.992915}]}]}, {"metric_names": [{"metric_name": "self-supervised pretraining loss", "lower_is_better": true, "description": "Measures the loss during the self-supervised pretraining phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 4.6853, "best_value": 4.6853}]}, {"metric_name": "supervised training loss", "lower_is_better": true, "description": "Measures the loss during the supervised training phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0163, "best_value": 0.0163}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "Measures the loss on the validation dataset.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0088, "best_value": 0.0088}]}, {"metric_name": "shape-weighted accuracy", "lower_is_better": false, "description": "Accuracy weighted by shape-related criteria.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9974, "best_value": 0.9974}]}, {"metric_name": "color-weighted accuracy", "lower_is_better": false, "description": "Accuracy weighted by color-related criteria.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9976, "best_value": 0.9976}]}, {"metric_name": "complexity-weighted accuracy", "lower_is_better": false, "description": "Accuracy weighted by complexity-related criteria.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9975, "best_value": 0.9975}]}]}, {"metric_names": [{"metric_name": "pretraining loss", "lower_is_better": true, "description": "Loss during the pretraining phase of the model.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 3.5378, "best_value": 3.5378}]}, {"metric_name": "fine-tune training loss", "lower_is_better": true, "description": "Loss during the fine-tuning phase of the model.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0551, "best_value": 0.0551}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "Loss on the validation dataset.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0498, "best_value": 0.0498}]}, {"metric_name": "shape weighted accuracy", "lower_is_better": false, "description": "Accuracy considering shape weights.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.987, "best_value": 0.987}]}, {"metric_name": "color weighted accuracy", "lower_is_better": false, "description": "Accuracy considering color weights.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.986, "best_value": 0.986}]}, {"metric_name": "complexity weighted accuracy", "lower_is_better": false, "description": "Accuracy considering complexity weights.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.987, "best_value": 0.987}]}]}, {"metric_names": [{"metric_name": "pretraining loss", "lower_is_better": true, "description": "Loss during the pretraining phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 4.9546, "best_value": 4.9546}]}, {"metric_name": "training loss", "lower_is_better": true, "description": "Loss during the training phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0361, "best_value": 0.0361}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "Loss during the validation phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0193, "best_value": 0.0193}]}, {"metric_name": "training shape weighted accuracy", "lower_is_better": false, "description": "Shape weighted accuracy during training.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9937, "best_value": 0.9937}]}, {"metric_name": "training color weighted accuracy", "lower_is_better": false, "description": "Color weighted accuracy during training.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9938, "best_value": 0.9938}]}, {"metric_name": "training complexity weighted accuracy", "lower_is_better": false, "description": "Complexity weighted accuracy during training.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9937, "best_value": 0.9937}]}, {"metric_name": "validation shape weighted accuracy", "lower_is_better": false, "description": "Shape weighted accuracy during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9937, "best_value": 0.9937}]}, {"metric_name": "validation color weighted accuracy", "lower_is_better": false, "description": "Color weighted accuracy during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9938, "best_value": 0.9938}]}, {"metric_name": "validation complexity weighted accuracy", "lower_is_better": false, "description": "Complexity weighted accuracy during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9937, "best_value": 0.9937}]}]}, {"metric_names": [{"metric_name": "pretraining loss", "lower_is_better": true, "description": "The loss during the pretraining phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 4.0086, "best_value": 4.0086}]}, {"metric_name": "training loss", "lower_is_better": true, "description": "The loss during the final training phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0339, "best_value": 0.0339}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "The loss during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0212, "best_value": 0.0212}]}, {"metric_name": "validation shape-weighted accuracy", "lower_is_better": false, "description": "The shape-weighted accuracy during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.993, "best_value": 0.993}]}, {"metric_name": "validation color-weighted accuracy", "lower_is_better": false, "description": "The color-weighted accuracy during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.993, "best_value": 0.993}]}, {"metric_name": "validation complexity-weighted accuracy", "lower_is_better": false, "description": "The complexity-weighted accuracy during validation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.993, "best_value": 0.993}]}]}, {"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}, {"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}, {"metric_names": [{"metric_name": "training loss", "lower_is_better": true, "description": "The loss value during training phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.1757, "best_value": 0.1757}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "The loss value during validation phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.17, "best_value": 0.17}]}, {"metric_name": "shape-weighted accuracy", "lower_is_better": false, "description": "Weighted accuracy considering shape features.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9445, "best_value": 0.9445}]}, {"metric_name": "color-weighted accuracy", "lower_is_better": false, "description": "Weighted accuracy considering color features.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9475, "best_value": 0.9475}]}, {"metric_name": "complexity-weighted accuracy", "lower_is_better": false, "description": "Weighted accuracy considering complexity features.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.946, "best_value": 0.946}]}]}, {"metric_names": [{"metric_name": "pretraining loss", "lower_is_better": true, "description": "The loss during the pretraining phase of the model.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 4.0056, "best_value": 4.0056}]}, {"metric_name": "fine-tuning train loss", "lower_is_better": true, "description": "The loss during the fine-tuning phase of the model on the training data.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0035, "best_value": 0.0035}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "The loss on the validation dataset after fine-tuning.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0045, "best_value": 0.0045}]}, {"metric_name": "shape-weighted accuracy", "lower_is_better": false, "description": "The accuracy of the model weighted by shape features.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9987, "best_value": 0.9987}]}, {"metric_name": "color-weighted accuracy", "lower_is_better": false, "description": "The accuracy of the model weighted by color features.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9984, "best_value": 0.9984}]}, {"metric_name": "SCHM score", "lower_is_better": false, "description": "The SCHM score of the model, combining multiple evaluation metrics.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9985, "best_value": 0.9985}]}]}, {"metric_names": [{"metric_name": "Pretraining Loss", "lower_is_better": true, "description": "The loss during the pretraining phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 4.0028, "best_value": 4.0028}]}, {"metric_name": "Fine-tuning Train Loss", "lower_is_better": true, "description": "The loss during the fine-tuning training phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0045, "best_value": 0.0045}]}, {"metric_name": "Validation Loss", "lower_is_better": true, "description": "The loss on the validation dataset.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0058, "best_value": 0.0055}]}, {"metric_name": "Shape-weighted Accuracy", "lower_is_better": false, "description": "The accuracy weighted by shape.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.998, "best_value": 0.998}]}, {"metric_name": "Color-weighted Accuracy", "lower_is_better": false, "description": "The accuracy weighted by color.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.998, "best_value": 0.998}]}, {"metric_name": "SCHM Score", "lower_is_better": false, "description": "The SCHM score of the model.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.998, "best_value": 0.998}]}]}, {"metric_names": [{"metric_name": "pretraining loss", "lower_is_better": true, "description": "The loss achieved during the pretraining phase.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 4.0082, "best_value": 4.0075}]}, {"metric_name": "fine-tuning train loss", "lower_is_better": true, "description": "The loss achieved during the fine-tuning phase on the training set.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0032, "best_value": 0.0032}]}, {"metric_name": "validation loss", "lower_is_better": true, "description": "The loss achieved on the validation dataset.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.0048, "best_value": 0.0037}]}, {"metric_name": "shape-weighted accuracy", "lower_is_better": false, "description": "The accuracy weighted by shape.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9991, "best_value": 0.9991}]}, {"metric_name": "color-weighted accuracy", "lower_is_better": false, "description": "The accuracy weighted by color.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9991, "best_value": 0.9991}]}, {"metric_name": "SCHM score", "lower_is_better": false, "description": "The SCHM score achieved during evaluation.", "data": [{"dataset_name": "SPR_BENCH", "final_value": 0.9991, "best_value": 0.9991}]}]}, {"metric_names": [{"metric_name": "value", "lower_is_better": true, "description": "", "data": [{"dataset_name": "default", "final_value": null, "best_value": null}]}]}], "is_best_node": [true, false, false, false, false, false, false, false, false, false, false, false, false], "plots": [["../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep2.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep4.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep6.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep8.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep10.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_SCHM_curve.png"], ["../../logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/ft_loss_curve.png", "../../logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_CompWA_curve.png"], ["../../logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_CompWA_curve.png"], ["../../logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/ft_loss_curve.png", "../../logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_CompWA_curve.png", "../../logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_confusion_matrix.png"], ["../../logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_CompWA_curve.png"], ["../../logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_CompWA_curve.png"], [], [], ["../../logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/val_loss_curve.png", "../../logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_loss_curves.png", "../../logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_weighted_accuracy_curves.png", "../../logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_confusion_matrix.png"], ["../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep2.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep4.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep6.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep8.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep10.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_SCHM_curve.png"], ["../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep2.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep4.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep6.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep8.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep10.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_SCHM_curve.png"], ["../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep2.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep4.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep6.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep8.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep10.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_pretrain_loss.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_finetune_loss.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_SWA_curve.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_CWA_curve.png", "../../logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_SCHM_curve.png"], ["../../logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_pretrain_loss_agg.png", "../../logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_finetune_loss_agg.png", "../../logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_SWA_agg.png", "../../logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_CWA_agg.png", "../../logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_SCHM_agg.png"]], "plot_paths": [["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep2.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep4.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep6.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep8.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep10.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_SCHM_curve.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/ft_loss_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_CompWA_curve.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_CompWA_curve.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/ft_loss_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_CompWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_confusion_matrix.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_CompWA_curve.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_CompWA_curve.png"], [], [], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/val_loss_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_loss_curves.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_weighted_accuracy_curves.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_confusion_matrix.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep2.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep4.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep6.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep8.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep10.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_SCHM_curve.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep2.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep4.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep6.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep8.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep10.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_SCHM_curve.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep2.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep4.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep6.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep8.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep10.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_pretrain_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_finetune_loss.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_SWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_CWA_curve.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_SCHM_curve.png"], ["experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_pretrain_loss_agg.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_finetune_loss_agg.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_SWA_agg.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_CWA_agg.png", "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/seed_aggregation_3bedc808fb3f4d8e83bad0d22faf5bf4/SPR_BENCH_SCHM_agg.png"]], "plot_analyses": [[{"analysis": "This plot shows the fine-tuning loss for both training and validation datasets with 2 pretraining epochs. Both training and validation losses decrease consistently, indicating effective learning. However, the gap between training and validation losses is minimal, suggesting that the model is not overfitting at this stage.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep2.png"}, {"analysis": "This plot shows the fine-tuning loss for both training and validation datasets with 4 pretraining epochs. The losses decrease more rapidly compared to 2 pretraining epochs, and the validation loss closely follows the training loss. This indicates improved generalization and effective pretraining.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep4.png"}, {"analysis": "This plot shows the fine-tuning loss for both training and validation datasets with 6 pretraining epochs. The training and validation losses decrease further, and the validation loss aligns closely with the training loss. This suggests that increasing pretraining epochs enhances the model's ability to generalize.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep6.png"}, {"analysis": "This plot shows the fine-tuning loss for both training and validation datasets with 8 pretraining epochs. The losses are further reduced, and the validation loss continues to align closely with the training loss. This indicates that the model benefits from additional pretraining epochs without overfitting.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep8.png"}, {"analysis": "This plot shows the fine-tuning loss for both training and validation datasets with 10 pretraining epochs. Both losses decrease significantly, and the validation loss is almost identical to the training loss. This suggests that 10 pretraining epochs result in the most effective learning and generalization so far.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/loss_curve_ep10.png"}, {"analysis": "This plot depicts the pretraining loss across different numbers of pretraining epochs. The loss decreases consistently with increasing pretraining epochs, indicating that the pretraining process effectively optimizes the model parameters. The diminishing returns in loss reduction at higher epochs suggest an optimal range for pretraining epochs.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_pretrain_loss.png"}, {"analysis": "This plot compares the fine-tuning loss for training and validation datasets across different numbers of pretraining epochs. The losses decrease consistently across all pretraining configurations, with higher pretraining epochs resulting in lower losses. This highlights the positive impact of extensive pretraining on fine-tuning performance.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_finetune_loss.png"}, {"analysis": "This plot shows the Shape-Weighted Accuracy (SWA) across fine-tuning epochs for different pretraining configurations. Higher pretraining epochs lead to better SWA, with 10 pretraining epochs achieving the highest accuracy. This indicates that extensive pretraining enhances the model's ability to capture shape-related patterns.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_SWA_curve.png"}, {"analysis": "This plot shows the Color-Weighted Accuracy (CWA) across fine-tuning epochs for different pretraining configurations. Similar to SWA, higher pretraining epochs result in better CWA, with 10 pretraining epochs achieving the best performance. This suggests that the model benefits from extensive pretraining in recognizing color-related patterns.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_CWA_curve.png"}, {"analysis": "This plot shows the Schema Score (SCHM) across fine-tuning epochs for different pretraining configurations. The trend is consistent with SWA and CWA, where higher pretraining epochs lead to better schema recognition. The results highlight the importance of pretraining in improving the model's schema-related reasoning capabilities.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_479d9bad55604ae6b69aad9d4d40ac72_proc_2989519/SPR_BENCH_SCHM_curve.png"}], [{"analysis": "The fine-tune loss plot indicates a steady decrease in both training and validation loss over epochs. This suggests that the model is learning effectively and generalizing well to the validation set. The convergence of training and validation losses toward the end implies reduced overfitting, which is a positive outcome.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/ft_loss_curve.png"}, {"analysis": "The pre-training loss plot shows a consistent decline in loss over six epochs. This indicates that the contrastive learning framework is effective at improving the model's ability to learn meaningful representations during pre-training. The steady decrease reflects successful optimization of the embeddings.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_pretrain_loss.png"}, {"analysis": "The fine-tuning loss plot reaffirms the findings from the earlier fine-tune loss plot, with a notable decline in both training and validation losses. The alignment between training and validation loss curves suggests strong generalization and effective transfer learning from the pre-trained embeddings.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_finetune_loss.png"}, {"analysis": "The SWA plot for validation indicates an initial dip followed by a sharp increase in accuracy, surpassing 0.993 by the third epoch. This pattern suggests that the model might have benefited from hyperparameter tuning or changes in optimization strategies after the second epoch, leading to improved performance.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_SWA_curve.png"}, {"analysis": "The CWA plot for validation follows a similar trend as the SWA plot, with an initial dip and a subsequent sharp increase in accuracy, also exceeding 0.993 by the third epoch. This reinforces the model's ability to generalize well across different weighted accuracy metrics, demonstrating robust performance.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_CWA_curve.png"}, {"analysis": "The CompWA plot for validation mirrors the trends observed in the SWA and CWA plots, with a dip followed by a sharp rise in accuracy. This consistency across all weighted accuracy metrics indicates that the model is performing well under various evaluation criteria, likely surpassing the SOTA benchmark.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_e67a94094a7b4f988757aba725a5bccf_proc_2997846/SPR_BENCH_CompWA_curve.png"}], [{"analysis": "The pre-training loss decreases steadily across epochs, indicating that the model is learning effectively during the pre-training phase. The consistent downward trend suggests that the context-aware contrastive learning framework is successfully optimizing the embeddings for symbolic sequences.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_pretrain_loss.png"}, {"analysis": "The fine-tuning loss for both the train and validation sets decreases significantly across epochs, demonstrating effective fine-tuning of the pre-trained model. The validation loss follows a similar trend to the training loss, indicating that the model is not overfitting and generalizes well to unseen data.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_finetune_loss.png"}, {"analysis": "The SWA metric improves consistently over the fine-tuning epochs, indicating that the model's ability to classify symbolic sequences based on shape complexity is improving. The upward trend suggests that the pre-trained embeddings are effectively fine-tuned for the SPR task.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_SWA_curve.png"}, {"analysis": "The CWA metric also shows a consistent improvement across fine-tuning epochs, demonstrating the model's enhanced capability to classify sequences based on color complexity. The results align with the hypothesis that context-aware data augmentation and denoising contribute to better feature representations.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_CWA_curve.png"}, {"analysis": "The CompWA metric, which likely combines both shape and color complexities, exhibits a similar upward trend as SWA and CWA. This indicates that the model is improving its overall performance in recognizing symbolic patterns that incorporate both aspects. The results further validate the effectiveness of the proposed approach.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_3d06141ae8b047d08d4ff80712400b32_proc_2997847/SPR_BENCH_CompWA_curve.png"}], [{"analysis": "The plot shows the loss trends during fine-tuning for both training and validation datasets. The training loss decreases steadily across epochs, indicating effective learning. The validation loss follows a similar trend but slightly diverges at later epochs, suggesting a minor risk of overfitting. However, the overall downward trend in both losses indicates the model is converging well.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/ft_loss_curve.png"}, {"analysis": "This plot depicts the pre-training loss across epochs. The steady decline in loss shows that the contrastive learning framework successfully learns meaningful representations during pre-training. The gradual decrease suggests that the model is converging effectively without abrupt changes, which is desirable for a stable training process.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_pretrain_loss.png"}, {"analysis": "The plot illustrates the fine-tuning loss for training and validation datasets. Both losses decrease consistently across epochs, with the validation loss slightly diverging from the training loss in later epochs. This suggests effective learning but also indicates the need for careful monitoring of overfitting as fine-tuning progresses.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_finetune_loss.png"}, {"analysis": "This plot shows the shape-weighted accuracy during fine-tuning. The accuracy increases steadily across epochs, peaking before slightly declining. This trend indicates that the model effectively learns to recognize shape patterns, but the slight decline suggests potential overfitting or the need for better regularization.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_SWA_curve.png"}, {"analysis": "The plot depicts color-weighted accuracy during fine-tuning. The steady increase in accuracy, followed by a slight decline, indicates that the model learns to recognize color patterns effectively. However, the decline at later epochs suggests overfitting, which could be mitigated with early stopping or regularization techniques.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_CWA_curve.png"}, {"analysis": "This plot represents complexity-weighted accuracy during fine-tuning. The accuracy improves consistently across epochs, peaking before a slight decline. This indicates that the model learns to handle complex patterns effectively but might overfit at later epochs, necessitating careful monitoring or adjustments in training strategies.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_CompWA_curve.png"}, {"analysis": "The confusion matrix shows the classification performance on the test set. The diagonal dominance indicates that the model performs well in correctly classifying both classes. However, some misclassifications are present, suggesting room for improvement in the model's ability to handle ambiguous or challenging sequences.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_57819b692c034fcca71f724fdbc6f800_proc_2997848/SPR_BENCH_confusion_matrix.png"}], [{"analysis": "The plot demonstrates a steady decrease in pre-training loss over the epochs, indicating that the model is effectively learning representations during the pre-training phase. The loss reduction is significant in the initial epochs and then stabilizes, suggesting that the model converges to a lower loss value as training progresses. This behavior aligns with expectations for pre-training on a well-designed contrastive learning framework.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_pretrain_loss.png"}, {"analysis": "This plot shows both the training and validation losses decreasing over the epochs during the fine-tuning phase. The validation loss closely follows the training loss, indicating that the model generalizes well without overfitting. The consistent reduction in loss for both splits highlights the effectiveness of the fine-tuning process in adapting the pre-trained model to the labeled SPR task.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_finetune_loss.png"}, {"analysis": "The plot illustrates a consistent increase in Shape-Weighted Accuracy (SWA) over the epochs. This indicates that the model's ability to correctly classify sequences based on shape-related features improves steadily during training. The upward trend suggests that the proposed context-aware contrastive learning framework successfully enhances the model's performance in this aspect.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_SWA_curve.png"}, {"analysis": "The plot shows a steady improvement in Color-Weighted Accuracy (CWA) over the epochs, similar to SWA. This suggests that the model is also becoming increasingly adept at capturing and leveraging color-related features for classification. The consistent upward trajectory reflects the effectiveness of the framework in learning robust representations across different feature dimensions.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_CWA_curve.png"}, {"analysis": "The plot shows a steady increase in Complexity-Weighted Accuracy (CompWA) over the epochs, which combines both shape and color complexities. This indicates that the model is improving its overall ability to handle sequences with varying levels of complexity. The consistent improvement across epochs highlights the success of the proposed techniques in addressing the challenges of the SPR task.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_c383a7170db548a8a6b828891f4d5eb6_proc_2997849/SPR_BENCH_CompWA_curve.png"}], [{"analysis": "The pre-training loss decreases steadily over the epochs, indicating that the model is learning effectively during the pre-training phase. This trend suggests that the context-aware contrastive learning framework is successfully optimizing the embeddings for symbolic sequences.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_pretrain_loss.png"}, {"analysis": "The fine-tuning loss for both training and validation sets decreases over the epochs, with the validation loss slightly trailing the training loss. This indicates that the model generalizes well to unseen data and that overfitting is minimal during fine-tuning.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_finetune_loss.png"}, {"analysis": "The Shape-Weighted Accuracy (SWA) improves consistently over the epochs, demonstrating that the model is becoming increasingly adept at recognizing shape-related patterns in the symbolic sequences. This metric surpasses the SOTA benchmark of 65.0%, validating the effectiveness of the proposed approach.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_SWA_curve.png"}, {"analysis": "The Color-Weighted Accuracy (CWA) also shows a steady improvement over the epochs, reflecting the model's enhanced ability to capture color-related patterns in the symbolic sequences. This metric surpasses the SOTA benchmark of 70.0%, further substantiating the success of the context-aware contrastive learning framework.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_CWA_curve.png"}, {"analysis": "The Combined Weighted Accuracy (CompWA) metric, which likely combines both shape and color weighting, shows a consistent upward trend, indicating that the model effectively integrates both aspects of the sequences. This further supports the robustness of the proposed approach in handling complex symbolic patterns.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_48bcaccbbe65423dab954210ece6209a_proc_2997846/SPR_BENCH_CompWA_curve.png"}], [], [], [{"analysis": "This plot shows the validation loss decreasing significantly during the first epoch of fine-tuning and then plateauing afterward. This indicates that the model quickly learns during the initial phase of fine-tuning, but further improvements in validation loss are minimal after the first epoch. This suggests the model may require more advanced regularization or additional epochs to further reduce validation loss.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/val_loss_curve.png"}, {"analysis": "In this plot, the training loss decreases rapidly during the initial epochs, while the validation loss also decreases but at a slower rate. This indicates that the model is effectively learning and generalizing well during fine-tuning. The convergence of both training and validation loss near the end suggests that the model is not overfitting and is performing well on unseen data.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_loss_curves.png"}, {"analysis": "This plot shows consistent weighted accuracy metrics over the fine-tuning epochs, with the Shape-Weighted Accuracy (SWA), Color-Weighted Accuracy (CWA), and Complex-Weighted Accuracy (CompWA) all maintaining a value of 1.0. This suggests that the model achieves perfect accuracy across all metrics after fine-tuning, indicating strong performance on the SPR task.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_weighted_accuracy_curves.png"}, {"analysis": "The confusion matrix indicates that the model performs well in classifying the data, with a high number of correct predictions for both classes. However, there is a slight misclassification in one class, as seen in the 268 incorrect predictions. Overall, the model demonstrates strong performance with minimal errors.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_a9801611b57b42a0af48aeb2bb97ff75_proc_2997848/SPR_BENCH_confusion_matrix.png"}], [{"analysis": "This plot shows the fine-tuning loss (FT Loss) for training and validation datasets when pretraining was conducted for 2 epochs. Both train and validation losses decrease consistently as fine-tuning progresses, indicating effective learning and convergence. The gap between training and validation loss is minimal, suggesting the model generalizes well without overfitting.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep2.png"}, {"analysis": "This plot depicts the fine-tuning loss for training and validation datasets when pretraining was conducted for 4 epochs. The pattern is similar to the previous case, with both losses decreasing. The lower initial validation loss compared to the previous case suggests that additional pretraining has improved the model's initialization.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep4.png"}, {"analysis": "This plot corresponds to the fine-tuning loss after 6 pretraining epochs. The losses for both training and validation datasets continue to decrease as fine-tuning progresses. The validation loss starts lower than in previous cases, indicating further improvement in the model's initialization due to extended pretraining.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep6.png"}, {"analysis": "This plot represents the fine-tuning loss after 8 pretraining epochs. The loss curves maintain the same downward trend, with validation loss starting even lower. This indicates that the model benefits from extended pretraining, leading to better initialization and faster convergence during fine-tuning.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep8.png"}, {"analysis": "This plot shows the fine-tuning loss after 10 pretraining epochs. The losses for both training and validation are the lowest compared to earlier cases, indicating that extended pretraining enhances the model's ability to generalize and converge effectively during fine-tuning.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/loss_curve_ep10.png"}, {"analysis": "This plot visualizes the pretraining loss across epochs for different pretraining durations. The loss decreases for all pretraining settings, with longer pretraining durations (e.g., PT=10) showing slightly better convergence. This suggests that additional pretraining epochs improve the model's capacity to learn effective representations from the data.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_pretrain_loss.png"}, {"analysis": "This plot compares the fine-tuning loss for training and validation datasets across different pretraining durations. Models pretrained for longer durations (e.g., PT=10) exhibit lower fine-tuning losses, indicating that extended pretraining improves the model's initialization and reduces the effort required during fine-tuning.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_finetune_loss.png"}, {"analysis": "This plot shows the Shape-Weighted Accuracy (SWA) across fine-tuning epochs for various pretraining durations. Longer pretraining durations (e.g., PT=10) consistently result in higher SWA, demonstrating the positive impact of extended pretraining on the model's performance in recognizing shape-based patterns.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_SWA_curve.png"}, {"analysis": "This plot depicts the Color-Weighted Accuracy (CWA) across fine-tuning epochs for different pretraining durations. Similar to SWA, longer pretraining durations lead to higher CWA, indicating improved performance in recognizing color-based patterns due to extended pretraining.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_CWA_curve.png"}, {"analysis": "This plot represents the SCHM metric across fine-tuning epochs for various pretraining durations. The trend is consistent with SWA and CWA, where extended pretraining results in better performance. This indicates that the model benefits from additional pretraining in learning robust and generalizable embeddings.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/SPR_BENCH_SCHM_curve.png"}], [{"analysis": "This plot shows the fine-tuning loss for both training and validation datasets when the model is pre-trained for 2 epochs. The training loss decreases steadily across the fine-tuning epochs, indicating that the model is learning effectively from the training data. The validation loss also decreases but at a slightly slower pace, suggesting that the model generalizes well to unseen data. The convergence of both losses by the final epoch demonstrates a well-optimized model with no significant overfitting.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep2.png"}, {"analysis": "This plot represents the fine-tuning loss for training and validation datasets with 4 pre-training epochs. Compared to the previous setting (2 pre-training epochs), the losses decrease more rapidly, and the final losses are slightly lower. This indicates that additional pre-training improves the quality of the learned embeddings, leading to better fine-tuning performance.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep4.png"}, {"analysis": "The plot depicts fine-tuning loss for training and validation datasets when the model is pre-trained for 6 epochs. The losses continue to decrease more quickly compared to fewer pre-training epochs, and the final losses are even lower. This trend suggests that further pre-training enhances the model's ability to generalize and optimize during fine-tuning.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep6.png"}, {"analysis": "This plot shows the fine-tuning loss for training and validation datasets with 8 pre-training epochs. The losses decrease rapidly and reach very low values, indicating that the model has learned highly effective embeddings during pre-training. The gap between training and validation loss remains minimal, reflecting strong generalization capabilities.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep8.png"}, {"analysis": "This plot illustrates the fine-tuning loss for training and validation datasets with 10 pre-training epochs. The losses are the lowest among all settings, showing that extensive pre-training leads to the most effective embeddings for fine-tuning. The minimal gap between training and validation losses suggests that the model maintains its generalization ability even after substantial pre-training.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/loss_curve_ep10.png"}, {"analysis": "This plot displays the pre-training loss across pre-training epochs for different pre-training durations (2, 4, 6, 8, and 10 epochs). The loss decreases consistently for all settings, with longer pre-training durations resulting in slightly lower final losses. This indicates that additional pre-training epochs improve the model's ability to learn meaningful representations of the data.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_pretrain_loss.png"}, {"analysis": "This plot compares the fine-tuning loss (training vs. validation) across different pre-training durations. Models pre-trained for longer durations (e.g., 8 or 10 epochs) demonstrate lower losses during fine-tuning, indicating that extensive pre-training enhances the model's performance during fine-tuning. The consistent reduction in validation loss across pre-training durations highlights improved generalization.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_finetune_loss.png"}, {"analysis": "This plot shows the Shape-Weighted Accuracy (SWA) across fine-tuning epochs for different pre-training durations. Models pre-trained for longer durations achieve higher SWA, with the best performance observed for 8 and 10 pre-training epochs. The accuracy stabilizes after the second fine-tuning epoch, suggesting that the model quickly converges to its optimal performance.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_SWA_curve.png"}, {"analysis": "This plot depicts the Color-Weighted Accuracy (CWA) across fine-tuning epochs for different pre-training durations. Similar to SWA, models pre-trained for longer durations achieve higher CWA, with the best results for 8 and 10 pre-training epochs. The accuracy stabilizes after the second fine-tuning epoch, indicating rapid convergence to optimal performance.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_CWA_curve.png"}, {"analysis": "This plot illustrates the SCHM metric across fine-tuning epochs for different pre-training durations. The trend aligns with SWA and CWA, where longer pre-training durations lead to higher SCHM values. The results demonstrate that extensive pre-training significantly enhances the model's ability to achieve high accuracy across all metrics.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/SPR_BENCH_SCHM_curve.png"}], [{"analysis": "This plot demonstrates the fine-tuning loss for both training and validation datasets after 2 epochs of pretraining. The loss decreases steadily for both datasets, indicating effective learning. The gap between training and validation loss is minimal, suggesting the model generalizes well and does not overfit.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep2.png"}, {"analysis": "This plot demonstrates the fine-tuning loss for both training and validation datasets after 4 epochs of pretraining. The loss continues to decrease for both datasets, and the minimal gap between training and validation loss indicates strong generalization ability. The results suggest that additional pretraining epochs are beneficial for improving performance.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep4.png"}, {"analysis": "This plot shows the fine-tuning loss for both training and validation datasets after 6 epochs of pretraining. The loss further decreases, and the gap between training and validation loss remains minimal. This indicates the model's capacity to learn effectively from the additional pretraining epochs without overfitting.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep6.png"}, {"analysis": "This plot illustrates the fine-tuning loss for both training and validation datasets after 8 epochs of pretraining. The loss for both datasets approaches zero, demonstrating the model's strong learning ability. The minimal gap continues to indicate good generalization and suggests the model benefits from extended pretraining.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep8.png"}, {"analysis": "This plot depicts the fine-tuning loss for both training and validation datasets after 10 epochs of pretraining. The loss converges close to zero for both datasets, with a consistently small gap between them. This indicates that the model achieves excellent generalization and learns effectively with extended pretraining.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/loss_curve_ep10.png"}, {"analysis": "This plot shows the pretraining loss across different numbers of pretraining epochs. The loss decreases rapidly in the initial epochs and then plateaus, suggesting diminishing returns with extended pretraining. However, the overall trend indicates that additional pretraining epochs still contribute to better initialization for fine-tuning.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_pretrain_loss.png"}, {"analysis": "This plot compares the fine-tuning loss for training and validation datasets across different pretraining configurations. All configurations show a rapid decrease in loss during the first fine-tuning epoch, followed by convergence. Models pretrained for more epochs tend to have lower initial loss, indicating better initialization and faster convergence.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_finetune_loss.png"}, {"analysis": "This plot illustrates the Shape-Weighted Accuracy (SWA) across fine-tuning epochs for different pretraining configurations. Models pretrained for more epochs achieve higher SWA, indicating that additional pretraining improves the model's ability to capture shape-related patterns in the data. The accuracy plateaus after a few fine-tuning epochs, suggesting effective learning.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_SWA_curve.png"}, {"analysis": "This plot depicts the Color-Weighted Accuracy (CWA) across fine-tuning epochs for various pretraining configurations. Similar to SWA, models pretrained for more epochs achieve higher CWA, indicating improved performance on color-related patterns. The accuracy stabilizes after a few fine-tuning epochs, reflecting effective fine-tuning.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_CWA_curve.png"}, {"analysis": "This plot shows the SCHM metric across fine-tuning epochs for different pretraining configurations. The trend is consistent with SWA and CWA, where additional pretraining epochs lead to higher performance. The metric stabilizes after a few fine-tuning epochs, indicating that the model effectively learns the symbolic patterns with sufficient pretraining.", "plot_path": "experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/SPR_BENCH_SCHM_curve.png"}], []], "vlm_feedback_summary": ["The provided plots effectively demonstrate the impact of varying pretraining\nepochs on fine-tuning performance metrics. Increasing the number of pretraining\nepochs consistently improves the model's ability to generalize and recognize\npatterns, as evidenced by reduced losses and enhanced accuracy metrics (SWA,\nCWA, and SCHM). The results validate the hypothesis that extensive pretraining\nbenefits the SPR task.", "The plots collectively demonstrate effective learning and generalization of the\nmodel. The steady decrease in loss during pre-training and fine-tuning, along\nwith the sharp rise in weighted accuracy metrics (SWA, CWA, CompWA), indicates\nthat the context-aware contrastive learning framework is successfully improving\nthe model's performance on the SPR task, potentially surpassing the SOTA\nbenchmarks.", "The plots demonstrate that the context-aware contrastive learning framework is\neffective in pre-training and fine-tuning for the SPR task. The steady decrease\nin losses and consistent improvement in evaluation metrics (SWA, CWA, and\nCompWA) highlight the success of the approach in surpassing the SOTA\nperformance.", "The plots collectively indicate that the context-aware contrastive learning\nframework is effective in learning meaningful representations for the SPR task.\nThe steady improvement in accuracy metrics and the consistent decrease in loss\nvalues demonstrate the model's learning capability. However, the slight decline\nin accuracy metrics and the divergence of validation loss from training loss at\nlater epochs suggest potential overfitting, which could be addressed with\nregularization or early stopping. The confusion matrix shows strong\nclassification performance but highlights areas for further refinement in\nhandling challenging cases.", "The plots collectively demonstrate the effectiveness of the proposed context-\naware contrastive learning framework. Pre-training and fine-tuning processes\nshow consistent improvements in loss and accuracy metrics, with the model\nachieving better performance on shape, color, and complexity-weighted\naccuracies. This suggests that the proposed approach is well-suited for the SPR\ntask and has the potential to surpass the current state-of-the-art benchmarks.", "The experimental results demonstrate significant improvements in both Shape-\nWeighted Accuracy (SWA) and Color-Weighted Accuracy (CWA), surpassing the SOTA\nbenchmarks. The decreasing losses during pre-training and fine-tuning further\nvalidate the effectiveness of the context-aware contrastive learning framework\nin enhancing feature representations for the SPR task.", "[]", "[]", "The plots demonstrate that the model performs well during fine-tuning, achieving\nrapid convergence in loss and perfect weighted accuracy metrics. The confusion\nmatrix highlights strong classification performance with minimal\nmisclassifications.", "The plots collectively demonstrate that extended pretraining epochs lead to\nimproved model initialization, better convergence during fine-tuning, and\nenhanced performance metrics (SWA, CWA, and SCHM). Longer pretraining durations\nconsistently result in lower losses and higher accuracy metrics, indicating the\nefficacy of extended pretraining on the SPR task.", "The results indicate that longer pre-training durations consistently improve the\nmodel's performance across all metrics (SWA, CWA, SCHM) and reduce fine-tuning\nlosses. The model demonstrates strong generalization capabilities and rapid\nconvergence during fine-tuning, suggesting the effectiveness of the proposed\ncontext-aware contrastive learning framework.", "The plots provide detailed insights into the impact of pretraining epochs on\nfine-tuning performance. Extended pretraining consistently improves the model's\ninitialization, leading to better generalization and faster convergence during\nfine-tuning. Metrics like SWA, CWA, and SCHM demonstrate that additional\npretraining enhances the model's ability to capture symbolic patterns, with\nperformance stabilizing after a few fine-tuning epochs. The results suggest that\nthe context-aware contrastive learning framework is effective for the SPR task.", "[]"], "exec_time": [74.50191688537598, 13.134905815124512, 11.254352331161499, 23.45976972579956, 12.381238460540771, 21.804161548614502, 2.545025587081909, 2.2463717460632324, 16.46851634979248, 74.93667030334473, 66.37841844558716, 80.10706162452698, null], "exec_time_feedback": ["", "", "", "", "", "", "", "", "", "", "", "", ""], "datasets_successfully_tested": [["['SPR_BENCH']"], ["[\"SPR\"]"], ["\"\""], ["['SPR_BENCH']"], ["[\"All datasets processed by the code\"]"], ["[\"experiment_data\"]"], [], [], ["['SPR_BENCH']"], ["[\"SPR_BENCH\"]"], ["['SPR_BENCH']"], ["['SPR_BENCH']"], []], "plot_code": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\nruns_dict = experiment_data.get(\"pretrain_epochs\", {}).get(\"SPR_BENCH\", {})\nrun_keys = sorted(runs_dict.keys(), key=lambda x: int(x))  # e.g. ['2','4','6',...]\n\n\n# Helper to pick colors/linestyles that fit within default palette even for many lines\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)], \"-\" if idx < len(colors) else \"--\"\n\n\n# ---------- 1. Pre-training loss curves ----------\ntry:\n    plt.figure()\n    for i, k in enumerate(run_keys):\n        losses = runs_dict[k][\"losses\"].get(\"pretrain\", [])\n        c, ls = _style(i)\n        plt.plot(\n            range(1, len(losses) + 1), losses, label=f\"PT={k}\", color=c, linestyle=ls\n        )\n    plt.title(\"SPR_BENCH: Pre-training Loss vs Epochs\")\n    plt.xlabel(\"Pre-training Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    fname = os.path.join(working_dir, \"SPR_BENCH_pretrain_loss.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating pre-training loss plot: {e}\")\n    plt.close()\n\n# ---------- 2. Fine-tuning loss curves ----------\ntry:\n    plt.figure()\n    for i, k in enumerate(run_keys):\n        losses_train = runs_dict[k][\"losses\"].get(\"train\", [])\n        losses_val = runs_dict[k][\"losses\"].get(\"val\", [])\n        c, _ = _style(i)\n        plt.plot(\n            range(1, len(losses_train) + 1),\n            losses_train,\n            color=c,\n            linestyle=\"-\",\n            label=f\"Train (PT={k})\",\n        )\n        plt.plot(\n            range(1, len(losses_val) + 1),\n            losses_val,\n            color=c,\n            linestyle=\"--\",\n            label=f\"Val (PT={k})\",\n        )\n    plt.title(\"SPR_BENCH: Fine-tuning Loss (Train vs Val)\")\n    plt.xlabel(\"Fine-tuning Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend(ncol=2, fontsize=\"small\")\n    fname = os.path.join(working_dir, \"SPR_BENCH_finetune_loss.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating fine-tuning loss plot: {e}\")\n    plt.close()\n\n\n# ---------- Metric plotting helper ----------\ndef plot_metric(metric_name, file_suffix):\n    try:\n        plt.figure()\n        for i, k in enumerate(run_keys):\n            vals = runs_dict[k][\"metrics\"].get(metric_name, [])\n            c, ls = _style(i)\n            plt.plot(\n                range(1, len(vals) + 1),\n                vals,\n                label=f\"{metric_name} (PT={k})\",\n                color=c,\n                linestyle=ls,\n            )\n        plt.title(f\"SPR_BENCH: {metric_name} across Fine-tuning Epochs\")\n        plt.xlabel(\"Fine-tuning Epoch\")\n        plt.ylabel(metric_name)\n        plt.legend(fontsize=\"small\")\n        fname = os.path.join(working_dir, f\"SPR_BENCH_{file_suffix}.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating {metric_name} plot: {e}\")\n        plt.close()\n\n\n# ---------- 3-5. Metric curves ----------\nplot_metric(\"SWA\", \"SWA_curve\")\nplot_metric(\"CWA\", \"CWA_curve\")\nplot_metric(\"SCHM\", \"SCHM_curve\")\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\n# ---------- paths ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\n\n# ---------- helper ----------\ndef save_plot(fig_name):\n    fname = os.path.join(working_dir, fig_name)\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\n\n\nfor dname, run in experiment_data.items():\n    # ---- 1. pre-training loss ----\n    try:\n        losses = run.get(\"losses\", {}).get(\"pretrain\", [])\n        if losses:\n            plt.figure()\n            plt.plot(range(1, len(losses) + 1), losses, label=\"Pre-train\")\n            plt.title(f\"{dname}: Pre-training Loss\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"Loss\")\n            plt.legend()\n            save_plot(f\"{dname}_pretrain_loss.png\")\n    except Exception as e:\n        print(f\"Error plotting pretrain loss for {dname}: {e}\")\n        plt.close()\n\n    # ---- 2. fine-tuning loss ----\n    try:\n        tr = run.get(\"losses\", {}).get(\"train\", [])\n        vl = run.get(\"losses\", {}).get(\"val\", [])\n        if tr or vl:\n            plt.figure()\n            if tr:\n                plt.plot(range(1, len(tr) + 1), tr, label=\"Train\")\n            if vl:\n                plt.plot(range(1, len(vl) + 1), vl, label=\"Val\")\n            plt.title(f\"{dname}: Fine-tuning Loss\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"Loss\")\n            plt.legend()\n            save_plot(f\"{dname}_finetune_loss.png\")\n    except Exception as e:\n        print(f\"Error plotting finetune loss for {dname}: {e}\")\n        plt.close()\n\n    # ---- 3-5. metric curves (at most three) ----\n    metric_list = [\"SWA\", \"CWA\", \"CompWA\"]\n    metrics_per_epoch = run.get(\"metrics\", {}).get(\"val\", [])\n    for met in metric_list:\n        try:\n            vals = [ep.get(met) for ep in metrics_per_epoch if ep.get(met) is not None]\n            if vals:\n                plt.figure()\n                plt.plot(range(1, len(vals) + 1), vals, label=met)\n                plt.title(f\"{dname}: {met} (Validation)\")\n                plt.xlabel(\"Fine-tuning Epoch\")\n                plt.ylabel(met)\n                plt.legend()\n                save_plot(f\"{dname}_{met}_curve.png\")\n        except Exception as e:\n            print(f\"Error plotting {met} for {dname}: {e}\")\n            plt.close()\n\n    # ---- simple final accuracy printout ----\n    try:\n        preds = np.array(run.get(\"predictions\", []))\n        gtruth = np.array(run.get(\"ground_truth\", []))\n        if len(preds) == len(gtruth) and len(preds):\n            acc = (preds == gtruth).mean()\n            print(f\"{dname}: final accuracy = {acc:.3f}\")\n    except Exception as e:\n        print(f\"Error computing accuracy for {dname}: {e}\")\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\n\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)], \"-\" if idx < len(colors) else \"--\"\n\n\nfor d_idx, (ds, ddict) in enumerate(experiment_data.items()):\n    losses = ddict.get(\"losses\", {})\n    metrics_val = ddict.get(\"metrics\", {}).get(\"val\", [])\n    swa = [t[0] for t in metrics_val] if metrics_val else []\n    cwa = [t[1] for t in metrics_val] if metrics_val else []\n    comp = [t[2] for t in metrics_val] if metrics_val else []\n\n    # 1. pre-training loss\n    try:\n        if losses.get(\"pretrain\"):\n            plt.figure()\n            plt.plot(\n                range(1, len(losses[\"pretrain\"]) + 1),\n                losses[\"pretrain\"],\n                label=\"Pre-train\",\n                color=_style(d_idx)[0],\n            )\n            plt.title(f\"{ds}: Pre-training Loss vs Epochs\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"Loss\")\n            plt.legend()\n            fname = os.path.join(working_dir, f\"{ds}_pretrain_loss.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating pre-training loss plot for {ds}: {e}\")\n        plt.close()\n\n    # 2. fine-tuning loss\n    try:\n        if losses.get(\"train\") or losses.get(\"val\"):\n            plt.figure()\n            if losses.get(\"train\"):\n                plt.plot(\n                    range(1, len(losses[\"train\"]) + 1),\n                    losses[\"train\"],\n                    label=\"Train\",\n                    color=_style(d_idx)[0],\n                    linestyle=\"-\",\n                )\n            if losses.get(\"val\"):\n                plt.plot(\n                    range(1, len(losses[\"val\"]) + 1),\n                    losses[\"val\"],\n                    label=\"Val\",\n                    color=_style(d_idx)[0],\n                    linestyle=\"--\",\n                )\n            plt.title(f\"{ds}: Fine-tuning Loss (Train vs Val)\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"Loss\")\n            plt.legend()\n            fname = os.path.join(working_dir, f\"{ds}_finetune_loss.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating fine-tuning loss plot for {ds}: {e}\")\n        plt.close()\n\n    # helper for metric curves\n    def _plot_metric(values, metric_name, file_suffix):\n        try:\n            if values:\n                plt.figure()\n                plt.plot(\n                    range(1, len(values) + 1),\n                    values,\n                    label=metric_name,\n                    color=_style(d_idx)[0],\n                )\n                plt.title(f\"{ds}: {metric_name} across Fine-tuning Epochs\")\n                plt.xlabel(\"Epoch\")\n                plt.ylabel(metric_name)\n                plt.legend()\n                fname = os.path.join(working_dir, f\"{ds}_{file_suffix}.png\")\n                plt.savefig(fname)\n                print(f\"Saved {fname}\")\n            plt.close()\n        except Exception as e:\n            print(f\"Error creating {metric_name} plot for {ds}: {e}\")\n            plt.close()\n\n    # 3-5. metric curves\n    _plot_metric(swa, \"SWA\", \"SWA_curve\")\n    _plot_metric(cwa, \"CWA\", \"CWA_curve\")\n    _plot_metric(comp, \"CompWA\", \"CompWA_curve\")\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\nspr = experiment_data.get(\"SPR_BENCH\", {})\n\n\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)], \"-\" if idx < len(colors) else \"--\"\n\n\n# 1. Pre-training loss curve\ntry:\n    losses_pt = spr.get(\"losses\", {}).get(\"pretrain\", [])\n    if losses_pt:\n        plt.figure()\n        plt.plot(range(1, len(losses_pt) + 1), losses_pt, label=\"pretrain\")\n        plt.title(\"SPR_BENCH: Pre-training Loss vs Epochs\")\n        plt.xlabel(\"Pre-training Epoch\")\n        plt.ylabel(\"Loss\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_pretrain_loss.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\nexcept Exception as e:\n    print(f\"Error creating pre-training loss plot: {e}\")\n    plt.close()\n\n# 2. Fine-tuning train/val loss\ntry:\n    tr = spr.get(\"losses\", {}).get(\"train\", [])\n    vl = spr.get(\"losses\", {}).get(\"val\", [])\n    if tr or vl:\n        plt.figure()\n        if tr:\n            plt.plot(range(1, len(tr) + 1), tr, label=\"train\", linestyle=\"-\")\n        if vl:\n            plt.plot(range(1, len(vl) + 1), vl, label=\"val\", linestyle=\"--\")\n        plt.title(\"SPR_BENCH: Fine-tuning Loss\")\n        plt.xlabel(\"Fine-tuning Epoch\")\n        plt.ylabel(\"Loss\")\n        plt.legend()\n        fname = os.path.join(working_dir, \"SPR_BENCH_finetune_loss.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\nexcept Exception as e:\n    print(f\"Error creating fine-tuning loss plot: {e}\")\n    plt.close()\n\n\n# Helper to plot metric curves\ndef plot_metric(metric_key, pretty_name):\n    try:\n        vals = [\n            d.get(metric_key)\n            for d in spr.get(\"metrics\", {}).get(\"val\", [])\n            if metric_key in d\n        ]\n        if vals:\n            plt.figure()\n            plt.plot(range(1, len(vals) + 1), vals, label=pretty_name)\n            plt.title(f\"SPR_BENCH: {pretty_name} vs Fine-tuning Epochs\")\n            plt.xlabel(\"Fine-tuning Epoch\")\n            plt.ylabel(pretty_name)\n            plt.legend()\n            fname = os.path.join(working_dir, f\"SPR_BENCH_{metric_key}_curve.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n            plt.close()\n    except Exception as e:\n        print(f\"Error creating {pretty_name} plot: {e}\")\n        plt.close()\n\n\n# 3\u20135. Metric curves\nplot_metric(\"SWA\", \"Shape-Weighted Accuracy\")\nplot_metric(\"CWA\", \"Color-Weighted Accuracy\")\nplot_metric(\"CompWA\", \"Complexity-Weighted Accuracy\")\n\n# 6. Confusion matrix (optional fifth figure, only if data present)\ntry:\n    preds = np.array(spr.get(\"predictions\", []))\n    gts = np.array(spr.get(\"ground_truth\", []))\n    if preds.size and gts.size and preds.shape == gts.shape:\n        classes = np.unique(np.concatenate([preds, gts]))\n        cm = np.zeros((classes.size, classes.size), dtype=int)\n        for p, t in zip(preds, gts):\n            i = np.where(classes == t)[0][0]\n            j = np.where(classes == p)[0][0]\n            cm[i, j] += 1\n        plt.figure(figsize=(6, 5))\n        im = plt.imshow(cm, cmap=\"Blues\")\n        plt.colorbar(im, fraction=0.046, pad=0.04)\n        plt.xlabel(\"Predicted\")\n        plt.ylabel(\"Ground Truth\")\n        plt.title(\"SPR_BENCH: Confusion Matrix\")\n        plt.xticks(range(classes.size), classes, rotation=45)\n        plt.yticks(range(classes.size), classes)\n        fname = os.path.join(working_dir, \"SPR_BENCH_confusion_matrix.png\")\n        plt.savefig(fname, bbox_inches=\"tight\")\n        print(f\"Saved {fname}\")\n        plt.close()\nexcept Exception as e:\n    print(f\"Error creating confusion matrix plot: {e}\")\n    plt.close()\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\n# ---------- setup ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\n\n# ---------- simple colour/linestyle helper ----------\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)], \"-\" if idx < len(colors) else \"--\"\n\n\n# ---------- iterate over datasets ----------\nfor ds_idx, (ds_name, ds_dict) in enumerate(experiment_data.items()):\n    losses = ds_dict.get(\"losses\", {})\n    metrics_train = ds_dict.get(\"metrics\", {}).get(\"train\", [])\n    metrics_val = ds_dict.get(\"metrics\", {}).get(\"val\", [])\n\n    # --- 1. Pre-training loss ---\n    try:\n        plt.figure()\n        pre = losses.get(\"pretrain\", [])\n        if pre:\n            plt.plot(\n                range(1, len(pre) + 1), pre, label=\"Pre-train loss\", color=_style(0)[0]\n            )\n            plt.title(f\"{ds_name}: Pre-training Loss vs Epochs\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"Loss\")\n            plt.legend()\n            fname = os.path.join(working_dir, f\"{ds_name}_pretrain_loss.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating pre-training loss plot for {ds_name}: {e}\")\n        plt.close()\n\n    # --- 2. Fine-tuning losses ---\n    try:\n        plt.figure()\n        tr, val = losses.get(\"train\", []), losses.get(\"val\", [])\n        if tr:\n            plt.plot(\n                range(1, len(tr) + 1),\n                tr,\n                label=\"Train\",\n                color=_style(0)[0],\n                linestyle=\"-\",\n            )\n        if val:\n            plt.plot(\n                range(1, len(val) + 1),\n                val,\n                label=\"Val\",\n                color=_style(0)[0],\n                linestyle=\"--\",\n            )\n        if tr or val:\n            plt.title(f\"{ds_name}: Fine-tuning Loss (Train vs Val)\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"Loss\")\n            plt.legend()\n            fname = os.path.join(working_dir, f\"{ds_name}_finetune_loss.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating fine-tuning loss plot for {ds_name}: {e}\")\n        plt.close()\n\n    # helper to extract metric list safely\n    def _metric_from_list(lst, key):\n        return [d.get(key) for d in lst if key in d]\n\n    # --- 3. SWA ---\n    try:\n        swa = _metric_from_list(metrics_val, \"swa\")\n        if swa:\n            plt.figure()\n            plt.plot(range(1, len(swa) + 1), swa, label=\"SWA\", color=_style(0)[0])\n            plt.title(f\"{ds_name}: Shape-Weighted Accuracy\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"SWA\")\n            plt.legend()\n            fname = os.path.join(working_dir, f\"{ds_name}_SWA_curve.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n            plt.close()\n    except Exception as e:\n        print(f\"Error creating SWA plot for {ds_name}: {e}\")\n        plt.close()\n\n    # --- 4. CWA ---\n    try:\n        cwa = _metric_from_list(metrics_val, \"cwa\")\n        if cwa:\n            plt.figure()\n            plt.plot(range(1, len(cwa) + 1), cwa, label=\"CWA\", color=_style(1)[0])\n            plt.title(f\"{ds_name}: Color-Weighted Accuracy\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"CWA\")\n            plt.legend()\n            fname = os.path.join(working_dir, f\"{ds_name}_CWA_curve.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n            plt.close()\n    except Exception as e:\n        print(f\"Error creating CWA plot for {ds_name}: {e}\")\n        plt.close()\n\n    # --- 5. Complexity-Weighted Accuracy ---\n    try:\n        comp = _metric_from_list(metrics_val, \"comp\")\n        if comp:\n            plt.figure()\n            plt.plot(range(1, len(comp) + 1), comp, label=\"CompWA\", color=_style(2)[0])\n            plt.title(f\"{ds_name}: Complexity-Weighted Accuracy\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(\"CompWA\")\n            plt.legend()\n            fname = os.path.join(working_dir, f\"{ds_name}_CompWA_curve.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n            plt.close()\n    except Exception as e:\n        print(f\"Error creating CompWA plot for {ds_name}: {e}\")\n        plt.close()\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------------- load data -----------------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\n\n# ---------- helpers ----------\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)], \"-\" if idx < len(colors) else \"--\"\n\n\n# -------- iterate datasets ------------\nfor d_idx, (dname, dct) in enumerate(experiment_data.items()):\n    losses = dct.get(\"losses\", {})\n    metrics_list = dct.get(\"metrics\", {}).get(\"val\", [])\n\n    # 1. pre-training loss\n    try:\n        plt.figure()\n        plt.plot(\n            range(1, len(losses.get(\"pretrain\", [])) + 1),\n            losses.get(\"pretrain\", []),\n            color=_style(d_idx)[0],\n            linestyle=\"-\",\n        )\n        plt.title(f\"{dname}: Pre-training Loss\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Loss\")\n        fname = os.path.join(working_dir, f\"{dname}_pretrain_loss.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error pretrain plot ({dname}): {e}\")\n        plt.close()\n\n    # 2. fine-tune train/val losses\n    try:\n        plt.figure()\n        tr, val = losses.get(\"train\", []), losses.get(\"val\", [])\n        plt.plot(\n            range(1, len(tr) + 1),\n            tr,\n            label=\"Train\",\n            color=_style(d_idx)[0],\n            linestyle=\"-\",\n        )\n        plt.plot(\n            range(1, len(val) + 1),\n            val,\n            label=\"Val\",\n            color=_style(d_idx)[0],\n            linestyle=\"--\",\n        )\n        plt.title(f\"{dname}: Fine-tuning Loss\")\n        plt.xlabel(\"Epoch\")\n        plt.ylabel(\"Loss\")\n        plt.legend()\n        fname = os.path.join(working_dir, f\"{dname}_finetune_loss.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error finetune plot ({dname}): {e}\")\n        plt.close()\n\n    # helper to extract metric curves\n    def _metric_curve(key):\n        return [m.get(key, np.nan) for m in metrics_list]\n\n    # 3-5. metric curves\n    for m_key, suffix in [(\"SWA\", \"SWA\"), (\"CWA\", \"CWA\"), (\"CompWA\", \"CompWA\")]:\n        try:\n            vals = _metric_curve(m_key)\n            if not vals:  # skip if empty\n                continue\n            plt.figure()\n            plt.plot(\n                range(1, len(vals) + 1), vals, color=_style(d_idx)[0], linestyle=\"-\"\n            )\n            plt.title(f\"{dname}: {m_key} vs Epochs\")\n            plt.xlabel(\"Epoch\")\n            plt.ylabel(m_key)\n            fname = os.path.join(working_dir, f\"{dname}_{suffix}_curve.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n            plt.close()\n        except Exception as e:\n            print(f\"Error {m_key} plot ({dname}): {e}\")\n            plt.close()\n\n    # print final-epoch metrics for quick inspection\n    if metrics_list:\n        print(f\"{dname} final metrics:\", metrics_list[-1])\n", null, null, "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\n# ---------- setup ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\nds_name = \"SPR_BENCH\"\nds = experiment_data.get(ds_name, {})\n\nmetrics = ds.get(\"metrics\", {})\npreds = np.array(ds.get(\"predictions\", []))\ngts = np.array(ds.get(\"ground_truth\", []))\n\n# ---------- 1. Train vs Val loss ----------\ntry:\n    plt.figure()\n    epochs = np.arange(1, len(metrics.get(\"train_loss\", [])) + 1)\n    plt.plot(epochs, metrics.get(\"train_loss\", []), label=\"Train Loss\")\n    plt.plot(epochs, metrics.get(\"val_loss\", []), label=\"Val Loss\")\n    plt.title(f\"{ds_name}: Loss Curves\\nTrain vs Validation\")\n    plt.xlabel(\"Fine-tuning Epoch\")\n    plt.ylabel(\"Cross-Entropy Loss\")\n    plt.legend()\n    fname = os.path.join(working_dir, f\"{ds_name}_loss_curves.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error plotting loss curves: {e}\")\n    plt.close()\n\n# ---------- 2. Weighted-accuracy curves ----------\ntry:\n    plt.figure()\n    for key, lab in zip(\n        [\"SWA\", \"CWA\", \"CompWA\"],\n        [\"Shape-Wtd Acc\", \"Color-Wtd Acc\", \"Complex-Wtd Acc\"],\n    ):\n        vals = metrics.get(key, [])\n        if vals:\n            plt.plot(range(1, len(vals) + 1), vals, label=lab)\n    plt.title(f\"{ds_name}: Weighted Accuracy Curves\\nSWA / CWA / CompWA\")\n    plt.xlabel(\"Fine-tuning Epoch\")\n    plt.ylabel(\"Weighted Accuracy\")\n    plt.ylim(0, 1)\n    plt.legend()\n    fname = os.path.join(working_dir, f\"{ds_name}_weighted_accuracy_curves.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error plotting accuracy curves: {e}\")\n    plt.close()\n\n# ---------- 3. Confusion matrix ----------\ntry:\n    if preds.size and gts.size:\n        from sklearn.metrics import confusion_matrix\n\n        cm = confusion_matrix(gts, preds)\n        plt.figure()\n        im = plt.imshow(cm, cmap=\"Blues\")\n        plt.colorbar(im)\n        for i in range(cm.shape[0]):\n            for j in range(cm.shape[1]):\n                plt.text(j, i, cm[i, j], ha=\"center\", va=\"center\", color=\"black\")\n        plt.title(f\"{ds_name}: Confusion Matrix\\nLeft: Ground Truth, Top: Predictions\")\n        plt.xlabel(\"Predicted Label\")\n        plt.ylabel(\"True Label\")\n        fname = os.path.join(working_dir, f\"{ds_name}_confusion_matrix.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n        print(\"Confusion Matrix:\\n\", cm)\n    else:\n        print(\"No predictions/ground-truth found; skipping confusion matrix.\")\nexcept Exception as e:\n    print(f\"Error plotting confusion matrix: {e}\")\n    plt.close()\n\n# ---------- print final metrics ----------\nif metrics.get(\"SWA\"):\n    print(\n        f\"Final SWA={metrics['SWA'][-1]:.3f}, \"\n        f\"CWA={metrics['CWA'][-1]:.3f}, \"\n        f\"CompWA={metrics['CompWA'][-1]:.3f}\"\n    )\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\nruns_dict = experiment_data.get(\"pretrain_epochs\", {}).get(\"SPR_BENCH\", {})\nrun_keys = sorted(runs_dict.keys(), key=lambda x: int(x))  # e.g. ['2','4','6',...]\n\n\n# Helper to pick colors/linestyles that fit within default palette even for many lines\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)], \"-\" if idx < len(colors) else \"--\"\n\n\n# ---------- 1. Pre-training loss curves ----------\ntry:\n    plt.figure()\n    for i, k in enumerate(run_keys):\n        losses = runs_dict[k][\"losses\"].get(\"pretrain\", [])\n        c, ls = _style(i)\n        plt.plot(\n            range(1, len(losses) + 1), losses, label=f\"PT={k}\", color=c, linestyle=ls\n        )\n    plt.title(\"SPR_BENCH: Pre-training Loss vs Epochs\")\n    plt.xlabel(\"Pre-training Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    fname = os.path.join(working_dir, \"SPR_BENCH_pretrain_loss.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating pre-training loss plot: {e}\")\n    plt.close()\n\n# ---------- 2. Fine-tuning loss curves ----------\ntry:\n    plt.figure()\n    for i, k in enumerate(run_keys):\n        losses_train = runs_dict[k][\"losses\"].get(\"train\", [])\n        losses_val = runs_dict[k][\"losses\"].get(\"val\", [])\n        c, _ = _style(i)\n        plt.plot(\n            range(1, len(losses_train) + 1),\n            losses_train,\n            color=c,\n            linestyle=\"-\",\n            label=f\"Train (PT={k})\",\n        )\n        plt.plot(\n            range(1, len(losses_val) + 1),\n            losses_val,\n            color=c,\n            linestyle=\"--\",\n            label=f\"Val (PT={k})\",\n        )\n    plt.title(\"SPR_BENCH: Fine-tuning Loss (Train vs Val)\")\n    plt.xlabel(\"Fine-tuning Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend(ncol=2, fontsize=\"small\")\n    fname = os.path.join(working_dir, \"SPR_BENCH_finetune_loss.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating fine-tuning loss plot: {e}\")\n    plt.close()\n\n\n# ---------- Metric plotting helper ----------\ndef plot_metric(metric_name, file_suffix):\n    try:\n        plt.figure()\n        for i, k in enumerate(run_keys):\n            vals = runs_dict[k][\"metrics\"].get(metric_name, [])\n            c, ls = _style(i)\n            plt.plot(\n                range(1, len(vals) + 1),\n                vals,\n                label=f\"{metric_name} (PT={k})\",\n                color=c,\n                linestyle=ls,\n            )\n        plt.title(f\"SPR_BENCH: {metric_name} across Fine-tuning Epochs\")\n        plt.xlabel(\"Fine-tuning Epoch\")\n        plt.ylabel(metric_name)\n        plt.legend(fontsize=\"small\")\n        fname = os.path.join(working_dir, f\"SPR_BENCH_{file_suffix}.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating {metric_name} plot: {e}\")\n        plt.close()\n\n\n# ---------- 3-5. Metric curves ----------\nplot_metric(\"SWA\", \"SWA_curve\")\nplot_metric(\"CWA\", \"CWA_curve\")\nplot_metric(\"SCHM\", \"SCHM_curve\")\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\nruns_dict = experiment_data.get(\"pretrain_epochs\", {}).get(\"SPR_BENCH\", {})\nrun_keys = sorted(runs_dict.keys(), key=lambda x: int(x))  # e.g. ['2','4','6',...]\n\n\n# Helper to pick colors/linestyles that fit within default palette even for many lines\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)], \"-\" if idx < len(colors) else \"--\"\n\n\n# ---------- 1. Pre-training loss curves ----------\ntry:\n    plt.figure()\n    for i, k in enumerate(run_keys):\n        losses = runs_dict[k][\"losses\"].get(\"pretrain\", [])\n        c, ls = _style(i)\n        plt.plot(\n            range(1, len(losses) + 1), losses, label=f\"PT={k}\", color=c, linestyle=ls\n        )\n    plt.title(\"SPR_BENCH: Pre-training Loss vs Epochs\")\n    plt.xlabel(\"Pre-training Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    fname = os.path.join(working_dir, \"SPR_BENCH_pretrain_loss.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating pre-training loss plot: {e}\")\n    plt.close()\n\n# ---------- 2. Fine-tuning loss curves ----------\ntry:\n    plt.figure()\n    for i, k in enumerate(run_keys):\n        losses_train = runs_dict[k][\"losses\"].get(\"train\", [])\n        losses_val = runs_dict[k][\"losses\"].get(\"val\", [])\n        c, _ = _style(i)\n        plt.plot(\n            range(1, len(losses_train) + 1),\n            losses_train,\n            color=c,\n            linestyle=\"-\",\n            label=f\"Train (PT={k})\",\n        )\n        plt.plot(\n            range(1, len(losses_val) + 1),\n            losses_val,\n            color=c,\n            linestyle=\"--\",\n            label=f\"Val (PT={k})\",\n        )\n    plt.title(\"SPR_BENCH: Fine-tuning Loss (Train vs Val)\")\n    plt.xlabel(\"Fine-tuning Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend(ncol=2, fontsize=\"small\")\n    fname = os.path.join(working_dir, \"SPR_BENCH_finetune_loss.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating fine-tuning loss plot: {e}\")\n    plt.close()\n\n\n# ---------- Metric plotting helper ----------\ndef plot_metric(metric_name, file_suffix):\n    try:\n        plt.figure()\n        for i, k in enumerate(run_keys):\n            vals = runs_dict[k][\"metrics\"].get(metric_name, [])\n            c, ls = _style(i)\n            plt.plot(\n                range(1, len(vals) + 1),\n                vals,\n                label=f\"{metric_name} (PT={k})\",\n                color=c,\n                linestyle=ls,\n            )\n        plt.title(f\"SPR_BENCH: {metric_name} across Fine-tuning Epochs\")\n        plt.xlabel(\"Fine-tuning Epoch\")\n        plt.ylabel(metric_name)\n        plt.legend(fontsize=\"small\")\n        fname = os.path.join(working_dir, f\"SPR_BENCH_{file_suffix}.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating {metric_name} plot: {e}\")\n        plt.close()\n\n\n# ---------- 3-5. Metric curves ----------\nplot_metric(\"SWA\", \"SWA_curve\")\nplot_metric(\"CWA\", \"CWA_curve\")\nplot_metric(\"SCHM\", \"SCHM_curve\")\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load data ----------\ntry:\n    experiment_data = np.load(\n        os.path.join(working_dir, \"experiment_data.npy\"), allow_pickle=True\n    ).item()\nexcept Exception as e:\n    print(f\"Error loading experiment data: {e}\")\n    experiment_data = {}\n\nruns_dict = experiment_data.get(\"pretrain_epochs\", {}).get(\"SPR_BENCH\", {})\nrun_keys = sorted(runs_dict.keys(), key=lambda x: int(x))  # e.g. ['2','4','6',...]\n\n\n# Helper to pick colors/linestyles that fit within default palette even for many lines\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)], \"-\" if idx < len(colors) else \"--\"\n\n\n# ---------- 1. Pre-training loss curves ----------\ntry:\n    plt.figure()\n    for i, k in enumerate(run_keys):\n        losses = runs_dict[k][\"losses\"].get(\"pretrain\", [])\n        c, ls = _style(i)\n        plt.plot(\n            range(1, len(losses) + 1), losses, label=f\"PT={k}\", color=c, linestyle=ls\n        )\n    plt.title(\"SPR_BENCH: Pre-training Loss vs Epochs\")\n    plt.xlabel(\"Pre-training Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    fname = os.path.join(working_dir, \"SPR_BENCH_pretrain_loss.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating pre-training loss plot: {e}\")\n    plt.close()\n\n# ---------- 2. Fine-tuning loss curves ----------\ntry:\n    plt.figure()\n    for i, k in enumerate(run_keys):\n        losses_train = runs_dict[k][\"losses\"].get(\"train\", [])\n        losses_val = runs_dict[k][\"losses\"].get(\"val\", [])\n        c, _ = _style(i)\n        plt.plot(\n            range(1, len(losses_train) + 1),\n            losses_train,\n            color=c,\n            linestyle=\"-\",\n            label=f\"Train (PT={k})\",\n        )\n        plt.plot(\n            range(1, len(losses_val) + 1),\n            losses_val,\n            color=c,\n            linestyle=\"--\",\n            label=f\"Val (PT={k})\",\n        )\n    plt.title(\"SPR_BENCH: Fine-tuning Loss (Train vs Val)\")\n    plt.xlabel(\"Fine-tuning Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend(ncol=2, fontsize=\"small\")\n    fname = os.path.join(working_dir, \"SPR_BENCH_finetune_loss.png\")\n    plt.savefig(fname)\n    print(f\"Saved {fname}\")\n    plt.close()\nexcept Exception as e:\n    print(f\"Error creating fine-tuning loss plot: {e}\")\n    plt.close()\n\n\n# ---------- Metric plotting helper ----------\ndef plot_metric(metric_name, file_suffix):\n    try:\n        plt.figure()\n        for i, k in enumerate(run_keys):\n            vals = runs_dict[k][\"metrics\"].get(metric_name, [])\n            c, ls = _style(i)\n            plt.plot(\n                range(1, len(vals) + 1),\n                vals,\n                label=f\"{metric_name} (PT={k})\",\n                color=c,\n                linestyle=ls,\n            )\n        plt.title(f\"SPR_BENCH: {metric_name} across Fine-tuning Epochs\")\n        plt.xlabel(\"Fine-tuning Epoch\")\n        plt.ylabel(metric_name)\n        plt.legend(fontsize=\"small\")\n        fname = os.path.join(working_dir, f\"SPR_BENCH_{file_suffix}.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating {metric_name} plot: {e}\")\n        plt.close()\n\n\n# ---------- 3-5. Metric curves ----------\nplot_metric(\"SWA\", \"SWA_curve\")\nplot_metric(\"CWA\", \"CWA_curve\")\nplot_metric(\"SCHM\", \"SCHM_curve\")\n", "import matplotlib.pyplot as plt\nimport numpy as np\nimport os\n\n# ---------- basic setup ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nos.makedirs(working_dir, exist_ok=True)\n\n# ---------- load all experiment_data.npy files ----------\nexperiment_data_path_list = [\n    \"experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_dec6e9079e9f493a9aa826d4379752bb_proc_2997849/experiment_data.npy\",\n    \"experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_8e6554cf551945fe8e4b7d0a11871810_proc_2997847/experiment_data.npy\",\n    \"experiments/2025-08-15_22-24-43_context_aware_contrastive_learning_attempt_0/logs/0-run/experiment_results/experiment_707f2681341f44389f0c8f9cfef7a073_proc_2997848/experiment_data.npy\",\n]\n\nall_experiment_data = []\nfor p in experiment_data_path_list:\n    try:\n        ed = np.load(\n            os.path.join(os.getenv(\"AI_SCIENTIST_ROOT\", \"\"), p), allow_pickle=True\n        ).item()\n        all_experiment_data.append(ed)\n    except Exception as e:\n        print(f\"Error loading {p}: {e}\")\n\n\n# ---------- aggregation helpers ----------\ndef pad_to_same_length(arr_list, pad_val=np.nan):\n    max_len = max(len(a) for a in arr_list)\n    padded = []\n    for a in arr_list:\n        pad_size = max_len - len(a)\n        if pad_size:\n            padded.append(np.concatenate([a, np.full(pad_size, pad_val)]))\n        else:\n            padded.append(np.asarray(a))\n    return np.vstack(padded)\n\n\ndef mean_se(arr_2d):\n    mean = np.nanmean(arr_2d, axis=0)\n    se = np.nanstd(arr_2d, axis=0, ddof=1) / np.sqrt(np.sum(~np.isnan(arr_2d), axis=0))\n    return mean, se\n\n\n# aggregated[dset][pt_k]['losses'|'metrics'][name] = 2-tuple (mean, se)\naggregated = {}\n\nfor ed in all_experiment_data:\n    for dset, runs_dict in ed.get(\"pretrain_epochs\", {}).items():\n        ds_agg = aggregated.setdefault(dset, {})\n        for k, run in runs_dict.items():\n            k_agg = ds_agg.setdefault(k, {\"losses\": {}, \"metrics\": {}})\n            # ------ losses ------\n            for split, losses in run.get(\n                \"losses\", {}\n            ).items():  # pretrain / train / val\n                k_agg[\"losses\"].setdefault(split, []).append(\n                    np.asarray(losses, dtype=float)\n                )\n            # ------ metrics ------\n            for m_name, vals in run.get(\"metrics\", {}).items():\n                k_agg[\"metrics\"].setdefault(m_name, []).append(\n                    np.asarray(vals, dtype=float)\n                )\n\n# convert lists to (mean,se)\nfor dset in aggregated:\n    for k in aggregated[dset]:\n        # losses\n        for split, lst in aggregated[dset][k][\"losses\"].items():\n            arr = pad_to_same_length(lst)\n            aggregated[dset][k][\"losses\"][split] = mean_se(arr)\n        # metrics\n        for m_name, lst in aggregated[dset][k][\"metrics\"].items():\n            arr = pad_to_same_length(lst)\n            aggregated[dset][k][\"metrics\"][m_name] = mean_se(arr)\n\n\n# --------- plotting style helper ----------\ndef _style(idx):\n    colors = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n    return colors[idx % len(colors)]\n\n\n# --------- generate plots ----------\nfor dset, ds_dict in aggregated.items():\n    run_keys = sorted(ds_dict.keys(), key=lambda x: int(x))  # e.g. ['2','4',...]\n\n    # 1. aggregated pre-training loss\n    try:\n        plt.figure()\n        for i, k in enumerate(run_keys):\n            mean, se = ds_dict[k][\"losses\"].get(\"pretrain\", (None, None))\n            if mean is None:\n                continue\n            epochs = np.arange(1, len(mean) + 1)\n            c = _style(i)\n            plt.plot(epochs, mean, color=c, label=f\"Mean PT={k}\")\n            plt.fill_between(\n                epochs, mean - se, mean + se, color=c, alpha=0.25, label=f\"SE PT={k}\"\n            )\n        plt.title(f\"{dset}: Pre-training Loss (Mean \u00b1 SE)\")\n        plt.xlabel(\"Pre-training Epoch\")\n        plt.ylabel(\"Loss\")\n        plt.legend(fontsize=\"small\", ncol=2)\n        fname = os.path.join(working_dir, f\"{dset}_pretrain_loss_agg.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating aggregated pre-training loss plot: {e}\")\n        plt.close()\n\n    # 2. aggregated fine-tuning loss (train/val)\n    try:\n        plt.figure()\n        ls_map = {\"train\": \"-\", \"val\": \"--\"}\n        for i, k in enumerate(run_keys):\n            for split in [\"train\", \"val\"]:\n                if split not in ds_dict[k][\"losses\"]:\n                    continue\n                mean, se = ds_dict[k][\"losses\"][split]\n                epochs = np.arange(1, len(mean) + 1)\n                c = _style(i)\n                plt.plot(\n                    epochs,\n                    mean,\n                    color=c,\n                    linestyle=ls_map[split],\n                    label=f\"{split.capitalize()} PT={k}\",\n                )\n                plt.fill_between(epochs, mean - se, mean + se, color=c, alpha=0.25)\n        plt.title(f\"{dset}: Fine-tuning Loss (Mean \u00b1 SE)\")\n        plt.xlabel(\"Fine-tuning Epoch\")\n        plt.ylabel(\"Loss\")\n        plt.legend(fontsize=\"small\", ncol=2)\n        fname = os.path.join(working_dir, f\"{dset}_finetune_loss_agg.png\")\n        plt.savefig(fname)\n        print(f\"Saved {fname}\")\n        plt.close()\n    except Exception as e:\n        print(f\"Error creating aggregated fine-tune loss plot: {e}\")\n        plt.close()\n\n    # 3+. aggregated metrics\n    metric_names = set()\n    for k in run_keys:\n        metric_names.update(ds_dict[k][\"metrics\"].keys())\n\n    for m_name in metric_names:\n        try:\n            plt.figure()\n            for i, k in enumerate(run_keys):\n                if m_name not in ds_dict[k][\"metrics\"]:\n                    continue\n                mean, se = ds_dict[k][\"metrics\"][m_name]\n                epochs = np.arange(1, len(mean) + 1)\n                c = _style(i)\n                plt.plot(epochs, mean, color=c, label=f\"Mean PT={k}\")\n                plt.fill_between(\n                    epochs,\n                    mean - se,\n                    mean + se,\n                    color=c,\n                    alpha=0.25,\n                    label=f\"SE PT={k}\" if i == 0 else None,\n                )\n                # print last epoch stats\n                final_mean, final_se = mean[-1], se[-1]\n                print(\n                    f\"{dset} | {m_name} | PT={k} | final mean\u00b1SE: {final_mean:.4f} \u00b1 {final_se:.4f}\"\n                )\n            plt.title(f\"{dset}: {m_name} (Mean \u00b1 SE) across Fine-tuning Epochs\")\n            plt.xlabel(\"Fine-tuning Epoch\")\n            plt.ylabel(m_name)\n            plt.legend(fontsize=\"small\")\n            fname = os.path.join(working_dir, f\"{dset}_{m_name}_agg.png\")\n            plt.savefig(fname)\n            print(f\"Saved {fname}\")\n            plt.close()\n        except Exception as e:\n            print(f\"Error creating aggregated {m_name} plot: {e}\")\n            plt.close()\n"], "plot_plan": ["We will first load experiment_data.npy from the working directory and extract the dictionary stored inside. From it we gather the list of runs (different pre-training epoch settings) then, for each run, obtain arrays for pre-training losses, fine-tuning train/validation losses and the three metrics (SWA, CWA, SCHM). We aggregate these so we can overlay several runs on the same figure, keeping the number of plots \u2264 5. In total we will create five figures: (1) pre-training loss curves, (2) fine-tuning train/val loss curves, and (3-5) one figure for each metric across fine-tuning epochs. Every figure is wrapped in its own try-except block, uses a clear title referencing SPR_BENCH, employs descriptive subtitles where helpful, and is saved to working_dir with informative filenames. We respect the requirement to plot only existing data, close every figure in both normal and error cases, and refrain from drawing more than one figure per metric type. Finally, the script prints confirmation statements indicating where each plot was saved.", "We load the saved numpy dictionary, loop over each dataset entry and, for any data that is actually present, build up to five core plots: (1) pre-training loss, (2) fine-tuning loss (train/val), and (3-5) the three validation metrics SWA, CWA, and CompWA.  Each plot is wrapped in its own try-except so a failure in one does not cancel the rest, uses a clear title that includes the dataset name, and is saved in the working directory with descriptive filenames.  We also compute a simple final accuracy from the stored predictions/ground-truth lists and print it so the user can see a scalar evaluation straight from the script.  Figures are always closed to free memory.  If some field is missing we simply skip the corresponding graph.  No fabricated values are introduced; everything comes straight from experiment_data.npy.  The whole workflow is self-contained, relies only on matplotlib/numpy/os, produces at most five figures per dataset, and follows the required directory and naming conventions.  Finally, the script prints all computed accuracies so they are visible in the notebook/stdout.", "We first load experiment_data.npy and loop over each dataset key (currently only \u201cSPR_BENCH\u201d).  \nFor every dataset we extract the stored lists: losses[\"pretrain\"], losses[\"train\"], losses[\"val\"] and metrics[\"val\"] whose tuples contain (SWA, CWA, CompWA).  \nUsing a small helper _style() we keep colours/linestyles readable even if more datasets are added later.  \nThen, inside separate try-except blocks, we generate at most five figures: (1) pre-training loss, (2) fine-tuning train vs val loss, and three metric curves (SWA, CWA, CompWA).  \nEach figure\u2019s title and saved filename embeds the dataset name plus the curve type, e.g. \u201cSPR_BENCH_pretrain_loss.png\u201d.  \nAll plots are saved to working_dir, figures are always closed, and any exception is caught and reported without stopping the rest of the script.  \nNo synthetic values are created\u2014only the numpy data that really exists are plotted.  \nIf a particular list is empty we simply skip that line to avoid errors.  \nThe code is concise, self-contained, and follows the provided base-imports and plotting conventions.", "We load the stored experiment_data.npy, gracefully handling missing files, and extract the SPR_BENCH run dictionary. For each available list (pre-training losses, fine-tuning train/val losses, and validation metrics SWA, CWA, CompWA) we build one plot, each inside an independent try-except block, always closing the figure afterwards. If predictions and ground-truth arrays are present we additionally build a confusion-matrix heat-map (class ids on both axes, counts in cells). All plots are given clear titles and axis labels, and saved into the working directory with descriptive filenames that include the dataset name and plot type. We keep the plotting style minimal and rely solely on matplotlib defaults, using different line styles for multiple curves when needed. Only data truly existing inside experiment_data.npy are plotted, with checks guarding against empty arrays. At most five figures are generated, satisfying the interval constraint. The code finishes by printing confirmation messages so that users can verify which plots were successfully created.", "We will first load the stored experiment_data.npy, detect all datasets available, and for each dataset create up to five standard plots: (1) pre-training loss curve, (2) fine-tuning loss curves (train vs. val), and three metric curves for SWA, CWA, and CompWA obtained from the validation metrics list.  Each figure is enclosed in its own try-except block, uses clear titles containing the dataset name, and is saved into working_dir with an informative filename (e.g. \u201cSPR_BENCH_pretrain_loss.png\u201d).  A small helper _style() is kept for consistent colouring, although only one run is present.  We always close figures after saving or on exception.  Only keys that actually exist in the numpy dictionary are accessed, so no fake data are generated.  The script begins with the required imports and the creation of working_dir, and finishes by printing where every plot was saved so that downstream steps can verify execution.  This produces concise, reproducible visualizations while satisfying all formatting constraints.", "The solution loads the saved experiment_data.npy, iterates over every dataset stored inside, and for each dataset individually plots (1) pre-training loss, (2) fine-tuning train/validation loss, and (3-5) validation SWA, CWA, and CompWA curves.  Each plot is wrapped in its own try/except block to guarantee graceful failure and figure closure.  A small helper chooses colors/linestyles so multiple datasets can be over-laid when comparison plots are requested.  Files are saved into the mandatory working_dir with descriptive names that concisely specify dataset and plot type.  If several datasets are present, additional comparison curves are automatically produced; otherwise only per-dataset plots are emitted, keeping the total to \u22645 figures per dataset.  All figures are closed after saving to avoid memory leaks, and at the end a brief printout of the last-epoch validation metrics for each dataset is provided.  No synthetic data are created\u2014everything comes straight from experiment_data.npy.", null, null, "We will load the saved numpy dict, pull out the one available dataset (SPR_BENCH) and extract its train/val losses, the three weighted-accuracy curves and the final prediction/ground-truth arrays.  \nThree plots will be generated: (1) a dual-curve train vs validation loss line plot, (2) a multi-curve SWA/CWA/CompWA accuracy plot, and (3) a 2\u00d72 confusion-matrix heat-map for the final predictions.  \nEach plot sits in its own try-except block; figures are always closed even on error.  \nAll filenames include the dataset name and plot type, and are saved into the \u201cworking\u201d directory created by the experiment script.  \nTitles follow the required format with clear subtitles describing the content.  \nOnly data present in experiment_data.npy are used\u2014no fabricated values and at most the three described figures are produced.  \nThe script also prints the final values of the three weighted accuracies and the confusion matrix so the evaluation metrics are visible in the console.  \nThe code starts with the mandated import lines, keeps everything concise, and adheres to the style/interval constraints (there are \u22645 epochs so no extra sampling logic is needed).", null, null, null, null], "ablation_name": [null, null, null, null, null, null, null, null, null, null, null, null, null], "hyperparam_name": ["pretrain_epochs", null, null, null, null, null, null, null, null, null, null, null, null], "is_seed_node": [false, false, false, false, false, false, false, false, false, true, true, true, true], "is_seed_agg_node": [false, false, false, false, false, false, false, false, false, false, false, false, true], "parse_metrics_plan": ["The solution loads the saved NumPy dictionary, iterates through each dataset\n(here \u201cSPR_BENCH\u201d) and every hyper-parameter run stored under it, and prints the\nfinal values of all recorded metrics and losses. For clarity, each printed line\nexplicitly names the metric (e.g., \u201cfinal validation loss,\u201d \u201cfinal shape-\nweighted accuracy\u201d) before its value. The code follows the required structure:\nit is entirely at global scope, executes immediately, and produces no plots.", "The script will locate the \u201cworking\u201d directory created by the training script,\nload the saved experiment_data.npy file, and iterate through every stored\ndataset (e.g., \u201cSPR_BENCH\u201d). For each dataset it extracts the recorded loss\narrays (pre-training, fine-tuning train, and validation) and the validation\nmetric dictionaries (Shape-, Color-, and Complexity-Weighted Accuracies). It\nthen computes the best value for every loss (minimum) and every accuracy\u2010type\nmetric (maximum) and prints them with explicit, self-explanatory labels so\nresults are easy to read. No plots are generated and the code runs immediately\nat import time, satisfying all structural constraints.", "Below is a compact script that immediately loads the saved NumPy file from the\nworking directory, traverses every dataset it contains, and prints the best\n(minimum for losses, maximum for accuracies) value for each recorded metric with\nclear, explicit names.", "The script will locate the working directory, load the saved NumPy dictionary,\nloop over each dataset, compute either the best (minimum for losses, maximum for\naccuracies) or final value for every relevant metric, and print them with\nexplicit names. No entry-point guard or plotting is used, so the code runs\nimmediately once executed.", "The script below loads the saved NumPy dictionary, extracts losses and custom\naccuracy metrics, finds the final (or best) values requested, and prints them\nwith explicit, descriptive names for each dataset it contains.", "The script will load the saved numpy file from the working directory, iterate\nover each stored dataset, and compute either the best (minimum loss / maximum\naccuracy) or final value as appropriate. It prints the dataset name first,\nfollowed by clearly-labelled metric names and their corresponding values. No\nplots are created and the code runs immediately when executed.", "", "", "The script simply loads the saved NumPy dictionary, walks through every dataset\nit finds, and prints the best value (minimum for losses, maximum for accuracies)\nfor each recorded metric. Metric names are translated into clear, descriptive\nlabels before printing, and every dataset is announced before its metrics. All\ncode is at global scope so it executes immediately when run, with no plots\ncreated.", "The solution loads the saved NumPy dictionary, iterates through each dataset\n(here \u201cSPR_BENCH\u201d) and every hyper-parameter run stored under it, and prints the\nfinal values of all recorded metrics and losses. For clarity, each printed line\nexplicitly names the metric (e.g., \u201cfinal validation loss,\u201d \u201cfinal shape-\nweighted accuracy\u201d) before its value. The code follows the required structure:\nit is entirely at global scope, executes immediately, and produces no plots.", "The solution loads the saved NumPy dictionary, iterates through each dataset\n(here \u201cSPR_BENCH\u201d) and every hyper-parameter run stored under it, and prints the\nfinal values of all recorded metrics and losses. For clarity, each printed line\nexplicitly names the metric (e.g., \u201cfinal validation loss,\u201d \u201cfinal shape-\nweighted accuracy\u201d) before its value. The code follows the required structure:\nit is entirely at global scope, executes immediately, and produces no plots.", "The solution loads the saved NumPy dictionary, iterates through each dataset\n(here \u201cSPR_BENCH\u201d) and every hyper-parameter run stored under it, and prints the\nfinal values of all recorded metrics and losses. For clarity, each printed line\nexplicitly names the metric (e.g., \u201cfinal validation loss,\u201d \u201cfinal shape-\nweighted accuracy\u201d) before its value. The code follows the required structure:\nit is entirely at global scope, executes immediately, and produces no plots.", ""], "parse_metrics_code": ["import os\nimport numpy as np\n\n# -------- Locate and load the experiment data ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n# -------- Parse and print the final metrics ------------\nfor dataset_name, runs in experiment_data.get(\"pretrain_epochs\", {}).items():\n    print(f\"\\nDataset: {dataset_name}\")\n    for run_key, run_dict in runs.items():\n        print(f\"Pretraining epochs: {run_key}\")\n\n        # Losses\n        final_pretrain_loss = (\n            run_dict[\"losses\"][\"pretrain\"][-1]\n            if run_dict[\"losses\"][\"pretrain\"]\n            else None\n        )\n        final_train_loss = (\n            run_dict[\"losses\"][\"train\"][-1] if run_dict[\"losses\"][\"train\"] else None\n        )\n        final_val_loss = (\n            run_dict[\"losses\"][\"val\"][-1] if run_dict[\"losses\"][\"val\"] else None\n        )\n\n        if final_pretrain_loss is not None:\n            print(f\"final pretraining loss: {final_pretrain_loss:.4f}\")\n        if final_train_loss is not None:\n            print(f\"final fine-tuning train loss: {final_train_loss:.4f}\")\n        if final_val_loss is not None:\n            print(f\"final validation loss: {final_val_loss:.4f}\")\n\n        # Metrics\n        final_swa = (\n            run_dict[\"metrics\"][\"SWA\"][-1] if run_dict[\"metrics\"][\"SWA\"] else None\n        )\n        final_cwa = (\n            run_dict[\"metrics\"][\"CWA\"][-1] if run_dict[\"metrics\"][\"CWA\"] else None\n        )\n        final_schm = (\n            run_dict[\"metrics\"][\"SCHM\"][-1] if run_dict[\"metrics\"][\"SCHM\"] else None\n        )\n\n        if final_swa is not None:\n            print(f\"final shape-weighted accuracy: {final_swa:.4f}\")\n        if final_cwa is not None:\n            print(f\"final color-weighted accuracy: {final_cwa:.4f}\")\n        if final_schm is not None:\n            print(f\"final SCHM score: {final_schm:.4f}\")\n\n        print(\"-\" * 40)\n", "import os\nimport numpy as np\n\n# -------------------------------------------------------------------\n# Locate and load experiment data\n# -------------------------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nexp_path = os.path.join(working_dir, \"experiment_data.npy\")\n\nif not os.path.isfile(exp_path):\n    raise FileNotFoundError(f\"experiment_data.npy not found at {exp_path}\")\n\nexperiment_data = np.load(exp_path, allow_pickle=True).item()\n\n\n# -------------------------------------------------------------------\n# Helper functions\n# -------------------------------------------------------------------\ndef safe_best(values, mode=\"min\"):\n    \"\"\"\n    Return the best (min or max) value from a list.\n    If the list is empty, return NaN.\n    \"\"\"\n    if not values:\n        return float(\"nan\")\n    return min(values) if mode == \"min\" else max(values)\n\n\n# -------------------------------------------------------------------\n# Print best metrics for every dataset\n# -------------------------------------------------------------------\nfor dset_name, dset_dict in experiment_data.items():\n    print(f\"\\nDataset: {dset_name}\")\n\n    # ---- Losses ----------------------------------------------------\n    losses = dset_dict.get(\"losses\", {})\n    best_pre_loss = safe_best(losses.get(\"pretrain\", []), mode=\"min\")\n    best_train_loss = safe_best(losses.get(\"train\", []), mode=\"min\")\n    best_val_loss = safe_best(losses.get(\"val\", []), mode=\"min\")\n\n    print(f\"  Best pretraining loss: {best_pre_loss:.6f}\")\n    print(f\"  Best training loss:    {best_train_loss:.6f}\")\n    print(f\"  Best validation loss:  {best_val_loss:.6f}\")\n\n    # ---- Validation metrics ---------------------------------------\n    val_metrics_list = dset_dict.get(\"metrics\", {}).get(\"val\", [])\n    if val_metrics_list:\n        # Collect best (max) for each recorded metric\n        metric_keys = val_metrics_list[0].keys()\n        best_vals = {k: max(m[k] for m in val_metrics_list) for k in metric_keys}\n\n        # Print with clear names\n        print(\n            f\"  Best Shape Weighted Accuracy (validation):      {best_vals.get('SWA', float('nan')):.6f}\"\n        )\n        print(\n            f\"  Best Color Weighted Accuracy (validation):      {best_vals.get('CWA', float('nan')):.6f}\"\n        )\n        print(\n            f\"  Best Complexity Weighted Accuracy (validation): {best_vals.get('CompWA', float('nan')):.6f}\"\n        )\n    else:\n        print(\"  No validation accuracy metrics recorded.\")\n", "import os\nimport numpy as np\n\n# ---------- load ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nexp_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(exp_path, allow_pickle=True).item()\n\n\ndef best(vals, higher_is_better=True):\n    \"\"\"Return best element of a list, or None if list is empty.\"\"\"\n    if not vals:\n        return None\n    return max(vals) if higher_is_better else min(vals)\n\n\nfor ds_name, ds_dict in experiment_data.items():\n    print(f\"\\nDataset: {ds_name}\")\n\n    # ----- losses -----\n    for loss_split in (\"pretrain\", \"train\", \"val\"):\n        vals = ds_dict.get(\"losses\", {}).get(loss_split, [])\n        best_val = best(vals, higher_is_better=False)\n        if best_val is not None:\n            split_name = {\n                \"pretrain\": \"self-supervised pretraining loss\",\n                \"train\": \"supervised training loss\",\n                \"val\": \"validation loss\",\n            }[loss_split]\n            print(f\"Best {split_name}: {best_val:.4f}\")\n\n    # ----- accuracy-style metrics -----\n    val_metrics = ds_dict.get(\"metrics\", {}).get(\"val\", [])\n    if val_metrics:\n        # Each element is (shape_w_acc, color_w_acc, complexity_w_acc)\n        swa_list, cwa_list, comp_list = zip(*val_metrics)\n\n        swa_best = best(swa_list, higher_is_better=True)\n        cwa_best = best(cwa_list, higher_is_better=True)\n        comp_best = best(comp_list, higher_is_better=True)\n\n        print(f\"Best shape-weighted accuracy: {swa_best:.4f}\")\n        print(f\"Best color-weighted accuracy: {cwa_best:.4f}\")\n        print(f\"Best complexity-weighted accuracy: {comp_best:.4f}\")\n", "import os\nimport numpy as np\n\n# ---------------------------------------------------------\n# 0. Locate working directory and load experiment data\n# ---------------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n# ---------------------------------------------------------\n# 1. Iterate through datasets and report key metrics\n# ---------------------------------------------------------\nfor dataset_name, data in experiment_data.items():\n    print(dataset_name)  # Dataset heading\n\n    # ---------- losses ----------\n    pre_losses = data[\"losses\"].get(\"pretrain\", [])\n    if pre_losses:\n        print(f\"best pretraining loss: {min(pre_losses):.4f}\")\n\n    train_losses = data[\"losses\"].get(\"train\", [])\n    if train_losses:\n        print(f\"final fine-tune training loss: {train_losses[-1]:.4f}\")\n\n    val_losses = data[\"losses\"].get(\"val\", [])\n    if val_losses:\n        print(f\"best validation loss: {min(val_losses):.4f}\")\n\n    # ---------- weighted accuracies ----------\n    val_metrics = data[\"metrics\"].get(\"val\", [])\n    if val_metrics:\n        best_swa = max(m[\"SWA\"] for m in val_metrics)\n        best_cwa = max(m[\"CWA\"] for m in val_metrics)\n        best_comp = max(m[\"CompWA\"] for m in val_metrics)\n\n        print(f\"best shape weighted accuracy: {best_swa:.3f}\")\n        print(f\"best color weighted accuracy: {best_cwa:.3f}\")\n        print(f\"best complexity weighted accuracy: {best_comp:.3f}\")\n", "import os\nimport numpy as np\n\n# -------- locate and load the experiment file ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nexp_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(exp_path, allow_pickle=True).item()\n\n\n# -------------- helper to print metrics ---------------\ndef print_dataset_metrics(name, data):\n    # losses\n    pre_losses = data[\"losses\"].get(\"pretrain\", [])\n    train_losses = data[\"losses\"].get(\"train\", [])\n    val_losses = data[\"losses\"].get(\"val\", [])\n\n    final_pretrain_loss = pre_losses[-1] if pre_losses else None\n    final_training_loss = train_losses[-1] if train_losses else None\n    best_val_loss = min(val_losses) if val_losses else None\n    best_val_epoch = val_losses.index(best_val_loss) if val_losses else None\n\n    # metrics\n    train_metrics_list = data[\"metrics\"].get(\"train\", [])\n    val_metrics_list = data[\"metrics\"].get(\"val\", [])\n\n    final_train_metrics = train_metrics_list[-1] if train_metrics_list else {}\n    best_val_metrics = (\n        val_metrics_list[best_val_epoch]\n        if val_metrics_list and best_val_epoch is not None\n        else {}\n    )\n\n    # ----------- print section -------------\n    print(f\"Dataset: {name}\")\n\n    # losses\n    if final_pretrain_loss is not None:\n        print(f\"Final pretraining loss: {final_pretrain_loss:.4f}\")\n    if final_training_loss is not None:\n        print(f\"Final training loss: {final_training_loss:.4f}\")\n    if best_val_loss is not None:\n        print(f\"Best validation loss: {best_val_loss:.4f}\")\n\n    # training accuracies\n    if final_train_metrics:\n        print(\n            f\"Final training shape weighted accuracy: {final_train_metrics.get('swa', float('nan')):.4f}\"\n        )\n        print(\n            f\"Final training color weighted accuracy: {final_train_metrics.get('cwa', float('nan')):.4f}\"\n        )\n        print(\n            f\"Final training complexity weighted accuracy: {final_train_metrics.get('comp', float('nan')):.4f}\"\n        )\n\n    # validation accuracies (best epoch)\n    if best_val_metrics:\n        print(\n            f\"Best validation shape weighted accuracy: {best_val_metrics.get('swa', float('nan')):.4f}\"\n        )\n        print(\n            f\"Best validation color weighted accuracy: {best_val_metrics.get('cwa', float('nan')):.4f}\"\n        )\n        print(\n            f\"Best validation complexity weighted accuracy: {best_val_metrics.get('comp', float('nan')):.4f}\"\n        )\n\n    print()  # blank line for readability\n\n\n# -------------- iterate over all datasets --------------\nfor dataset_name, dataset_info in experiment_data.items():\n    print_dataset_metrics(dataset_name, dataset_info)\n", "import os\nimport numpy as np\n\n# ------------------------------------------------------------------\n# 0.  Locate working directory and load the saved experiment results\n# ------------------------------------------------------------------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\n\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n# ------------------------------------------------------------------\n# 1.  Iterate through datasets and report final / best metrics\n# ------------------------------------------------------------------\nfor dataset_name, record in experiment_data.items():\n    print(f\"\\nDataset: {dataset_name}\")\n\n    losses = record.get(\"losses\", {})\n    metrics = record.get(\"metrics\", {})\n\n    # -------- losses ------------------------------------------------\n    pretrain_losses = losses.get(\"pretrain\", [])\n    if pretrain_losses:\n        best_pretrain = min(pretrain_losses)\n        print(f\"best pretraining loss: {best_pretrain:.4f}\")\n\n    train_losses = losses.get(\"train\", [])\n    if train_losses:\n        final_train = train_losses[-1]\n        print(f\"final training loss: {final_train:.4f}\")\n\n    val_losses = losses.get(\"val\", [])\n    if val_losses:\n        best_val = min(val_losses)\n        print(f\"best validation loss: {best_val:.4f}\")\n\n    # -------- validation metrics ------------------------------------\n    val_metrics = metrics.get(\"val\", [])\n    if val_metrics:\n        best_swa = max(m[\"SWA\"] for m in val_metrics)\n        best_cwa = max(m[\"CWA\"] for m in val_metrics)\n        best_comp = max(m[\"CompWA\"] for m in val_metrics)\n\n        print(f\"best validation shape-weighted accuracy: {best_swa:.3f}\")\n        print(f\"best validation color-weighted accuracy: {best_cwa:.3f}\")\n        print(f\"best validation complexity-weighted accuracy: {best_comp:.3f}\")\n", "", "", "import os\nimport numpy as np\n\n# ---------- locate and load experiment data ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\n\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n\n# ---------- helpers ----------\ndef pretty_name(raw_key: str) -> str:\n    mapping = {\n        \"train_loss\": \"Training loss\",\n        \"val_loss\": \"Validation loss\",\n        \"SWA\": \"Shape-weighted accuracy\",\n        \"CWA\": \"Color-weighted accuracy\",\n        \"CompWA\": \"Complexity-weighted accuracy\",\n    }\n    return mapping.get(raw_key, raw_key)\n\n\ndef best_value(metric_name: str, values: list):\n    # minimise losses, maximise everything else\n    if metric_name.endswith(\"loss\"):\n        return min(values)\n    return max(values)\n\n\n# ---------- print results ----------\nfor dataset_name, data in experiment_data.items():\n    print(f\"Dataset: {dataset_name}\")\n    metrics = data.get(\"metrics\", {})\n    for key, val_list in metrics.items():\n        if not val_list:  # empty list safety\n            continue\n        value = best_value(key, val_list)\n        print(f\"{pretty_name(key)}: {value:.4f}\")\n", "import os\nimport numpy as np\n\n# -------- Locate and load the experiment data ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n# -------- Parse and print the final metrics ------------\nfor dataset_name, runs in experiment_data.get(\"pretrain_epochs\", {}).items():\n    print(f\"\\nDataset: {dataset_name}\")\n    for run_key, run_dict in runs.items():\n        print(f\"Pretraining epochs: {run_key}\")\n\n        # Losses\n        final_pretrain_loss = (\n            run_dict[\"losses\"][\"pretrain\"][-1]\n            if run_dict[\"losses\"][\"pretrain\"]\n            else None\n        )\n        final_train_loss = (\n            run_dict[\"losses\"][\"train\"][-1] if run_dict[\"losses\"][\"train\"] else None\n        )\n        final_val_loss = (\n            run_dict[\"losses\"][\"val\"][-1] if run_dict[\"losses\"][\"val\"] else None\n        )\n\n        if final_pretrain_loss is not None:\n            print(f\"final pretraining loss: {final_pretrain_loss:.4f}\")\n        if final_train_loss is not None:\n            print(f\"final fine-tuning train loss: {final_train_loss:.4f}\")\n        if final_val_loss is not None:\n            print(f\"final validation loss: {final_val_loss:.4f}\")\n\n        # Metrics\n        final_swa = (\n            run_dict[\"metrics\"][\"SWA\"][-1] if run_dict[\"metrics\"][\"SWA\"] else None\n        )\n        final_cwa = (\n            run_dict[\"metrics\"][\"CWA\"][-1] if run_dict[\"metrics\"][\"CWA\"] else None\n        )\n        final_schm = (\n            run_dict[\"metrics\"][\"SCHM\"][-1] if run_dict[\"metrics\"][\"SCHM\"] else None\n        )\n\n        if final_swa is not None:\n            print(f\"final shape-weighted accuracy: {final_swa:.4f}\")\n        if final_cwa is not None:\n            print(f\"final color-weighted accuracy: {final_cwa:.4f}\")\n        if final_schm is not None:\n            print(f\"final SCHM score: {final_schm:.4f}\")\n\n        print(\"-\" * 40)\n", "import os\nimport numpy as np\n\n# -------- Locate and load the experiment data ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n# -------- Parse and print the final metrics ------------\nfor dataset_name, runs in experiment_data.get(\"pretrain_epochs\", {}).items():\n    print(f\"\\nDataset: {dataset_name}\")\n    for run_key, run_dict in runs.items():\n        print(f\"Pretraining epochs: {run_key}\")\n\n        # Losses\n        final_pretrain_loss = (\n            run_dict[\"losses\"][\"pretrain\"][-1]\n            if run_dict[\"losses\"][\"pretrain\"]\n            else None\n        )\n        final_train_loss = (\n            run_dict[\"losses\"][\"train\"][-1] if run_dict[\"losses\"][\"train\"] else None\n        )\n        final_val_loss = (\n            run_dict[\"losses\"][\"val\"][-1] if run_dict[\"losses\"][\"val\"] else None\n        )\n\n        if final_pretrain_loss is not None:\n            print(f\"final pretraining loss: {final_pretrain_loss:.4f}\")\n        if final_train_loss is not None:\n            print(f\"final fine-tuning train loss: {final_train_loss:.4f}\")\n        if final_val_loss is not None:\n            print(f\"final validation loss: {final_val_loss:.4f}\")\n\n        # Metrics\n        final_swa = (\n            run_dict[\"metrics\"][\"SWA\"][-1] if run_dict[\"metrics\"][\"SWA\"] else None\n        )\n        final_cwa = (\n            run_dict[\"metrics\"][\"CWA\"][-1] if run_dict[\"metrics\"][\"CWA\"] else None\n        )\n        final_schm = (\n            run_dict[\"metrics\"][\"SCHM\"][-1] if run_dict[\"metrics\"][\"SCHM\"] else None\n        )\n\n        if final_swa is not None:\n            print(f\"final shape-weighted accuracy: {final_swa:.4f}\")\n        if final_cwa is not None:\n            print(f\"final color-weighted accuracy: {final_cwa:.4f}\")\n        if final_schm is not None:\n            print(f\"final SCHM score: {final_schm:.4f}\")\n\n        print(\"-\" * 40)\n", "import os\nimport numpy as np\n\n# -------- Locate and load the experiment data ----------\nworking_dir = os.path.join(os.getcwd(), \"working\")\nfile_path = os.path.join(working_dir, \"experiment_data.npy\")\nexperiment_data = np.load(file_path, allow_pickle=True).item()\n\n# -------- Parse and print the final metrics ------------\nfor dataset_name, runs in experiment_data.get(\"pretrain_epochs\", {}).items():\n    print(f\"\\nDataset: {dataset_name}\")\n    for run_key, run_dict in runs.items():\n        print(f\"Pretraining epochs: {run_key}\")\n\n        # Losses\n        final_pretrain_loss = (\n            run_dict[\"losses\"][\"pretrain\"][-1]\n            if run_dict[\"losses\"][\"pretrain\"]\n            else None\n        )\n        final_train_loss = (\n            run_dict[\"losses\"][\"train\"][-1] if run_dict[\"losses\"][\"train\"] else None\n        )\n        final_val_loss = (\n            run_dict[\"losses\"][\"val\"][-1] if run_dict[\"losses\"][\"val\"] else None\n        )\n\n        if final_pretrain_loss is not None:\n            print(f\"final pretraining loss: {final_pretrain_loss:.4f}\")\n        if final_train_loss is not None:\n            print(f\"final fine-tuning train loss: {final_train_loss:.4f}\")\n        if final_val_loss is not None:\n            print(f\"final validation loss: {final_val_loss:.4f}\")\n\n        # Metrics\n        final_swa = (\n            run_dict[\"metrics\"][\"SWA\"][-1] if run_dict[\"metrics\"][\"SWA\"] else None\n        )\n        final_cwa = (\n            run_dict[\"metrics\"][\"CWA\"][-1] if run_dict[\"metrics\"][\"CWA\"] else None\n        )\n        final_schm = (\n            run_dict[\"metrics\"][\"SCHM\"][-1] if run_dict[\"metrics\"][\"SCHM\"] else None\n        )\n\n        if final_swa is not None:\n            print(f\"final shape-weighted accuracy: {final_swa:.4f}\")\n        if final_cwa is not None:\n            print(f\"final color-weighted accuracy: {final_cwa:.4f}\")\n        if final_schm is not None:\n            print(f\"final SCHM score: {final_schm:.4f}\")\n\n        print(\"-\" * 40)\n", ""], "parse_term_out": ["['\\nDataset: SPR_BENCH', '\\n', 'Pretraining epochs: 2', '\\n', 'final pretraining\nloss: 4.0178', '\\n', 'final fine-tuning train loss: 0.0152', '\\n', 'final\nvalidation loss: 0.0112', '\\n', 'final shape-weighted accuracy: 0.9974', '\\n',\n'final color-weighted accuracy: 0.9976', '\\n', 'final SCHM score: 0.9975', '\\n',\n'----------------------------------------', '\\n', 'Pretraining epochs: 4', '\\n',\n'final pretraining loss: 4.0134', '\\n', 'final fine-tuning train loss: 0.0106',\n'\\n', 'final validation loss: 0.0127', '\\n', 'final shape-weighted accuracy:\n0.9952', '\\n', 'final color-weighted accuracy: 0.9953', '\\n', 'final SCHM score:\n0.9952', '\\n', '----------------------------------------', '\\n', 'Pretraining\nepochs: 6', '\\n', 'final pretraining loss: 4.0115', '\\n', 'final fine-tuning\ntrain loss: 0.0101', '\\n', 'final validation loss: 0.0060', '\\n', 'final shape-\nweighted accuracy: 0.9985', '\\n', 'final color-weighted accuracy: 0.9985', '\\n',\n'final SCHM score: 0.9985', '\\n', '----------------------------------------',\n'\\n', 'Pretraining epochs: 8', '\\n', 'final pretraining loss: 4.0036', '\\n',\n'final fine-tuning train loss: 0.0088', '\\n', 'final validation loss: 0.0114',\n'\\n', 'final shape-weighted accuracy: 0.9960', '\\n', 'final color-weighted\naccuracy: 0.9962', '\\n', 'final SCHM score: 0.9961', '\\n',\n'----------------------------------------', '\\n', 'Pretraining epochs: 10',\n'\\n', 'final pretraining loss: 4.0024', '\\n', 'final fine-tuning train loss:\n0.0049', '\\n', 'final validation loss: 0.0087', '\\n', 'final shape-weighted\naccuracy: 0.9969', '\\n', 'final color-weighted accuracy: 0.9969', '\\n', 'final\nSCHM score: 0.9969', '\\n', '----------------------------------------', '\\n',\n'Execution time: a moment seconds (time limit is 30 minutes).']", "['\\nDataset: SPR_BENCH', '\\n', '  Best pretraining loss: 3.377299', '\\n', '\nBest training loss:    0.023985', '\\n', '  Best validation loss:  0.025814',\n'\\n', '  Best Shape Weighted Accuracy (validation):      0.992675', '\\n', '\nBest Color Weighted Accuracy (validation):      0.993167', '\\n', '  Best\nComplexity Weighted Accuracy (validation): 0.992915', '\\n', 'Execution time: a\nmoment seconds (time limit is 30 minutes).']", "['\\nDataset: SPR_BENCH', '\\n', 'Best self-supervised pretraining loss: 4.6853',\n'\\n', 'Best supervised training loss: 0.0163', '\\n', 'Best validation loss:\n0.0088', '\\n', 'Best shape-weighted accuracy: 0.9974', '\\n', 'Best color-\nweighted accuracy: 0.9976', '\\n', 'Best complexity-weighted accuracy: 0.9975',\n'\\n', 'Execution time: a moment seconds (time limit is 30 minutes).']", "['SPR_BENCH', '\\n', 'best pretraining loss: 3.5378', '\\n', 'final fine-tune\ntraining loss: 0.0551', '\\n', 'best validation loss: 0.0498', '\\n', 'best shape\nweighted accuracy: 0.987', '\\n', 'best color weighted accuracy: 0.986', '\\n',\n'best complexity weighted accuracy: 0.987', '\\n', 'Execution time: a moment\nseconds (time limit is 30 minutes).']", "['Dataset: SPR_BENCH', '\\n', 'Final pretraining loss: 4.9546', '\\n', 'Final\ntraining loss: 0.0361', '\\n', 'Best validation loss: 0.0193', '\\n', 'Final\ntraining shape weighted accuracy: 0.9937', '\\n', 'Final training color weighted\naccuracy: 0.9938', '\\n', 'Final training complexity weighted accuracy: 0.9937',\n'\\n', 'Best validation shape weighted accuracy: 0.9937', '\\n', 'Best validation\ncolor weighted accuracy: 0.9938', '\\n', 'Best validation complexity weighted\naccuracy: 0.9937', '\\n', '\\n', 'Execution time: a moment seconds (time limit is\n30 minutes).']", "['\\nDataset: SPR_BENCH', '\\n', 'best pretraining loss: 4.0086', '\\n', 'final\ntraining loss: 0.0339', '\\n', 'best validation loss: 0.0212', '\\n', 'best\nvalidation shape-weighted accuracy: 0.993', '\\n', 'best validation color-\nweighted accuracy: 0.993', '\\n', 'best validation complexity-weighted accuracy:\n0.993', '\\n', 'Execution time: a moment seconds (time limit is 30 minutes).']", "", "", "['Dataset: SPR_BENCH', '\\n', 'Training loss: 0.1757', '\\n', 'Validation loss:\n0.1700', '\\n', 'Shape-weighted accuracy: 0.9445', '\\n', 'Color-weighted\naccuracy: 0.9475', '\\n', 'Complexity-weighted accuracy: 0.9460', '\\n',\n'Execution time: a moment seconds (time limit is 30 minutes).']", "['\\nDataset: SPR_BENCH', '\\n', 'Pretraining epochs: 2', '\\n', 'final pretraining\nloss: 4.0243', '\\n', 'final fine-tuning train loss: 0.0144', '\\n', 'final\nvalidation loss: 0.0074', '\\n', 'final shape-weighted accuracy: 0.9969', '\\n',\n'final color-weighted accuracy: 0.9972', '\\n', 'final SCHM score: 0.9971', '\\n',\n'----------------------------------------', '\\n', 'Pretraining epochs: 4', '\\n',\n'final pretraining loss: 4.0133', '\\n', 'final fine-tuning train loss: 0.0113',\n'\\n', 'final validation loss: 0.0093', '\\n', 'final shape-weighted accuracy:\n0.9969', '\\n', 'final color-weighted accuracy: 0.9969', '\\n', 'final SCHM score:\n0.9969', '\\n', '----------------------------------------', '\\n', 'Pretraining\nepochs: 6', '\\n', 'final pretraining loss: 4.0084', '\\n', 'final fine-tuning\ntrain loss: 0.0097', '\\n', 'final validation loss: 0.0084', '\\n', 'final shape-\nweighted accuracy: 0.9983', '\\n', 'final color-weighted accuracy: 0.9983', '\\n',\n'final SCHM score: 0.9983', '\\n', '----------------------------------------',\n'\\n', 'Pretraining epochs: 8', '\\n', 'final pretraining loss: 4.0067', '\\n',\n'final fine-tuning train loss: 0.0066', '\\n', 'final validation loss: 0.0057',\n'\\n', 'final shape-weighted accuracy: 0.9974', '\\n', 'final color-weighted\naccuracy: 0.9976', '\\n', 'final SCHM score: 0.9975', '\\n',\n'----------------------------------------', '\\n', 'Pretraining epochs: 10',\n'\\n', 'final pretraining loss: 4.0056', '\\n', 'final fine-tuning train loss:\n0.0035', '\\n', 'final validation loss: 0.0045', '\\n', 'final shape-weighted\naccuracy: 0.9987', '\\n', 'final color-weighted accuracy: 0.9984', '\\n', 'final\nSCHM score: 0.9985', '\\n', '----------------------------------------', '\\n',\n'Execution time: a moment seconds (time limit is 30 minutes).']", "['\\nDataset: SPR_BENCH', '\\n', 'Pretraining epochs: 2', '\\n', 'final pretraining\nloss: 4.0195', '\\n', 'final fine-tuning train loss: 0.0087', '\\n', 'final\nvalidation loss: 0.0102', '\\n', 'final shape-weighted accuracy: 0.9964', '\\n',\n'final color-weighted accuracy: 0.9966', '\\n', 'final SCHM score: 0.9965', '\\n',\n'----------------------------------------', '\\n', 'Pretraining epochs: 4', '\\n',\n'final pretraining loss: 4.0124', '\\n', 'final fine-tuning train loss: 0.0105',\n'\\n', 'final validation loss: 0.0087', '\\n', 'final shape-weighted accuracy:\n0.9965', '\\n', 'final color-weighted accuracy: 0.9969', '\\n', 'final SCHM score:\n0.9967', '\\n', '----------------------------------------', '\\n', 'Pretraining\nepochs: 6', '\\n', 'final pretraining loss: 4.0071', '\\n', 'final fine-tuning\ntrain loss: 0.0049', '\\n', 'final validation loss: 0.0055', '\\n', 'final shape-\nweighted accuracy: 0.9980', '\\n', 'final color-weighted accuracy: 0.9980', '\\n',\n'final SCHM score: 0.9980', '\\n', '----------------------------------------',\n'\\n', 'Pretraining epochs: 8', '\\n', 'final pretraining loss: 4.0030', '\\n',\n'final fine-tuning train loss: 0.0067', '\\n', 'final validation loss: 0.0071',\n'\\n', 'final shape-weighted accuracy: 0.9974', '\\n', 'final color-weighted\naccuracy: 0.9975', '\\n', 'final SCHM score: 0.9975', '\\n',\n'----------------------------------------', '\\n', 'Pretraining epochs: 10',\n'\\n', 'final pretraining loss: 4.0028', '\\n', 'final fine-tuning train loss:\n0.0045', '\\n', 'final validation loss: 0.0058', '\\n', 'final shape-weighted\naccuracy: 0.9980', '\\n', 'final color-weighted accuracy: 0.9980', '\\n', 'final\nSCHM score: 0.9980', '\\n', '----------------------------------------', '\\n',\n'Execution time: a moment seconds (time limit is 30 minutes).']", "['\\nDataset: SPR_BENCH', '\\n', 'Pretraining epochs: 2', '\\n', 'final pretraining\nloss: 4.0200', '\\n', 'final fine-tuning train loss: 0.0132', '\\n', 'final\nvalidation loss: 0.0113', '\\n', 'final shape-weighted accuracy: 0.9976', '\\n',\n'final color-weighted accuracy: 0.9977', '\\n', 'final SCHM score: 0.9976', '\\n',\n'----------------------------------------', '\\n', 'Pretraining epochs: 4', '\\n',\n'final pretraining loss: 4.0143', '\\n', 'final fine-tuning train loss: 0.0102',\n'\\n', 'final validation loss: 0.0086', '\\n', 'final shape-weighted accuracy:\n0.9963', '\\n', 'final color-weighted accuracy: 0.9966', '\\n', 'final SCHM score:\n0.9965', '\\n', '----------------------------------------', '\\n', 'Pretraining\nepochs: 6', '\\n', 'final pretraining loss: 4.0075', '\\n', 'final fine-tuning\ntrain loss: 0.0116', '\\n', 'final validation loss: 0.0046', '\\n', 'final shape-\nweighted accuracy: 0.9984', '\\n', 'final color-weighted accuracy: 0.9985', '\\n',\n'final SCHM score: 0.9985', '\\n', '----------------------------------------',\n'\\n', 'Pretraining epochs: 8', '\\n', 'final pretraining loss: 4.0079', '\\n',\n'final fine-tuning train loss: 0.0048', '\\n', 'final validation loss: 0.0037',\n'\\n', 'final shape-weighted accuracy: 0.9989', '\\n', 'final color-weighted\naccuracy: 0.9988', '\\n', 'final SCHM score: 0.9989', '\\n',\n'----------------------------------------', '\\n', 'Pretraining epochs: 10',\n'\\n', 'final pretraining loss: 4.0082', '\\n', 'final fine-tuning train loss:\n0.0032', '\\n', 'final validation loss: 0.0048', '\\n', 'final shape-weighted\naccuracy: 0.9991', '\\n', 'final color-weighted accuracy: 0.9991', '\\n', 'final\nSCHM score: 0.9991', '\\n', '----------------------------------------', '\\n',\n'Execution time: a moment seconds (time limit is 30 minutes).']", ""], "parse_exc_type": [null, null, null, null, null, null, null, null, null, null, null, null, null], "parse_exc_info": [null, null, null, null, null, null, null, null, null, null, null, null, null], "parse_exc_stack": [null, null, null, null, null, null, null, null, null, null, null, null, null], "completed_stages": ["Stage_1", "Stage_2", "Stage_3"]}